<?xml version="1.0"?>
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="GObject" version="2.0"/>
<include name="GLib" version="2.0"/>
<package name="gee-1.0"/>
<c:include name="gee.h"/>
<namespace name="Gee" version="1.0" c:prefix="Gee">
	<function name="functions_get_equal_func_for" c:identifier="gee_functions_get_equal_func_for">
		<parameters>
			<parameter name="t" transfer-ownership="none">
				<type name="GObject.Type" c:type="GType"/>
			</parameter>
			<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
			<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
				<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
			</parameter>
		</parameters>
		<return-value transfer-ownership="none">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</return-value>
	</function>
	<function name="functions_get_hash_func_for" c:identifier="gee_functions_get_hash_func_for">
		<parameters>
			<parameter name="t" transfer-ownership="none">
				<type name="GObject.Type" c:type="GType"/>
			</parameter>
			<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
			<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
				<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
			</parameter>
		</parameters>
		<return-value transfer-ownership="none">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</return-value>
	</function>
	<function name="functions_get_compare_func_for" c:identifier="gee_functions_get_compare_func_for">
		<parameters>
			<parameter name="t" transfer-ownership="none">
				<type name="GObject.Type" c:type="GType"/>
			</parameter>
			<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
			<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
				<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
			</parameter>
		</parameters>
		<return-value transfer-ownership="none">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</return-value>
	</function>
	<class name="AbstractCollection" c:type="GeeAbstractCollection" glib:type-name="GeeAbstractCollection" glib:get-type="gee_abstract_collection_get_type" glib:type-struct="AbstractCollectionClass" parent="GObject.Object" abstract="1">
		<implements name="Gee.Iterable"/>
		<implements name="Gee.Collection"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="AbstractCollectionPrivate" c:type="GeeAbstractCollectionPrivate*"/>
		</field>
		<method name="contains" c:identifier="gee_abstract_collection_contains">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains" invoker="contains">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="add" c:identifier="gee_abstract_collection_add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="add" invoker="add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove" c:identifier="gee_abstract_collection_remove">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove" invoker="remove">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="clear" c:identifier="gee_abstract_collection_clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="clear" invoker="clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="to_array" c:identifier="gee_abstract_collection_to_array">
			<parameters>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<array length="0">
					<type name="gpointer" c:type="gpointer"/>
				</array>
			</return-value>
		</method>
		<virtual-method name="to_array" invoker="to_array">
			<parameters>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<array length="0">
					<type name="gpointer" c:type="gpointer"/>
				</array>
			</return-value>
		</virtual-method>
		<method name="add_all" c:identifier="gee_abstract_collection_add_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="add_all" invoker="add_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="contains_all" c:identifier="gee_abstract_collection_contains_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains_all" invoker="contains_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove_all" c:identifier="gee_abstract_collection_remove_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove_all" invoker="remove_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="retain_all" c:identifier="gee_abstract_collection_retain_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="retain_all" invoker="retain_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="iterator" c:identifier="gee_abstract_collection_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.Iterator" c:type="GeeIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="iterator" invoker="iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.Iterator" c:type="GeeIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gee_abstract_collection_new">
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractCollection" c:type="GeeAbstractCollection*"/>
			</return-value>
		</constructor>
		<property name="size">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-empty">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<property name="read-only-view">
			<type name="Gee.Collection" c:type="GeeCollection*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</class>
	<record name="AbstractCollectionClass" c:type="GeeAbstractCollectionClass" glib:is-gtype-struct-for="AbstractCollection">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="contains">
			<callback name="abstract_collection_contains" c:type="abstract_collection_contains">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="add">
			<callback name="abstract_collection_add" c:type="abstract_collection_add">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove">
			<callback name="abstract_collection_remove" c:type="abstract_collection_remove">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="clear">
			<callback name="abstract_collection_clear" c:type="abstract_collection_clear">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="to_array">
			<callback name="abstract_collection_to_array" c:type="abstract_collection_to_array">
				<parameters>
					<parameter name="result_length1" direction="out" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<array length="0">
						<type name="gpointer" c:type="gpointer"/>
					</array>
				</return-value>
			</callback>
		</field>
		<field name="add_all">
			<callback name="abstract_collection_add_all" c:type="abstract_collection_add_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="contains_all">
			<callback name="abstract_collection_contains_all" c:type="abstract_collection_contains_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_all">
			<callback name="abstract_collection_remove_all" c:type="abstract_collection_remove_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="retain_all">
			<callback name="abstract_collection_retain_all" c:type="abstract_collection_retain_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="iterator">
			<callback name="abstract_collection_iterator" c:type="abstract_collection_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.Iterator" c:type="GeeIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
	</record>
	<record name="AbstractCollectionPrivate" c:type="GeeAbstractCollectionPrivate" disguised="1"/>
	<class name="AbstractList" c:type="GeeAbstractList" glib:type-name="GeeAbstractList" glib:get-type="gee_abstract_list_get_type" glib:type-struct="AbstractListClass" parent="Gee.AbstractCollection" abstract="1">
		<implements name="Gee.List"/>
		<field name="parent_instance">
			<type name="Gee.AbstractCollection" c:type="GeeAbstractCollection"/>
		</field>
		<field name="priv">
			<type name="AbstractListPrivate" c:type="GeeAbstractListPrivate*"/>
		</field>
		<method name="list_iterator" c:identifier="gee_abstract_list_list_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.ListIterator" c:type="GeeListIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="list_iterator" invoker="list_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.ListIterator" c:type="GeeListIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_abstract_list_get">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="set" c:identifier="gee_abstract_list_set">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="index_of" c:identifier="gee_abstract_list_index_of">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="index_of" invoker="index_of">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
		<method name="insert" c:identifier="gee_abstract_list_insert">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="insert" invoker="insert">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="remove_at" c:identifier="gee_abstract_list_remove_at">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="remove_at" invoker="remove_at">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="slice" c:identifier="gee_abstract_list_slice">
			<parameters>
				<parameter name="start" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="stop" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.List" c:type="GeeList*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="slice" invoker="slice">
			<parameters>
				<parameter name="start" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="stop" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.List" c:type="GeeList*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="first" c:identifier="gee_abstract_list_first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="first" invoker="first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="last" c:identifier="gee_abstract_list_last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="last" invoker="last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="insert_all" c:identifier="gee_abstract_list_insert_all">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="insert_all" invoker="insert_all">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gee_abstract_list_new">
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractList" c:type="GeeAbstractList*"/>
			</return-value>
		</constructor>
		<property name="read-only-view">
			<type name="Gee.List" c:type="GeeList*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</class>
	<record name="AbstractListClass" c:type="GeeAbstractListClass" glib:is-gtype-struct-for="AbstractList">
		<field name="parent_class">
			<type name="Gee.AbstractCollectionClass" c:type="GeeAbstractCollectionClass"/>
		</field>
		<field name="list_iterator">
			<callback name="abstract_list_list_iterator" c:type="abstract_list_list_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.ListIterator" c:type="GeeListIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="abstract_list_get" c:type="abstract_list_get">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="set">
			<callback name="abstract_list_set" c:type="abstract_list_set">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="index_of">
			<callback name="abstract_list_index_of" c:type="abstract_list_index_of">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
		<field name="insert">
			<callback name="abstract_list_insert" c:type="abstract_list_insert">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_at">
			<callback name="abstract_list_remove_at" c:type="abstract_list_remove_at">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="slice">
			<callback name="abstract_list_slice" c:type="abstract_list_slice">
				<parameters>
					<parameter name="start" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="stop" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Gee.List" c:type="GeeList*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="first">
			<callback name="abstract_list_first" c:type="abstract_list_first">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="last">
			<callback name="abstract_list_last" c:type="abstract_list_last">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="insert_all">
			<callback name="abstract_list_insert_all" c:type="abstract_list_insert_all">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
	</record>
	<record name="AbstractListPrivate" c:type="GeeAbstractListPrivate" disguised="1"/>
	<class name="AbstractMap" c:type="GeeAbstractMap" glib:type-name="GeeAbstractMap" glib:get-type="gee_abstract_map_get_type" glib:type-struct="AbstractMapClass" parent="GObject.Object" abstract="1">
		<implements name="Gee.Iterable"/>
		<implements name="Gee.Map"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="AbstractMapPrivate" c:type="GeeAbstractMapPrivate*"/>
		</field>
		<method name="has_key" c:identifier="gee_abstract_map_has_key">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_key" invoker="has_key">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has" c:identifier="gee_abstract_map_has">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has" invoker="has">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_abstract_map_get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="set" c:identifier="gee_abstract_map_set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="unset" c:identifier="gee_abstract_map_unset">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="unset" invoker="unset">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="map_iterator" c:identifier="gee_abstract_map_map_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.MapIterator" c:type="GeeMapIterator*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="map_iterator" invoker="map_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.MapIterator" c:type="GeeMapIterator*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="clear" c:identifier="gee_abstract_map_clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="clear" invoker="clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="set_all" c:identifier="gee_abstract_map_set_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set_all" invoker="set_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="unset_all" c:identifier="gee_abstract_map_unset_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="unset_all" invoker="unset_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has_all" c:identifier="gee_abstract_map_has_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_all" invoker="has_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gee_abstract_map_new">
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractMap" c:type="GeeAbstractMap*"/>
			</return-value>
		</constructor>
		<property name="size">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-empty">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<property name="keys">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
		<property name="values">
			<type name="Gee.Collection" c:type="GeeCollection*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
		<property name="entries">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="Gee.MapEntry" c:type="GeeMapEntry*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</type>
		</property>
		<property name="read-only-view">
			<type name="Gee.Map" c:type="GeeMap*">
				<type name="gpointer" c:type="gpointer"/>
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</class>
	<record name="AbstractMapClass" c:type="GeeAbstractMapClass" glib:is-gtype-struct-for="AbstractMap">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="has_key">
			<callback name="abstract_map_has_key" c:type="abstract_map_has_key">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has">
			<callback name="abstract_map_has" c:type="abstract_map_has">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="abstract_map_get" c:type="abstract_map_get">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="set">
			<callback name="abstract_map_set" c:type="abstract_map_set">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="unset">
			<callback name="abstract_map_unset" c:type="abstract_map_unset">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="map_iterator">
			<callback name="abstract_map_map_iterator" c:type="abstract_map_map_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.MapIterator" c:type="GeeMapIterator*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="clear">
			<callback name="abstract_map_clear" c:type="abstract_map_clear">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="set_all">
			<callback name="abstract_map_set_all" c:type="abstract_map_set_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="unset_all">
			<callback name="abstract_map_unset_all" c:type="abstract_map_unset_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has_all">
			<callback name="abstract_map_has_all" c:type="abstract_map_has_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
	</record>
	<record name="AbstractMapPrivate" c:type="GeeAbstractMapPrivate" disguised="1"/>
	<class name="AbstractMultiMap" c:type="GeeAbstractMultiMap" glib:type-name="GeeAbstractMultiMap" glib:get-type="gee_abstract_multi_map_get_type" glib:type-struct="AbstractMultiMapClass" parent="GObject.Object" abstract="1">
		<implements name="Gee.MultiMap"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="AbstractMultiMapPrivate" c:type="GeeAbstractMultiMapPrivate*"/>
		</field>
		<field name="_storage_map">
			<type name="Gee.Map" c:type="GeeMap*">
				<type name="gpointer" c:type="gpointer"/>
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</type>
		</field>
		<constructor name="new" c:identifier="gee_abstract_multi_map_new">
			<parameters>
				<parameter name="storage_map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractMultiMap" c:type="GeeAbstractMultiMap*"/>
			</return-value>
		</constructor>
		<method name="create_value_storage" c:identifier="gee_abstract_multi_map_create_value_storage">
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="create_value_storage" invoker="create_value_storage">
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="create_multi_key_set" c:identifier="gee_abstract_multi_map_create_multi_key_set">
			<return-value transfer-ownership="full">
				<type name="Gee.MultiSet" c:type="GeeMultiSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="create_multi_key_set" invoker="create_multi_key_set">
			<return-value transfer-ownership="full">
				<type name="Gee.MultiSet" c:type="GeeMultiSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="get_value_equal_func" c:identifier="gee_abstract_multi_map_get_value_equal_func">
			<parameters>
				<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
					<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
			</return-value>
		</method>
		<virtual-method name="get_value_equal_func" invoker="get_value_equal_func">
			<parameters>
				<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
					<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
			</return-value>
		</virtual-method>
	</class>
	<record name="AbstractMultiMapClass" c:type="GeeAbstractMultiMapClass" glib:is-gtype-struct-for="AbstractMultiMap">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="create_value_storage">
			<callback name="abstract_multi_map_create_value_storage" c:type="abstract_multi_map_create_value_storage">
				<return-value transfer-ownership="full">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="create_multi_key_set">
			<callback name="abstract_multi_map_create_multi_key_set" c:type="abstract_multi_map_create_multi_key_set">
				<return-value transfer-ownership="full">
					<type name="Gee.MultiSet" c:type="GeeMultiSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="get_value_equal_func">
			<callback name="abstract_multi_map_get_value_equal_func" c:type="abstract_multi_map_get_value_equal_func">
				<parameters>
					<parameter name="result_target" direction="out" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
					<parameter name="result_target_destroy_notify" direction="out" transfer-ownership="none">
						<type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</return-value>
			</callback>
		</field>
	</record>
	<record name="AbstractMultiMapPrivate" c:type="GeeAbstractMultiMapPrivate" disguised="1"/>
	<class name="AbstractMultiSet" c:type="GeeAbstractMultiSet" glib:type-name="GeeAbstractMultiSet" glib:get-type="gee_abstract_multi_set_get_type" glib:type-struct="AbstractMultiSetClass" parent="Gee.AbstractCollection" abstract="1">
		<implements name="Gee.MultiSet"/>
		<field name="parent_instance">
			<type name="Gee.AbstractCollection" c:type="GeeAbstractCollection"/>
		</field>
		<field name="priv">
			<type name="AbstractMultiSetPrivate" c:type="GeeAbstractMultiSetPrivate*"/>
		</field>
		<field name="_storage_map">
			<type name="Gee.Map" c:type="GeeMap*">
				<type name="gpointer" c:type="gpointer"/>
				<type name="gint" c:type="gint"/>
			</type>
		</field>
		<constructor name="new" c:identifier="gee_abstract_multi_set_new">
			<parameters>
				<parameter name="storage_map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gint" c:type="gint"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractMultiSet" c:type="GeeAbstractMultiSet*"/>
			</return-value>
		</constructor>
	</class>
	<record name="AbstractMultiSetClass" c:type="GeeAbstractMultiSetClass" glib:is-gtype-struct-for="AbstractMultiSet">
		<field name="parent_class">
			<type name="Gee.AbstractCollectionClass" c:type="GeeAbstractCollectionClass"/>
		</field>
	</record>
	<record name="AbstractMultiSetPrivate" c:type="GeeAbstractMultiSetPrivate" disguised="1"/>
	<class name="AbstractQueue" c:type="GeeAbstractQueue" glib:type-name="GeeAbstractQueue" glib:get-type="gee_abstract_queue_get_type" glib:type-struct="AbstractQueueClass" parent="Gee.AbstractCollection" abstract="1">
		<implements name="Gee.Queue"/>
		<field name="parent_instance">
			<type name="Gee.AbstractCollection" c:type="GeeAbstractCollection"/>
		</field>
		<field name="priv">
			<type name="AbstractQueuePrivate" c:type="GeeAbstractQueuePrivate*"/>
		</field>
		<method name="offer" c:identifier="gee_abstract_queue_offer">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="offer" invoker="offer">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="peek" c:identifier="gee_abstract_queue_peek">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="peek" invoker="peek">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="poll" c:identifier="gee_abstract_queue_poll">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="poll" invoker="poll">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="drain" c:identifier="gee_abstract_queue_drain">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="drain" invoker="drain">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gee_abstract_queue_new">
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractQueue" c:type="GeeAbstractQueue*"/>
			</return-value>
		</constructor>
		<property name="capacity">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="remaining-capacity">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-full">
			<type name="gboolean" c:type="gboolean"/>
		</property>
	</class>
	<record name="AbstractQueueClass" c:type="GeeAbstractQueueClass" glib:is-gtype-struct-for="AbstractQueue">
		<field name="parent_class">
			<type name="Gee.AbstractCollectionClass" c:type="GeeAbstractCollectionClass"/>
		</field>
		<field name="offer">
			<callback name="abstract_queue_offer" c:type="abstract_queue_offer">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="peek">
			<callback name="abstract_queue_peek" c:type="abstract_queue_peek">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="poll">
			<callback name="abstract_queue_poll" c:type="abstract_queue_poll">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="drain">
			<callback name="abstract_queue_drain" c:type="abstract_queue_drain">
				<parameters>
					<parameter name="recipient" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
					<parameter name="amount" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<record name="AbstractQueuePrivate" c:type="GeeAbstractQueuePrivate" disguised="1"/>
	<class name="AbstractSet" c:type="GeeAbstractSet" glib:type-name="GeeAbstractSet" glib:get-type="gee_abstract_set_get_type" glib:type-struct="AbstractSetClass" parent="Gee.AbstractCollection" abstract="1">
		<implements name="Gee.Set"/>
		<field name="parent_instance">
			<type name="Gee.AbstractCollection" c:type="GeeAbstractCollection"/>
		</field>
		<field name="priv">
			<type name="AbstractSetPrivate" c:type="GeeAbstractSetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_abstract_set_new">
			<return-value transfer-ownership="full">
				<type name="Gee.AbstractSet" c:type="GeeAbstractSet*"/>
			</return-value>
		</constructor>
		<property name="read-only-view">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</class>
	<record name="AbstractSetClass" c:type="GeeAbstractSetClass" glib:is-gtype-struct-for="AbstractSet">
		<field name="parent_class">
			<type name="Gee.AbstractCollectionClass" c:type="GeeAbstractCollectionClass"/>
		</field>
	</record>
	<record name="AbstractSetPrivate" c:type="GeeAbstractSetPrivate" disguised="1"/>
	<class name="ArrayList" c:type="GeeArrayList" glib:type-name="GeeArrayList" glib:get-type="gee_array_list_get_type" glib:type-struct="ArrayListClass" parent="Gee.AbstractList">
		<field name="parent_instance">
			<type name="Gee.AbstractList" c:type="GeeAbstractList"/>
		</field>
		<field name="priv">
			<type name="ArrayListPrivate" c:type="GeeArrayListPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_array_list_new">
			<parameters>
				<parameter name="equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.ArrayList" c:type="GeeArrayList*"/>
			</return-value>
		</constructor>
		<method name="sort_with_data" c:identifier="gee_array_list_sort_with_data">
			<parameters>
				<parameter name="compare" transfer-ownership="none" closure="1">
					<type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
				</parameter>
				<parameter name="compare_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<property name="equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="ArrayListClass" c:type="GeeArrayListClass" glib:is-gtype-struct-for="ArrayList">
		<field name="parent_class">
			<type name="Gee.AbstractListClass" c:type="GeeAbstractListClass"/>
		</field>
	</record>
	<record name="ArrayListPrivate" c:type="GeeArrayListPrivate" disguised="1"/>
	<class name="HashMap" c:type="GeeHashMap" glib:type-name="GeeHashMap" glib:get-type="gee_hash_map_get_type" glib:type-struct="HashMapClass" parent="Gee.AbstractMap">
		<field name="parent_instance">
			<type name="Gee.AbstractMap" c:type="GeeAbstractMap"/>
		</field>
		<field name="priv">
			<type name="HashMapPrivate" c:type="GeeHashMapPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_hash_map_new">
			<parameters>
				<parameter name="key_hash_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.HashFunc" c:type="GHashFunc"/>
				</parameter>
				<parameter name="key_hash_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="key_equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="key_equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="value_equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="value_equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.HashMap" c:type="GeeHashMap*"/>
			</return-value>
		</constructor>
		<property name="key-hash-func" writable="1">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</property>
		<property name="key-equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
		<property name="value-equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="HashMapClass" c:type="GeeHashMapClass" glib:is-gtype-struct-for="HashMap">
		<field name="parent_class">
			<type name="Gee.AbstractMapClass" c:type="GeeAbstractMapClass"/>
		</field>
	</record>
	<record name="HashMapPrivate" c:type="GeeHashMapPrivate" disguised="1"/>
	<class name="HashMultiMap" c:type="GeeHashMultiMap" glib:type-name="GeeHashMultiMap" glib:get-type="gee_hash_multi_map_get_type" glib:type-struct="HashMultiMapClass" parent="Gee.AbstractMultiMap">
		<field name="parent_instance">
			<type name="Gee.AbstractMultiMap" c:type="GeeAbstractMultiMap"/>
		</field>
		<field name="priv">
			<type name="HashMultiMapPrivate" c:type="GeeHashMultiMapPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_hash_multi_map_new">
			<parameters>
				<parameter name="key_hash_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.HashFunc" c:type="GHashFunc"/>
				</parameter>
				<parameter name="key_hash_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="key_equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="key_equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="value_hash_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.HashFunc" c:type="GHashFunc"/>
				</parameter>
				<parameter name="value_hash_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="value_equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="value_equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.HashMultiMap" c:type="GeeHashMultiMap*"/>
			</return-value>
		</constructor>
		<property name="key-hash-func">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</property>
		<property name="key-equal-func">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
		<property name="value-hash-func" writable="1">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</property>
		<property name="value-equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="HashMultiMapClass" c:type="GeeHashMultiMapClass" glib:is-gtype-struct-for="HashMultiMap">
		<field name="parent_class">
			<type name="Gee.AbstractMultiMapClass" c:type="GeeAbstractMultiMapClass"/>
		</field>
	</record>
	<record name="HashMultiMapPrivate" c:type="GeeHashMultiMapPrivate" disguised="1"/>
	<class name="HashMultiSet" c:type="GeeHashMultiSet" glib:type-name="GeeHashMultiSet" glib:get-type="gee_hash_multi_set_get_type" glib:type-struct="HashMultiSetClass" parent="Gee.AbstractMultiSet">
		<field name="parent_instance">
			<type name="Gee.AbstractMultiSet" c:type="GeeAbstractMultiSet"/>
		</field>
		<field name="priv">
			<type name="HashMultiSetPrivate" c:type="GeeHashMultiSetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_hash_multi_set_new">
			<parameters>
				<parameter name="hash_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.HashFunc" c:type="GHashFunc"/>
				</parameter>
				<parameter name="hash_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.HashMultiSet" c:type="GeeHashMultiSet*"/>
			</return-value>
		</constructor>
		<property name="hash-func">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</property>
		<property name="equal-func">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="HashMultiSetClass" c:type="GeeHashMultiSetClass" glib:is-gtype-struct-for="HashMultiSet">
		<field name="parent_class">
			<type name="Gee.AbstractMultiSetClass" c:type="GeeAbstractMultiSetClass"/>
		</field>
	</record>
	<record name="HashMultiSetPrivate" c:type="GeeHashMultiSetPrivate" disguised="1"/>
	<class name="HashSet" c:type="GeeHashSet" glib:type-name="GeeHashSet" glib:get-type="gee_hash_set_get_type" glib:type-struct="HashSetClass" parent="Gee.AbstractSet">
		<field name="parent_instance">
			<type name="Gee.AbstractSet" c:type="GeeAbstractSet"/>
		</field>
		<field name="priv">
			<type name="HashSetPrivate" c:type="GeeHashSetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_hash_set_new">
			<parameters>
				<parameter name="hash_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.HashFunc" c:type="GHashFunc"/>
				</parameter>
				<parameter name="hash_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.HashSet" c:type="GeeHashSet*"/>
			</return-value>
		</constructor>
		<property name="hash-func" writable="1">
			<type name="GLib.HashFunc" c:type="GHashFunc"/>
		</property>
		<property name="equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="HashSetClass" c:type="GeeHashSetClass" glib:is-gtype-struct-for="HashSet">
		<field name="parent_class">
			<type name="Gee.AbstractSetClass" c:type="GeeAbstractSetClass"/>
		</field>
	</record>
	<record name="HashSetPrivate" c:type="GeeHashSetPrivate" disguised="1"/>
	<class name="LinkedList" c:type="GeeLinkedList" glib:type-name="GeeLinkedList" glib:get-type="gee_linked_list_get_type" glib:type-struct="LinkedListClass" parent="Gee.AbstractList">
		<implements name="Gee.Queue"/>
		<implements name="Gee.Deque"/>
		<field name="parent_instance">
			<type name="Gee.AbstractList" c:type="GeeAbstractList"/>
		</field>
		<field name="priv">
			<type name="LinkedListPrivate" c:type="GeeLinkedListPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_linked_list_new">
			<parameters>
				<parameter name="equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.LinkedList" c:type="GeeLinkedList*"/>
			</return-value>
		</constructor>
		<property name="equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="LinkedListClass" c:type="GeeLinkedListClass" glib:is-gtype-struct-for="LinkedList">
		<field name="parent_class">
			<type name="Gee.AbstractListClass" c:type="GeeAbstractListClass"/>
		</field>
	</record>
	<record name="LinkedListPrivate" c:type="GeeLinkedListPrivate" disguised="1"/>
	<class name="PriorityQueue" c:type="GeePriorityQueue" glib:type-name="GeePriorityQueue" glib:get-type="gee_priority_queue_get_type" glib:type-struct="PriorityQueueClass" parent="Gee.AbstractQueue">
		<field name="parent_instance">
			<type name="Gee.AbstractQueue" c:type="GeeAbstractQueue"/>
		</field>
		<field name="priv">
			<type name="PriorityQueuePrivate" c:type="GeePriorityQueuePrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_priority_queue_new">
			<parameters>
				<parameter name="compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.PriorityQueue" c:type="GeePriorityQueue*"/>
			</return-value>
		</constructor>
		<property name="compare-func" writable="1">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
	</class>
	<record name="PriorityQueueClass" c:type="GeePriorityQueueClass" glib:is-gtype-struct-for="PriorityQueue">
		<field name="parent_class">
			<type name="Gee.AbstractQueueClass" c:type="GeeAbstractQueueClass"/>
		</field>
	</record>
	<record name="PriorityQueuePrivate" c:type="GeePriorityQueuePrivate" disguised="1"/>
	<class name="TreeMap" c:type="GeeTreeMap" glib:type-name="GeeTreeMap" glib:get-type="gee_tree_map_get_type" glib:type-struct="TreeMapClass" parent="Gee.AbstractMap">
		<field name="parent_instance">
			<type name="Gee.AbstractMap" c:type="GeeAbstractMap"/>
		</field>
		<field name="priv">
			<type name="TreeMapPrivate" c:type="GeeTreeMapPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_tree_map_new">
			<parameters>
				<parameter name="key_compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="key_compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="value_equal_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
				</parameter>
				<parameter name="value_equal_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.TreeMap" c:type="GeeTreeMap*"/>
			</return-value>
		</constructor>
		<property name="key-compare-func" writable="1">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
		<property name="value-equal-func" writable="1">
			<type name="GLib.EqualFunc" c:type="GEqualFunc"/>
		</property>
	</class>
	<record name="TreeMapClass" c:type="GeeTreeMapClass" glib:is-gtype-struct-for="TreeMap">
		<field name="parent_class">
			<type name="Gee.AbstractMapClass" c:type="GeeAbstractMapClass"/>
		</field>
	</record>
	<record name="TreeMapPrivate" c:type="GeeTreeMapPrivate" disguised="1"/>
	<class name="TreeMultiMap" c:type="GeeTreeMultiMap" glib:type-name="GeeTreeMultiMap" glib:get-type="gee_tree_multi_map_get_type" glib:type-struct="TreeMultiMapClass" parent="Gee.AbstractMultiMap">
		<field name="parent_instance">
			<type name="Gee.AbstractMultiMap" c:type="GeeAbstractMultiMap"/>
		</field>
		<field name="priv">
			<type name="TreeMultiMapPrivate" c:type="GeeTreeMultiMapPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_tree_multi_map_new">
			<parameters>
				<parameter name="key_compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="key_compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
				<parameter name="value_compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="value_compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.TreeMultiMap" c:type="GeeTreeMultiMap*"/>
			</return-value>
		</constructor>
		<property name="key-compare-func">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
		<property name="value-compare-func" writable="1">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
	</class>
	<record name="TreeMultiMapClass" c:type="GeeTreeMultiMapClass" glib:is-gtype-struct-for="TreeMultiMap">
		<field name="parent_class">
			<type name="Gee.AbstractMultiMapClass" c:type="GeeAbstractMultiMapClass"/>
		</field>
	</record>
	<record name="TreeMultiMapPrivate" c:type="GeeTreeMultiMapPrivate" disguised="1"/>
	<class name="TreeMultiSet" c:type="GeeTreeMultiSet" glib:type-name="GeeTreeMultiSet" glib:get-type="gee_tree_multi_set_get_type" glib:type-struct="TreeMultiSetClass" parent="Gee.AbstractMultiSet">
		<field name="parent_instance">
			<type name="Gee.AbstractMultiSet" c:type="GeeAbstractMultiSet"/>
		</field>
		<field name="priv">
			<type name="TreeMultiSetPrivate" c:type="GeeTreeMultiSetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_tree_multi_set_new">
			<parameters>
				<parameter name="compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.TreeMultiSet" c:type="GeeTreeMultiSet*"/>
			</return-value>
		</constructor>
		<property name="compare-func">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
	</class>
	<record name="TreeMultiSetClass" c:type="GeeTreeMultiSetClass" glib:is-gtype-struct-for="TreeMultiSet">
		<field name="parent_class">
			<type name="Gee.AbstractMultiSetClass" c:type="GeeAbstractMultiSetClass"/>
		</field>
	</record>
	<record name="TreeMultiSetPrivate" c:type="GeeTreeMultiSetPrivate" disguised="1"/>
	<class name="TreeSet" c:type="GeeTreeSet" glib:type-name="GeeTreeSet" glib:get-type="gee_tree_set_get_type" glib:type-struct="TreeSetClass" parent="Gee.AbstractSet">
		<implements name="Gee.SortedSet"/>
		<field name="parent_instance">
			<type name="Gee.AbstractSet" c:type="GeeAbstractSet"/>
		</field>
		<field name="priv">
			<type name="TreeSetPrivate" c:type="GeeTreeSetPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_tree_set_new">
			<parameters>
				<parameter name="compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.TreeSet" c:type="GeeTreeSet*"/>
			</return-value>
		</constructor>
		<property name="compare-func" writable="1">
			<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
		</property>
	</class>
	<record name="TreeSetClass" c:type="GeeTreeSetClass" glib:is-gtype-struct-for="TreeSet">
		<field name="parent_class">
			<type name="Gee.AbstractSetClass" c:type="GeeAbstractSetClass"/>
		</field>
	</record>
	<record name="TreeSetPrivate" c:type="GeeTreeSetPrivate" disguised="1"/>
	<interface name="BidirIterator" c:type="GeeBidirIterator" glib:type-name="GeeBidirIterator" glib:get-type="gee_bidir_iterator_get_type" glib:type-struct="BidirIteratorIface">
		<prerequisite name="Gee.Iterator"/>
		<method name="previous" c:identifier="gee_bidir_iterator_previous">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="previous" invoker="previous">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has_previous" c:identifier="gee_bidir_iterator_has_previous">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_previous" invoker="has_previous">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="last" c:identifier="gee_bidir_iterator_last">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="last" invoker="last">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="BidirIteratorIface" c:type="GeeBidirIteratorIface" glib:is-gtype-struct-for="BidirIterator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="previous">
			<callback name="bidir_iterator_previous" c:type="bidir_iterator_previous">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has_previous">
			<callback name="bidir_iterator_has_previous" c:type="bidir_iterator_has_previous">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="last">
			<callback name="bidir_iterator_last" c:type="bidir_iterator_last">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Collection" c:type="GeeCollection" glib:type-name="GeeCollection" glib:get-type="gee_collection_get_type" glib:type-struct="CollectionIface">
		<prerequisite name="Gee.Iterable"/>
		<method name="contains" c:identifier="gee_collection_contains">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains" invoker="contains">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="add" c:identifier="gee_collection_add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="add" invoker="add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove" c:identifier="gee_collection_remove">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove" invoker="remove">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="clear" c:identifier="gee_collection_clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="clear" invoker="clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="add_all" c:identifier="gee_collection_add_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="add_all" invoker="add_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="contains_all" c:identifier="gee_collection_contains_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains_all" invoker="contains_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove_all" c:identifier="gee_collection_remove_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove_all" invoker="remove_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="retain_all" c:identifier="gee_collection_retain_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="retain_all" invoker="retain_all">
			<parameters>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="to_array" c:identifier="gee_collection_to_array">
			<parameters>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<array length="0">
					<type name="gpointer" c:type="gpointer"/>
				</array>
			</return-value>
		</method>
		<virtual-method name="to_array" invoker="to_array">
			<parameters>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<array length="0">
					<type name="gpointer" c:type="gpointer"/>
				</array>
			</return-value>
		</virtual-method>
		<function name="empty" c:identifier="gee_collection_empty">
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</function>
		<property name="size">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-empty">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<property name="read-only-view">
			<type name="Gee.Collection" c:type="GeeCollection*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</interface>
	<record name="CollectionIface" c:type="GeeCollectionIface" glib:is-gtype-struct-for="Collection">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="contains">
			<callback name="collection_contains" c:type="collection_contains">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="add">
			<callback name="collection_add" c:type="collection_add">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove">
			<callback name="collection_remove" c:type="collection_remove">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="clear">
			<callback name="collection_clear" c:type="collection_clear">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="add_all">
			<callback name="collection_add_all" c:type="collection_add_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="contains_all">
			<callback name="collection_contains_all" c:type="collection_contains_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_all">
			<callback name="collection_remove_all" c:type="collection_remove_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="retain_all">
			<callback name="collection_retain_all" c:type="collection_retain_all">
				<parameters>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="to_array">
			<callback name="collection_to_array" c:type="collection_to_array">
				<parameters>
					<parameter name="result_length1" direction="out" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<array length="0">
						<type name="gpointer" c:type="gpointer"/>
					</array>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Comparable" c:type="GeeComparable" glib:type-name="GeeComparable" glib:get-type="gee_comparable_get_type" glib:type-struct="ComparableIface">
		<prerequisite name="GObject.Object"/>
		<method name="compare_to" c:identifier="gee_comparable_compare_to">
			<parameters>
				<parameter name="object" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="compare_to" invoker="compare_to">
			<parameters>
				<parameter name="object" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="ComparableIface" c:type="GeeComparableIface" glib:is-gtype-struct-for="Comparable">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="compare_to">
			<callback name="comparable_compare_to" c:type="comparable_compare_to">
				<parameters>
					<parameter name="object" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Deque" c:type="GeeDeque" glib:type-name="GeeDeque" glib:get-type="gee_deque_get_type" glib:type-struct="DequeIface">
		<prerequisite name="Gee.Queue"/>
		<method name="offer_head" c:identifier="gee_deque_offer_head">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="offer_head" invoker="offer_head">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="peek_head" c:identifier="gee_deque_peek_head">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="peek_head" invoker="peek_head">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="poll_head" c:identifier="gee_deque_poll_head">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="poll_head" invoker="poll_head">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="drain_head" c:identifier="gee_deque_drain_head">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="drain_head" invoker="drain_head">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
		<method name="offer_tail" c:identifier="gee_deque_offer_tail">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="offer_tail" invoker="offer_tail">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="peek_tail" c:identifier="gee_deque_peek_tail">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="peek_tail" invoker="peek_tail">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="poll_tail" c:identifier="gee_deque_poll_tail">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="poll_tail" invoker="poll_tail">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="drain_tail" c:identifier="gee_deque_drain_tail">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="drain_tail" invoker="drain_tail">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="DequeIface" c:type="GeeDequeIface" glib:is-gtype-struct-for="Deque">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="offer_head">
			<callback name="deque_offer_head" c:type="deque_offer_head">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="peek_head">
			<callback name="deque_peek_head" c:type="deque_peek_head">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="poll_head">
			<callback name="deque_poll_head" c:type="deque_poll_head">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="drain_head">
			<callback name="deque_drain_head" c:type="deque_drain_head">
				<parameters>
					<parameter name="recipient" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
					<parameter name="amount" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
		<field name="offer_tail">
			<callback name="deque_offer_tail" c:type="deque_offer_tail">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="peek_tail">
			<callback name="deque_peek_tail" c:type="deque_peek_tail">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="poll_tail">
			<callback name="deque_poll_tail" c:type="deque_poll_tail">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="drain_tail">
			<callback name="deque_drain_tail" c:type="deque_drain_tail">
				<parameters>
					<parameter name="recipient" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
					<parameter name="amount" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Iterable" c:type="GeeIterable" glib:type-name="GeeIterable" glib:get-type="gee_iterable_get_type" glib:type-struct="IterableIface">
		<prerequisite name="GObject.Object"/>
		<method name="iterator" c:identifier="gee_iterable_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.Iterator" c:type="GeeIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="iterator" invoker="iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.Iterator" c:type="GeeIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<property name="element-type">
			<type name="GObject.Type" c:type="GType"/>
		</property>
	</interface>
	<record name="IterableIface" c:type="GeeIterableIface" glib:is-gtype-struct-for="Iterable">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="iterator">
			<callback name="iterable_iterator" c:type="iterable_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.Iterator" c:type="GeeIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Iterator" c:type="GeeIterator" glib:type-name="GeeIterator" glib:get-type="gee_iterator_get_type" glib:type-struct="IteratorIface">
		<prerequisite name="GObject.Object"/>
		<method name="next" c:identifier="gee_iterator_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="next" invoker="next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has_next" c:identifier="gee_iterator_has_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_next" invoker="has_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="first" c:identifier="gee_iterator_first">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="first" invoker="first">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_iterator_get">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="remove" c:identifier="gee_iterator_remove">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="remove" invoker="remove">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="IteratorIface" c:type="GeeIteratorIface" glib:is-gtype-struct-for="Iterator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="next">
			<callback name="iterator_next" c:type="iterator_next">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has_next">
			<callback name="iterator_has_next" c:type="iterator_has_next">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="first">
			<callback name="iterator_first" c:type="iterator_first">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="iterator_get" c:type="iterator_get">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="remove">
			<callback name="iterator_remove" c:type="iterator_remove">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="List" c:type="GeeList" glib:type-name="GeeList" glib:get-type="gee_list_get_type" glib:type-struct="ListIface">
		<prerequisite name="Gee.Collection"/>
		<method name="list_iterator" c:identifier="gee_list_list_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.ListIterator" c:type="GeeListIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="list_iterator" invoker="list_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.ListIterator" c:type="GeeListIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_list_get">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="set" c:identifier="gee_list_set">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="index_of" c:identifier="gee_list_index_of">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="index_of" invoker="index_of">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
		<method name="insert" c:identifier="gee_list_insert">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="insert" invoker="insert">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="remove_at" c:identifier="gee_list_remove_at">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="remove_at" invoker="remove_at">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="slice" c:identifier="gee_list_slice">
			<parameters>
				<parameter name="start" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="stop" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.List" c:type="GeeList*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="slice" invoker="slice">
			<parameters>
				<parameter name="start" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="stop" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.List" c:type="GeeList*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="first" c:identifier="gee_list_first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="first" invoker="first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="last" c:identifier="gee_list_last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="last" invoker="last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="insert_all" c:identifier="gee_list_insert_all">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="insert_all" invoker="insert_all">
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="collection" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="sort" c:identifier="gee_list_sort">
			<parameters>
				<parameter name="compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="sort" invoker="sort">
			<parameters>
				<parameter name="compare_func" transfer-ownership="none" allow-none="1">
					<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
				</parameter>
				<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<function name="empty" c:identifier="gee_list_empty">
			<return-value transfer-ownership="full">
				<type name="Gee.List" c:type="GeeList*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</function>
		<property name="read-only-view">
			<type name="Gee.List" c:type="GeeList*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</interface>
	<record name="ListIface" c:type="GeeListIface" glib:is-gtype-struct-for="List">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="list_iterator">
			<callback name="list_list_iterator" c:type="list_list_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.ListIterator" c:type="GeeListIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="list_get" c:type="list_get">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="set">
			<callback name="list_set" c:type="list_set">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="index_of">
			<callback name="list_index_of" c:type="list_index_of">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
		<field name="insert">
			<callback name="list_insert" c:type="list_insert">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_at">
			<callback name="list_remove_at" c:type="list_remove_at">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="slice">
			<callback name="list_slice" c:type="list_slice">
				<parameters>
					<parameter name="start" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="stop" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Gee.List" c:type="GeeList*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="first">
			<callback name="list_first" c:type="list_first">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="last">
			<callback name="list_last" c:type="list_last">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="insert_all">
			<callback name="list_insert_all" c:type="list_insert_all">
				<parameters>
					<parameter name="index" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
					<parameter name="collection" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="sort">
			<callback name="list_sort" c:type="list_sort">
				<parameters>
					<parameter name="compare_func" transfer-ownership="none" allow-none="1">
						<type name="GLib.CompareFunc" c:type="GCompareFunc"/>
					</parameter>
					<parameter name="compare_func_target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="ListIterator" c:type="GeeListIterator" glib:type-name="GeeListIterator" glib:get-type="gee_list_iterator_get_type" glib:type-struct="ListIteratorIface">
		<prerequisite name="Gee.BidirIterator"/>
		<method name="set" c:identifier="gee_list_iterator_set">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="insert" c:identifier="gee_list_iterator_insert">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="insert" invoker="insert">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="add" c:identifier="gee_list_iterator_add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="add" invoker="add">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="index" c:identifier="gee_list_iterator_index">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="index" invoker="index">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="ListIteratorIface" c:type="GeeListIteratorIface" glib:is-gtype-struct-for="ListIterator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="set">
			<callback name="list_iterator_set" c:type="list_iterator_set">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="insert">
			<callback name="list_iterator_insert" c:type="list_iterator_insert">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="add">
			<callback name="list_iterator_add" c:type="list_iterator_add">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="index">
			<callback name="list_iterator_index" c:type="list_iterator_index">
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Map" c:type="GeeMap" glib:type-name="GeeMap" glib:get-type="gee_map_get_type" glib:type-struct="MapIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Gee.Iterable"/>
		<method name="has_key" c:identifier="gee_map_has_key">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_key" invoker="has_key">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="contains" c:identifier="gee_map_contains" deprecated="">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains" invoker="contains" deprecated="">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has" c:identifier="gee_map_has">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has" invoker="has">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_map_get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="set" c:identifier="gee_map_set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="unset" c:identifier="gee_map_unset">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="unset" invoker="unset">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove" c:identifier="gee_map_remove" deprecated="">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove" invoker="remove" deprecated="">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="clear" c:identifier="gee_map_clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="clear" invoker="clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="map_iterator" c:identifier="gee_map_map_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.MapIterator" c:type="GeeMapIterator*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="map_iterator" invoker="map_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.MapIterator" c:type="GeeMapIterator*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="set_all" c:identifier="gee_map_set_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set_all" invoker="set_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="unset_all" c:identifier="gee_map_unset_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="unset_all" invoker="unset_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove_all" c:identifier="gee_map_remove_all" deprecated="">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove_all" invoker="remove_all" deprecated="">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has_all" c:identifier="gee_map_has_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_all" invoker="has_all">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="contains_all" c:identifier="gee_map_contains_all" deprecated="">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains_all" invoker="contains_all" deprecated="">
			<parameters>
				<parameter name="map" transfer-ownership="none">
					<type name="Gee.Map" c:type="GeeMap*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<function name="empty" c:identifier="gee_map_empty">
			<return-value transfer-ownership="full">
				<type name="Gee.Map" c:type="GeeMap*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</function>
		<property name="size">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-empty">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<property name="keys">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
		<property name="values">
			<type name="Gee.Collection" c:type="GeeCollection*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
		<property name="entries">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="Gee.MapEntry" c:type="GeeMapEntry*">
					<type name="gpointer" c:type="gpointer"/>
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</type>
		</property>
		<property name="read-only-view">
			<type name="Gee.Map" c:type="GeeMap*">
				<type name="gpointer" c:type="gpointer"/>
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
		<property name="key-type">
			<type name="GObject.Type" c:type="GType"/>
		</property>
		<property name="value-type">
			<type name="GObject.Type" c:type="GType"/>
		</property>
	</interface>
	<record name="MapIface" c:type="GeeMapIface" glib:is-gtype-struct-for="Map">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="has_key">
			<callback name="map_has_key" c:type="map_has_key">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="contains">
			<callback name="map_contains" c:type="map_contains" deprecated="">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has">
			<callback name="map_has" c:type="map_has">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="map_get" c:type="map_get">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="set">
			<callback name="map_set" c:type="map_set">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="unset">
			<callback name="map_unset" c:type="map_unset">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove">
			<callback name="map_remove" c:type="map_remove" deprecated="">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" direction="out" transfer-ownership="full" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="clear">
			<callback name="map_clear" c:type="map_clear">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="map_iterator">
			<callback name="map_map_iterator" c:type="map_map_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.MapIterator" c:type="GeeMapIterator*">
						<type name="gpointer" c:type="gpointer"/>
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="set_all">
			<callback name="map_set_all" c:type="map_set_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="unset_all">
			<callback name="map_unset_all" c:type="map_unset_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_all">
			<callback name="map_remove_all" c:type="map_remove_all" deprecated="">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has_all">
			<callback name="map_has_all" c:type="map_has_all">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="contains_all">
			<callback name="map_contains_all" c:type="map_contains_all" deprecated="">
				<parameters>
					<parameter name="map" transfer-ownership="none">
						<type name="Gee.Map" c:type="GeeMap*">
							<type name="gpointer" c:type="gpointer"/>
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
	</record>
	<class name="MapEntry" c:type="GeeMapEntry" glib:type-name="GeeMapEntry" glib:get-type="gee_map_entry_get_type" glib:type-struct="EntryClass" parent="GObject.Object" abstract="1">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="EntryPrivate" c:type="GeeMapEntryPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gee_map_entry_new">
			<return-value transfer-ownership="full">
				<type name="Gee.MapEntry" c:type="GeeMapEntry*"/>
			</return-value>
		</constructor>
		<property name="key">
			<type name="gpointer" c:type="gpointer"/>
		</property>
		<property name="value" writable="1">
			<type name="gpointer" c:type="gpointer"/>
		</property>
	</class>
	<record name="EntryClass" c:type="GeeMapEntryClass" glib:is-gtype-struct-for="Entry">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="EntryPrivate" c:type="GeeMapEntryPrivate" disguised="1"/>
	<interface name="MapIterator" c:type="GeeMapIterator" glib:type-name="GeeMapIterator" glib:get-type="gee_map_iterator_get_type" glib:type-struct="MapIteratorIface">
		<prerequisite name="GObject.Object"/>
		<method name="next" c:identifier="gee_map_iterator_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="next" invoker="next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="has_next" c:identifier="gee_map_iterator_has_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="has_next" invoker="has_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="first" c:identifier="gee_map_iterator_first">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="first" invoker="first">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="get_key" c:identifier="gee_map_iterator_get_key">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get_key" invoker="get_key">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="get_value" c:identifier="gee_map_iterator_get_value">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="get_value" invoker="get_value">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="set_value" c:identifier="gee_map_iterator_set_value">
			<parameters>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set_value" invoker="set_value">
			<parameters>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="unset" c:identifier="gee_map_iterator_unset">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="unset" invoker="unset">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="MapIteratorIface" c:type="GeeMapIteratorIface" glib:is-gtype-struct-for="MapIterator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="next">
			<callback name="map_iterator_next" c:type="map_iterator_next">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="has_next">
			<callback name="map_iterator_has_next" c:type="map_iterator_has_next">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="first">
			<callback name="map_iterator_first" c:type="map_iterator_first">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="get_key">
			<callback name="map_iterator_get_key" c:type="map_iterator_get_key">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="get_value">
			<callback name="map_iterator_get_value" c:type="map_iterator_get_value">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="set_value">
			<callback name="map_iterator_set_value" c:type="map_iterator_set_value">
				<parameters>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="unset">
			<callback name="map_iterator_unset" c:type="map_iterator_unset">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="MultiMap" c:type="GeeMultiMap" glib:type-name="GeeMultiMap" glib:get-type="gee_multi_map_get_type" glib:type-struct="MultiMapIface">
		<prerequisite name="GObject.Object"/>
		<method name="get_keys" c:identifier="gee_multi_map_get_keys">
			<return-value transfer-ownership="full">
				<type name="Gee.Set" c:type="GeeSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="get_keys" invoker="get_keys">
			<return-value transfer-ownership="full">
				<type name="Gee.Set" c:type="GeeSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="get_all_keys" c:identifier="gee_multi_map_get_all_keys">
			<return-value transfer-ownership="full">
				<type name="Gee.MultiSet" c:type="GeeMultiSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="get_all_keys" invoker="get_all_keys">
			<return-value transfer-ownership="full">
				<type name="Gee.MultiSet" c:type="GeeMultiSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="get_values" c:identifier="gee_multi_map_get_values">
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="get_values" invoker="get_values">
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="contains" c:identifier="gee_multi_map_contains">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="contains" invoker="contains">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="get" c:identifier="gee_multi_map_get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="get" invoker="get">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.Collection" c:type="GeeCollection*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="set" c:identifier="gee_multi_map_set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="set" invoker="set">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="remove" c:identifier="gee_multi_map_remove">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove" invoker="remove">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="remove_all" c:identifier="gee_multi_map_remove_all">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="remove_all" invoker="remove_all">
			<parameters>
				<parameter name="key" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="clear" c:identifier="gee_multi_map_clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="clear" invoker="clear">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<property name="size">
			<type name="gint" c:type="gint"/>
		</property>
	</interface>
	<record name="MultiMapIface" c:type="GeeMultiMapIface" glib:is-gtype-struct-for="MultiMap">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_keys">
			<callback name="multi_map_get_keys" c:type="multi_map_get_keys">
				<return-value transfer-ownership="full">
					<type name="Gee.Set" c:type="GeeSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="get_all_keys">
			<callback name="multi_map_get_all_keys" c:type="multi_map_get_all_keys">
				<return-value transfer-ownership="full">
					<type name="Gee.MultiSet" c:type="GeeMultiSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="get_values">
			<callback name="multi_map_get_values" c:type="multi_map_get_values">
				<return-value transfer-ownership="full">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="contains">
			<callback name="multi_map_contains" c:type="multi_map_contains">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="get">
			<callback name="multi_map_get" c:type="multi_map_get">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="set">
			<callback name="multi_map_set" c:type="multi_map_set">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
		<field name="remove">
			<callback name="multi_map_remove" c:type="multi_map_remove">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="remove_all">
			<callback name="multi_map_remove_all" c:type="multi_map_remove_all">
				<parameters>
					<parameter name="key" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="clear">
			<callback name="multi_map_clear" c:type="multi_map_clear">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="MultiSet" c:type="GeeMultiSet" glib:type-name="GeeMultiSet" glib:get-type="gee_multi_set_get_type" glib:type-struct="MultiSetIface">
		<prerequisite name="Gee.Collection"/>
		<method name="count" c:identifier="gee_multi_set_count">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="count" invoker="count">
			<parameters>
				<parameter name="item" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="MultiSetIface" c:type="GeeMultiSetIface" glib:is-gtype-struct-for="MultiSet">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="count">
			<callback name="multi_set_count" c:type="multi_set_count">
				<parameters>
					<parameter name="item" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Queue" c:type="GeeQueue" glib:type-name="GeeQueue" glib:get-type="gee_queue_get_type" glib:type-struct="QueueIface">
		<prerequisite name="Gee.Collection"/>
		<method name="offer" c:identifier="gee_queue_offer">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="offer" invoker="offer">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="peek" c:identifier="gee_queue_peek">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="peek" invoker="peek">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="poll" c:identifier="gee_queue_poll">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="poll" invoker="poll">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="drain" c:identifier="gee_queue_drain">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</method>
		<virtual-method name="drain" invoker="drain">
			<parameters>
				<parameter name="recipient" transfer-ownership="none">
					<type name="Gee.Collection" c:type="GeeCollection*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</parameter>
				<parameter name="amount" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
		</virtual-method>
		<constant name="UNBOUNDED_CAPACITY" c:identifier="GEE_QUEUE_UNBOUNDED_CAPACITY" value="-1">
			<type name="gint" c:type="gint"/>
		</constant>
		<property name="capacity">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="remaining-capacity">
			<type name="gint" c:type="gint"/>
		</property>
		<property name="is-full">
			<type name="gboolean" c:type="gboolean"/>
		</property>
	</interface>
	<record name="QueueIface" c:type="GeeQueueIface" glib:is-gtype-struct-for="Queue">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="offer">
			<callback name="queue_offer" c:type="queue_offer">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
			</callback>
		</field>
		<field name="peek">
			<callback name="queue_peek" c:type="queue_peek">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="poll">
			<callback name="queue_poll" c:type="queue_poll">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="drain">
			<callback name="queue_drain" c:type="queue_drain">
				<parameters>
					<parameter name="recipient" transfer-ownership="none">
						<type name="Gee.Collection" c:type="GeeCollection*">
							<type name="gpointer" c:type="gpointer"/>
						</type>
					</parameter>
					<parameter name="amount" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
			</callback>
		</field>
	</record>
	<interface name="Set" c:type="GeeSet" glib:type-name="GeeSet" glib:get-type="gee_set_get_type" glib:type-struct="SetIface">
		<prerequisite name="Gee.Collection"/>
		<function name="empty" c:identifier="gee_set_empty">
			<return-value transfer-ownership="full">
				<type name="Gee.Set" c:type="GeeSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</function>
		<property name="read-only-view">
			<type name="Gee.Set" c:type="GeeSet*">
				<type name="gpointer" c:type="gpointer"/>
			</type>
		</property>
	</interface>
	<record name="SetIface" c:type="GeeSetIface" glib:is-gtype-struct-for="Set">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SortedSet" c:type="GeeSortedSet" glib:type-name="GeeSortedSet" glib:get-type="gee_sorted_set_get_type" glib:type-struct="SortedSetIface">
		<prerequisite name="Gee.Set"/>
		<method name="first" c:identifier="gee_sorted_set_first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="first" invoker="first">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="last" c:identifier="gee_sorted_set_last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="last" invoker="last">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="bidir_iterator" c:identifier="gee_sorted_set_bidir_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="bidir_iterator" invoker="bidir_iterator">
			<return-value transfer-ownership="full">
				<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="iterator_at" c:identifier="gee_sorted_set_iterator_at">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="iterator_at" invoker="iterator_at">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="lower" c:identifier="gee_sorted_set_lower">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="lower" invoker="lower">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="higher" c:identifier="gee_sorted_set_higher">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="higher" invoker="higher">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="floor" c:identifier="gee_sorted_set_floor">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="floor" invoker="floor">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="ceil" c:identifier="gee_sorted_set_ceil">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</method>
		<virtual-method name="ceil" invoker="ceil">
			<parameters>
				<parameter name="element" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full" allow-none="1">
				<type name="gpointer" c:type="gpointer"/>
			</return-value>
		</virtual-method>
		<method name="head_set" c:identifier="gee_sorted_set_head_set">
			<parameters>
				<parameter name="before" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="head_set" invoker="head_set">
			<parameters>
				<parameter name="before" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="tail_set" c:identifier="gee_sorted_set_tail_set">
			<parameters>
				<parameter name="after" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="tail_set" invoker="tail_set">
			<parameters>
				<parameter name="after" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
		<method name="sub_set" c:identifier="gee_sorted_set_sub_set">
			<parameters>
				<parameter name="from" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="to" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</method>
		<virtual-method name="sub_set" invoker="sub_set">
			<parameters>
				<parameter name="from" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
				<parameter name="to" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</parameter>
			</parameters>
			<return-value transfer-ownership="full">
				<type name="Gee.SortedSet" c:type="GeeSortedSet*">
					<type name="gpointer" c:type="gpointer"/>
				</type>
			</return-value>
		</virtual-method>
	</interface>
	<record name="SortedSetIface" c:type="GeeSortedSetIface" glib:is-gtype-struct-for="SortedSet">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="first">
			<callback name="sorted_set_first" c:type="sorted_set_first">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="last">
			<callback name="sorted_set_last" c:type="sorted_set_last">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="bidir_iterator">
			<callback name="sorted_set_bidir_iterator" c:type="sorted_set_bidir_iterator">
				<return-value transfer-ownership="full">
					<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="iterator_at">
			<callback name="sorted_set_iterator_at" c:type="sorted_set_iterator_at">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Gee.BidirIterator" c:type="GeeBidirIterator*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="lower">
			<callback name="sorted_set_lower" c:type="sorted_set_lower">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="higher">
			<callback name="sorted_set_higher" c:type="sorted_set_higher">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="floor">
			<callback name="sorted_set_floor" c:type="sorted_set_floor">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="ceil">
			<callback name="sorted_set_ceil" c:type="sorted_set_ceil">
				<parameters>
					<parameter name="element" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full" allow-none="1">
					<type name="gpointer" c:type="gpointer"/>
				</return-value>
			</callback>
		</field>
		<field name="head_set">
			<callback name="sorted_set_head_set" c:type="sorted_set_head_set">
				<parameters>
					<parameter name="before" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="Gee.SortedSet" c:type="GeeSortedSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="tail_set">
			<callback name="sorted_set_tail_set" c:type="sorted_set_tail_set">
				<parameters>
					<parameter name="after" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="Gee.SortedSet" c:type="GeeSortedSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
		<field name="sub_set">
			<callback name="sorted_set_sub_set" c:type="sorted_set_sub_set">
				<parameters>
					<parameter name="from" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
					<parameter name="to" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="gpointer"/>
					</parameter>
				</parameters>
				<return-value transfer-ownership="full">
					<type name="Gee.SortedSet" c:type="GeeSortedSet*">
						<type name="gpointer" c:type="gpointer"/>
					</type>
				</return-value>
			</callback>
		</field>
	</record>
	<function name="direct_compare" c:identifier="gee_direct_compare">
		<parameters>
			<parameter name="_val1" transfer-ownership="none" allow-none="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
			<parameter name="_val2" transfer-ownership="none" allow-none="1">
				<type name="gpointer" c:type="void*"/>
			</parameter>
		</parameters>
		<return-value transfer-ownership="full">
			<type name="gint" c:type="gint"/>
		</return-value>
	</function>
</namespace>
</repository>
