<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Gdm"
             version="1.0"
             shared-library="libgdm.so.1"
             c:identifier-prefixes="Gdm"
             c:symbol-prefixes="gdm">
    <interface name="Chooser"
               c:symbol-prefix="chooser"
               c:type="GdmChooser"
               glib:type-name="GdmChooser"
               glib:get-type="gdm_chooser_get_type"
               glib:type-struct="ChooserIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_chooser_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_chooser_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_hostname">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_chooser_call_disconnect">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_disconnect_finish() to get the result of the operation.

See gdm_chooser_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_chooser_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_chooser_call_disconnect().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_chooser_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_disconnect() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname"
              c:identifier="gdm_chooser_call_select_hostname">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_select_hostname_finish() to get the result of the operation.

See gdm_chooser_call_select_hostname_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_finish"
              c:identifier="gdm_chooser_call_select_hostname_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_chooser_call_select_hostname().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_select_hostname().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_sync"
              c:identifier="gdm_chooser_call_select_hostname_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_select_hostname() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_chooser_complete_disconnect">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_hostname"
              c:identifier="gdm_chooser_complete_select_hostname">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-hostname" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_select_hostname() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ChooserIface"
            c:type="GdmChooserIface"
            glib:is-gtype-struct-for="Chooser">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_hostname">
        <callback name="handle_select_hostname">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ChooserProxy"
           c:symbol-prefix="chooser_proxy"
           c:type="GdmChooserProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmChooserProxy"
           glib:get-type="gdm_chooser_proxy_get_type"
           glib:type-struct="ChooserProxyClass">
      <doc xml:space="preserve">The #GdmChooserProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Chooser"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_chooser_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_chooser_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_chooser_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_chooser_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_chooser_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_chooser_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_chooser_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_chooser_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_finish() to get the result of the operation.

See gdm_chooser_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_chooser_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_chooser_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_chooser_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserProxyPrivate" c:type="GdmChooserProxyPrivate*"/>
      </field>
    </class>
    <record name="ChooserProxyClass"
            c:type="GdmChooserProxyClass"
            glib:is-gtype-struct-for="ChooserProxy">
      <doc xml:space="preserve">Class structure for #GdmChooserProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ChooserProxyPrivate"
            c:type="GdmChooserProxyPrivate"
            disguised="1">
    </record>
    <class name="ChooserSkeleton"
           c:symbol-prefix="chooser_skeleton"
           c:type="GdmChooserSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmChooserSkeleton"
           glib:get-type="gdm_chooser_skeleton_get_type"
           glib:type-struct="ChooserSkeletonClass">
      <doc xml:space="preserve">The #GdmChooserSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Chooser"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_chooser_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="ChooserSkeleton" c:type="GdmChooser*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserSkeletonPrivate"
              c:type="GdmChooserSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ChooserSkeletonClass"
            c:type="GdmChooserSkeletonClass"
            glib:is-gtype-struct-for="ChooserSkeleton">
      <doc xml:space="preserve">Class structure for #GdmChooserSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ChooserSkeletonPrivate"
            c:type="GdmChooserSkeletonPrivate"
            disguised="1">
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="GdmClient"
           parent="GObject.Object"
           glib:type-name="GdmClient"
           glib:get-type="gdm_client_get_type"
           glib:type-struct="ClientClass">
      <constructor name="new" c:identifier="gdm_client_new">
        <return-value transfer-ownership="full">
          <type name="Client" c:type="GdmClient*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="gdm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_chooser" c:identifier="gdm_client_get_chooser">
        <doc xml:space="preserve">Gets a #GdmChooser object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_finish"
              c:identifier="gdm_client_get_chooser_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with
gdm_client_get_chooser().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdmChooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_sync"
              c:identifier="gdm_client_get_chooser_sync"
              throws="1">
        <doc xml:space="preserve">Gets a #GdmChooser object that can be used
to do do various XDMCP chooser related tasks, such
as selecting a host or disconnecting.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GdmChooser or %NULL if caller is not a chooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter" c:identifier="gdm_client_get_greeter">
        <doc xml:space="preserve">Gets a #GdmGreeter object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_finish"
              c:identifier="gdm_client_get_greeter_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with
gdm_client_get_greeter().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdmGreeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_sync"
              c:identifier="gdm_client_get_greeter_sync"
              throws="1">
        <doc xml:space="preserve">Gets a #GdmGreeter object that can be used
to do do various login screen related tasks, such
as selecting a users session, and starting that
session.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GdmGreeter or %NULL if caller is not a greeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter"
              c:identifier="gdm_client_get_remote_greeter">
        <doc xml:space="preserve">Gets a #GdmRemoteGreeter object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_finish"
              c:identifier="gdm_client_get_remote_greeter_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with
gdm_client_get_remote_greeter().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdmRemoteGreeter</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_sync"
              c:identifier="gdm_client_get_remote_greeter_sync"
              throws="1">
        <doc xml:space="preserve">Gets a #GdmRemoteGreeter object that can be used
to do do various remote login screen related tasks,
such as disconnecting.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GdmRemoteGreeter or %NULL if caller is not remote</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier"
              c:identifier="gdm_client_get_user_verifier">
        <doc xml:space="preserve">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_choice_list"
              c:identifier="gdm_client_get_user_verifier_choice_list">
        <doc xml:space="preserve">Gets a #GdmUserVerifierChoiceList object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#GdmUserVerifierChoiceList or %NULL if user
verifier isn't yet fetched, or daemon doesn't support choice lists</doc>
          <type name="UserVerifierChoiceList"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_finish"
              c:identifier="gdm_client_get_user_verifier_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with
gdm_client_get_user_verifier().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_sync"
              c:identifier="gdm_client_get_user_verifier_sync"
              throws="1">
        <doc xml:space="preserve">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GdmUserVerifier or %NULL if not connected</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel"
              c:identifier="gdm_client_open_reauthentication_channel">
        <doc xml:space="preserve">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_finish"
              c:identifier="gdm_client_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with
gdm_client_open_reauthentication_channel().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_sync"
              c:identifier="gdm_client_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user. Free with
g_object_unref to close reauthentication channel.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GdmUserVerifier or %NULL if @username is not
already logged in.</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_extensions"
              c:identifier="gdm_client_set_enabled_extensions">
        <doc xml:space="preserve">Enables GDM's pam extensions.  Currently, only
org.gnome.DisplayManager.UserVerifier.ChoiceList is supported.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve">a list of extensions</doc>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClientPrivate" c:type="GdmClientPrivate*"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="GdmClientClass"
            glib:is-gtype-struct-for="Client">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientError" c:type="GdmClientError">
      <member name="client_error_generic"
              value="0"
              c:identifier="GDM_CLIENT_ERROR_GENERIC">
      </member>
    </enumeration>
    <record name="ClientPrivate" c:type="GdmClientPrivate" disguised="1">
    </record>
    <interface name="Greeter"
               c:symbol-prefix="greeter"
               c:type="GdmGreeter"
               glib:type-name="GdmGreeter"
               glib:get-type="gdm_greeter_get_type"
               glib:type-struct="GreeterIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_greeter_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_greeter_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="default_language_name_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="default_session_name_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_auto_login">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_timed_login_details">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_session">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_user">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_session_when_ready">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthenticated">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selected_user_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_opened">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timed_login_requested">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_begin_auto_login"
              c:identifier="gdm_greeter_call_begin_auto_login">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_begin_auto_login_finish() to get the result of the operation.

See gdm_greeter_call_begin_auto_login_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_finish"
              c:identifier="gdm_greeter_call_begin_auto_login_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_call_begin_auto_login().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_begin_auto_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_sync"
              c:identifier="gdm_greeter_call_begin_auto_login_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_begin_auto_login() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details"
              c:identifier="gdm_greeter_call_get_timed_login_details">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_get_timed_login_details_finish() to get the result of the operation.

See gdm_greeter_call_get_timed_login_details_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_finish"
              c:identifier="gdm_greeter_call_get_timed_login_details_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_call_get_timed_login_details().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_get_timed_login_details().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_sync"
              c:identifier="gdm_greeter_call_get_timed_login_details_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_get_timed_login_details() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session"
              c:identifier="gdm_greeter_call_select_session">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_session_finish() to get the result of the operation.

See gdm_greeter_call_select_session_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_finish"
              c:identifier="gdm_greeter_call_select_session_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_call_select_session().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_sync"
              c:identifier="gdm_greeter_call_select_session_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_session() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user"
              c:identifier="gdm_greeter_call_select_user">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_user_finish() to get the result of the operation.

See gdm_greeter_call_select_user_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_finish"
              c:identifier="gdm_greeter_call_select_user_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_call_select_user().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_sync"
              c:identifier="gdm_greeter_call_select_user_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_user() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready"
              c:identifier="gdm_greeter_call_start_session_when_ready">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_start_session_when_ready_finish() to get the result of the operation.

See gdm_greeter_call_start_session_when_ready_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_finish"
              c:identifier="gdm_greeter_call_start_session_when_ready_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_call_start_session_when_ready().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_start_session_when_ready().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_sync"
              c:identifier="gdm_greeter_call_start_session_when_ready_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_start_session_when_ready() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_auto_login"
              c:identifier="gdm_greeter_complete_begin_auto_login">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_timed_login_details"
              c:identifier="gdm_greeter_complete_get_timed_login_details">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_session"
              c:identifier="gdm_greeter_complete_select_session">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_user"
              c:identifier="gdm_greeter_complete_select_user">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_session_when_ready"
              c:identifier="gdm_greeter_complete_start_session_when_ready">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_language_name_changed"
              c:identifier="gdm_greeter_emit_default_language_name_changed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_session_name_changed"
              c:identifier="gdm_greeter_emit_default_session_name_changed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthenticated"
              c:identifier="gdm_greeter_emit_reauthenticated">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_selected_user_changed"
              c:identifier="gdm_greeter_emit_selected_user_changed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_session_opened"
              c:identifier="gdm_greeter_emit_session_opened">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_timed_login_requested"
              c:identifier="gdm_greeter_emit_timed_login_requested">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="default-language-name-changed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="default-session-name-changed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-auto-login" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_begin_auto_login() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-timed-login-details" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_get_timed_login_details() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-session" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-user" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-session-when-ready" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_start_session_when_ready() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthenticated" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected-user-changed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-opened" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timed-login-requested" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterIface"
            c:type="GdmGreeterIface"
            glib:is-gtype-struct-for="Greeter">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_begin_auto_login">
        <callback name="handle_begin_auto_login">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_timed_login_details">
        <callback name="handle_get_timed_login_details">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_session">
        <callback name="handle_select_session">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_user">
        <callback name="handle_select_user">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_session_when_ready">
        <callback name="handle_start_session_when_ready">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_should_start_session"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_language_name_changed">
        <callback name="default_language_name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_language_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_session_name_changed">
        <callback name="default_session_name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_session_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthenticated">
        <callback name="reauthenticated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selected_user_changed">
        <callback name="selected_user_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_opened">
        <callback name="session_opened">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timed_login_requested">
        <callback name="timed_login_requested">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_delay" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterProxy"
           c:symbol-prefix="greeter_proxy"
           c:type="GdmGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmGreeterProxy"
           glib:get-type="gdm_greeter_proxy_get_type"
           glib:type-struct="GreeterProxyClass">
      <doc xml:space="preserve">The #GdmGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Greeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_greeter_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_greeter_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_finish() to get the result of the operation.

See gdm_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_greeter_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterProxyPrivate" c:type="GdmGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="GreeterProxyClass"
            c:type="GdmGreeterProxyClass"
            glib:is-gtype-struct-for="GreeterProxy">
      <doc xml:space="preserve">Class structure for #GdmGreeterProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GreeterProxyPrivate"
            c:type="GdmGreeterProxyPrivate"
            disguised="1">
    </record>
    <class name="GreeterSkeleton"
           c:symbol-prefix="greeter_skeleton"
           c:type="GdmGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmGreeterSkeleton"
           glib:get-type="gdm_greeter_skeleton_get_type"
           glib:type-struct="GreeterSkeletonClass">
      <doc xml:space="preserve">The #GdmGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Greeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_greeter_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="GreeterSkeleton" c:type="GdmGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterSkeletonPrivate"
              c:type="GdmGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GreeterSkeletonClass"
            c:type="GdmGreeterSkeletonClass"
            glib:is-gtype-struct-for="GreeterSkeleton">
      <doc xml:space="preserve">Class structure for #GdmGreeterSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GreeterSkeletonPrivate"
            c:type="GdmGreeterSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="GdmManager"
               glib:type-name="GdmManager"
               glib:get-type="gdm_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_manager_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_manager_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_reauthentication_channel">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_session">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_display">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open_reauthentication_channel"
              c:identifier="gdm_manager_call_open_reauthentication_channel">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_reauthentication_channel_finish() to get the result of the operation.

See gdm_manager_call_open_reauthentication_channel_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_finish"
              c:identifier="gdm_manager_call_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_manager_call_open_reauthentication_channel().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_reauthentication_channel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_sync"
              c:identifier="gdm_manager_call_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_reauthentication_channel() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session"
              c:identifier="gdm_manager_call_open_session">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_session_finish() to get the result of the operation.

See gdm_manager_call_open_session_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_finish"
              c:identifier="gdm_manager_call_open_session_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_manager_call_open_session().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_sync"
              c:identifier="gdm_manager_call_open_session_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_session() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display"
              c:identifier="gdm_manager_call_register_display">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_register_display_finish() to get the result of the operation.

See gdm_manager_call_register_display_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_finish"
              c:identifier="gdm_manager_call_register_display_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_manager_call_register_display().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_display().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_sync"
              c:identifier="gdm_manager_call_register_display_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_display() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_reauthentication_channel"
              c:identifier="gdm_manager_complete_open_reauthentication_channel">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_session"
              c:identifier="gdm_manager_complete_open_session">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_display"
              c:identifier="gdm_manager_complete_register_display">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="gdm_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gdm_manager_get_version"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gdm_manager_set_version"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-open-reauthentication-channel" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_reauthentication_channel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-session" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-display" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="GdmManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open_reauthentication_channel">
        <callback name="handle_open_reauthentication_channel">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_session">
        <callback name="handle_open_session">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_display">
        <callback name="handle_register_display">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #GdmManager.</doc>
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="GdmManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmManagerProxy"
           glib:get-type="gdm_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve">The #GdmManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Manager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_manager_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_manager_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_manager_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_finish() to get the result of the operation.

See gdm_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_manager_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="GdmManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="GdmManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve">Class structure for #GdmManagerProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="GdmManagerProxyPrivate"
            disguised="1">
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="GdmManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmManagerSkeleton"
           glib:get-type="gdm_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve">The #GdmManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Manager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_manager_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="GdmManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="GdmManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="GdmManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve">Class structure for #GdmManagerSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="GdmManagerSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="RemoteGreeter"
               c:symbol-prefix="remote_greeter"
               c:type="GdmRemoteGreeter"
               glib:type-name="GdmRemoteGreeter"
               glib:get-type="gdm_remote_greeter_get_type"
               glib:type-struct="RemoteGreeterIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_remote_greeter_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_remote_greeter_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_remote_greeter_call_disconnect">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_call_disconnect_finish() to get the result of the operation.

See gdm_remote_greeter_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_remote_greeter_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_remote_greeter_call_disconnect().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_remote_greeter_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_remote_greeter_call_disconnect() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_remote_greeter_complete_disconnect">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmRemoteGreeter.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_remote_greeter_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="RemoteGreeterIface"
            c:type="GdmRemoteGreeterIface"
            glib:is-gtype-struct-for="RemoteGreeter">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RemoteGreeterProxy"
           c:symbol-prefix="remote_greeter_proxy"
           c:type="GdmRemoteGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmRemoteGreeterProxy"
           glib:get-type="gdm_remote_greeter_proxy_get_type"
           glib:type-struct="RemoteGreeterProxyClass">
      <doc xml:space="preserve">The #GdmRemoteGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_remote_greeter_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_remote_greeter_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_remote_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_remote_greeter_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_remote_greeter_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_remote_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterProxyPrivate"
              c:type="GdmRemoteGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterProxyClass"
            c:type="GdmRemoteGreeterProxyClass"
            glib:is-gtype-struct-for="RemoteGreeterProxy">
      <doc xml:space="preserve">Class structure for #GdmRemoteGreeterProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RemoteGreeterProxyPrivate"
            c:type="GdmRemoteGreeterProxyPrivate"
            disguised="1">
    </record>
    <class name="RemoteGreeterSkeleton"
           c:symbol-prefix="remote_greeter_skeleton"
           c:type="GdmRemoteGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmRemoteGreeterSkeleton"
           glib:get-type="gdm_remote_greeter_skeleton_get_type"
           glib:type-struct="RemoteGreeterSkeletonClass">
      <doc xml:space="preserve">The #GdmRemoteGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_remote_greeter_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="RemoteGreeterSkeleton" c:type="GdmRemoteGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterSkeletonPrivate"
              c:type="GdmRemoteGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterSkeletonClass"
            c:type="GdmRemoteGreeterSkeletonClass"
            glib:is-gtype-struct-for="RemoteGreeterSkeleton">
      <doc xml:space="preserve">Class structure for #GdmRemoteGreeterSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RemoteGreeterSkeletonPrivate"
            c:type="GdmRemoteGreeterSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="UserVerifier"
               c:symbol-prefix="user_verifier"
               c:type="GdmUserVerifier"
               glib:type-name="GdmUserVerifier"
               glib:get-type="gdm_user_verifier_get_type"
               glib:type-struct="UserVerifierIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="conversation_started">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="conversation_stopped">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_answer_query">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification_for_user">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_extensions">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info_query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="problem">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthentication_started">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secret_info_query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_unavailable">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_complete">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_failed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_answer_query"
              c:identifier="gdm_user_verifier_call_answer_query">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_answer_query_finish() to get the result of the operation.

See gdm_user_verifier_call_answer_query_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_finish"
              c:identifier="gdm_user_verifier_call_answer_query_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_call_answer_query().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_answer_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_sync"
              c:identifier="gdm_user_verifier_call_answer_query_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_answer_query() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification"
              c:identifier="gdm_user_verifier_call_begin_verification">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_call_begin_verification().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_for_user_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_for_user_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_call_begin_verification_for_user().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification_for_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification_for_user() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel" c:identifier="gdm_user_verifier_call_cancel">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_cancel_finish() to get the result of the operation.

See gdm_user_verifier_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="gdm_user_verifier_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_call_cancel().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="gdm_user_verifier_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_cancel() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions"
              c:identifier="gdm_user_verifier_call_enable_extensions">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_enable_extensions_finish() to get the result of the operation.

See gdm_user_verifier_call_enable_extensions_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_finish"
              c:identifier="gdm_user_verifier_call_enable_extensions_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_call_enable_extensions().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_enable_extensions().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_sync"
              c:identifier="gdm_user_verifier_call_enable_extensions_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_enable_extensions() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_answer_query"
              c:identifier="gdm_user_verifier_complete_answer_query">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification"
              c:identifier="gdm_user_verifier_complete_begin_verification">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification_for_user"
              c:identifier="gdm_user_verifier_complete_begin_verification_for_user">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="gdm_user_verifier_complete_cancel">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_extensions"
              c:identifier="gdm_user_verifier_complete_enable_extensions">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_started"
              c:identifier="gdm_user_verifier_emit_conversation_started">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_stopped"
              c:identifier="gdm_user_verifier_emit_conversation_stopped">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info" c:identifier="gdm_user_verifier_emit_info">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info_query"
              c:identifier="gdm_user_verifier_emit_info_query">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_problem"
              c:identifier="gdm_user_verifier_emit_problem">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthentication_started"
              c:identifier="gdm_user_verifier_emit_reauthentication_started">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reset" c:identifier="gdm_user_verifier_emit_reset">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_secret_info_query"
              c:identifier="gdm_user_verifier_emit_secret_info_query">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_unavailable"
              c:identifier="gdm_user_verifier_emit_service_unavailable">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_complete"
              c:identifier="gdm_user_verifier_emit_verification_complete">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_failed"
              c:identifier="gdm_user_verifier_emit_verification_failed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="conversation-started" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="conversation-stopped" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-answer-query" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_answer_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification-for-user" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification_for_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-extensions" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_enable_extensions() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info-query" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="problem" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthentication-started" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secret-info-query" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-unavailable" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-complete" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-failed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="UserVerifierChoiceList"
               c:symbol-prefix="user_verifier_choice_list"
               c:type="GdmUserVerifierChoiceList"
               glib:type-name="GdmUserVerifierChoiceList"
               glib:get-type="gdm_user_verifier_choice_list_get_type"
               glib:type-struct="UserVerifierChoiceListIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_choice_list_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_choice_list_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="choice_query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_choice">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_select_choice"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_call_select_choice_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_call_select_choice_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_finish"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_choice_list_call_select_choice().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_call_select_choice().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_sync"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_call_select_choice() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_choice"
              c:identifier="gdm_user_verifier_choice_list_complete_select_choice">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_choice_query"
              c:identifier="gdm_user_verifier_choice_list_emit_choice_query">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="choice-query" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-choice" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_choice_list_complete_select_choice() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierChoiceListIface"
            c:type="GdmUserVerifierChoiceListIface"
            glib:is-gtype-struct-for="UserVerifierChoiceList">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_select_choice">
        <callback name="handle_select_choice">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choice" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choice_query">
        <callback name="choice_query">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_list" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierChoiceListProxy"
           c:symbol-prefix="user_verifier_choice_list_proxy"
           c:type="GdmUserVerifierChoiceListProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierChoiceListProxy"
           glib:get-type="gdm_user_verifier_choice_list_proxy_get_type"
           glib:type-struct="UserVerifierChoiceListProxyClass">
      <doc xml:space="preserve">The #GdmUserVerifierChoiceListProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_user_verifier_choice_list_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_choice_list_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_user_verifier_choice_list_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListProxyPrivate"
              c:type="GdmUserVerifierChoiceListProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListProxyClass"
            c:type="GdmUserVerifierChoiceListProxyClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListProxy">
      <doc xml:space="preserve">Class structure for #GdmUserVerifierChoiceListProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListProxyPrivate"
            c:type="GdmUserVerifierChoiceListProxyPrivate"
            disguised="1">
    </record>
    <class name="UserVerifierChoiceListSkeleton"
           c:symbol-prefix="user_verifier_choice_list_skeleton"
           c:type="GdmUserVerifierChoiceListSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierChoiceListSkeleton"
           glib:get-type="gdm_user_verifier_choice_list_skeleton_get_type"
           glib:type-struct="UserVerifierChoiceListSkeletonClass">
      <doc xml:space="preserve">The #GdmUserVerifierChoiceListSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_choice_list_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="UserVerifierChoiceListSkeleton"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListSkeletonPrivate"
              c:type="GdmUserVerifierChoiceListSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListSkeletonClass"
            c:type="GdmUserVerifierChoiceListSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListSkeleton">
      <doc xml:space="preserve">Class structure for #GdmUserVerifierChoiceListSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListSkeletonPrivate"
            c:type="GdmUserVerifierChoiceListSkeletonPrivate"
            disguised="1">
    </record>
    <record name="UserVerifierIface"
            c:type="GdmUserVerifierIface"
            glib:is-gtype-struct-for="UserVerifier">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_answer_query">
        <callback name="handle_answer_query">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_answer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification">
        <callback name="handle_begin_verification">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification_for_user">
        <callback name="handle_begin_verification_for_user">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_extensions">
        <callback name="handle_enable_extensions">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_extensions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_started">
        <callback name="conversation_started">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_stopped">
        <callback name="conversation_stopped">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info">
        <callback name="info">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info_query">
        <callback name="info_query">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="problem">
        <callback name="problem">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthentication_started">
        <callback name="reauthentication_started">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_pid_of_caller" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secret_info_query">
        <callback name="secret_info_query">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unavailable">
        <callback name="service_unavailable">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_complete">
        <callback name="verification_complete">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_failed">
        <callback name="verification_failed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierProxy"
           c:symbol-prefix="user_verifier_proxy"
           c:type="GdmUserVerifierProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierProxy"
           glib:get-type="gdm_user_verifier_proxy_get_type"
           glib:type-struct="UserVerifierProxyClass">
      <doc xml:space="preserve">The #GdmUserVerifierProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="UserVerifier"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_user_verifier_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_user_verifier_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_user_verifier_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_user_verifier_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierProxyPrivate"
              c:type="GdmUserVerifierProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierProxyClass"
            c:type="GdmUserVerifierProxyClass"
            glib:is-gtype-struct-for="UserVerifierProxy">
      <doc xml:space="preserve">Class structure for #GdmUserVerifierProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierProxyPrivate"
            c:type="GdmUserVerifierProxyPrivate"
            disguised="1">
    </record>
    <class name="UserVerifierSkeleton"
           c:symbol-prefix="user_verifier_skeleton"
           c:type="GdmUserVerifierSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierSkeleton"
           glib:get-type="gdm_user_verifier_skeleton_get_type"
           glib:type-struct="UserVerifierSkeletonClass">
      <doc xml:space="preserve">The #GdmUserVerifierSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="UserVerifier"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_user_verifier_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="UserVerifierSkeleton" c:type="GdmUserVerifier*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierSkeletonPrivate"
              c:type="GdmUserVerifierSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierSkeletonClass"
            c:type="GdmUserVerifierSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierSkeleton">
      <doc xml:space="preserve">Class structure for #GdmUserVerifierSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierSkeletonPrivate"
            c:type="GdmUserVerifierSkeletonPrivate"
            disguised="1">
    </record>
    <interface name="WorkerManager"
               c:symbol-prefix="worker_manager"
               c:type="GdmWorkerManager"
               glib:type-name="GdmWorkerManager"
               glib:get-type="gdm_worker_manager_get_type"
               glib:type-struct="WorkerManagerIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="gdm_worker_manager_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_worker_manager_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_choice_list_query">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hello">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info_query">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_problem">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_secret_info_query">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_choice_list_query"
              c:identifier="gdm_worker_manager_call_choice_list_query">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_choice_list_query_finish() to get the result of the operation.

See gdm_worker_manager_call_choice_list_query_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_finish"
              c:identifier="gdm_worker_manager_call_choice_list_query_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_choice_list_query().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_choice_list_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_sync"
              c:identifier="gdm_worker_manager_call_choice_list_query_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_choice_list_query() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello" c:identifier="gdm_worker_manager_call_hello">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_hello_finish() to get the result of the operation.

See gdm_worker_manager_call_hello_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_finish"
              c:identifier="gdm_worker_manager_call_hello_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_hello().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_hello().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_sync"
              c:identifier="gdm_worker_manager_call_hello_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_hello() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info" c:identifier="gdm_worker_manager_call_info">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_finish() to get the result of the operation.

See gdm_worker_manager_call_info_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_finish"
              c:identifier="gdm_worker_manager_call_info_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_info().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query"
              c:identifier="gdm_worker_manager_call_info_query">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_finish"
              c:identifier="gdm_worker_manager_call_info_query_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_info_query().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_sync"
              c:identifier="gdm_worker_manager_call_info_query_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info_query() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_sync"
              c:identifier="gdm_worker_manager_call_info_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem"
              c:identifier="gdm_worker_manager_call_problem">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_problem_finish() to get the result of the operation.

See gdm_worker_manager_call_problem_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_finish"
              c:identifier="gdm_worker_manager_call_problem_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_problem().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_problem().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_sync"
              c:identifier="gdm_worker_manager_call_problem_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_problem() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query"
              c:identifier="gdm_worker_manager_call_secret_info_query">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_secret_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_secret_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_finish"
              c:identifier="gdm_worker_manager_call_secret_info_query_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_call_secret_info_query().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_secret_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_sync"
              c:identifier="gdm_worker_manager_call_secret_info_query_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_secret_info_query() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_choice_list_query"
              c:identifier="gdm_worker_manager_complete_choice_list_query">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hello"
              c:identifier="gdm_worker_manager_complete_hello">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info"
              c:identifier="gdm_worker_manager_complete_info">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info_query"
              c:identifier="gdm_worker_manager_complete_info_query">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_problem"
              c:identifier="gdm_worker_manager_complete_problem">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_secret_info_query"
              c:identifier="gdm_worker_manager_complete_secret_info_query">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-choice-list-query" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_choice_list_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hello" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_hello() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info-query" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-problem" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_problem() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-secret-info-query" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_secret_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WorkerManagerIface"
            c:type="GdmWorkerManagerIface"
            glib:is-gtype-struct-for="WorkerManager">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_choice_list_query">
        <callback name="handle_choice_list_query">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hello">
        <callback name="handle_hello">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info">
        <callback name="handle_info">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info_query">
        <callback name="handle_info_query">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_problem">
        <callback name="handle_problem">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_secret_info_query">
        <callback name="handle_secret_info_query">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WorkerManagerProxy"
           c:symbol-prefix="worker_manager_proxy"
           c:type="GdmWorkerManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmWorkerManagerProxy"
           glib:get-type="gdm_worker_manager_proxy_get_type"
           glib:type-struct="WorkerManagerProxyClass">
      <doc xml:space="preserve">The #GdmWorkerManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="WorkerManager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_worker_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with gdm_worker_manager_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like gdm_worker_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_worker_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_worker_manager_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_worker_manager_proxy_new_for_bus">
        <doc xml:space="preserve">Like gdm_worker_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerProxyPrivate"
              c:type="GdmWorkerManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerProxyClass"
            c:type="GdmWorkerManagerProxyClass"
            glib:is-gtype-struct-for="WorkerManagerProxy">
      <doc xml:space="preserve">Class structure for #GdmWorkerManagerProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WorkerManagerProxyPrivate"
            c:type="GdmWorkerManagerProxyPrivate"
            disguised="1">
    </record>
    <class name="WorkerManagerSkeleton"
           c:symbol-prefix="worker_manager_skeleton"
           c:type="GdmWorkerManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmWorkerManagerSkeleton"
           glib:get-type="gdm_worker_manager_skeleton_get_type"
           glib:type-struct="WorkerManagerSkeletonClass">
      <doc xml:space="preserve">The #GdmWorkerManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="WorkerManager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_worker_manager_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="WorkerManagerSkeleton" c:type="GdmWorkerManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerSkeletonPrivate"
              c:type="GdmWorkerManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerSkeletonClass"
            c:type="GdmWorkerManagerSkeletonClass"
            glib:is-gtype-struct-for="WorkerManagerSkeleton">
      <doc xml:space="preserve">Class structure for #GdmWorkerManagerSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WorkerManagerSkeletonPrivate"
            c:type="GdmWorkerManagerSkeletonPrivate"
            disguised="1">
    </record>
    <function name="chooser_interface_info"
              c:identifier="gdm_chooser_interface_info"
              moved-to="Chooser.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="chooser_override_properties"
              c:identifier="gdm_chooser_override_properties"
              moved-to="Chooser.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_session_ids" c:identifier="gdm_get_session_ids">
      <doc xml:space="preserve">Reads /usr/share/xsessions and other relevant places for possible sessions
to log into and returns the complete list.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a %NULL terminated list of session ids</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_session_name_and_description"
              c:identifier="gdm_get_session_name_and_description">
      <doc xml:space="preserve">Takes an xsession id and returns the name and comment about it.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">The session name if found, or %NULL otherwise</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve">an id from gdm_get_session_ids()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="description"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">optional returned session description</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="goto_login_session_sync"
              c:identifier="gdm_goto_login_session_sync"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_interface_info"
              c:identifier="gdm_greeter_interface_info"
              moved-to="Greeter.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="greeter_override_properties"
              c:identifier="gdm_greeter_override_properties"
              moved-to="Greeter.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="gdm_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="gdm_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="remote_greeter_interface_info"
              c:identifier="gdm_remote_greeter_interface_info"
              moved-to="RemoteGreeter.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="remote_greeter_override_properties"
              c:identifier="gdm_remote_greeter_override_properties"
              moved-to="RemoteGreeter.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_choice_list_interface_info"
              c:identifier="gdm_user_verifier_choice_list_interface_info"
              moved-to="UserVerifierChoiceList.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_choice_list_override_properties"
              c:identifier="gdm_user_verifier_choice_list_override_properties"
              moved-to="UserVerifierChoiceList.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_interface_info"
              c:identifier="gdm_user_verifier_interface_info"
              moved-to="UserVerifier.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_override_properties"
              c:identifier="gdm_user_verifier_override_properties"
              moved-to="UserVerifier.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="worker_manager_interface_info"
              c:identifier="gdm_worker_manager_interface_info"
              moved-to="WorkerManager.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="worker_manager_override_properties"
              c:identifier="gdm_worker_manager_override_properties"
              moved-to="WorkerManager.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
