<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Gdm"
             version="1.0"
             shared-library="libgdm.so.1"
             c:identifier-prefixes="Gdm"
             c:symbol-prefixes="gdm">
    <interface name="Chooser"
               c:symbol-prefix="chooser"
               c:type="GdmChooser"
               glib:type-name="GdmChooser"
               glib:get-type="gdm_chooser_get_type"
               glib:type-struct="ChooserIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8894">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1423"/>
      <function name="interface_info"
                c:identifier="gdm_chooser_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8863">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1431"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8868">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_chooser_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8876">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1432"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8884">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8878">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8879">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1414"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_hostname">
        <source-position filename="gdm-client-glue.h" line="1418"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_chooser_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9061">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_disconnect_finish() to get the result of the operation.

See gdm_chooser_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1465"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9063">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9064">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9065">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9066">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_chooser_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9091">Finishes an operation started with gdm_chooser_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1471"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9099">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9093">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9094">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_chooser_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9118">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1476"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9128">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9120">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9121">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname"
              c:identifier="gdm_chooser_call_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8963">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_select_hostname_finish() to get the result of the operation.

See gdm_chooser_call_select_hostname_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1447"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8965">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8966">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8967">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8968">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8969">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_finish"
              c:identifier="gdm_chooser_call_select_hostname_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8996">Finishes an operation started with gdm_chooser_call_select_hostname().</doc>
        <source-position filename="gdm-client-glue.h" line="1454"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9004">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8998">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8999">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_select_hostname().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_sync"
              c:identifier="gdm_chooser_call_select_hostname_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9023">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_select_hostname() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1459"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9034">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9025">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9026">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9027">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_chooser_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9171">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9173">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9174">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_hostname"
              c:identifier="gdm_chooser_complete_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9153">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9155">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9156">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8939">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8948">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8942">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-hostname" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8916">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_select_hostname() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8926">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8919">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8920">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ChooserIface"
            c:type="GdmChooserIface"
            glib:is-gtype-struct-for="Chooser">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8900">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1423"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8902">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1414"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_hostname">
        <callback name="handle_select_hostname">
          <source-position filename="gdm-client-glue.h" line="1418"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ChooserProxy"
           c:symbol-prefix="chooser_proxy"
           c:type="GdmChooserProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmChooserProxy"
           glib:get-type="gdm_chooser_proxy_get_type"
           glib:type-struct="ChooserProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9191">The #GdmChooserProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1506"/>
      <implements name="Chooser"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_chooser_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9382">Finishes an operation started with gdm_chooser_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1522"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9389">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9384">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_chooser_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9472">Finishes an operation started with gdm_chooser_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1541"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9479">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9474">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_chooser_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9497">Like gdm_chooser_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1544"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9512">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9499">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9500">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9501">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9502">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9503">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_chooser_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9407">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1525"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9422">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9409">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9410">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9411">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9412">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9413">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_chooser_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9352">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_finish() to get the result of the operation.

See gdm_chooser_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9354">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9355">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9356">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9357">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9358">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9359">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9360">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_chooser_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9442">Like gdm_chooser_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_chooser_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1533"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9444">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9445">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9446">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9447">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9448">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9449">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9450">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserProxyPrivate" c:type="GdmChooserProxyPrivate*"/>
      </field>
    </class>
    <record name="ChooserProxyClass"
            c:type="GdmChooserProxyClass"
            glib:is-gtype-struct-for="ChooserProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9197">Class structure for #GdmChooserProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1506"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9199">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ChooserProxyPrivate"
            c:type="GdmChooserProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1494"/>
    </record>
    <class name="ChooserSkeleton"
           c:symbol-prefix="chooser_skeleton"
           c:type="GdmChooserSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmChooserSkeleton"
           glib:get-type="gdm_chooser_skeleton_get_type"
           glib:type-struct="ChooserSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9534">The #GdmChooserSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1576"/>
      <implements name="Chooser"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_chooser_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9805">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1584"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9810">The skeleton object.</doc>
          <type name="ChooserSkeleton" c:type="GdmChooser*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserSkeletonPrivate"
              c:type="GdmChooserSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ChooserSkeletonClass"
            c:type="GdmChooserSkeletonClass"
            glib:is-gtype-struct-for="ChooserSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9540">Class structure for #GdmChooserSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1576"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9542">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ChooserSkeletonPrivate"
            c:type="GdmChooserSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1564"/>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="GdmClient"
           parent="GObject.Object"
           glib:type-name="GdmClient"
           glib:get-type="gdm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="gdm-client.h" line="49"/>
      <constructor name="new" c:identifier="gdm_client_new">
        <source-position filename="gdm-client.h" line="60"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="GdmClient*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="gdm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_chooser" c:identifier="gdm_client_get_chooser">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1307">Gets a #GdmChooser object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1309">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1312">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1310">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1311">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_finish"
              c:identifier="gdm_client_get_chooser_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1346">Finishes an operation started with
gdm_client_get_chooser().</doc>
        <source-position filename="gdm-client.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1355">a #GdmChooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1348">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1349">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_sync"
              c:identifier="gdm_client_get_chooser_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1382">Gets a #GdmChooser object that can be used
to do do various XDMCP chooser related tasks, such
as selecting a host or disconnecting.</doc>
        <source-position filename="gdm-client.h" line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1392">#GdmChooser or %NULL if caller is not a chooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1384">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1385">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter" c:identifier="gdm_client_get_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="969">Gets a #GdmGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="971">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="974">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="972">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="973">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_finish"
              c:identifier="gdm_client_get_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1008">Finishes an operation started with
gdm_client_get_greeter().</doc>
        <source-position filename="gdm-client.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1017">a #GdmGreeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1010">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1011">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_sync"
              c:identifier="gdm_client_get_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1044">Gets a #GdmGreeter object that can be used
to do do various login screen related tasks, such
as selecting a users session, and starting that
session.</doc>
        <source-position filename="gdm-client.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1055">#GdmGreeter or %NULL if caller is not a greeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1046">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1047">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter"
              c:identifier="gdm_client_get_remote_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1139">Gets a #GdmRemoteGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1141">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1144">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1142">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1143">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_finish"
              c:identifier="gdm_client_get_remote_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1178">Finishes an operation started with
gdm_client_get_remote_greeter().</doc>
        <source-position filename="gdm-client.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1187">a #GdmRemoteGreeter</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1180">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1181">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_sync"
              c:identifier="gdm_client_get_remote_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1214">Gets a #GdmRemoteGreeter object that can be used
to do do various remote login screen related tasks,
such as disconnecting.</doc>
        <source-position filename="gdm-client.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1224">#GdmRemoteGreeter or %NULL if caller is not remote</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1216">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1217">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier"
              c:identifier="gdm_client_get_user_verifier">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="805">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="807">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="810">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="808">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="809">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_choice_list"
              c:identifier="gdm_client_get_user_verifier_choice_list">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="880">Gets a #GdmUserVerifierChoiceList object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="887">#GdmUserVerifierChoiceList or %NULL if user
verifier isn't yet fetched, or daemon doesn't support choice lists</doc>
          <type name="UserVerifierChoiceList"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="882">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_finish"
              c:identifier="gdm_client_get_user_verifier_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="844">Finishes an operation started with
gdm_client_get_user_verifier().</doc>
        <source-position filename="gdm-client.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="853">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="846">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="847">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_sync"
              c:identifier="gdm_client_get_user_verifier_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="703">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="712">#GdmUserVerifier or %NULL if not connected</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="705">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="706">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel"
              c:identifier="gdm_client_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="642">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user.</doc>
        <source-position filename="gdm-client.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="644">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="645">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="648">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="646">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="647">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_finish"
              c:identifier="gdm_client_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="682">Finishes an operation started with
gdm_client_open_reauthentication_channel().</doc>
        <source-position filename="gdm-client.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="691">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="684">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="685">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_sync"
              c:identifier="gdm_client_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="571">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user. Free with
g_object_unref to close reauthentication channel.</doc>
        <source-position filename="gdm-client.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="582">#GdmUserVerifier or %NULL if @username is not
already logged in.</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="573">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="574">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="575">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_extensions"
              c:identifier="gdm_client_set_enabled_extensions">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1501">Enables GDM's pam extensions.  Currently, only
org.gnome.DisplayManager.UserVerifier.ChoiceList is supported.</doc>
        <source-position filename="gdm-client.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1503">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1504">a list of extensions</doc>
            <array c:type="const char* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClientPrivate" c:type="GdmClientPrivate*"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="GdmClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="gdm-client.h" line="49"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientError" c:type="GdmClientError">
      <source-position filename="gdm-client.h" line="55"/>
      <member name="client_error_generic"
              value="0"
              c:identifier="GDM_CLIENT_ERROR_GENERIC">
      </member>
    </enumeration>
    <record name="ClientPrivate" c:type="GdmClientPrivate" disguised="1">
      <source-position filename="gdm-client.h" line="37"/>
    </record>
    <interface name="Greeter"
               c:symbol-prefix="greeter"
               c:type="GdmGreeter"
               glib:type-name="GdmGreeter"
               glib:get-type="gdm_greeter_get_type"
               glib:type-struct="GreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6177">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="967"/>
      <function name="interface_info"
                c:identifier="gdm_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6146">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="975"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6151">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6159">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="976"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6167">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6161">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6162">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="default_language_name_changed">
        <source-position filename="gdm-client-glue.h" line="942"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="default_session_name_changed">
        <source-position filename="gdm-client-glue.h" line="946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_auto_login">
        <source-position filename="gdm-client-glue.h" line="917"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_timed_login_details">
        <source-position filename="gdm-client-glue.h" line="922"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_session">
        <source-position filename="gdm-client-glue.h" line="926"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_user">
        <source-position filename="gdm-client-glue.h" line="931"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_session_when_ready">
        <source-position filename="gdm-client-glue.h" line="936"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthenticated">
        <source-position filename="gdm-client-glue.h" line="950"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selected_user_changed">
        <source-position filename="gdm-client-glue.h" line="954"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_opened">
        <source-position filename="gdm-client-glue.h" line="958"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timed_login_requested">
        <source-position filename="gdm-client-glue.h" line="962"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_begin_auto_login"
              c:identifier="gdm_greeter_call_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6729">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_begin_auto_login_finish() to get the result of the operation.

See gdm_greeter_call_begin_auto_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1070"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6731">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6732">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6733">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6734">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6735">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_finish"
              c:identifier="gdm_greeter_call_begin_auto_login_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6762">Finishes an operation started with gdm_greeter_call_begin_auto_login().</doc>
        <source-position filename="gdm-client-glue.h" line="1077"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6770">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6764">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6765">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_begin_auto_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_sync"
              c:identifier="gdm_greeter_call_begin_auto_login_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6789">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_begin_auto_login() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1082"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6800">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6791">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6792">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6793">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details"
              c:identifier="gdm_greeter_call_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6827">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_get_timed_login_details_finish() to get the result of the operation.

See gdm_greeter_call_get_timed_login_details_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1088"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6829">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6830">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6831">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6832">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_finish"
              c:identifier="gdm_greeter_call_get_timed_login_details_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6857">Finishes an operation started with gdm_greeter_call_get_timed_login_details().</doc>
        <source-position filename="gdm-client-glue.h" line="1094"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6868">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6859">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6860">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6861">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6862">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6863">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_get_timed_login_details().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_sync"
              c:identifier="gdm_greeter_call_get_timed_login_details_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6893">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_get_timed_login_details() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6906">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6895">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6896">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6897">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6898">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6899">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session"
              c:identifier="gdm_greeter_call_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6533">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_session_finish() to get the result of the operation.

See gdm_greeter_call_select_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1034"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6535">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6536">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6537">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6538">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6539">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_finish"
              c:identifier="gdm_greeter_call_select_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6566">Finishes an operation started with gdm_greeter_call_select_session().</doc>
        <source-position filename="gdm-client-glue.h" line="1041"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6574">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6568">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6569">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_sync"
              c:identifier="gdm_greeter_call_select_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6593">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1046"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6604">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6595">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6596">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6597">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user"
              c:identifier="gdm_greeter_call_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6631">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_user_finish() to get the result of the operation.

See gdm_greeter_call_select_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1052"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6633">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6634">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6635">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6636">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6637">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_finish"
              c:identifier="gdm_greeter_call_select_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6664">Finishes an operation started with gdm_greeter_call_select_user().</doc>
        <source-position filename="gdm-client-glue.h" line="1059"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6672">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6666">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6667">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_sync"
              c:identifier="gdm_greeter_call_select_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6691">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1064"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6702">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6693">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6694">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6695">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready"
              c:identifier="gdm_greeter_call_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6937">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_start_session_when_ready_finish() to get the result of the operation.

See gdm_greeter_call_start_session_when_ready_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6939">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6940">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6941">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6942">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6943">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6944">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_finish"
              c:identifier="gdm_greeter_call_start_session_when_ready_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6973">Finishes an operation started with gdm_greeter_call_start_session_when_ready().</doc>
        <source-position filename="gdm-client-glue.h" line="1118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6981">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6975">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6976">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_start_session_when_ready().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_sync"
              c:identifier="gdm_greeter_call_start_session_when_ready_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7000">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_start_session_when_ready() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7012">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7002">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7003">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7004">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7005">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_auto_login"
              c:identifier="gdm_greeter_complete_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7077">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="988"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7079">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7080">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_timed_login_details"
              c:identifier="gdm_greeter_complete_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7095">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7097">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7098">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7099">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7100">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7101">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_session"
              c:identifier="gdm_greeter_complete_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7041">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="980"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7043">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7044">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_user"
              c:identifier="gdm_greeter_complete_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7059">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="984"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7061">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7062">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_session_when_ready"
              c:identifier="gdm_greeter_complete_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7122">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="999"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7124">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7125">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_language_name_changed"
              c:identifier="gdm_greeter_emit_default_language_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6456">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6458">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6459">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_session_name_changed"
              c:identifier="gdm_greeter_emit_default_session_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6471">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1014"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6473">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6474">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthenticated"
              c:identifier="gdm_greeter_emit_reauthenticated">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6518">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1027"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6520">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6521">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_selected_user_changed"
              c:identifier="gdm_greeter_emit_selected_user_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6441">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1006"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6443">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6444">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_session_opened"
              c:identifier="gdm_greeter_emit_session_opened">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6503">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1023"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6505">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6506">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_timed_login_requested"
              c:identifier="gdm_greeter_emit_timed_login_requested">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6486">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1018"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6488">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6489">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6490">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="default-language-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6343">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6346">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="default-session-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6362">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6365">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-auto-login" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6254">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_begin_auto_login() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6264">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6257">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6258">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-timed-login-details" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6277">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_get_timed_login_details() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6286">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6280">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6208">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6218">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6211">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6212">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6231">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6241">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6234">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6235">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-session-when-ready" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6299">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_start_session_when_ready() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6310">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6302">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6303">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6304">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthenticated" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6420">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6423">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected-user-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6324">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6327">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-opened" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6401">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6404">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timed-login-requested" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6381">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6384">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6385">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterIface"
            c:type="GdmGreeterIface"
            glib:is-gtype-struct-for="Greeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6183">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="967"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6185">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_begin_auto_login">
        <callback name="handle_begin_auto_login">
          <source-position filename="gdm-client-glue.h" line="917"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_timed_login_details">
        <callback name="handle_get_timed_login_details">
          <source-position filename="gdm-client-glue.h" line="922"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_session">
        <callback name="handle_select_session">
          <source-position filename="gdm-client-glue.h" line="926"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_user">
        <callback name="handle_select_user">
          <source-position filename="gdm-client-glue.h" line="931"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_session_when_ready">
        <callback name="handle_start_session_when_ready">
          <source-position filename="gdm-client-glue.h" line="936"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_should_start_session"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_language_name_changed">
        <callback name="default_language_name_changed">
          <source-position filename="gdm-client-glue.h" line="942"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_language_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_session_name_changed">
        <callback name="default_session_name_changed">
          <source-position filename="gdm-client-glue.h" line="946"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_session_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthenticated">
        <callback name="reauthenticated">
          <source-position filename="gdm-client-glue.h" line="950"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selected_user_changed">
        <callback name="selected_user_changed">
          <source-position filename="gdm-client-glue.h" line="954"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_opened">
        <callback name="session_opened">
          <source-position filename="gdm-client-glue.h" line="958"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timed_login_requested">
        <callback name="timed_login_requested">
          <source-position filename="gdm-client-glue.h" line="962"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_delay" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterProxy"
           c:symbol-prefix="greeter_proxy"
           c:type="GdmGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmGreeterProxy"
           glib:get-type="gdm_greeter_proxy_get_type"
           glib:type-struct="GreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7142">The #GdmGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1155"/>
      <implements name="Greeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7333">Finishes an operation started with gdm_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7340">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7335">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7423">Finishes an operation started with gdm_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1190"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7430">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7425">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7448">Like gdm_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1193"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7463">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7450">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7451">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7452">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7453">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7454">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7358">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7373">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7360">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7361">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7362">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7363">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7364">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7303">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_finish() to get the result of the operation.

See gdm_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7305">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7306">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7307">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7308">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7309">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7310">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7311">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7393">Like gdm_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7395">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7396">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7397">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7398">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7399">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7400">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7401">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterProxyPrivate" c:type="GdmGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="GreeterProxyClass"
            c:type="GdmGreeterProxyClass"
            glib:is-gtype-struct-for="GreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7148">Class structure for #GdmGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1155"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7150">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GreeterProxyPrivate"
            c:type="GdmGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1143"/>
    </record>
    <class name="GreeterSkeleton"
           c:symbol-prefix="greeter_skeleton"
           c:type="GdmGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmGreeterSkeleton"
           glib:get-type="gdm_greeter_skeleton_get_type"
           glib:type-struct="GreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7485">The #GdmGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1225"/>
      <implements name="Greeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7908">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1233"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7913">The skeleton object.</doc>
          <type name="GreeterSkeleton" c:type="GdmGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterSkeletonPrivate"
              c:type="GdmGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GreeterSkeletonClass"
            c:type="GdmGreeterSkeletonClass"
            glib:is-gtype-struct-for="GreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7491">Class structure for #GdmGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1225"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7493">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GreeterSkeletonPrivate"
            c:type="GdmGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1213"/>
    </record>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="GdmManager"
               glib:type-name="GdmManager"
               glib:get-type="gdm_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="347">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="49"/>
      <function name="interface_info"
                c:identifier="gdm_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="315">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-manager-glue.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="320">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="328">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-manager-glue.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="336">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="330">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="331">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="451">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="gdm-manager-glue.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="461">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="453">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_reauthentication_channel">
        <source-position filename="gdm-manager-glue.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_session">
        <source-position filename="gdm-manager-glue.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_display">
        <source-position filename="gdm-manager-glue.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open_reauthentication_channel"
              c:identifier="gdm_manager_call_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="698">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_reauthentication_channel_finish() to get the result of the operation.

See gdm_manager_call_open_reauthentication_channel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="700">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="701">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="702">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="703">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="704">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_finish"
              c:identifier="gdm_manager_call_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="731">Finishes an operation started with gdm_manager_call_open_reauthentication_channel().</doc>
        <source-position filename="gdm-manager-glue.h" line="122"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="740">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="733">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="734">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="735">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_reauthentication_channel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_sync"
              c:identifier="gdm_manager_call_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="761">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_reauthentication_channel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="128"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="773">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="763">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="764">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="765">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="766">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session"
              c:identifier="gdm_manager_call_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="600">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_session_finish() to get the result of the operation.

See gdm_manager_call_open_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="602">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="604">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="605">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_finish"
              c:identifier="gdm_manager_call_open_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="630">Finishes an operation started with gdm_manager_call_open_session().</doc>
        <source-position filename="gdm-manager-glue.h" line="103"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="639">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="632">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="633">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="634">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_sync"
              c:identifier="gdm_manager_call_open_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="660">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="109"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="671">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="662">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="663">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="664">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display"
              c:identifier="gdm_manager_call_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="502">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_register_display_finish() to get the result of the operation.

See gdm_manager_call_register_display_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="504">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="505">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="506">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="507">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="508">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_finish"
              c:identifier="gdm_manager_call_register_display_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="535">Finishes an operation started with gdm_manager_call_register_display().</doc>
        <source-position filename="gdm-manager-glue.h" line="86"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="543">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="537">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="538">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_display().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_sync"
              c:identifier="gdm_manager_call_register_display_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="562">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_display() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="91"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="573">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="564">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="565">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="566">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_reauthentication_channel"
              c:identifier="gdm_manager_complete_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="841">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="843">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="844">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="845">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_session"
              c:identifier="gdm_manager_complete_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="820">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="822">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="823">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="824">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_display"
              c:identifier="gdm_manager_complete_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="802">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="804">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="805">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="gdm_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="469">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="477">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="471">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gdm_manager_get_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="451">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="gdm-manager-glue.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="461">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="453">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gdm_manager_set_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="487">Sets the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="489">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="490">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="440">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-open-reauthentication-channel" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="416">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_reauthentication_channel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="426">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="419">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="420">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="394">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="403">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="397">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-display" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="371">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="381">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="374">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="375">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="GdmManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="353">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="49"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="355">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open_reauthentication_channel">
        <callback name="handle_open_reauthentication_channel">
          <source-position filename="gdm-manager-glue.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_session">
        <callback name="handle_open_session">
          <source-position filename="gdm-manager-glue.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_display">
        <callback name="handle_register_display">
          <source-position filename="gdm-manager-glue.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="gdm-manager-glue.h" line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="461">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdm-manager-glue.c"
                   line="453">A #GdmManager.</doc>
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="GdmManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmManagerProxy"
           glib:get-type="gdm_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="864">The #GdmManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="166"/>
      <implements name="Manager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1124">Finishes an operation started with gdm_manager_proxy_new().</doc>
        <source-position filename="gdm-manager-glue.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1131">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1126">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1214">Finishes an operation started with gdm_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-manager-glue.h" line="201"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1221">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1216">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1239">Like gdm_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1254">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1241">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1242">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1243">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1244">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1245">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1149">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1164">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1151">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1152">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1153">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1154">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1155">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1094">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_finish() to get the result of the operation.

See gdm_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1096">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1097">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1098">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1099">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1100">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1101">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1102">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1184">Like gdm_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1186">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1187">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1188">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1189">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1190">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1191">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1192">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="GdmManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="GdmManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="870">Class structure for #GdmManagerProxy.</doc>
      <source-position filename="gdm-manager-glue.h" line="166"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="872">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="GdmManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="154"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="GdmManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmManagerSkeleton"
           glib:get-type="gdm_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1276">The #GdmManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="236"/>
      <implements name="Manager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1726">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
        <source-position filename="gdm-manager-glue.h" line="244"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1731">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="GdmManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="GdmManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="GdmManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1282">Class structure for #GdmManagerSkeleton.</doc>
      <source-position filename="gdm-manager-glue.h" line="236"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1284">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="GdmManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="224"/>
    </record>
    <interface name="RemoteGreeter"
               c:symbol-prefix="remote_greeter"
               c:type="GdmRemoteGreeter"
               glib:type-name="GdmRemoteGreeter"
               glib:get-type="gdm_remote_greeter_get_type"
               glib:type-struct="RemoteGreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8000">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1256"/>
      <function name="interface_info"
                c:identifier="gdm_remote_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7969">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1264"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7974">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_remote_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7982">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7990">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7984">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7985">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1252"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_remote_greeter_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8045">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_call_disconnect_finish() to get the result of the operation.

See gdm_remote_greeter_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8047">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8048">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8049">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8050">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_remote_greeter_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8075">Finishes an operation started with gdm_remote_greeter_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8083">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8077">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8078">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_remote_greeter_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8102">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_remote_greeter_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1287"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8112">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8104">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8105">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_remote_greeter_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8137">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8139">A #GdmRemoteGreeter.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8140">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8021">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_remote_greeter_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8030">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8024">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="RemoteGreeterIface"
            c:type="GdmRemoteGreeterIface"
            glib:is-gtype-struct-for="RemoteGreeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8006">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1256"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8008">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1252"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RemoteGreeterProxy"
           c:symbol-prefix="remote_greeter_proxy"
           c:type="GdmRemoteGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmRemoteGreeterProxy"
           glib:get-type="gdm_remote_greeter_proxy_get_type"
           glib:type-struct="RemoteGreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8157">The #GdmRemoteGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1317"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8348">Finishes an operation started with gdm_remote_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1333"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8355">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8350">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8438">Finishes an operation started with gdm_remote_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1352"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8445">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8440">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8463">Like gdm_remote_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1355"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8478">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8465">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8466">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8467">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8468">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8469">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8373">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1336"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8388">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8375">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8376">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8377">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8378">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8379">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_remote_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8318">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1325"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8320">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8321">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8322">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8323">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8324">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8325">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8326">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_remote_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8408">Like gdm_remote_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8410">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8411">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8412">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8413">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8414">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8415">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8416">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterProxyPrivate"
              c:type="GdmRemoteGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterProxyClass"
            c:type="GdmRemoteGreeterProxyClass"
            glib:is-gtype-struct-for="RemoteGreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8163">Class structure for #GdmRemoteGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1317"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8165">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RemoteGreeterProxyPrivate"
            c:type="GdmRemoteGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1305"/>
    </record>
    <class name="RemoteGreeterSkeleton"
           c:symbol-prefix="remote_greeter_skeleton"
           c:type="GdmRemoteGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmRemoteGreeterSkeleton"
           glib:get-type="gdm_remote_greeter_skeleton_get_type"
           glib:type-struct="RemoteGreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8500">The #GdmRemoteGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1387"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_remote_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8771">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1395"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8776">The skeleton object.</doc>
          <type name="RemoteGreeterSkeleton" c:type="GdmRemoteGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterSkeletonPrivate"
              c:type="GdmRemoteGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterSkeletonClass"
            c:type="GdmRemoteGreeterSkeletonClass"
            glib:is-gtype-struct-for="RemoteGreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8506">Class structure for #GdmRemoteGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1387"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8508">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RemoteGreeterSkeletonPrivate"
            c:type="GdmRemoteGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1375"/>
    </record>
    <interface name="UserVerifier"
               c:symbol-prefix="user_verifier"
               c:type="GdmUserVerifier"
               glib:type-name="GdmUserVerifier"
               glib:get-type="gdm_user_verifier_get_type"
               glib:type-struct="UserVerifierIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2656">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="431"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2625">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="439"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2630">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2638">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="440"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2646">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2640">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2641">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="conversation_started">
        <source-position filename="gdm-client-glue.h" line="383"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="conversation_stopped">
        <source-position filename="gdm-client-glue.h" line="387"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_answer_query">
        <source-position filename="gdm-client-glue.h" line="357"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification">
        <source-position filename="gdm-client-glue.h" line="363"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification_for_user">
        <source-position filename="gdm-client-glue.h" line="368"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="gdm-client-glue.h" line="374"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_extensions">
        <source-position filename="gdm-client-glue.h" line="378"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info">
        <source-position filename="gdm-client-glue.h" line="391"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info_query">
        <source-position filename="gdm-client-glue.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="problem">
        <source-position filename="gdm-client-glue.h" line="401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthentication_started">
        <source-position filename="gdm-client-glue.h" line="406"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <source-position filename="gdm-client-glue.h" line="410"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secret_info_query">
        <source-position filename="gdm-client-glue.h" line="413"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_unavailable">
        <source-position filename="gdm-client-glue.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_complete">
        <source-position filename="gdm-client-glue.h" line="423"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_failed">
        <source-position filename="gdm-client-glue.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_answer_query"
              c:identifier="gdm_user_verifier_call_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3497">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_answer_query_finish() to get the result of the operation.

See gdm_user_verifier_call_answer_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="574"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3499">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3500">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3501">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3502">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3503">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3504">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_finish"
              c:identifier="gdm_user_verifier_call_answer_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3533">Finishes an operation started with gdm_user_verifier_call_answer_query().</doc>
        <source-position filename="gdm-client-glue.h" line="582"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3541">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3535">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3536">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_answer_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_sync"
              c:identifier="gdm_user_verifier_call_answer_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3560">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_answer_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="587"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3572">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3562">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3563">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3564">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3565">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification"
              c:identifier="gdm_user_verifier_call_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3295">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3297">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3298">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3299">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3300">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3301">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3328">Finishes an operation started with gdm_user_verifier_call_begin_verification().</doc>
        <source-position filename="gdm-client-glue.h" line="543"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3336">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3330">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3331">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3393">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_for_user_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_for_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="554"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3395">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3396">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3397">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3398">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3399">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3400">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3429">Finishes an operation started with gdm_user_verifier_call_begin_verification_for_user().</doc>
        <source-position filename="gdm-client-glue.h" line="562"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3437">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3431">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3432">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification_for_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3456">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification_for_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="567"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3468">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3458">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3459">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3460">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3355">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="548"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3366">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3357">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3358">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel" c:identifier="gdm_user_verifier_call_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3601">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_cancel_finish() to get the result of the operation.

See gdm_user_verifier_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="594"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3603">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3604">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3605">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3606">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="gdm_user_verifier_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3631">Finishes an operation started with gdm_user_verifier_call_cancel().</doc>
        <source-position filename="gdm-client-glue.h" line="600"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3639">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3633">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3634">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="gdm_user_verifier_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3658">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="605"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3668">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3660">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3661">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions"
              c:identifier="gdm_user_verifier_call_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3197">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_enable_extensions_finish() to get the result of the operation.

See gdm_user_verifier_call_enable_extensions_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="518"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3199">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3200">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3201">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3202">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3203">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_finish"
              c:identifier="gdm_user_verifier_call_enable_extensions_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3230">Finishes an operation started with gdm_user_verifier_call_enable_extensions().</doc>
        <source-position filename="gdm-client-glue.h" line="525"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3238">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3232">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3233">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_enable_extensions().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_sync"
              c:identifier="gdm_user_verifier_call_enable_extensions_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3257">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_enable_extensions() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="530"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3268">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3259">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3260">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3261">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_answer_query"
              c:identifier="gdm_user_verifier_complete_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3747">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="456"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3749">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3750">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification"
              c:identifier="gdm_user_verifier_complete_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3711">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="448"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3713">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3714">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification_for_user"
              c:identifier="gdm_user_verifier_complete_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3729">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3731">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3732">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="gdm_user_verifier_complete_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3765">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="460"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3767">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3768">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_extensions"
              c:identifier="gdm_user_verifier_complete_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3693">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="444"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3695">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3696">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_started"
              c:identifier="gdm_user_verifier_emit_conversation_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3024">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="467"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3026">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3027">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_stopped"
              c:identifier="gdm_user_verifier_emit_conversation_stopped">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3039">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="471"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3041">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3042">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info" c:identifier="gdm_user_verifier_emit_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3069">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="479"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3071">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3072">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3073">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info_query"
              c:identifier="gdm_user_verifier_emit_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3103">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3105">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3106">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3107">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_problem"
              c:identifier="gdm_user_verifier_emit_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3086">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3088">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3089">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3090">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthentication_started"
              c:identifier="gdm_user_verifier_emit_reauthentication_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3054">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="475"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3056">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3057">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reset" c:identifier="gdm_user_verifier_emit_reset">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3137">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="499"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3139">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_secret_info_query"
              c:identifier="gdm_user_verifier_emit_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3120">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="494"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3122">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3123">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3124">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_unavailable"
              c:identifier="gdm_user_verifier_emit_service_unavailable">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3150">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="502"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3152">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3153">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3154">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_complete"
              c:identifier="gdm_user_verifier_emit_verification_complete">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3182">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3184">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3185">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_failed"
              c:identifier="gdm_user_verifier_emit_verification_failed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3167">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3169">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3170">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="conversation-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2809">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2812">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="conversation-stopped" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2828">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2831">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-answer-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2762">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_answer_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2773">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2765">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2766">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2767">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2715">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2725">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2718">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2719">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification-for-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2738">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification_for_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2749">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2741">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2742">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2743">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2786">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2795">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2789">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-extensions" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2692">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_enable_extensions() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2702">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2695">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2696">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2866">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2869">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2870">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2906">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2909">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2910">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2886">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2889">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2890">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthentication-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2847">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2850">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2946">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2926">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2929">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2930">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-unavailable" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2964">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2967">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2968">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-complete" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3003">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3006">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-failed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2984">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2987">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="UserVerifierChoiceList"
               c:symbol-prefix="user_verifier_choice_list"
               c:type="GdmUserVerifierChoiceList"
               glib:type-name="GdmUserVerifierChoiceList"
               glib:get-type="gdm_user_verifier_choice_list_get_type"
               glib:type-struct="UserVerifierChoiceListIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4861">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="745"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_choice_list_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4830">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="753"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4835">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_choice_list_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4843">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="754"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4851">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4845">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4846">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="choice_query">
        <source-position filename="gdm-client-glue.h" line="739"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_choice">
        <source-position filename="gdm-client-glue.h" line="733"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_select_choice"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4950">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_call_select_choice_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_call_select_choice_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="774"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4952">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4953">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4954">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4956">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4957">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_finish"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4986">Finishes an operation started with gdm_user_verifier_choice_list_call_select_choice().</doc>
        <source-position filename="gdm-client-glue.h" line="782"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4994">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4988">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4989">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_call_select_choice().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_sync"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5013">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_call_select_choice() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="787"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5025">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5015">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5016">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5017">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5018">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_choice"
              c:identifier="gdm_user_verifier_choice_list_complete_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5054">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="758"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5056">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5057">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_choice_query"
              c:identifier="gdm_user_verifier_choice_list_emit_choice_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4931">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="765"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4933">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4934">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4935">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4936">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="choice-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4908">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4911">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4912">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4913">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-choice" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4883">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_choice_list_complete_select_choice() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4894">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4886">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4887">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4888">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierChoiceListIface"
            c:type="GdmUserVerifierChoiceListIface"
            glib:is-gtype-struct-for="UserVerifierChoiceList">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4867">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="745"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4869">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_select_choice">
        <callback name="handle_select_choice">
          <source-position filename="gdm-client-glue.h" line="733"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choice" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choice_query">
        <callback name="choice_query">
          <source-position filename="gdm-client-glue.h" line="739"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_list" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierChoiceListProxy"
           c:symbol-prefix="user_verifier_choice_list_proxy"
           c:type="GdmUserVerifierChoiceListProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierChoiceListProxy"
           glib:get-type="gdm_user_verifier_choice_list_proxy_get_type"
           glib:type-struct="UserVerifierChoiceListProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5074">The #GdmUserVerifierChoiceListProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="819"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5265">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="835"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5272">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5267">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5355">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="854"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5362">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5357">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5380">Like gdm_user_verifier_choice_list_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="857"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5395">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5382">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5383">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5384">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5385">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5386">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5290">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="838"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5305">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5292">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5293">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5294">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5295">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5296">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_choice_list_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5235">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5237">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5238">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5239">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5240">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5241">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5242">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5243">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5325">Like gdm_user_verifier_choice_list_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="846"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5327">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5328">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5329">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5330">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5331">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5332">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5333">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListProxyPrivate"
              c:type="GdmUserVerifierChoiceListProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListProxyClass"
            c:type="GdmUserVerifierChoiceListProxyClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5080">Class structure for #GdmUserVerifierChoiceListProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="819"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5082">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListProxyPrivate"
            c:type="GdmUserVerifierChoiceListProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="807"/>
    </record>
    <class name="UserVerifierChoiceListSkeleton"
           c:symbol-prefix="user_verifier_choice_list_skeleton"
           c:type="GdmUserVerifierChoiceListSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierChoiceListSkeleton"
           glib:get-type="gdm_user_verifier_choice_list_skeleton_get_type"
           glib:type-struct="UserVerifierChoiceListSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5417">The #GdmUserVerifierChoiceListSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="889"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_choice_list_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5717">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="897"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5722">The skeleton object.</doc>
          <type name="UserVerifierChoiceListSkeleton"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListSkeletonPrivate"
              c:type="GdmUserVerifierChoiceListSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListSkeletonClass"
            c:type="GdmUserVerifierChoiceListSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5423">Class structure for #GdmUserVerifierChoiceListSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="889"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5425">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListSkeletonPrivate"
            c:type="GdmUserVerifierChoiceListSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="877"/>
    </record>
    <record name="UserVerifierIface"
            c:type="GdmUserVerifierIface"
            glib:is-gtype-struct-for="UserVerifier">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2662">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="431"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2664">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_answer_query">
        <callback name="handle_answer_query">
          <source-position filename="gdm-client-glue.h" line="357"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_answer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification">
        <callback name="handle_begin_verification">
          <source-position filename="gdm-client-glue.h" line="363"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification_for_user">
        <callback name="handle_begin_verification_for_user">
          <source-position filename="gdm-client-glue.h" line="368"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="gdm-client-glue.h" line="374"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_extensions">
        <callback name="handle_enable_extensions">
          <source-position filename="gdm-client-glue.h" line="378"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_extensions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_started">
        <callback name="conversation_started">
          <source-position filename="gdm-client-glue.h" line="383"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_stopped">
        <callback name="conversation_stopped">
          <source-position filename="gdm-client-glue.h" line="387"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info">
        <callback name="info">
          <source-position filename="gdm-client-glue.h" line="391"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info_query">
        <callback name="info_query">
          <source-position filename="gdm-client-glue.h" line="396"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="problem">
        <callback name="problem">
          <source-position filename="gdm-client-glue.h" line="401"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthentication_started">
        <callback name="reauthentication_started">
          <source-position filename="gdm-client-glue.h" line="406"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_pid_of_caller" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <source-position filename="gdm-client-glue.h" line="410"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secret_info_query">
        <callback name="secret_info_query">
          <source-position filename="gdm-client-glue.h" line="413"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unavailable">
        <callback name="service_unavailable">
          <source-position filename="gdm-client-glue.h" line="418"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_complete">
        <callback name="verification_complete">
          <source-position filename="gdm-client-glue.h" line="423"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_failed">
        <callback name="verification_failed">
          <source-position filename="gdm-client-glue.h" line="427"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierProxy"
           c:symbol-prefix="user_verifier_proxy"
           c:type="GdmUserVerifierProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierProxy"
           glib:get-type="gdm_user_verifier_proxy_get_type"
           glib:type-struct="UserVerifierProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3785">The #GdmUserVerifierProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="635"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3976">Finishes an operation started with gdm_user_verifier_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="651"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3983">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3978">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4066">Finishes an operation started with gdm_user_verifier_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="670"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4073">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4068">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4091">Like gdm_user_verifier_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="673"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4106">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4093">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4094">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4095">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4096">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4097">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4001">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="654"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4016">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4003">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4004">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4005">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4006">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4007">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_user_verifier_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3946">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3948">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3949">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3950">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3951">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3952">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3953">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3954">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4036">Like gdm_user_verifier_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="662"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4038">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4039">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4040">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4041">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4042">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4043">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4044">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierProxyPrivate"
              c:type="GdmUserVerifierProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierProxyClass"
            c:type="GdmUserVerifierProxyClass"
            glib:is-gtype-struct-for="UserVerifierProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3791">Class structure for #GdmUserVerifierProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="635"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3793">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierProxyPrivate"
            c:type="GdmUserVerifierProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="623"/>
    </record>
    <class name="UserVerifierSkeleton"
           c:symbol-prefix="user_verifier_skeleton"
           c:type="GdmUserVerifierSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierSkeleton"
           glib:get-type="gdm_user_verifier_skeleton_get_type"
           glib:type-struct="UserVerifierSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4128">The #GdmUserVerifierSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="705"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_user_verifier_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4682">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="713"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4687">The skeleton object.</doc>
          <type name="UserVerifierSkeleton" c:type="GdmUserVerifier*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierSkeletonPrivate"
              c:type="GdmUserVerifierSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierSkeletonClass"
            c:type="GdmUserVerifierSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4134">Class structure for #GdmUserVerifierSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="705"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4136">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierSkeletonPrivate"
            c:type="GdmUserVerifierSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="693"/>
    </record>
    <interface name="WorkerManager"
               c:symbol-prefix="worker_manager"
               c:type="GdmWorkerManager"
               glib:type-name="GdmWorkerManager"
               glib:get-type="gdm_worker_manager_get_type"
               glib:type-struct="WorkerManagerIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="509">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="67"/>
      <function name="interface_info"
                c:identifier="gdm_worker_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="478">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="483">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_worker_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="491">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="499">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="493">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="494">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_choice_list_query">
        <source-position filename="gdm-client-glue.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hello">
        <source-position filename="gdm-client-glue.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info">
        <source-position filename="gdm-client-glue.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info_query">
        <source-position filename="gdm-client-glue.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_problem">
        <source-position filename="gdm-client-glue.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_secret_info_query">
        <source-position filename="gdm-client-glue.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_choice_list_query"
              c:identifier="gdm_worker_manager_call_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1200">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_choice_list_query_finish() to get the result of the operation.

See gdm_worker_manager_call_choice_list_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1202">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1203">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1207">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1208">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_finish"
              c:identifier="gdm_worker_manager_call_choice_list_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1239">Finishes an operation started with gdm_worker_manager_call_choice_list_query().</doc>
        <source-position filename="gdm-client-glue.h" line="219"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1248">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1241">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1242">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1243">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_choice_list_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_sync"
              c:identifier="gdm_worker_manager_call_choice_list_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1269">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_choice_list_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="225"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1283">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1271">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1272">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1273">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1274">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1275">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1276">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello" c:identifier="gdm_worker_manager_call_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="680">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_hello_finish() to get the result of the operation.

See gdm_worker_manager_call_hello_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="682">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="683">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="684">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="685">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_finish"
              c:identifier="gdm_worker_manager_call_hello_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="710">Finishes an operation started with gdm_worker_manager_call_hello().</doc>
        <source-position filename="gdm-client-glue.h" line="116"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="718">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="712">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="713">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_hello().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_sync"
              c:identifier="gdm_worker_manager_call_hello_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="737">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_hello() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="121"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="747">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="739">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="740">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info" c:identifier="gdm_worker_manager_call_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="992">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_finish() to get the result of the operation.

See gdm_worker_manager_call_info_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="994">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="995">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="996">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="997">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="998">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="999">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_finish"
              c:identifier="gdm_worker_manager_call_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1028">Finishes an operation started with gdm_worker_manager_call_info().</doc>
        <source-position filename="gdm-client-glue.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1036">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1030">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1031">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query"
              c:identifier="gdm_worker_manager_call_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="772">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="774">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="775">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="776">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="777">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="778">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="779">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_finish"
              c:identifier="gdm_worker_manager_call_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="808">Finishes an operation started with gdm_worker_manager_call_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="134"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="817">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="810">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="811">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="812">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_sync"
              c:identifier="gdm_worker_manager_call_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="838">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="140"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="851">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="840">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="841">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="842">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="843">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="844">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_sync"
              c:identifier="gdm_worker_manager_call_info_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1055">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="183"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1067">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1057">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1058">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1059">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1060">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem"
              c:identifier="gdm_worker_manager_call_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1096">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_problem_finish() to get the result of the operation.

See gdm_worker_manager_call_problem_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1098">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1099">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1100">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1101">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1102">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1103">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_finish"
              c:identifier="gdm_worker_manager_call_problem_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1132">Finishes an operation started with gdm_worker_manager_call_problem().</doc>
        <source-position filename="gdm-client-glue.h" line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1140">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1134">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1135">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_problem().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_sync"
              c:identifier="gdm_worker_manager_call_problem_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1159">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_problem() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1171">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1161">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1162">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1163">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1164">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query"
              c:identifier="gdm_worker_manager_call_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="882">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_secret_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_secret_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="884">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="885">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="886">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="887">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="888">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="889">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_finish"
              c:identifier="gdm_worker_manager_call_secret_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="918">Finishes an operation started with gdm_worker_manager_call_secret_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="156"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="927">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="920">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="921">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="922">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_secret_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_sync"
              c:identifier="gdm_worker_manager_call_secret_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="948">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_secret_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="162"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="961">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="950">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="951">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="952">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="953">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="954">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_choice_list_query"
              c:identifier="gdm_worker_manager_complete_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1412">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1414">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1415">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1416">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hello"
              c:identifier="gdm_worker_manager_complete_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1316">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1318">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1319">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info"
              c:identifier="gdm_worker_manager_complete_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1376">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1378">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1379">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info_query"
              c:identifier="gdm_worker_manager_complete_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1334">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1336">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1337">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1338">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_problem"
              c:identifier="gdm_worker_manager_complete_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1394">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1396">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1397">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_secret_info_query"
              c:identifier="gdm_worker_manager_complete_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1355">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1357">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1358">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1359">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-choice-list-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="653">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_choice_list_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="665">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="656">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="657">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="658">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="659">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hello" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="535">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_hello() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="544">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="538">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="605">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="616">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="608">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="609">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="610">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="557">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="568">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="560">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="561">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="562">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="629">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_problem() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="640">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="632">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="633">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="634">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="581">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_secret_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="592">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="584">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="585">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="586">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WorkerManagerIface"
            c:type="GdmWorkerManagerIface"
            glib:is-gtype-struct-for="WorkerManager">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="515">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="67"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="517">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_choice_list_query">
        <callback name="handle_choice_list_query">
          <source-position filename="gdm-client-glue.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hello">
        <callback name="handle_hello">
          <source-position filename="gdm-client-glue.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info">
        <callback name="handle_info">
          <source-position filename="gdm-client-glue.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info_query">
        <callback name="handle_info_query">
          <source-position filename="gdm-client-glue.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_problem">
        <callback name="handle_problem">
          <source-position filename="gdm-client-glue.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_secret_info_query">
        <callback name="handle_secret_info_query">
          <source-position filename="gdm-client-glue.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WorkerManagerProxy"
           c:symbol-prefix="worker_manager_proxy"
           c:type="GdmWorkerManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmWorkerManagerProxy"
           glib:get-type="gdm_worker_manager_proxy_get_type"
           glib:type-struct="WorkerManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1435">The #GdmWorkerManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="259"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_worker_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1626">Finishes an operation started with gdm_worker_manager_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="275"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1633">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1628">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1716">Finishes an operation started with gdm_worker_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1723">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1718">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1741">Like gdm_worker_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="297"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1756">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1743">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1744">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1745">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1746">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1747">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_worker_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1651">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="278"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1666">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1653">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1654">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1655">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1656">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1657">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_worker_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1596">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1598">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1599">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1600">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1601">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1602">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1603">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1604">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_worker_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1686">Like gdm_worker_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1688">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1689">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1690">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1691">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1692">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1693">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1694">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerProxyPrivate"
              c:type="GdmWorkerManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerProxyClass"
            c:type="GdmWorkerManagerProxyClass"
            glib:is-gtype-struct-for="WorkerManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1441">Class structure for #GdmWorkerManagerProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="259"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1443">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WorkerManagerProxyPrivate"
            c:type="GdmWorkerManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="247"/>
    </record>
    <class name="WorkerManagerSkeleton"
           c:symbol-prefix="worker_manager_skeleton"
           c:type="GdmWorkerManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmWorkerManagerSkeleton"
           glib:get-type="gdm_worker_manager_skeleton_get_type"
           glib:type-struct="WorkerManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1778">The #GdmWorkerManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="329"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_worker_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2049">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2054">The skeleton object.</doc>
          <type name="WorkerManagerSkeleton" c:type="GdmWorkerManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerSkeletonPrivate"
              c:type="GdmWorkerManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerSkeletonClass"
            c:type="GdmWorkerManagerSkeletonClass"
            glib:is-gtype-struct-for="WorkerManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1784">Class structure for #GdmWorkerManagerSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="329"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1786">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WorkerManagerSkeletonPrivate"
            c:type="GdmWorkerManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="317"/>
    </record>
    <function name="chooser_interface_info"
              c:identifier="gdm_chooser_interface_info"
              moved-to="Chooser.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8863">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1431"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8868">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="chooser_override_properties"
              c:identifier="gdm_chooser_override_properties"
              moved-to="Chooser.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8876">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1432"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8884">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8878">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8879">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_session_ids" c:identifier="gdm_get_session_ids">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="284">Reads /usr/share/xsessions and other relevant places for possible sessions
to log into and returns the complete list.</doc>
      <source-position filename="gdm-sessions.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="290">a %NULL terminated list of session ids</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_session_name_and_description"
              c:identifier="gdm_get_session_name_and_description">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="319">Takes an xsession id and returns the name and comment about it.</doc>
      <source-position filename="gdm-sessions.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="326">The session name if found, or %NULL otherwise</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="321">an id from gdm_get_session_ids()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="description"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="322">optional returned session description</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="goto_login_session_sync"
              c:identifier="gdm_goto_login_session_sync"
              throws="1">
      <source-position filename="gdm-user-switching.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_interface_info"
              c:identifier="gdm_greeter_interface_info"
              moved-to="Greeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6146">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="975"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6151">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="greeter_override_properties"
              c:identifier="gdm_greeter_override_properties"
              moved-to="Greeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6159">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="976"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6167">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6161">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6162">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="gdm_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="315">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-manager-glue.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="320">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="gdm_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="328">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-manager-glue.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="336">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="330">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="331">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="remote_greeter_interface_info"
              c:identifier="gdm_remote_greeter_interface_info"
              moved-to="RemoteGreeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7969">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1264"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7974">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="remote_greeter_override_properties"
              c:identifier="gdm_remote_greeter_override_properties"
              moved-to="RemoteGreeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7982">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1265"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7990">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7984">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7985">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_choice_list_interface_info"
              c:identifier="gdm_user_verifier_choice_list_interface_info"
              moved-to="UserVerifierChoiceList.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4830">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="753"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4835">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_choice_list_override_properties"
              c:identifier="gdm_user_verifier_choice_list_override_properties"
              moved-to="UserVerifierChoiceList.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4843">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="754"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4851">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4845">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4846">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_interface_info"
              c:identifier="gdm_user_verifier_interface_info"
              moved-to="UserVerifier.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2625">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="439"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2630">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_override_properties"
              c:identifier="gdm_user_verifier_override_properties"
              moved-to="UserVerifier.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2638">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="440"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2646">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2640">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2641">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="worker_manager_interface_info"
              c:identifier="gdm_worker_manager_interface_info"
              moved-to="WorkerManager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="478">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="483">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="worker_manager_override_properties"
              c:identifier="gdm_worker_manager_override_properties"
              moved-to="WorkerManager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="491">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="499">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="493">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="494">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
