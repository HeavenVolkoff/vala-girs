<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Gdm"
             version="1.0"
             shared-library="libgdm.so.1"
             c:identifier-prefixes="Gdm"
             c:symbol-prefixes="gdm">
    <function-macro name="CHOOSER"
                    c:identifier="GDM_CHOOSER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1403"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_GET_IFACE"
                    c:identifier="GDM_CHOOSER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY"
                    c:identifier="GDM_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1487"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1488"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_GET_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1489"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON"
                    c:identifier="GDM_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1557"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1558"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_GET_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1559"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Chooser"
               c:symbol-prefix="chooser"
               c:type="GdmChooser"
               glib:type-name="GdmChooser"
               glib:get-type="gdm_chooser_get_type"
               glib:type-struct="ChooserIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8896">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1424"/>
      <function name="interface_info"
                c:identifier="gdm_chooser_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8865">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1432"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8870">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_chooser_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8878">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1433"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8886">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8880">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8881">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1415"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_hostname">
        <source-position filename="gdm-client-glue.h" line="1419"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_chooser_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9063">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_call_disconnect_finish() to get the result of the operation.

See gdm_chooser_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9065">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9066">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9067">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9068">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_chooser_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9093">Finishes an operation started with gdm_chooser_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1472"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9101">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9095">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9096">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_chooser_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9120">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1477"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9130">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9122">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9123">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname"
              c:identifier="gdm_chooser_call_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8965">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_call_select_hostname_finish() to get the result of the operation.

See gdm_chooser_call_select_hostname_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1448"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8967">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8968">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8969">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8970">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8971">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_finish"
              c:identifier="gdm_chooser_call_select_hostname_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8998">Finishes an operation started with gdm_chooser_call_select_hostname().</doc>
        <source-position filename="gdm-client-glue.h" line="1455"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9006">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9000">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9001">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_select_hostname().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_sync"
              c:identifier="gdm_chooser_call_select_hostname_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9025">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_select_hostname() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1460"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9036">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9027">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9028">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9029">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_chooser_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9173">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1441"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9175">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9176">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_hostname"
              c:identifier="gdm_chooser_complete_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9155">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9157">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9158">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8941">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8950">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8944">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-hostname" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8918">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_select_hostname() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8928">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8921">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8922">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ChooserIface"
            c:type="GdmChooserIface"
            glib:is-gtype-struct-for="Chooser">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8902">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1424"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8904">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1415"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_hostname">
        <callback name="handle_select_hostname">
          <source-position filename="gdm-client-glue.h" line="1419"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ChooserProxy"
           c:symbol-prefix="chooser_proxy"
           c:type="GdmChooserProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmChooserProxy"
           glib:get-type="gdm_chooser_proxy_get_type"
           glib:type-struct="ChooserProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9193">The #GdmChooserProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1507"/>
      <implements name="Chooser"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_chooser_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9384">Finishes an operation started with gdm_chooser_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1523"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9391">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9386">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_chooser_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9474">Finishes an operation started with gdm_chooser_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1542"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9481">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9476">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_chooser_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9499">Like gdm_chooser_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1545"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9514">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9501">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9502">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9503">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9504">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9505">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_chooser_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9409">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1526"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9424">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9411">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9412">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9413">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9414">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9415">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_chooser_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9354">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_proxy_new_finish() to get the result of the operation.

See gdm_chooser_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1515"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9356">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9357">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9358">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9359">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9360">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9361">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9362">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_chooser_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9444">Like gdm_chooser_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_chooser_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1534"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9446">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9447">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9448">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9449">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9450">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9451">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9452">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserProxyPrivate" c:type="GdmChooserProxyPrivate*"/>
      </field>
    </class>
    <record name="ChooserProxyClass"
            c:type="GdmChooserProxyClass"
            glib:is-gtype-struct-for="ChooserProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9199">Class structure for #GdmChooserProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1507"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9201">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ChooserProxyPrivate"
            c:type="GdmChooserProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1495"/>
    </record>
    <class name="ChooserSkeleton"
           c:symbol-prefix="chooser_skeleton"
           c:type="GdmChooserSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmChooserSkeleton"
           glib:get-type="gdm_chooser_skeleton_get_type"
           glib:type-struct="ChooserSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9536">The #GdmChooserSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1577"/>
      <implements name="Chooser"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_chooser_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9807">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1585"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9812">The skeleton object.</doc>
          <type name="ChooserSkeleton" c:type="GdmChooser*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserSkeletonPrivate"
              c:type="GdmChooserSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ChooserSkeletonClass"
            c:type="GdmChooserSkeletonClass"
            glib:is-gtype-struct-for="ChooserSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9542">Class structure for #GdmChooserSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1577"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9544">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ChooserSkeletonPrivate"
            c:type="GdmChooserSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1565"/>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="GdmClient"
           parent="GObject.Object"
           glib:type-name="GdmClient"
           glib:get-type="gdm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="gdm-client.h" line="31"/>
      <constructor name="new" c:identifier="gdm_client_new">
        <source-position filename="gdm-client.h" line="41"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="GdmClient*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="gdm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_chooser" c:identifier="gdm_client_get_chooser">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1305">Gets a #GdmChooser object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1307">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1310">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1308">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1309">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_finish"
              c:identifier="gdm_client_get_chooser_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1344">Finishes an operation started with
gdm_client_get_chooser().</doc>
        <source-position filename="gdm-client.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1353">a #GdmChooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1346">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1347">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_sync"
              c:identifier="gdm_client_get_chooser_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1380">Gets a #GdmChooser object that can be used
to do do various XDMCP chooser related tasks, such
as selecting a host or disconnecting.</doc>
        <source-position filename="gdm-client.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1390">#GdmChooser or %NULL if caller is not a chooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1382">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1383">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter" c:identifier="gdm_client_get_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="967">Gets a #GdmGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="969">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="972">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="970">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="971">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_finish"
              c:identifier="gdm_client_get_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1006">Finishes an operation started with
gdm_client_get_greeter().</doc>
        <source-position filename="gdm-client.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1015">a #GdmGreeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1008">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1009">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_sync"
              c:identifier="gdm_client_get_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1042">Gets a #GdmGreeter object that can be used
to do do various login screen related tasks, such
as selecting a users session, and starting that
session.</doc>
        <source-position filename="gdm-client.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1053">#GdmGreeter or %NULL if caller is not a greeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1044">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1045">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter"
              c:identifier="gdm_client_get_remote_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1137">Gets a #GdmRemoteGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1139">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1142">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1140">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1141">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_finish"
              c:identifier="gdm_client_get_remote_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1176">Finishes an operation started with
gdm_client_get_remote_greeter().</doc>
        <source-position filename="gdm-client.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1185">a #GdmRemoteGreeter</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1178">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1179">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_sync"
              c:identifier="gdm_client_get_remote_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1212">Gets a #GdmRemoteGreeter object that can be used
to do do various remote login screen related tasks,
such as disconnecting.</doc>
        <source-position filename="gdm-client.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1222">#GdmRemoteGreeter or %NULL if caller is not remote</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1214">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1215">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier"
              c:identifier="gdm_client_get_user_verifier">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="803">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="805">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="808">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="806">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="807">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_choice_list"
              c:identifier="gdm_client_get_user_verifier_choice_list">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="878">Gets a #GdmUserVerifierChoiceList object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="885">#GdmUserVerifierChoiceList or %NULL if user
verifier isn't yet fetched, or daemon doesn't support choice lists</doc>
          <type name="UserVerifierChoiceList"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="880">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_finish"
              c:identifier="gdm_client_get_user_verifier_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="842">Finishes an operation started with
gdm_client_get_user_verifier().</doc>
        <source-position filename="gdm-client.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="851">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="844">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="845">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_sync"
              c:identifier="gdm_client_get_user_verifier_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="701">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="710">#GdmUserVerifier or %NULL if not connected</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="703">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="704">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel"
              c:identifier="gdm_client_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="640">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user.</doc>
        <source-position filename="gdm-client.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="642">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="643">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="646">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="644">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="645">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_finish"
              c:identifier="gdm_client_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="680">Finishes an operation started with
gdm_client_open_reauthentication_channel().</doc>
        <source-position filename="gdm-client.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="689">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="682">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="683">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_sync"
              c:identifier="gdm_client_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="569">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user. Free with
g_object_unref to close reauthentication channel.</doc>
        <source-position filename="gdm-client.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="580">#GdmUserVerifier or %NULL if @username is not
already logged in.</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="571">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="572">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="573">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_extensions"
              c:identifier="gdm_client_set_enabled_extensions">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1494">Enables GDM's pam extensions.  Currently, only
org.gnome.DisplayManager.UserVerifier.ChoiceList is supported.</doc>
        <source-position filename="gdm-client.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1496">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1497">a list of extensions</doc>
            <array c:type="const char* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ClientClass"
            c:type="GdmClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="gdm-client.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientError" c:type="GdmClientError">
      <source-position filename="gdm-client.h" line="37"/>
      <member name="client_error_generic"
              value="0"
              c:identifier="GDM_CLIENT_ERROR_GENERIC">
      </member>
    </enumeration>
    <function-macro name="GREETER"
                    c:identifier="GDM_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="905"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_GET_IFACE"
                    c:identifier="GDM_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="907"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY"
                    c:identifier="GDM_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1136"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_CLASS"
                    c:identifier="GDM_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1137"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1138"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON"
                    c:identifier="GDM_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1206"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1207"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1208"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Greeter"
               c:symbol-prefix="greeter"
               c:type="GdmGreeter"
               glib:type-name="GdmGreeter"
               glib:get-type="gdm_greeter_get_type"
               glib:type-struct="GreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6179">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="968"/>
      <function name="interface_info"
                c:identifier="gdm_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6148">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="976"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6153">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6161">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="977"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6169">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6163">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6164">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="default_language_name_changed">
        <source-position filename="gdm-client-glue.h" line="943"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="default_session_name_changed">
        <source-position filename="gdm-client-glue.h" line="947"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_auto_login">
        <source-position filename="gdm-client-glue.h" line="918"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_timed_login_details">
        <source-position filename="gdm-client-glue.h" line="923"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_session">
        <source-position filename="gdm-client-glue.h" line="927"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_user">
        <source-position filename="gdm-client-glue.h" line="932"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_session_when_ready">
        <source-position filename="gdm-client-glue.h" line="937"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthenticated">
        <source-position filename="gdm-client-glue.h" line="951"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selected_user_changed">
        <source-position filename="gdm-client-glue.h" line="955"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_opened">
        <source-position filename="gdm-client-glue.h" line="959"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timed_login_requested">
        <source-position filename="gdm-client-glue.h" line="963"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_begin_auto_login"
              c:identifier="gdm_greeter_call_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6731">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_begin_auto_login_finish() to get the result of the operation.

See gdm_greeter_call_begin_auto_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1071"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6733">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6734">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6735">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6736">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6737">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_finish"
              c:identifier="gdm_greeter_call_begin_auto_login_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6764">Finishes an operation started with gdm_greeter_call_begin_auto_login().</doc>
        <source-position filename="gdm-client-glue.h" line="1078"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6772">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6766">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6767">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_begin_auto_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_sync"
              c:identifier="gdm_greeter_call_begin_auto_login_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6791">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_begin_auto_login() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1083"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6802">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6793">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6794">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6795">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details"
              c:identifier="gdm_greeter_call_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6829">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_get_timed_login_details_finish() to get the result of the operation.

See gdm_greeter_call_get_timed_login_details_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1089"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6831">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6832">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6833">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6834">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_finish"
              c:identifier="gdm_greeter_call_get_timed_login_details_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6859">Finishes an operation started with gdm_greeter_call_get_timed_login_details().</doc>
        <source-position filename="gdm-client-glue.h" line="1095"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6870">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6861">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6862">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6863">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6864">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6865">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_get_timed_login_details().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_sync"
              c:identifier="gdm_greeter_call_get_timed_login_details_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6895">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_get_timed_login_details() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1103"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6908">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6897">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6898">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6899">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6900">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6901">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session"
              c:identifier="gdm_greeter_call_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6535">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_select_session_finish() to get the result of the operation.

See gdm_greeter_call_select_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1035"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6537">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6538">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6539">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6540">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6541">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_finish"
              c:identifier="gdm_greeter_call_select_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6568">Finishes an operation started with gdm_greeter_call_select_session().</doc>
        <source-position filename="gdm-client-glue.h" line="1042"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6576">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6570">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6571">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_sync"
              c:identifier="gdm_greeter_call_select_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6595">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1047"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6606">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6597">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6598">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6599">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user"
              c:identifier="gdm_greeter_call_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6633">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_select_user_finish() to get the result of the operation.

See gdm_greeter_call_select_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1053"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6635">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6636">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6637">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6638">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6639">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_finish"
              c:identifier="gdm_greeter_call_select_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6666">Finishes an operation started with gdm_greeter_call_select_user().</doc>
        <source-position filename="gdm-client-glue.h" line="1060"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6674">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6668">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6669">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_sync"
              c:identifier="gdm_greeter_call_select_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6693">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1065"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6704">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6695">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6696">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6697">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready"
              c:identifier="gdm_greeter_call_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6939">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_start_session_when_ready_finish() to get the result of the operation.

See gdm_greeter_call_start_session_when_ready_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6941">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6942">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6943">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6944">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6945">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6946">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_finish"
              c:identifier="gdm_greeter_call_start_session_when_ready_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6975">Finishes an operation started with gdm_greeter_call_start_session_when_ready().</doc>
        <source-position filename="gdm-client-glue.h" line="1119"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6983">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6977">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6978">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_start_session_when_ready().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_sync"
              c:identifier="gdm_greeter_call_start_session_when_ready_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7002">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_start_session_when_ready() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1124"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7014">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7004">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7005">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7006">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7007">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_auto_login"
              c:identifier="gdm_greeter_complete_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7079">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="989"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7081">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7082">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_timed_login_details"
              c:identifier="gdm_greeter_complete_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7097">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="993"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7099">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7100">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7101">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7102">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7103">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_session"
              c:identifier="gdm_greeter_complete_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7043">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="981"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7045">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7046">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_user"
              c:identifier="gdm_greeter_complete_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7061">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="985"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7063">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7064">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_session_when_ready"
              c:identifier="gdm_greeter_complete_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7124">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7126">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7127">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_language_name_changed"
              c:identifier="gdm_greeter_emit_default_language_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6458">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1011"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6460">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6461">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_session_name_changed"
              c:identifier="gdm_greeter_emit_default_session_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6473">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1015"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6475">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6476">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthenticated"
              c:identifier="gdm_greeter_emit_reauthenticated">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6520">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1028"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6522">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6523">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_selected_user_changed"
              c:identifier="gdm_greeter_emit_selected_user_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6443">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1007"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6445">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6446">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_session_opened"
              c:identifier="gdm_greeter_emit_session_opened">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6505">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1024"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6507">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6508">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_timed_login_requested"
              c:identifier="gdm_greeter_emit_timed_login_requested">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6488">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1019"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6490">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6491">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6492">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="default-language-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6345">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6348">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="default-session-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6364">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6367">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-auto-login" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6256">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_begin_auto_login() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6266">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6259">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6260">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-timed-login-details" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6279">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_get_timed_login_details() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6288">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6282">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6210">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6220">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6213">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6214">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6233">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6243">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6236">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6237">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-session-when-ready" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6301">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_start_session_when_ready() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6312">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6304">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6305">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6306">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthenticated" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6422">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6425">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected-user-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6326">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6329">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-opened" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6403">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6406">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timed-login-requested" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6383">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6386">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6387">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterIface"
            c:type="GdmGreeterIface"
            glib:is-gtype-struct-for="Greeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6185">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="968"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6187">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_begin_auto_login">
        <callback name="handle_begin_auto_login">
          <source-position filename="gdm-client-glue.h" line="918"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_timed_login_details">
        <callback name="handle_get_timed_login_details">
          <source-position filename="gdm-client-glue.h" line="923"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_session">
        <callback name="handle_select_session">
          <source-position filename="gdm-client-glue.h" line="927"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_user">
        <callback name="handle_select_user">
          <source-position filename="gdm-client-glue.h" line="932"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_session_when_ready">
        <callback name="handle_start_session_when_ready">
          <source-position filename="gdm-client-glue.h" line="937"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_should_start_session"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_language_name_changed">
        <callback name="default_language_name_changed">
          <source-position filename="gdm-client-glue.h" line="943"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_language_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_session_name_changed">
        <callback name="default_session_name_changed">
          <source-position filename="gdm-client-glue.h" line="947"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_session_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthenticated">
        <callback name="reauthenticated">
          <source-position filename="gdm-client-glue.h" line="951"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selected_user_changed">
        <callback name="selected_user_changed">
          <source-position filename="gdm-client-glue.h" line="955"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_opened">
        <callback name="session_opened">
          <source-position filename="gdm-client-glue.h" line="959"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timed_login_requested">
        <callback name="timed_login_requested">
          <source-position filename="gdm-client-glue.h" line="963"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_delay" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterProxy"
           c:symbol-prefix="greeter_proxy"
           c:type="GdmGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmGreeterProxy"
           glib:get-type="gdm_greeter_proxy_get_type"
           glib:type-struct="GreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7144">The #GdmGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1156"/>
      <implements name="Greeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7335">Finishes an operation started with gdm_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7342">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7337">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7425">Finishes an operation started with gdm_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1191"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7432">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7427">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7450">Like gdm_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7465">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7452">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7453">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7454">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7455">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7456">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7360">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7375">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7362">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7363">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7364">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7365">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7366">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7305">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_proxy_new_finish() to get the result of the operation.

See gdm_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7307">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7308">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7309">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7310">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7311">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7312">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7313">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7395">Like gdm_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7397">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7398">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7399">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7400">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7401">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7402">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7403">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterProxyPrivate" c:type="GdmGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="GreeterProxyClass"
            c:type="GdmGreeterProxyClass"
            glib:is-gtype-struct-for="GreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7150">Class structure for #GdmGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1156"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7152">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GreeterProxyPrivate"
            c:type="GdmGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1144"/>
    </record>
    <class name="GreeterSkeleton"
           c:symbol-prefix="greeter_skeleton"
           c:type="GdmGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmGreeterSkeleton"
           glib:get-type="gdm_greeter_skeleton_get_type"
           glib:type-struct="GreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7487">The #GdmGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1226"/>
      <implements name="Greeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7910">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7915">The skeleton object.</doc>
          <type name="GreeterSkeleton" c:type="GdmGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterSkeletonPrivate"
              c:type="GdmGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GreeterSkeletonClass"
            c:type="GdmGreeterSkeletonClass"
            glib:is-gtype-struct-for="GreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7493">Class structure for #GdmGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1226"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7495">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GreeterSkeletonPrivate"
            c:type="GdmGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1214"/>
    </record>
    <function-macro name="IS_CHOOSER"
                    c:identifier="GDM_IS_CHOOSER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY"
                    c:identifier="GDM_IS_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1490"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_IS_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1491"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON"
                    c:identifier="GDM_IS_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1560"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_IS_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1561"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER"
                    c:identifier="GDM_IS_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="906"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY"
                    c:identifier="GDM_IS_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1139"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1140"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON"
                    c:identifier="GDM_IS_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1209"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1210"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="GDM_IS_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="GDM_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="177"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="178"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="GDM_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="247"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="248"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER"
                    c:identifier="GDM_IS_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1242"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1301"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1302"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1371"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1372"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER"
                    c:identifier="GDM_IS_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="346"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="722"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="803"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="804"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="873"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="874"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="619"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="620"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="689"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="690"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER"
                    c:identifier="GDM_IS_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="243"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="244"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="313"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="314"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER"
                    c:identifier="GDM_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="GDM_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="GDM_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="174"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="175"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="176"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="GDM_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="244"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="245"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="GdmManager"
               glib:type-name="GdmManager"
               glib:get-type="gdm_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="381">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="55"/>
      <function name="interface_info"
                c:identifier="gdm_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="349">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-manager-glue.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="354">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="362">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-manager-glue.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="370">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="364">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="365">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="509">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.</doc>
        <source-position filename="gdm-manager-glue.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="519">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="511">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_reauthentication_channel">
        <source-position filename="gdm-manager-glue.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_session">
        <source-position filename="gdm-manager-glue.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_display">
        <source-position filename="gdm-manager-glue.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_session">
        <source-position filename="gdm-manager-glue.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open_reauthentication_channel"
              c:identifier="gdm_manager_call_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="854">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_open_reauthentication_channel_finish() to get the result of the operation.

See gdm_manager_call_open_reauthentication_channel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="856">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="857">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="858">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="859">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="860">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_finish"
              c:identifier="gdm_manager_call_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="887">Finishes an operation started with gdm_manager_call_open_reauthentication_channel().</doc>
        <source-position filename="gdm-manager-glue.h" line="150"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="896">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="889">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="890">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="891">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_reauthentication_channel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_sync"
              c:identifier="gdm_manager_call_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="917">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_reauthentication_channel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="156"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="929">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="919">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="920">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="921">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="922">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session"
              c:identifier="gdm_manager_call_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="756">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_open_session_finish() to get the result of the operation.

See gdm_manager_call_open_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="758">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="759">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="760">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="761">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_finish"
              c:identifier="gdm_manager_call_open_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="786">Finishes an operation started with gdm_manager_call_open_session().</doc>
        <source-position filename="gdm-manager-glue.h" line="131"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="795">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="788">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="789">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="790">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_sync"
              c:identifier="gdm_manager_call_open_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="816">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="137"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="827">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="818">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="819">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="820">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display"
              c:identifier="gdm_manager_call_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="560">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_register_display_finish() to get the result of the operation.

See gdm_manager_call_register_display_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="562">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="563">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="564">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="565">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="566">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_finish"
              c:identifier="gdm_manager_call_register_display_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="593">Finishes an operation started with gdm_manager_call_register_display().</doc>
        <source-position filename="gdm-manager-glue.h" line="96"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="601">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="595">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="596">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_display().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_sync"
              c:identifier="gdm_manager_call_register_display_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="620">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_display() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="101"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="631">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="622">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="623">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="624">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session"
              c:identifier="gdm_manager_call_register_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="658">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_register_session_finish() to get the result of the operation.

See gdm_manager_call_register_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="660">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="661">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="662">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="663">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="664">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_finish"
              c:identifier="gdm_manager_call_register_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="691">Finishes an operation started with gdm_manager_call_register_session().</doc>
        <source-position filename="gdm-manager-glue.h" line="114"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="699">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="693">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="694">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_sync"
              c:identifier="gdm_manager_call_register_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="718">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="119"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="729">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="720">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="721">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="722">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_reauthentication_channel"
              c:identifier="gdm_manager_complete_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1015">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1017">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1018">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1019">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_session"
              c:identifier="gdm_manager_complete_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="994">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="996">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="997">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="998">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_display"
              c:identifier="gdm_manager_complete_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="958">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="960">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="961">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_session"
              c:identifier="gdm_manager_complete_register_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="976">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="978">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="979">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="gdm_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="527">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="167"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="535">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="529">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gdm_manager_get_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="509">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.</doc>
        <source-position filename="gdm-manager-glue.h" line="166"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="519">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="511">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gdm_manager_set_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="545">Sets the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="547">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="548">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="498">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-open-reauthentication-channel" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="474">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_reauthentication_channel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="484">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="477">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="478">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="452">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="461">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="455">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-display" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="406">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="416">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="409">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="410">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="429">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="439">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="432">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="433">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="GdmManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="387">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="55"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="389">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open_reauthentication_channel">
        <callback name="handle_open_reauthentication_channel">
          <source-position filename="gdm-manager-glue.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_session">
        <callback name="handle_open_session">
          <source-position filename="gdm-manager-glue.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_display">
        <callback name="handle_register_display">
          <source-position filename="gdm-manager-glue.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_session">
        <callback name="handle_register_session">
          <source-position filename="gdm-manager-glue.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="gdm-manager-glue.h" line="53"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="519">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdm-manager-glue.c"
                   line="511">A #GdmManager.</doc>
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="GdmManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmManagerProxy"
           glib:get-type="gdm_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1038">The #GdmManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="194"/>
      <implements name="Manager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1298">Finishes an operation started with gdm_manager_proxy_new().</doc>
        <source-position filename="gdm-manager-glue.h" line="210"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1305">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1300">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1388">Finishes an operation started with gdm_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-manager-glue.h" line="229"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1395">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1390">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1413">Like gdm_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1428">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1415">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1416">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1417">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1418">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1419">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1323">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1338">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1325">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1326">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1327">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1328">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1329">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1268">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_proxy_new_finish() to get the result of the operation.

See gdm_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1270">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1271">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1272">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1273">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1274">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1275">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1276">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1358">Like gdm_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1360">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1361">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1362">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1363">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1364">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1365">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1366">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="GdmManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="GdmManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1044">Class structure for #GdmManagerProxy.</doc>
      <source-position filename="gdm-manager-glue.h" line="194"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1046">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="GdmManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="182"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="GdmManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmManagerSkeleton"
           glib:get-type="gdm_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1450">The #GdmManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="264"/>
      <implements name="Manager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1903">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
        <source-position filename="gdm-manager-glue.h" line="272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1908">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="GdmManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="GdmManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="GdmManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1456">Class structure for #GdmManagerSkeleton.</doc>
      <source-position filename="gdm-manager-glue.h" line="264"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1458">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="GdmManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="252"/>
    </record>
    <function-macro name="REMOTE_GREETER"
                    c:identifier="GDM_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1241"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_GET_IFACE"
                    c:identifier="GDM_REMOTE_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1243"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY"
                    c:identifier="GDM_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1298"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1299"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1300"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1368"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1369"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1370"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="RemoteGreeter"
               c:symbol-prefix="remote_greeter"
               c:type="GdmRemoteGreeter"
               glib:type-name="GdmRemoteGreeter"
               glib:get-type="gdm_remote_greeter_get_type"
               glib:type-struct="RemoteGreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8002">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1257"/>
      <function name="interface_info"
                c:identifier="gdm_remote_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7971">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7976">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_remote_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7984">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7992">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7986">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7987">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1253"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_remote_greeter_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8047">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_call_disconnect_finish() to get the result of the operation.

See gdm_remote_greeter_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1277"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8049">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8050">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8051">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8052">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_remote_greeter_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8077">Finishes an operation started with gdm_remote_greeter_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1283"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8085">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8079">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8080">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_remote_greeter_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8104">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_remote_greeter_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1288"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8114">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8106">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8107">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_remote_greeter_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8139">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8141">A #GdmRemoteGreeter.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8142">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8023">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_remote_greeter_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8032">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8026">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="RemoteGreeterIface"
            c:type="GdmRemoteGreeterIface"
            glib:is-gtype-struct-for="RemoteGreeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8008">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1257"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8010">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1253"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RemoteGreeterProxy"
           c:symbol-prefix="remote_greeter_proxy"
           c:type="GdmRemoteGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmRemoteGreeterProxy"
           glib:get-type="gdm_remote_greeter_proxy_get_type"
           glib:type-struct="RemoteGreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8159">The #GdmRemoteGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1318"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8350">Finishes an operation started with gdm_remote_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1334"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8357">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8352">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8440">Finishes an operation started with gdm_remote_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1353"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8447">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8442">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8465">Like gdm_remote_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1356"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8480">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8467">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8468">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8469">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8470">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8375">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8390">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8377">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8378">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8379">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8380">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8381">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_remote_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8320">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_proxy_new_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1326"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8322">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8323">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8324">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8325">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8326">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8327">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8328">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_remote_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8410">Like gdm_remote_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8412">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8413">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8414">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8415">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8416">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8417">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8418">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterProxyPrivate"
              c:type="GdmRemoteGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterProxyClass"
            c:type="GdmRemoteGreeterProxyClass"
            glib:is-gtype-struct-for="RemoteGreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8165">Class structure for #GdmRemoteGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1318"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8167">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RemoteGreeterProxyPrivate"
            c:type="GdmRemoteGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1306"/>
    </record>
    <class name="RemoteGreeterSkeleton"
           c:symbol-prefix="remote_greeter_skeleton"
           c:type="GdmRemoteGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmRemoteGreeterSkeleton"
           glib:get-type="gdm_remote_greeter_skeleton_get_type"
           glib:type-struct="RemoteGreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8502">The #GdmRemoteGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1388"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_remote_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8773">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1396"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8778">The skeleton object.</doc>
          <type name="RemoteGreeterSkeleton" c:type="GdmRemoteGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterSkeletonPrivate"
              c:type="GdmRemoteGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterSkeletonClass"
            c:type="GdmRemoteGreeterSkeletonClass"
            glib:is-gtype-struct-for="RemoteGreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8508">Class structure for #GdmRemoteGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1388"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8510">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RemoteGreeterSkeletonPrivate"
            c:type="GdmRemoteGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1376"/>
    </record>
    <function-macro name="USER_VERIFIER"
                    c:identifier="GDM_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="345"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="721"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="723"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="800"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="801"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="802"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="870"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="871"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="872"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="347"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY"
                    c:identifier="GDM_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="616"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="617"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="618"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="686"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="687"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="688"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="UserVerifier"
               c:symbol-prefix="user_verifier"
               c:type="GdmUserVerifier"
               glib:type-name="GdmUserVerifier"
               glib:get-type="gdm_user_verifier_get_type"
               glib:type-struct="UserVerifierIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2658">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="432"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2627">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="440"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2632">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2640">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="441"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2648">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2642">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2643">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="conversation_started">
        <source-position filename="gdm-client-glue.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="conversation_stopped">
        <source-position filename="gdm-client-glue.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_answer_query">
        <source-position filename="gdm-client-glue.h" line="358"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification">
        <source-position filename="gdm-client-glue.h" line="364"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification_for_user">
        <source-position filename="gdm-client-glue.h" line="369"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="gdm-client-glue.h" line="375"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_extensions">
        <source-position filename="gdm-client-glue.h" line="379"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info">
        <source-position filename="gdm-client-glue.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info_query">
        <source-position filename="gdm-client-glue.h" line="397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="problem">
        <source-position filename="gdm-client-glue.h" line="402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthentication_started">
        <source-position filename="gdm-client-glue.h" line="407"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <source-position filename="gdm-client-glue.h" line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secret_info_query">
        <source-position filename="gdm-client-glue.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_unavailable">
        <source-position filename="gdm-client-glue.h" line="419"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_complete">
        <source-position filename="gdm-client-glue.h" line="424"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_failed">
        <source-position filename="gdm-client-glue.h" line="428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_answer_query"
              c:identifier="gdm_user_verifier_call_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3499">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_answer_query_finish() to get the result of the operation.

See gdm_user_verifier_call_answer_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="575"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3501">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3502">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3503">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3504">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3505">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3506">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_finish"
              c:identifier="gdm_user_verifier_call_answer_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3535">Finishes an operation started with gdm_user_verifier_call_answer_query().</doc>
        <source-position filename="gdm-client-glue.h" line="583"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3543">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3537">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3538">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_answer_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_sync"
              c:identifier="gdm_user_verifier_call_answer_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3562">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_answer_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="588"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3574">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3564">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3565">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3566">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3567">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification"
              c:identifier="gdm_user_verifier_call_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3297">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_begin_verification_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="537"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3299">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3300">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3301">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3302">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3303">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3330">Finishes an operation started with gdm_user_verifier_call_begin_verification().</doc>
        <source-position filename="gdm-client-glue.h" line="544"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3338">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3332">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3333">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3395">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_begin_verification_for_user_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_for_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="555"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3397">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3398">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3399">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3400">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3401">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3402">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3431">Finishes an operation started with gdm_user_verifier_call_begin_verification_for_user().</doc>
        <source-position filename="gdm-client-glue.h" line="563"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3439">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3433">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3434">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification_for_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3458">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification_for_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="568"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3470">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3460">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3461">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3462">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3463">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3357">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="549"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3368">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3359">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3360">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3361">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel" c:identifier="gdm_user_verifier_call_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3603">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_cancel_finish() to get the result of the operation.

See gdm_user_verifier_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="595"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3605">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3606">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3607">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3608">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="gdm_user_verifier_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3633">Finishes an operation started with gdm_user_verifier_call_cancel().</doc>
        <source-position filename="gdm-client-glue.h" line="601"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3641">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3635">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3636">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="gdm_user_verifier_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3660">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="606"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3670">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3662">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3663">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions"
              c:identifier="gdm_user_verifier_call_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3199">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_enable_extensions_finish() to get the result of the operation.

See gdm_user_verifier_call_enable_extensions_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="519"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3201">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3202">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3203">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3204">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3205">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_finish"
              c:identifier="gdm_user_verifier_call_enable_extensions_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3232">Finishes an operation started with gdm_user_verifier_call_enable_extensions().</doc>
        <source-position filename="gdm-client-glue.h" line="526"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3240">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3234">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3235">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_enable_extensions().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_sync"
              c:identifier="gdm_user_verifier_call_enable_extensions_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3259">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_enable_extensions() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="531"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3270">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3261">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3262">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3263">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_answer_query"
              c:identifier="gdm_user_verifier_complete_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3749">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="457"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3751">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3752">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification"
              c:identifier="gdm_user_verifier_complete_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3713">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3715">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3716">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification_for_user"
              c:identifier="gdm_user_verifier_complete_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3731">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="453"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3733">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3734">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="gdm_user_verifier_complete_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3767">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="461"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3769">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3770">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_extensions"
              c:identifier="gdm_user_verifier_complete_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3695">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="445"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3697">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3698">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_started"
              c:identifier="gdm_user_verifier_emit_conversation_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3026">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="468"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3028">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3029">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_stopped"
              c:identifier="gdm_user_verifier_emit_conversation_stopped">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3041">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="472"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3043">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3044">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info" c:identifier="gdm_user_verifier_emit_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3071">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="480"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3073">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3074">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3075">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info_query"
              c:identifier="gdm_user_verifier_emit_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3105">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="490"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3107">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3108">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3109">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_problem"
              c:identifier="gdm_user_verifier_emit_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3088">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="485"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3090">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3091">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3092">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthentication_started"
              c:identifier="gdm_user_verifier_emit_reauthentication_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3056">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="476"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3058">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3059">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reset" c:identifier="gdm_user_verifier_emit_reset">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3139">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="500"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3141">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_secret_info_query"
              c:identifier="gdm_user_verifier_emit_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3122">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="495"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3124">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3125">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3126">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_unavailable"
              c:identifier="gdm_user_verifier_emit_service_unavailable">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3152">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3154">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3155">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3156">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_complete"
              c:identifier="gdm_user_verifier_emit_verification_complete">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3184">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="512"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3186">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3187">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_failed"
              c:identifier="gdm_user_verifier_emit_verification_failed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3169">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="508"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3171">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3172">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="conversation-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2811">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2814">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="conversation-stopped" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2830">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2833">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-answer-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2764">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_answer_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2775">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2767">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2768">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2769">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2717">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2727">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2720">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2721">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification-for-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2740">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification_for_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2751">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2743">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2744">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2745">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2788">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2797">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2791">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-extensions" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2694">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_enable_extensions() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2704">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2697">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2698">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2868">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2871">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2872">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2908">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2911">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2912">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2888">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2891">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2892">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthentication-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2849">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2852">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2948">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2928">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2931">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2932">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-unavailable" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2966">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2969">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2970">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-complete" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3005">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3008">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-failed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2986">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2989">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="UserVerifierChoiceList"
               c:symbol-prefix="user_verifier_choice_list"
               c:type="GdmUserVerifierChoiceList"
               glib:type-name="GdmUserVerifierChoiceList"
               glib:get-type="gdm_user_verifier_choice_list_get_type"
               glib:type-struct="UserVerifierChoiceListIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4863">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="746"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_choice_list_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4832">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="754"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4837">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_choice_list_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4845">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="755"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4853">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4847">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4848">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="choice_query">
        <source-position filename="gdm-client-glue.h" line="740"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_choice">
        <source-position filename="gdm-client-glue.h" line="734"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_select_choice"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4952">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_call_select_choice_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_call_select_choice_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="775"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4954">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4955">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4956">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4957">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4958">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4959">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_finish"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4988">Finishes an operation started with gdm_user_verifier_choice_list_call_select_choice().</doc>
        <source-position filename="gdm-client-glue.h" line="783"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4996">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4990">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4991">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_call_select_choice().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_sync"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5015">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_call_select_choice() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="788"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5027">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5017">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5018">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5019">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5020">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_choice"
              c:identifier="gdm_user_verifier_choice_list_complete_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5056">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="759"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5058">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5059">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_choice_query"
              c:identifier="gdm_user_verifier_choice_list_emit_choice_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4933">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="766"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4935">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4936">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4937">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4938">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="choice-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4910">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4913">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4914">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4915">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-choice" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4885">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_choice_list_complete_select_choice() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4896">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4888">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4889">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4890">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierChoiceListIface"
            c:type="GdmUserVerifierChoiceListIface"
            glib:is-gtype-struct-for="UserVerifierChoiceList">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4869">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="746"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4871">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_select_choice">
        <callback name="handle_select_choice">
          <source-position filename="gdm-client-glue.h" line="734"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choice" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choice_query">
        <callback name="choice_query">
          <source-position filename="gdm-client-glue.h" line="740"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_list" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierChoiceListProxy"
           c:symbol-prefix="user_verifier_choice_list_proxy"
           c:type="GdmUserVerifierChoiceListProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierChoiceListProxy"
           glib:get-type="gdm_user_verifier_choice_list_proxy_get_type"
           glib:type-struct="UserVerifierChoiceListProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5076">The #GdmUserVerifierChoiceListProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="820"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5267">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="836"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5274">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5269">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5357">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="855"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5364">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5359">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5382">Like gdm_user_verifier_choice_list_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="858"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5397">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5384">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5385">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5386">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5387">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5388">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5292">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="839"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5307">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5294">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5295">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5296">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5297">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5298">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_choice_list_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5237">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="828"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5239">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5240">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5241">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5242">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5243">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5244">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5245">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5327">Like gdm_user_verifier_choice_list_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="847"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5329">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5330">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5331">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5332">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5333">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5334">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5335">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListProxyPrivate"
              c:type="GdmUserVerifierChoiceListProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListProxyClass"
            c:type="GdmUserVerifierChoiceListProxyClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5082">Class structure for #GdmUserVerifierChoiceListProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="820"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5084">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListProxyPrivate"
            c:type="GdmUserVerifierChoiceListProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="808"/>
    </record>
    <class name="UserVerifierChoiceListSkeleton"
           c:symbol-prefix="user_verifier_choice_list_skeleton"
           c:type="GdmUserVerifierChoiceListSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierChoiceListSkeleton"
           glib:get-type="gdm_user_verifier_choice_list_skeleton_get_type"
           glib:type-struct="UserVerifierChoiceListSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5419">The #GdmUserVerifierChoiceListSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="890"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_choice_list_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5719">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="898"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5724">The skeleton object.</doc>
          <type name="UserVerifierChoiceListSkeleton"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListSkeletonPrivate"
              c:type="GdmUserVerifierChoiceListSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListSkeletonClass"
            c:type="GdmUserVerifierChoiceListSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5425">Class structure for #GdmUserVerifierChoiceListSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="890"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5427">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListSkeletonPrivate"
            c:type="GdmUserVerifierChoiceListSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="878"/>
    </record>
    <record name="UserVerifierIface"
            c:type="GdmUserVerifierIface"
            glib:is-gtype-struct-for="UserVerifier">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2664">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="432"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2666">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_answer_query">
        <callback name="handle_answer_query">
          <source-position filename="gdm-client-glue.h" line="358"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_answer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification">
        <callback name="handle_begin_verification">
          <source-position filename="gdm-client-glue.h" line="364"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification_for_user">
        <callback name="handle_begin_verification_for_user">
          <source-position filename="gdm-client-glue.h" line="369"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="gdm-client-glue.h" line="375"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_extensions">
        <callback name="handle_enable_extensions">
          <source-position filename="gdm-client-glue.h" line="379"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_extensions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_started">
        <callback name="conversation_started">
          <source-position filename="gdm-client-glue.h" line="384"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_stopped">
        <callback name="conversation_stopped">
          <source-position filename="gdm-client-glue.h" line="388"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info">
        <callback name="info">
          <source-position filename="gdm-client-glue.h" line="392"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info_query">
        <callback name="info_query">
          <source-position filename="gdm-client-glue.h" line="397"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="problem">
        <callback name="problem">
          <source-position filename="gdm-client-glue.h" line="402"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthentication_started">
        <callback name="reauthentication_started">
          <source-position filename="gdm-client-glue.h" line="407"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_pid_of_caller" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <source-position filename="gdm-client-glue.h" line="411"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secret_info_query">
        <callback name="secret_info_query">
          <source-position filename="gdm-client-glue.h" line="414"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unavailable">
        <callback name="service_unavailable">
          <source-position filename="gdm-client-glue.h" line="419"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_complete">
        <callback name="verification_complete">
          <source-position filename="gdm-client-glue.h" line="424"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_failed">
        <callback name="verification_failed">
          <source-position filename="gdm-client-glue.h" line="428"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierProxy"
           c:symbol-prefix="user_verifier_proxy"
           c:type="GdmUserVerifierProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierProxy"
           glib:get-type="gdm_user_verifier_proxy_get_type"
           glib:type-struct="UserVerifierProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3787">The #GdmUserVerifierProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="636"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3978">Finishes an operation started with gdm_user_verifier_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="652"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3985">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3980">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4068">Finishes an operation started with gdm_user_verifier_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="671"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4075">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4070">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4093">Like gdm_user_verifier_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="674"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4108">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4095">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4096">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4097">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4098">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4099">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4003">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="655"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4018">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4005">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4006">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4007">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4008">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4009">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_user_verifier_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3948">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="644"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3950">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3951">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3952">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3953">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3954">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3955">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3956">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4038">Like gdm_user_verifier_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="663"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4040">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4041">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4042">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4043">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4044">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4045">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4046">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierProxyPrivate"
              c:type="GdmUserVerifierProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierProxyClass"
            c:type="GdmUserVerifierProxyClass"
            glib:is-gtype-struct-for="UserVerifierProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3793">Class structure for #GdmUserVerifierProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="636"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3795">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierProxyPrivate"
            c:type="GdmUserVerifierProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="624"/>
    </record>
    <class name="UserVerifierSkeleton"
           c:symbol-prefix="user_verifier_skeleton"
           c:type="GdmUserVerifierSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierSkeleton"
           glib:get-type="gdm_user_verifier_skeleton_get_type"
           glib:type-struct="UserVerifierSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4130">The #GdmUserVerifierSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="706"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_user_verifier_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4684">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="714"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4689">The skeleton object.</doc>
          <type name="UserVerifierSkeleton" c:type="GdmUserVerifier*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierSkeletonPrivate"
              c:type="GdmUserVerifierSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierSkeletonClass"
            c:type="GdmUserVerifierSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4136">Class structure for #GdmUserVerifierSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="706"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4138">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierSkeletonPrivate"
            c:type="GdmUserVerifierSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="694"/>
    </record>
    <function-macro name="WORKER_MANAGER"
                    c:identifier="GDM_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_GET_IFACE"
                    c:identifier="GDM_WORKER_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY"
                    c:identifier="GDM_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="240"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="241"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="242"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="310"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="311"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="312"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="WorkerManager"
               c:symbol-prefix="worker_manager"
               c:type="GdmWorkerManager"
               glib:type-name="GdmWorkerManager"
               glib:get-type="gdm_worker_manager_get_type"
               glib:type-struct="WorkerManagerIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="511">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="68"/>
      <function name="interface_info"
                c:identifier="gdm_worker_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="480">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="485">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_worker_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="493">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="501">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="495">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="496">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_choice_list_query">
        <source-position filename="gdm-client-glue.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hello">
        <source-position filename="gdm-client-glue.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info">
        <source-position filename="gdm-client-glue.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info_query">
        <source-position filename="gdm-client-glue.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_problem">
        <source-position filename="gdm-client-glue.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_secret_info_query">
        <source-position filename="gdm-client-glue.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_choice_list_query"
              c:identifier="gdm_worker_manager_call_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1202">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_choice_list_query_finish() to get the result of the operation.

See gdm_worker_manager_call_choice_list_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1204">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1205">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1206">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1207">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1208">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1209">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1210">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_finish"
              c:identifier="gdm_worker_manager_call_choice_list_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1241">Finishes an operation started with gdm_worker_manager_call_choice_list_query().</doc>
        <source-position filename="gdm-client-glue.h" line="220"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1250">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1243">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1244">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1245">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_choice_list_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_sync"
              c:identifier="gdm_worker_manager_call_choice_list_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1271">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_choice_list_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="226"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1285">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1273">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1274">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1275">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1276">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1277">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1278">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello" c:identifier="gdm_worker_manager_call_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="682">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_hello_finish() to get the result of the operation.

See gdm_worker_manager_call_hello_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="684">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="685">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="686">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="687">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_finish"
              c:identifier="gdm_worker_manager_call_hello_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="712">Finishes an operation started with gdm_worker_manager_call_hello().</doc>
        <source-position filename="gdm-client-glue.h" line="117"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="720">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="714">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="715">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_hello().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_sync"
              c:identifier="gdm_worker_manager_call_hello_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="739">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_hello() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="122"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="749">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="741">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="742">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info" c:identifier="gdm_worker_manager_call_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="994">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_info_finish() to get the result of the operation.

See gdm_worker_manager_call_info_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="996">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="997">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="998">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="999">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1000">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1001">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_finish"
              c:identifier="gdm_worker_manager_call_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1030">Finishes an operation started with gdm_worker_manager_call_info().</doc>
        <source-position filename="gdm-client-glue.h" line="179"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1038">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1032">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1033">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query"
              c:identifier="gdm_worker_manager_call_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="774">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="776">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="777">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="778">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="779">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="780">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="781">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_finish"
              c:identifier="gdm_worker_manager_call_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="810">Finishes an operation started with gdm_worker_manager_call_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="135"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="819">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="812">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="813">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="814">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_sync"
              c:identifier="gdm_worker_manager_call_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="840">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="141"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="853">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="842">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="843">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="844">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="845">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="846">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_sync"
              c:identifier="gdm_worker_manager_call_info_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1057">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="184"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1069">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1059">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1060">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1061">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1062">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem"
              c:identifier="gdm_worker_manager_call_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1098">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_problem_finish() to get the result of the operation.

See gdm_worker_manager_call_problem_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1100">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1101">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1102">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1103">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1104">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1105">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_finish"
              c:identifier="gdm_worker_manager_call_problem_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1134">Finishes an operation started with gdm_worker_manager_call_problem().</doc>
        <source-position filename="gdm-client-glue.h" line="199"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1142">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1136">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1137">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_problem().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_sync"
              c:identifier="gdm_worker_manager_call_problem_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1161">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_problem() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="204"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1173">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1163">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1164">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1165">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1166">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query"
              c:identifier="gdm_worker_manager_call_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="884">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_secret_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_secret_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="886">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="887">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="888">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="889">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="890">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="891">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_finish"
              c:identifier="gdm_worker_manager_call_secret_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="920">Finishes an operation started with gdm_worker_manager_call_secret_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="157"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="929">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="922">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="923">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="924">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_secret_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_sync"
              c:identifier="gdm_worker_manager_call_secret_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="950">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_secret_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="163"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="963">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="952">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="953">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="954">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="955">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="956">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_choice_list_query"
              c:identifier="gdm_worker_manager_complete_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1414">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1416">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1417">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1418">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hello"
              c:identifier="gdm_worker_manager_complete_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1318">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1320">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1321">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info"
              c:identifier="gdm_worker_manager_complete_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1378">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1380">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1381">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info_query"
              c:identifier="gdm_worker_manager_complete_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1336">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1338">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1339">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1340">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_problem"
              c:identifier="gdm_worker_manager_complete_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1396">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1398">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1399">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_secret_info_query"
              c:identifier="gdm_worker_manager_complete_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1357">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1359">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1360">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1361">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-choice-list-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="655">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_choice_list_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="667">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="658">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="659">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="660">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="661">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hello" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="537">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_hello() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="546">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="540">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="607">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="618">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="610">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="611">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="612">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="559">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="570">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="562">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="563">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="564">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="631">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_problem() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="642">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="634">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="635">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="636">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="583">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_secret_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="594">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="586">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="587">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="588">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WorkerManagerIface"
            c:type="GdmWorkerManagerIface"
            glib:is-gtype-struct-for="WorkerManager">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="517">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="68"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="519">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_choice_list_query">
        <callback name="handle_choice_list_query">
          <source-position filename="gdm-client-glue.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hello">
        <callback name="handle_hello">
          <source-position filename="gdm-client-glue.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info">
        <callback name="handle_info">
          <source-position filename="gdm-client-glue.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info_query">
        <callback name="handle_info_query">
          <source-position filename="gdm-client-glue.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_problem">
        <callback name="handle_problem">
          <source-position filename="gdm-client-glue.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_secret_info_query">
        <callback name="handle_secret_info_query">
          <source-position filename="gdm-client-glue.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WorkerManagerProxy"
           c:symbol-prefix="worker_manager_proxy"
           c:type="GdmWorkerManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmWorkerManagerProxy"
           glib:get-type="gdm_worker_manager_proxy_get_type"
           glib:type-struct="WorkerManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1437">The #GdmWorkerManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="260"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_worker_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1628">Finishes an operation started with gdm_worker_manager_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="276"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1635">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1630">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1718">Finishes an operation started with gdm_worker_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="295"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1725">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1720">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1743">Like gdm_worker_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1758">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1745">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1746">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1747">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1748">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1749">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_worker_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1653">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="279"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1668">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1655">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1656">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1657">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1658">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1659">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_worker_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1598">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_proxy_new_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1600">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1601">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1602">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1603">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1604">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1605">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1606">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_worker_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1688">Like gdm_worker_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1690">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1691">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1692">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1693">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1694">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1695">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1696">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerProxyPrivate"
              c:type="GdmWorkerManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerProxyClass"
            c:type="GdmWorkerManagerProxyClass"
            glib:is-gtype-struct-for="WorkerManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1443">Class structure for #GdmWorkerManagerProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="260"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1445">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WorkerManagerProxyPrivate"
            c:type="GdmWorkerManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="248"/>
    </record>
    <class name="WorkerManagerSkeleton"
           c:symbol-prefix="worker_manager_skeleton"
           c:type="GdmWorkerManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmWorkerManagerSkeleton"
           glib:get-type="gdm_worker_manager_skeleton_get_type"
           glib:type-struct="WorkerManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1780">The #GdmWorkerManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="330"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_worker_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2051">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="338"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2056">The skeleton object.</doc>
          <type name="WorkerManagerSkeleton" c:type="GdmWorkerManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerSkeletonPrivate"
              c:type="GdmWorkerManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerSkeletonClass"
            c:type="GdmWorkerManagerSkeletonClass"
            glib:is-gtype-struct-for="WorkerManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1786">Class structure for #GdmWorkerManagerSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="330"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1788">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WorkerManagerSkeletonPrivate"
            c:type="GdmWorkerManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="318"/>
    </record>
    <function name="chooser_interface_info"
              c:identifier="gdm_chooser_interface_info"
              moved-to="Chooser.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8865">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1432"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8870">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="chooser_override_properties"
              c:identifier="gdm_chooser_override_properties"
              moved-to="Chooser.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8878">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1433"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8886">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8880">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8881">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_session_ids" c:identifier="gdm_get_session_ids">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="309">Reads /usr/share/xsessions and other relevant places for possible sessions
to log into and returns the complete list.</doc>
      <source-position filename="gdm-sessions.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="315">a %NULL terminated list of session ids</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_session_name_and_description"
              c:identifier="gdm_get_session_name_and_description">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="344">Takes an xsession id and returns the name and comment about it.</doc>
      <source-position filename="gdm-sessions.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="351">The session name if found, or %NULL otherwise</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="346">an id from gdm_get_session_ids()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="description"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="347">optional returned session description</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="goto_login_session_sync"
              c:identifier="gdm_goto_login_session_sync"
              throws="1">
      <source-position filename="gdm-user-switching.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_interface_info"
              c:identifier="gdm_greeter_interface_info"
              moved-to="Greeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6148">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="976"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6153">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="greeter_override_properties"
              c:identifier="gdm_greeter_override_properties"
              moved-to="Greeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6161">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="977"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6169">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6163">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6164">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="gdm_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="349">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-manager-glue.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="354">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="gdm_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="362">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-manager-glue.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="370">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="364">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="365">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="remote_greeter_interface_info"
              c:identifier="gdm_remote_greeter_interface_info"
              moved-to="RemoteGreeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7971">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1265"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7976">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="remote_greeter_override_properties"
              c:identifier="gdm_remote_greeter_override_properties"
              moved-to="RemoteGreeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7984">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1266"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7992">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7986">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7987">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_choice_list_interface_info"
              c:identifier="gdm_user_verifier_choice_list_interface_info"
              moved-to="UserVerifierChoiceList.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4832">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="754"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4837">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_choice_list_override_properties"
              c:identifier="gdm_user_verifier_choice_list_override_properties"
              moved-to="UserVerifierChoiceList.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4845">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="755"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4853">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4847">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4848">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_interface_info"
              c:identifier="gdm_user_verifier_interface_info"
              moved-to="UserVerifier.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2627">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="440"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2632">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_override_properties"
              c:identifier="gdm_user_verifier_override_properties"
              moved-to="UserVerifier.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2640">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="441"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2648">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2642">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2643">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="worker_manager_interface_info"
              c:identifier="gdm_worker_manager_interface_info"
              moved-to="WorkerManager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="480">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="485">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="worker_manager_override_properties"
              c:identifier="gdm_worker_manager_override_properties"
              moved-to="WorkerManager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="493">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="501">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="495">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="496">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
