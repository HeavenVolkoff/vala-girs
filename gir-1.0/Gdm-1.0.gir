<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Gdm"
             version="1.0"
             shared-library="libgdm.so.1"
             c:identifier-prefixes="Gdm"
             c:symbol-prefixes="gdm">
    <function-macro name="CHOOSER"
                    c:identifier="GDM_CHOOSER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_GET_IFACE"
                    c:identifier="GDM_CHOOSER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY"
                    c:identifier="GDM_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1486"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1487"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_GET_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1488"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON"
                    c:identifier="GDM_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1556"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1557"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_GET_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1558"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Chooser"
               c:symbol-prefix="chooser"
               c:type="GdmChooser"
               glib:type-name="GdmChooser"
               glib:get-type="gdm_chooser_get_type"
               glib:type-struct="ChooserIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8895">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1423"/>
      <function name="interface_info"
                c:identifier="gdm_chooser_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8864">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1431"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8869">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_chooser_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8877">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1432"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8885">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8879">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8880">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1414"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_hostname">
        <source-position filename="gdm-client-glue.h" line="1418"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_chooser_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9062">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_disconnect_finish() to get the result of the operation.

See gdm_chooser_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1465"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9064">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9065">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9066">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9067">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_chooser_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9092">Finishes an operation started with gdm_chooser_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1471"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9100">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9094">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9095">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_chooser_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9119">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1476"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9129">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9121">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9122">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname"
              c:identifier="gdm_chooser_call_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8964">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_call_select_hostname_finish() to get the result of the operation.

See gdm_chooser_call_select_hostname_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1447"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8966">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8967">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8968">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8969">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8970">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_finish"
              c:identifier="gdm_chooser_call_select_hostname_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8997">Finishes an operation started with gdm_chooser_call_select_hostname().</doc>
        <source-position filename="gdm-client-glue.h" line="1454"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9005">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8999">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9000">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_select_hostname().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_sync"
              c:identifier="gdm_chooser_call_select_hostname_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9024">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_select_hostname() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1459"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9035">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9026">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9027">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9028">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_chooser_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9172">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9174">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9175">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_hostname"
              c:identifier="gdm_chooser_complete_select_hostname">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9154">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9156">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9157">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8940">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8949">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8943">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-hostname" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8917">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_select_hostname() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8927">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8920">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8921">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ChooserIface"
            c:type="GdmChooserIface"
            glib:is-gtype-struct-for="Chooser">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8901">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1423"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8903">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1414"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_hostname">
        <callback name="handle_select_hostname">
          <source-position filename="gdm-client-glue.h" line="1418"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ChooserProxy"
           c:symbol-prefix="chooser_proxy"
           c:type="GdmChooserProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmChooserProxy"
           glib:get-type="gdm_chooser_proxy_get_type"
           glib:type-struct="ChooserProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9192">The #GdmChooserProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1506"/>
      <implements name="Chooser"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_chooser_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9383">Finishes an operation started with gdm_chooser_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1522"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9390">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9385">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_chooser_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9473">Finishes an operation started with gdm_chooser_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1541"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9480">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9475">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_chooser_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9498">Like gdm_chooser_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1544"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9513">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9500">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9501">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9502">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9503">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9504">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_chooser_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9408">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1525"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9423">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9410">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9411">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9412">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9413">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9414">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_chooser_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9353">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_finish() to get the result of the operation.

See gdm_chooser_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9355">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9356">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9357">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9358">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9360">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9361">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_chooser_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9443">Like gdm_chooser_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_chooser_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_chooser_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1533"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9445">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9446">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9447">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9448">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9449">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9450">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="9451">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserProxyPrivate" c:type="GdmChooserProxyPrivate*"/>
      </field>
    </class>
    <record name="ChooserProxyClass"
            c:type="GdmChooserProxyClass"
            glib:is-gtype-struct-for="ChooserProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9198">Class structure for #GdmChooserProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1506"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9200">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ChooserProxyPrivate"
            c:type="GdmChooserProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1494"/>
    </record>
    <class name="ChooserSkeleton"
           c:symbol-prefix="chooser_skeleton"
           c:type="GdmChooserSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmChooserSkeleton"
           glib:get-type="gdm_chooser_skeleton_get_type"
           glib:type-struct="ChooserSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9535">The #GdmChooserSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1576"/>
      <implements name="Chooser"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_chooser_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9806">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1584"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="9811">The skeleton object.</doc>
          <type name="ChooserSkeleton" c:type="GdmChooser*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserSkeletonPrivate"
              c:type="GdmChooserSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ChooserSkeletonClass"
            c:type="GdmChooserSkeletonClass"
            glib:is-gtype-struct-for="ChooserSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="9541">Class structure for #GdmChooserSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1576"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="9543">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ChooserSkeletonPrivate"
            c:type="GdmChooserSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1564"/>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="GdmClient"
           parent="GObject.Object"
           glib:type-name="GdmClient"
           glib:get-type="gdm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="gdm-client.h" line="31"/>
      <constructor name="new" c:identifier="gdm_client_new">
        <source-position filename="gdm-client.h" line="41"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="GdmClient*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="gdm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_chooser" c:identifier="gdm_client_get_chooser">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1305">Gets a #GdmChooser object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1307">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1310">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1308">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1309">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_finish"
              c:identifier="gdm_client_get_chooser_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1344">Finishes an operation started with
gdm_client_get_chooser().</doc>
        <source-position filename="gdm-client.h" line="99"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1353">a #GdmChooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1346">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1347">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_sync"
              c:identifier="gdm_client_get_chooser_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1380">Gets a #GdmChooser object that can be used
to do do various XDMCP chooser related tasks, such
as selecting a host or disconnecting.</doc>
        <source-position filename="gdm-client.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1390">#GdmChooser or %NULL if caller is not a chooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1382">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1383">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter" c:identifier="gdm_client_get_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="967">Gets a #GdmGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="969">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="972">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="970">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="971">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_finish"
              c:identifier="gdm_client_get_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1006">Finishes an operation started with
gdm_client_get_greeter().</doc>
        <source-position filename="gdm-client.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1015">a #GdmGreeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1008">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1009">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_sync"
              c:identifier="gdm_client_get_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1042">Gets a #GdmGreeter object that can be used
to do do various login screen related tasks, such
as selecting a users session, and starting that
session.</doc>
        <source-position filename="gdm-client.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1053">#GdmGreeter or %NULL if caller is not a greeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1044">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1045">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter"
              c:identifier="gdm_client_get_remote_greeter">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1137">Gets a #GdmRemoteGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1139">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1142">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1140">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1141">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_finish"
              c:identifier="gdm_client_get_remote_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1176">Finishes an operation started with
gdm_client_get_remote_greeter().</doc>
        <source-position filename="gdm-client.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1185">a #GdmRemoteGreeter</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1178">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1179">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_sync"
              c:identifier="gdm_client_get_remote_greeter_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1212">Gets a #GdmRemoteGreeter object that can be used
to do do various remote login screen related tasks,
such as disconnecting.</doc>
        <source-position filename="gdm-client.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="1222">#GdmRemoteGreeter or %NULL if caller is not remote</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1214">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1215">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier"
              c:identifier="gdm_client_get_user_verifier">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="803">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="805">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="808">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="806">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="807">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_choice_list"
              c:identifier="gdm_client_get_user_verifier_choice_list">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="878">Gets a #GdmUserVerifierChoiceList object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="885">#GdmUserVerifierChoiceList or %NULL if user
verifier isn't yet fetched, or daemon doesn't support choice lists</doc>
          <type name="UserVerifierChoiceList"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="880">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_finish"
              c:identifier="gdm_client_get_user_verifier_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="842">Finishes an operation started with
gdm_client_get_user_verifier().</doc>
        <source-position filename="gdm-client.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="851">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="844">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="845">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_sync"
              c:identifier="gdm_client_get_user_verifier_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="701">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="gdm-client.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="710">#GdmUserVerifier or %NULL if not connected</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="703">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="704">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel"
              c:identifier="gdm_client_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="640">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user.</doc>
        <source-position filename="gdm-client.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="642">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="643">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="646">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="644">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="645">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_finish"
              c:identifier="gdm_client_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="680">Finishes an operation started with
gdm_client_open_reauthentication_channel().</doc>
        <source-position filename="gdm-client.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="689">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="682">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="683">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_sync"
              c:identifier="gdm_client_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="569">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user. Free with
g_object_unref to close reauthentication channel.</doc>
        <source-position filename="gdm-client.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client.c"
               line="580">#GdmUserVerifier or %NULL if @username is not
already logged in.</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="571">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="572">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="573">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_extensions"
              c:identifier="gdm_client_set_enabled_extensions">
        <doc xml:space="preserve"
             filename="gdm-client.c"
             line="1494">Enables GDM's pam extensions.  Currently, only
org.gnome.DisplayManager.UserVerifier.ChoiceList is supported.</doc>
        <source-position filename="gdm-client.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1496">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client.c"
                 line="1497">a list of extensions</doc>
            <array c:type="const char* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ClientClass"
            c:type="GdmClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="gdm-client.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientError" c:type="GdmClientError">
      <source-position filename="gdm-client.h" line="37"/>
      <member name="client_error_generic"
              value="0"
              c:identifier="GDM_CLIENT_ERROR_GENERIC">
      </member>
    </enumeration>
    <function-macro name="GREETER"
                    c:identifier="GDM_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="904"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_GET_IFACE"
                    c:identifier="GDM_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="906"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY"
                    c:identifier="GDM_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1135"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_CLASS"
                    c:identifier="GDM_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1136"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1137"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON"
                    c:identifier="GDM_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1205"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1206"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1207"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Greeter"
               c:symbol-prefix="greeter"
               c:type="GdmGreeter"
               glib:type-name="GdmGreeter"
               glib:get-type="gdm_greeter_get_type"
               glib:type-struct="GreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6178">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="967"/>
      <function name="interface_info"
                c:identifier="gdm_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6147">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="975"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6152">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6160">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="976"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6168">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6162">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6163">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="default_language_name_changed">
        <source-position filename="gdm-client-glue.h" line="942"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="default_session_name_changed">
        <source-position filename="gdm-client-glue.h" line="946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_auto_login">
        <source-position filename="gdm-client-glue.h" line="917"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_timed_login_details">
        <source-position filename="gdm-client-glue.h" line="922"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_session">
        <source-position filename="gdm-client-glue.h" line="926"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_user">
        <source-position filename="gdm-client-glue.h" line="931"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_session_when_ready">
        <source-position filename="gdm-client-glue.h" line="936"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthenticated">
        <source-position filename="gdm-client-glue.h" line="950"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selected_user_changed">
        <source-position filename="gdm-client-glue.h" line="954"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_opened">
        <source-position filename="gdm-client-glue.h" line="958"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timed_login_requested">
        <source-position filename="gdm-client-glue.h" line="962"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_begin_auto_login"
              c:identifier="gdm_greeter_call_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6730">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_begin_auto_login_finish() to get the result of the operation.

See gdm_greeter_call_begin_auto_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1070"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6732">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6733">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6734">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6735">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6736">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_finish"
              c:identifier="gdm_greeter_call_begin_auto_login_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6763">Finishes an operation started with gdm_greeter_call_begin_auto_login().</doc>
        <source-position filename="gdm-client-glue.h" line="1077"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6771">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6765">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6766">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_begin_auto_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_sync"
              c:identifier="gdm_greeter_call_begin_auto_login_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6790">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_begin_auto_login() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1082"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6801">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6792">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6793">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6794">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details"
              c:identifier="gdm_greeter_call_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6828">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_get_timed_login_details_finish() to get the result of the operation.

See gdm_greeter_call_get_timed_login_details_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1088"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6830">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6831">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6832">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6833">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_finish"
              c:identifier="gdm_greeter_call_get_timed_login_details_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6858">Finishes an operation started with gdm_greeter_call_get_timed_login_details().</doc>
        <source-position filename="gdm-client-glue.h" line="1094"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6869">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6860">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6861">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6862">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6863">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6864">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_get_timed_login_details().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_sync"
              c:identifier="gdm_greeter_call_get_timed_login_details_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6894">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_get_timed_login_details() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1102"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6907">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6896">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6897">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6898">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6899">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6900">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session"
              c:identifier="gdm_greeter_call_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6534">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_session_finish() to get the result of the operation.

See gdm_greeter_call_select_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1034"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6536">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6537">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6538">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6539">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6540">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_finish"
              c:identifier="gdm_greeter_call_select_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6567">Finishes an operation started with gdm_greeter_call_select_session().</doc>
        <source-position filename="gdm-client-glue.h" line="1041"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6575">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6569">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6570">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_sync"
              c:identifier="gdm_greeter_call_select_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6594">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1046"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6605">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6596">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6597">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6598">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user"
              c:identifier="gdm_greeter_call_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6632">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_select_user_finish() to get the result of the operation.

See gdm_greeter_call_select_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1052"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6634">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6635">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6636">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6637">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6638">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_finish"
              c:identifier="gdm_greeter_call_select_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6665">Finishes an operation started with gdm_greeter_call_select_user().</doc>
        <source-position filename="gdm-client-glue.h" line="1059"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6673">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6667">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6668">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_sync"
              c:identifier="gdm_greeter_call_select_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6692">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1064"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6703">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6694">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6695">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6696">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready"
              c:identifier="gdm_greeter_call_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6938">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_call_start_session_when_ready_finish() to get the result of the operation.

See gdm_greeter_call_start_session_when_ready_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6940">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6941">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6942">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6943">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6944">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6945">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_finish"
              c:identifier="gdm_greeter_call_start_session_when_ready_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6974">Finishes an operation started with gdm_greeter_call_start_session_when_ready().</doc>
        <source-position filename="gdm-client-glue.h" line="1118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6982">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6976">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6977">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_start_session_when_ready().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_sync"
              c:identifier="gdm_greeter_call_start_session_when_ready_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7001">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_start_session_when_ready() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7013">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7003">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7004">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7005">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7006">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_auto_login"
              c:identifier="gdm_greeter_complete_begin_auto_login">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7078">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="988"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7080">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7081">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_timed_login_details"
              c:identifier="gdm_greeter_complete_get_timed_login_details">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7096">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7098">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7099">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7100">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7101">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7102">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_session"
              c:identifier="gdm_greeter_complete_select_session">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7042">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="980"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7044">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7045">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_user"
              c:identifier="gdm_greeter_complete_select_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7060">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="984"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7062">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7063">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_session_when_ready"
              c:identifier="gdm_greeter_complete_start_session_when_ready">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7123">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="999"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7125">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7126">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_language_name_changed"
              c:identifier="gdm_greeter_emit_default_language_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6457">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6459">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6460">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_session_name_changed"
              c:identifier="gdm_greeter_emit_default_session_name_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6472">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1014"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6474">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6475">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthenticated"
              c:identifier="gdm_greeter_emit_reauthenticated">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6519">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1027"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6521">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6522">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_selected_user_changed"
              c:identifier="gdm_greeter_emit_selected_user_changed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6442">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1006"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6444">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6445">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_session_opened"
              c:identifier="gdm_greeter_emit_session_opened">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6504">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1023"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6506">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6507">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_timed_login_requested"
              c:identifier="gdm_greeter_emit_timed_login_requested">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6487">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="1018"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6489">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6490">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6491">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="default-language-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6344">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6347">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="default-session-name-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6363">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6366">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-auto-login" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6255">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_begin_auto_login() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6265">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6258">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6259">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-timed-login-details" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6278">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_get_timed_login_details() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6287">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6281">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6209">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6219">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6212">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6213">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6232">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6242">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6235">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6236">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-session-when-ready" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6300">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_start_session_when_ready() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6311">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6303">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6304">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6305">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthenticated" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6421">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6424">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected-user-changed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6325">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6328">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-opened" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6402">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6405">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timed-login-requested" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6382">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6385">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="6386">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterIface"
            c:type="GdmGreeterIface"
            glib:is-gtype-struct-for="Greeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6184">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="967"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6186">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_begin_auto_login">
        <callback name="handle_begin_auto_login">
          <source-position filename="gdm-client-glue.h" line="917"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_timed_login_details">
        <callback name="handle_get_timed_login_details">
          <source-position filename="gdm-client-glue.h" line="922"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_session">
        <callback name="handle_select_session">
          <source-position filename="gdm-client-glue.h" line="926"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_user">
        <callback name="handle_select_user">
          <source-position filename="gdm-client-glue.h" line="931"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_session_when_ready">
        <callback name="handle_start_session_when_ready">
          <source-position filename="gdm-client-glue.h" line="936"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_should_start_session"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_language_name_changed">
        <callback name="default_language_name_changed">
          <source-position filename="gdm-client-glue.h" line="942"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_language_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_session_name_changed">
        <callback name="default_session_name_changed">
          <source-position filename="gdm-client-glue.h" line="946"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_session_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthenticated">
        <callback name="reauthenticated">
          <source-position filename="gdm-client-glue.h" line="950"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selected_user_changed">
        <callback name="selected_user_changed">
          <source-position filename="gdm-client-glue.h" line="954"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_opened">
        <callback name="session_opened">
          <source-position filename="gdm-client-glue.h" line="958"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timed_login_requested">
        <callback name="timed_login_requested">
          <source-position filename="gdm-client-glue.h" line="962"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_delay" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterProxy"
           c:symbol-prefix="greeter_proxy"
           c:type="GdmGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmGreeterProxy"
           glib:get-type="gdm_greeter_proxy_get_type"
           glib:type-struct="GreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7143">The #GdmGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1155"/>
      <implements name="Greeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7334">Finishes an operation started with gdm_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7341">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7336">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7424">Finishes an operation started with gdm_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1190"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7431">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7426">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7449">Like gdm_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1193"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7464">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7451">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7452">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7453">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7454">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7455">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7359">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7374">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7361">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7362">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7363">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7364">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7365">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7304">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_finish() to get the result of the operation.

See gdm_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7306">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7307">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7308">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7309">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7310">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7311">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7312">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7394">Like gdm_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7396">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7397">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7398">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7399">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7400">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7401">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7402">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterProxyPrivate" c:type="GdmGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="GreeterProxyClass"
            c:type="GdmGreeterProxyClass"
            glib:is-gtype-struct-for="GreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7149">Class structure for #GdmGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1155"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7151">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GreeterProxyPrivate"
            c:type="GdmGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1143"/>
    </record>
    <class name="GreeterSkeleton"
           c:symbol-prefix="greeter_skeleton"
           c:type="GdmGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmGreeterSkeleton"
           glib:get-type="gdm_greeter_skeleton_get_type"
           glib:type-struct="GreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7486">The #GdmGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1225"/>
      <implements name="Greeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7909">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1233"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7914">The skeleton object.</doc>
          <type name="GreeterSkeleton" c:type="GdmGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterSkeletonPrivate"
              c:type="GdmGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GreeterSkeletonClass"
            c:type="GdmGreeterSkeletonClass"
            glib:is-gtype-struct-for="GreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7492">Class structure for #GdmGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1225"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7494">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GreeterSkeletonPrivate"
            c:type="GdmGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1213"/>
    </record>
    <function-macro name="IS_CHOOSER"
                    c:identifier="GDM_IS_CHOOSER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1403"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY"
                    c:identifier="GDM_IS_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1489"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_IS_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1490"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON"
                    c:identifier="GDM_IS_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1559"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_IS_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1560"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER"
                    c:identifier="GDM_IS_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="905"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY"
                    c:identifier="GDM_IS_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1138"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1139"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON"
                    c:identifier="GDM_IS_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1208"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1209"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="GDM_IS_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="GDM_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="176"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="177"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="GDM_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="247"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER"
                    c:identifier="GDM_IS_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1241"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1300"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1301"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1370"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1371"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER"
                    c:identifier="GDM_IS_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="345"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="721"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="802"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="803"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="872"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="873"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="618"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="619"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="688"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="689"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER"
                    c:identifier="GDM_IS_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="242"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="243"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="312"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="313"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER"
                    c:identifier="GDM_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="20"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="GDM_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="GDM_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="173"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="174"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="175"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="GDM_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="243"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="244"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-manager-glue.h" line="245"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="GdmManager"
               glib:type-name="GdmManager"
               glib:get-type="gdm_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="380">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="54"/>
      <function name="interface_info"
                c:identifier="gdm_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="348">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-manager-glue.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="353">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="361">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-manager-glue.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="369">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="363">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="364">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="508">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="gdm-manager-glue.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="510">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_reauthentication_channel">
        <source-position filename="gdm-manager-glue.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_session">
        <source-position filename="gdm-manager-glue.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_display">
        <source-position filename="gdm-manager-glue.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_session">
        <source-position filename="gdm-manager-glue.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open_reauthentication_channel"
              c:identifier="gdm_manager_call_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="853">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_reauthentication_channel_finish() to get the result of the operation.

See gdm_manager_call_open_reauthentication_channel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="855">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="856">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="857">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="858">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="859">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_finish"
              c:identifier="gdm_manager_call_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="886">Finishes an operation started with gdm_manager_call_open_reauthentication_channel().</doc>
        <source-position filename="gdm-manager-glue.h" line="149"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="895">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="888">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="889">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="890">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_reauthentication_channel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_sync"
              c:identifier="gdm_manager_call_open_reauthentication_channel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="916">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_reauthentication_channel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="155"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="928">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="918">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="919">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="920">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="921">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session"
              c:identifier="gdm_manager_call_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="755">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_open_session_finish() to get the result of the operation.

See gdm_manager_call_open_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="757">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="758">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="759">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="760">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_finish"
              c:identifier="gdm_manager_call_open_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="785">Finishes an operation started with gdm_manager_call_open_session().</doc>
        <source-position filename="gdm-manager-glue.h" line="130"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="794">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="787">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="788">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="789">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_sync"
              c:identifier="gdm_manager_call_open_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="815">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="136"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="826">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="817">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="818">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="819">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display"
              c:identifier="gdm_manager_call_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="559">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_register_display_finish() to get the result of the operation.

See gdm_manager_call_register_display_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="561">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="562">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="563">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="564">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="565">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_finish"
              c:identifier="gdm_manager_call_register_display_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="592">Finishes an operation started with gdm_manager_call_register_display().</doc>
        <source-position filename="gdm-manager-glue.h" line="95"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="600">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="594">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="595">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_display().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_sync"
              c:identifier="gdm_manager_call_register_display_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="619">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_display() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="100"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="630">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="621">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="622">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="623">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session"
              c:identifier="gdm_manager_call_register_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="657">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_call_register_session_finish() to get the result of the operation.

See gdm_manager_call_register_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="659">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="660">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="661">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="662">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="663">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_finish"
              c:identifier="gdm_manager_call_register_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="690">Finishes an operation started with gdm_manager_call_register_session().</doc>
        <source-position filename="gdm-manager-glue.h" line="113"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="698">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="692">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="693">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_sync"
              c:identifier="gdm_manager_call_register_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="717">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_session() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-manager-glue.h" line="118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="728">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="719">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="720">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="721">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_reauthentication_channel"
              c:identifier="gdm_manager_complete_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1014">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1016">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1017">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1018">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_session"
              c:identifier="gdm_manager_complete_open_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="993">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="995">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="996">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="997">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_display"
              c:identifier="gdm_manager_complete_register_display">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="957">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="959">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="960">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_session"
              c:identifier="gdm_manager_complete_register_session">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="975">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-manager-glue.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="977">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="978">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="gdm_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="526">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="166"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="534">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="528">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gdm_manager_get_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="508">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="gdm-manager-glue.h" line="165"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="510">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gdm_manager_set_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="544">Sets the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="gdm-manager-glue.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="546">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="547">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="497">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-open-reauthentication-channel" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="473">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_reauthentication_channel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="483">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="476">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="477">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="451">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="460">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="454">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-display" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="405">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_display() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="415">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="408">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="409">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-session" when="last">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="428">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="438">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="431">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="432">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="GdmManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="386">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="gdm-manager-glue.h" line="54"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="388">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open_reauthentication_channel">
        <callback name="handle_open_reauthentication_channel">
          <source-position filename="gdm-manager-glue.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_session">
        <callback name="handle_open_session">
          <source-position filename="gdm-manager-glue.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_display">
        <callback name="handle_register_display">
          <source-position filename="gdm-manager-glue.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_session">
        <callback name="handle_register_session">
          <source-position filename="gdm-manager-glue.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="gdm-manager-glue.h" line="52"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="518">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="gdm-manager-glue.c"
                   line="510">A #GdmManager.</doc>
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="GdmManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmManagerProxy"
           glib:get-type="gdm_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1037">The #GdmManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="193"/>
      <implements name="Manager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1297">Finishes an operation started with gdm_manager_proxy_new().</doc>
        <source-position filename="gdm-manager-glue.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1304">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1299">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1387">Finishes an operation started with gdm_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-manager-glue.h" line="228"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1394">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1389">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1412">Like gdm_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="231"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1427">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1414">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1415">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1416">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1417">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1418">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1322">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="212"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1337">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1324">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1325">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1326">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1327">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1328">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1267">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_finish() to get the result of the operation.

See gdm_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1269">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1270">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1271">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1272">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1273">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1274">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1275">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1357">Like gdm_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-manager-glue.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1359">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1360">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1361">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1362">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1363">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1364">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-manager-glue.c"
                 line="1365">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="GdmManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="GdmManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1043">Class structure for #GdmManagerProxy.</doc>
      <source-position filename="gdm-manager-glue.h" line="193"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1045">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="GdmManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="181"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="GdmManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmManagerSkeleton"
           glib:get-type="gdm_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1449">The #GdmManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-manager-glue.h" line="263"/>
      <implements name="Manager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1902">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
        <source-position filename="gdm-manager-glue.h" line="271"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="1907">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="GdmManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="GdmManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="GdmManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="1455">Class structure for #GdmManagerSkeleton.</doc>
      <source-position filename="gdm-manager-glue.h" line="263"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="1457">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="GdmManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-manager-glue.h" line="251"/>
    </record>
    <function-macro name="REMOTE_GREETER"
                    c:identifier="GDM_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1240"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_GET_IFACE"
                    c:identifier="GDM_REMOTE_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1242"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY"
                    c:identifier="GDM_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1297"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1298"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1299"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1367"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1368"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="1369"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="RemoteGreeter"
               c:symbol-prefix="remote_greeter"
               c:type="GdmRemoteGreeter"
               glib:type-name="GdmRemoteGreeter"
               glib:get-type="gdm_remote_greeter_get_type"
               glib:type-struct="RemoteGreeterIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8001">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1256"/>
      <function name="interface_info"
                c:identifier="gdm_remote_greeter_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7970">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="1264"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7975">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_remote_greeter_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7983">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="1265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7991">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7985">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="7986">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <source-position filename="gdm-client-glue.h" line="1252"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_remote_greeter_call_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8046">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_call_disconnect_finish() to get the result of the operation.

See gdm_remote_greeter_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8048">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8049">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8050">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8051">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_remote_greeter_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8076">Finishes an operation started with gdm_remote_greeter_call_disconnect().</doc>
        <source-position filename="gdm-client-glue.h" line="1282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8084">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8078">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8079">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_remote_greeter_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8103">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_remote_greeter_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="1287"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8113">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8105">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8106">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_remote_greeter_complete_disconnect">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8138">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="1269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8140">A #GdmRemoteGreeter.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8141">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8022">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_remote_greeter_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8031">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8025">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="RemoteGreeterIface"
            c:type="GdmRemoteGreeterIface"
            glib:is-gtype-struct-for="RemoteGreeter">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8007">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="1256"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8009">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="gdm-client-glue.h" line="1252"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RemoteGreeterProxy"
           c:symbol-prefix="remote_greeter_proxy"
           c:type="GdmRemoteGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmRemoteGreeterProxy"
           glib:get-type="gdm_remote_greeter_proxy_get_type"
           glib:type-struct="RemoteGreeterProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8158">The #GdmRemoteGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1317"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8349">Finishes an operation started with gdm_remote_greeter_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="1333"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8356">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8351">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8439">Finishes an operation started with gdm_remote_greeter_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="1352"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8446">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8441">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8464">Like gdm_remote_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1355"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8479">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8466">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8467">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8468">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8469">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8470">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8374">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1336"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8389">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8376">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8377">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8378">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8379">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8380">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_remote_greeter_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8319">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1325"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8321">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8322">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8323">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8324">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8325">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8326">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8327">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_remote_greeter_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8409">Like gdm_remote_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_remote_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="1344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8411">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8412">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8413">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8414">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8415">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8416">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="8417">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterProxyPrivate"
              c:type="GdmRemoteGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterProxyClass"
            c:type="GdmRemoteGreeterProxyClass"
            glib:is-gtype-struct-for="RemoteGreeterProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8164">Class structure for #GdmRemoteGreeterProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="1317"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8166">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RemoteGreeterProxyPrivate"
            c:type="GdmRemoteGreeterProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1305"/>
    </record>
    <class name="RemoteGreeterSkeleton"
           c:symbol-prefix="remote_greeter_skeleton"
           c:type="GdmRemoteGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmRemoteGreeterSkeleton"
           glib:get-type="gdm_remote_greeter_skeleton_get_type"
           glib:type-struct="RemoteGreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8501">The #GdmRemoteGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="1387"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_remote_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8772">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="1395"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8777">The skeleton object.</doc>
          <type name="RemoteGreeterSkeleton" c:type="GdmRemoteGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterSkeletonPrivate"
              c:type="GdmRemoteGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterSkeletonClass"
            c:type="GdmRemoteGreeterSkeletonClass"
            glib:is-gtype-struct-for="RemoteGreeterSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8507">Class structure for #GdmRemoteGreeterSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="1387"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8509">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RemoteGreeterSkeletonPrivate"
            c:type="GdmRemoteGreeterSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="1375"/>
    </record>
    <function-macro name="USER_VERIFIER"
                    c:identifier="GDM_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="344"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="720"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="722"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="799"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="800"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="801"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="869"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="870"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="871"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="346"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY"
                    c:identifier="GDM_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="615"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="616"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="617"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="685"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="686"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="687"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="UserVerifier"
               c:symbol-prefix="user_verifier"
               c:type="GdmUserVerifier"
               glib:type-name="GdmUserVerifier"
               glib:get-type="gdm_user_verifier_get_type"
               glib:type-struct="UserVerifierIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2657">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="431"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2626">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="439"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2631">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2639">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="440"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2647">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2641">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2642">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="conversation_started">
        <source-position filename="gdm-client-glue.h" line="383"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="conversation_stopped">
        <source-position filename="gdm-client-glue.h" line="387"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_answer_query">
        <source-position filename="gdm-client-glue.h" line="357"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification">
        <source-position filename="gdm-client-glue.h" line="363"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification_for_user">
        <source-position filename="gdm-client-glue.h" line="368"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="gdm-client-glue.h" line="374"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_extensions">
        <source-position filename="gdm-client-glue.h" line="378"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info">
        <source-position filename="gdm-client-glue.h" line="391"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info_query">
        <source-position filename="gdm-client-glue.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="problem">
        <source-position filename="gdm-client-glue.h" line="401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthentication_started">
        <source-position filename="gdm-client-glue.h" line="406"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <source-position filename="gdm-client-glue.h" line="410"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secret_info_query">
        <source-position filename="gdm-client-glue.h" line="413"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_unavailable">
        <source-position filename="gdm-client-glue.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_complete">
        <source-position filename="gdm-client-glue.h" line="423"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_failed">
        <source-position filename="gdm-client-glue.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_answer_query"
              c:identifier="gdm_user_verifier_call_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3498">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_answer_query_finish() to get the result of the operation.

See gdm_user_verifier_call_answer_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="574"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3500">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3501">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3502">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3503">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3504">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3505">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_finish"
              c:identifier="gdm_user_verifier_call_answer_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3534">Finishes an operation started with gdm_user_verifier_call_answer_query().</doc>
        <source-position filename="gdm-client-glue.h" line="582"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3542">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3536">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3537">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_answer_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_sync"
              c:identifier="gdm_user_verifier_call_answer_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3561">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_answer_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="587"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3573">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3563">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3564">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3565">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3566">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification"
              c:identifier="gdm_user_verifier_call_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3296">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3298">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3299">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3300">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3301">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3302">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3329">Finishes an operation started with gdm_user_verifier_call_begin_verification().</doc>
        <source-position filename="gdm-client-glue.h" line="543"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3337">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3331">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3332">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3394">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_begin_verification_for_user_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_for_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="554"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3396">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3397">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3398">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3399">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3400">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3401">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3430">Finishes an operation started with gdm_user_verifier_call_begin_verification_for_user().</doc>
        <source-position filename="gdm-client-glue.h" line="562"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3438">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3432">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3433">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification_for_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3457">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification_for_user() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="567"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3469">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3459">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3460">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3461">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3462">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3356">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="548"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3367">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3358">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3359">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3360">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel" c:identifier="gdm_user_verifier_call_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3602">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_cancel_finish() to get the result of the operation.

See gdm_user_verifier_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="594"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3604">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3605">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3606">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3607">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="gdm_user_verifier_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3632">Finishes an operation started with gdm_user_verifier_call_cancel().</doc>
        <source-position filename="gdm-client-glue.h" line="600"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3640">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3634">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3635">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="gdm_user_verifier_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3659">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="605"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3669">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3661">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3662">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions"
              c:identifier="gdm_user_verifier_call_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3198">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_call_enable_extensions_finish() to get the result of the operation.

See gdm_user_verifier_call_enable_extensions_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="518"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3200">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3201">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3202">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3203">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3204">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_finish"
              c:identifier="gdm_user_verifier_call_enable_extensions_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3231">Finishes an operation started with gdm_user_verifier_call_enable_extensions().</doc>
        <source-position filename="gdm-client-glue.h" line="525"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3239">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3233">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3234">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_enable_extensions().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_sync"
              c:identifier="gdm_user_verifier_call_enable_extensions_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3258">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_enable_extensions() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="530"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3269">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3260">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3261">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3262">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_answer_query"
              c:identifier="gdm_user_verifier_complete_answer_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3748">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="456"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3750">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3751">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification"
              c:identifier="gdm_user_verifier_complete_begin_verification">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3712">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="448"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3714">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3715">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification_for_user"
              c:identifier="gdm_user_verifier_complete_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3730">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3732">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3733">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="gdm_user_verifier_complete_cancel">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3766">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="460"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3768">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3769">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_extensions"
              c:identifier="gdm_user_verifier_complete_enable_extensions">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3694">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="444"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3696">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3697">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_started"
              c:identifier="gdm_user_verifier_emit_conversation_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3025">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="467"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3027">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3028">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_stopped"
              c:identifier="gdm_user_verifier_emit_conversation_stopped">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3040">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="471"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3042">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3043">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info" c:identifier="gdm_user_verifier_emit_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3070">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="479"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3072">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3073">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3074">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info_query"
              c:identifier="gdm_user_verifier_emit_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3104">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3106">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3107">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3108">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_problem"
              c:identifier="gdm_user_verifier_emit_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3087">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3089">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3090">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3091">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthentication_started"
              c:identifier="gdm_user_verifier_emit_reauthentication_started">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3055">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="475"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3057">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3058">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reset" c:identifier="gdm_user_verifier_emit_reset">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3138">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="499"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3140">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_secret_info_query"
              c:identifier="gdm_user_verifier_emit_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3121">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="494"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3123">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3124">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3125">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_unavailable"
              c:identifier="gdm_user_verifier_emit_service_unavailable">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3151">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="502"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3153">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3154">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3155">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_complete"
              c:identifier="gdm_user_verifier_emit_verification_complete">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3183">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3185">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3186">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_failed"
              c:identifier="gdm_user_verifier_emit_verification_failed">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3168">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3170">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3171">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="conversation-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2810">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2813">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="conversation-stopped" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2829">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2832">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-answer-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2763">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_answer_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2774">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2766">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2767">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2768">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2716">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2726">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2719">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2720">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification-for-user" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2739">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification_for_user() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2750">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2742">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2743">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2744">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2787">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2796">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2790">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-extensions" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2693">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_enable_extensions() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2703">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2696">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2697">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2867">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2870">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2871">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2907">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2910">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2911">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2887">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2890">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2891">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthentication-started" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2848">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2851">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2947">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2927">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2930">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2931">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-unavailable" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2965">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2968">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2969">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-complete" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3004">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3007">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-failed" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2985">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="2988">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="UserVerifierChoiceList"
               c:symbol-prefix="user_verifier_choice_list"
               c:type="GdmUserVerifierChoiceList"
               glib:type-name="GdmUserVerifierChoiceList"
               glib:get-type="gdm_user_verifier_choice_list_get_type"
               glib:type-struct="UserVerifierChoiceListIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4862">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="745"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_choice_list_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4831">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="753"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4836">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_choice_list_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4844">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="754"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4852">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4846">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4847">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="choice_query">
        <source-position filename="gdm-client-glue.h" line="739"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_choice">
        <source-position filename="gdm-client-glue.h" line="733"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_select_choice"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4951">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_call_select_choice_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_call_select_choice_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="774"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4953">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4954">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4955">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4956">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4957">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4958">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_finish"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4987">Finishes an operation started with gdm_user_verifier_choice_list_call_select_choice().</doc>
        <source-position filename="gdm-client-glue.h" line="782"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4995">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4989">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4990">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_call_select_choice().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_sync"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5014">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_call_select_choice() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="787"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5026">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5016">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5017">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5018">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5019">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_choice"
              c:identifier="gdm_user_verifier_choice_list_complete_select_choice">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5055">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="758"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5057">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5058">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_choice_query"
              c:identifier="gdm_user_verifier_choice_list_emit_choice_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4932">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="gdm-client-glue.h" line="765"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4934">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4935">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4936">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4937">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="choice-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4909">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4912">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4913">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4914">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-choice" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4884">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_choice_list_complete_select_choice() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4895">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4887">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4888">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4889">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierChoiceListIface"
            c:type="GdmUserVerifierChoiceListIface"
            glib:is-gtype-struct-for="UserVerifierChoiceList">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4868">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="745"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4870">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_select_choice">
        <callback name="handle_select_choice">
          <source-position filename="gdm-client-glue.h" line="733"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choice" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choice_query">
        <callback name="choice_query">
          <source-position filename="gdm-client-glue.h" line="739"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_list" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierChoiceListProxy"
           c:symbol-prefix="user_verifier_choice_list_proxy"
           c:type="GdmUserVerifierChoiceListProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierChoiceListProxy"
           glib:get-type="gdm_user_verifier_choice_list_proxy_get_type"
           glib:type-struct="UserVerifierChoiceListProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5075">The #GdmUserVerifierChoiceListProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="819"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5266">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="835"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5273">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5268">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5356">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="854"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5363">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5358">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5381">Like gdm_user_verifier_choice_list_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="857"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5396">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5383">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5384">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5385">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5386">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5387">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5291">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="838"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5306">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5293">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5294">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5295">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5296">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5297">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_choice_list_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5236">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5238">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5239">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5240">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5241">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5242">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5243">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5244">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5326">Like gdm_user_verifier_choice_list_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_choice_list_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="846"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5328">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5329">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5330">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5331">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5332">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5333">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="5334">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListProxyPrivate"
              c:type="GdmUserVerifierChoiceListProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListProxyClass"
            c:type="GdmUserVerifierChoiceListProxyClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5081">Class structure for #GdmUserVerifierChoiceListProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="819"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5083">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListProxyPrivate"
            c:type="GdmUserVerifierChoiceListProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="807"/>
    </record>
    <class name="UserVerifierChoiceListSkeleton"
           c:symbol-prefix="user_verifier_choice_list_skeleton"
           c:type="GdmUserVerifierChoiceListSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierChoiceListSkeleton"
           glib:get-type="gdm_user_verifier_choice_list_skeleton_get_type"
           glib:type-struct="UserVerifierChoiceListSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5418">The #GdmUserVerifierChoiceListSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="889"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_choice_list_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5718">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="897"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="5723">The skeleton object.</doc>
          <type name="UserVerifierChoiceListSkeleton"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListSkeletonPrivate"
              c:type="GdmUserVerifierChoiceListSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListSkeletonClass"
            c:type="GdmUserVerifierChoiceListSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="5424">Class structure for #GdmUserVerifierChoiceListSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="889"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="5426">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListSkeletonPrivate"
            c:type="GdmUserVerifierChoiceListSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="877"/>
    </record>
    <record name="UserVerifierIface"
            c:type="GdmUserVerifierIface"
            glib:is-gtype-struct-for="UserVerifier">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2663">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="431"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2665">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_answer_query">
        <callback name="handle_answer_query">
          <source-position filename="gdm-client-glue.h" line="357"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_answer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification">
        <callback name="handle_begin_verification">
          <source-position filename="gdm-client-glue.h" line="363"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification_for_user">
        <callback name="handle_begin_verification_for_user">
          <source-position filename="gdm-client-glue.h" line="368"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="gdm-client-glue.h" line="374"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_extensions">
        <callback name="handle_enable_extensions">
          <source-position filename="gdm-client-glue.h" line="378"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_extensions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_started">
        <callback name="conversation_started">
          <source-position filename="gdm-client-glue.h" line="383"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_stopped">
        <callback name="conversation_stopped">
          <source-position filename="gdm-client-glue.h" line="387"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info">
        <callback name="info">
          <source-position filename="gdm-client-glue.h" line="391"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info_query">
        <callback name="info_query">
          <source-position filename="gdm-client-glue.h" line="396"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="problem">
        <callback name="problem">
          <source-position filename="gdm-client-glue.h" line="401"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthentication_started">
        <callback name="reauthentication_started">
          <source-position filename="gdm-client-glue.h" line="406"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_pid_of_caller" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <source-position filename="gdm-client-glue.h" line="410"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secret_info_query">
        <callback name="secret_info_query">
          <source-position filename="gdm-client-glue.h" line="413"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unavailable">
        <callback name="service_unavailable">
          <source-position filename="gdm-client-glue.h" line="418"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_complete">
        <callback name="verification_complete">
          <source-position filename="gdm-client-glue.h" line="423"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_failed">
        <callback name="verification_failed">
          <source-position filename="gdm-client-glue.h" line="427"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierProxy"
           c:symbol-prefix="user_verifier_proxy"
           c:type="GdmUserVerifierProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierProxy"
           glib:get-type="gdm_user_verifier_proxy_get_type"
           glib:type-struct="UserVerifierProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3786">The #GdmUserVerifierProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="635"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3977">Finishes an operation started with gdm_user_verifier_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="651"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="3984">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3979">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4067">Finishes an operation started with gdm_user_verifier_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="670"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4074">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4069">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4092">Like gdm_user_verifier_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="673"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4107">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4094">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4095">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4096">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4097">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4098">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4002">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="654"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4017">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4004">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4005">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4006">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4007">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4008">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_user_verifier_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3947">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3949">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3950">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3951">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3952">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3953">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3954">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="3955">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4037">Like gdm_user_verifier_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_user_verifier_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="662"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4039">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4040">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4041">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4042">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4043">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4044">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="4045">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierProxyPrivate"
              c:type="GdmUserVerifierProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierProxyClass"
            c:type="GdmUserVerifierProxyClass"
            glib:is-gtype-struct-for="UserVerifierProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="3792">Class structure for #GdmUserVerifierProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="635"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="3794">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierProxyPrivate"
            c:type="GdmUserVerifierProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="623"/>
    </record>
    <class name="UserVerifierSkeleton"
           c:symbol-prefix="user_verifier_skeleton"
           c:type="GdmUserVerifierSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierSkeleton"
           glib:get-type="gdm_user_verifier_skeleton_get_type"
           glib:type-struct="UserVerifierSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4129">The #GdmUserVerifierSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="705"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_user_verifier_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4683">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="713"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4688">The skeleton object.</doc>
          <type name="UserVerifierSkeleton" c:type="GdmUserVerifier*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierSkeletonPrivate"
              c:type="GdmUserVerifierSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierSkeletonClass"
            c:type="GdmUserVerifierSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4135">Class structure for #GdmUserVerifierSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="705"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4137">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierSkeletonPrivate"
            c:type="GdmUserVerifierSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="693"/>
    </record>
    <function-macro name="WORKER_MANAGER"
                    c:identifier="GDM_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="20"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_GET_IFACE"
                    c:identifier="GDM_WORKER_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY"
                    c:identifier="GDM_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="239"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="240"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="241"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="309"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="310"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdm-client-glue.h" line="311"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="WorkerManager"
               c:symbol-prefix="worker_manager"
               c:type="GdmWorkerManager"
               glib:type-name="GdmWorkerManager"
               glib:get-type="gdm_worker_manager_get_type"
               glib:type-struct="WorkerManagerIface">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="510">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="67"/>
      <function name="interface_info"
                c:identifier="gdm_worker_manager_interface_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="479">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="gdm-client-glue.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="484">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_worker_manager_override_properties">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="492">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="gdm-client-glue.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="500">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="494">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="495">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_choice_list_query">
        <source-position filename="gdm-client-glue.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hello">
        <source-position filename="gdm-client-glue.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info">
        <source-position filename="gdm-client-glue.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info_query">
        <source-position filename="gdm-client-glue.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_problem">
        <source-position filename="gdm-client-glue.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_secret_info_query">
        <source-position filename="gdm-client-glue.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_choice_list_query"
              c:identifier="gdm_worker_manager_call_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1201">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_choice_list_query_finish() to get the result of the operation.

See gdm_worker_manager_call_choice_list_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1203">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1205">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1206">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1207">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1208">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1209">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_finish"
              c:identifier="gdm_worker_manager_call_choice_list_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1240">Finishes an operation started with gdm_worker_manager_call_choice_list_query().</doc>
        <source-position filename="gdm-client-glue.h" line="219"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1249">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1242">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1243">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1244">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_choice_list_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_sync"
              c:identifier="gdm_worker_manager_call_choice_list_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1270">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_choice_list_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="225"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1284">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1272">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1273">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1274">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1275">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1276">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1277">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello" c:identifier="gdm_worker_manager_call_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="681">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_hello_finish() to get the result of the operation.

See gdm_worker_manager_call_hello_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="683">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="684">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="685">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="686">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_finish"
              c:identifier="gdm_worker_manager_call_hello_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="711">Finishes an operation started with gdm_worker_manager_call_hello().</doc>
        <source-position filename="gdm-client-glue.h" line="116"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="719">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="713">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="714">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_hello().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_sync"
              c:identifier="gdm_worker_manager_call_hello_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="738">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_hello() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="121"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="748">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="740">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="741">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info" c:identifier="gdm_worker_manager_call_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="993">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_finish() to get the result of the operation.

See gdm_worker_manager_call_info_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="995">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="996">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="997">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="998">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="999">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1000">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_finish"
              c:identifier="gdm_worker_manager_call_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1029">Finishes an operation started with gdm_worker_manager_call_info().</doc>
        <source-position filename="gdm-client-glue.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1037">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1031">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1032">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query"
              c:identifier="gdm_worker_manager_call_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="773">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="775">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="776">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="777">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="778">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="779">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="780">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_finish"
              c:identifier="gdm_worker_manager_call_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="809">Finishes an operation started with gdm_worker_manager_call_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="134"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="818">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="811">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="812">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="813">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_sync"
              c:identifier="gdm_worker_manager_call_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="839">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="140"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="852">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="841">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="842">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="843">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="844">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="845">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_sync"
              c:identifier="gdm_worker_manager_call_info_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1056">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="183"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1068">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1058">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1059">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1060">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1061">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem"
              c:identifier="gdm_worker_manager_call_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1097">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_problem_finish() to get the result of the operation.

See gdm_worker_manager_call_problem_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1099">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1100">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1101">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_finish"
              c:identifier="gdm_worker_manager_call_problem_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1133">Finishes an operation started with gdm_worker_manager_call_problem().</doc>
        <source-position filename="gdm-client-glue.h" line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1141">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1135">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1136">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_problem().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_sync"
              c:identifier="gdm_worker_manager_call_problem_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1160">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_problem() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1172">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1162">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1163">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1164">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1165">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query"
              c:identifier="gdm_worker_manager_call_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="883">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_call_secret_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_secret_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="885">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="886">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="887">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="888">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="889">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="890">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_finish"
              c:identifier="gdm_worker_manager_call_secret_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="919">Finishes an operation started with gdm_worker_manager_call_secret_info_query().</doc>
        <source-position filename="gdm-client-glue.h" line="156"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="928">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="921">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="922">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="923">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_secret_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_sync"
              c:identifier="gdm_worker_manager_call_secret_info_query_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="949">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_secret_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="gdm-client-glue.h" line="162"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="962">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="951">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="952">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="953">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="954">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_choice_list_query"
              c:identifier="gdm_worker_manager_complete_choice_list_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1413">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1415">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1416">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1417">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hello"
              c:identifier="gdm_worker_manager_complete_hello">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1317">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1319">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1320">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info"
              c:identifier="gdm_worker_manager_complete_info">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1377">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1379">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1380">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info_query"
              c:identifier="gdm_worker_manager_complete_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1335">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1337">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1338">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1339">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_problem"
              c:identifier="gdm_worker_manager_complete_problem">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1395">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1397">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1398">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_secret_info_query"
              c:identifier="gdm_worker_manager_complete_secret_info_query">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1356">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="gdm-client-glue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1358">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1359">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1360">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-choice-list-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="654">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_choice_list_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="666">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="657">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="658">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="659">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="660">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hello" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="536">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_hello() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="545">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="539">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="606">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="617">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="609">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="610">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="611">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="558">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="569">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="561">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="562">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="563">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-problem" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="630">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_problem() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="641">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="633">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="634">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="635">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="582">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_secret_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="593">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="585">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="586">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="587">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WorkerManagerIface"
            c:type="GdmWorkerManagerIface"
            glib:is-gtype-struct-for="WorkerManager">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="516">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="gdm-client-glue.h" line="67"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="518">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_choice_list_query">
        <callback name="handle_choice_list_query">
          <source-position filename="gdm-client-glue.h" line="32"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hello">
        <callback name="handle_hello">
          <source-position filename="gdm-client-glue.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info">
        <callback name="handle_info">
          <source-position filename="gdm-client-glue.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info_query">
        <callback name="handle_info_query">
          <source-position filename="gdm-client-glue.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_problem">
        <callback name="handle_problem">
          <source-position filename="gdm-client-glue.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_secret_info_query">
        <callback name="handle_secret_info_query">
          <source-position filename="gdm-client-glue.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WorkerManagerProxy"
           c:symbol-prefix="worker_manager_proxy"
           c:type="GdmWorkerManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmWorkerManagerProxy"
           glib:get-type="gdm_worker_manager_proxy_get_type"
           glib:type-struct="WorkerManagerProxyClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1436">The #GdmWorkerManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="259"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_worker_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1627">Finishes an operation started with gdm_worker_manager_proxy_new().</doc>
        <source-position filename="gdm-client-glue.h" line="275"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1634">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1629">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1717">Finishes an operation started with gdm_worker_manager_proxy_new_for_bus().</doc>
        <source-position filename="gdm-client-glue.h" line="294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1724">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1719">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1742">Like gdm_worker_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="297"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1757">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1744">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1745">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1746">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1747">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1748">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_worker_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1652">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="278"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="1667">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1654">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1655">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1656">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1657">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1658">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="gdm_worker_manager_proxy_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1597">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1599">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1600">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1601">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1602">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1604">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1605">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_worker_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1687">Like gdm_worker_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call gdm_worker_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="gdm-client-glue.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1689">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1690">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1691">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1692">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1693">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1694">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdm-client-glue.c"
                 line="1695">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerProxyPrivate"
              c:type="GdmWorkerManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerProxyClass"
            c:type="GdmWorkerManagerProxyClass"
            glib:is-gtype-struct-for="WorkerManagerProxy">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1442">Class structure for #GdmWorkerManagerProxy.</doc>
      <source-position filename="gdm-client-glue.h" line="259"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1444">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WorkerManagerProxyPrivate"
            c:type="GdmWorkerManagerProxyPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="247"/>
    </record>
    <class name="WorkerManagerSkeleton"
           c:symbol-prefix="worker_manager_skeleton"
           c:type="GdmWorkerManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmWorkerManagerSkeleton"
           glib:get-type="gdm_worker_manager_skeleton_get_type"
           glib:type-struct="WorkerManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1779">The #GdmWorkerManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="gdm-client-glue.h" line="329"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_worker_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2050">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
        <source-position filename="gdm-client-glue.h" line="337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2055">The skeleton object.</doc>
          <type name="WorkerManagerSkeleton" c:type="GdmWorkerManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerSkeletonPrivate"
              c:type="GdmWorkerManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerSkeletonClass"
            c:type="GdmWorkerManagerSkeletonClass"
            glib:is-gtype-struct-for="WorkerManagerSkeleton">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="1785">Class structure for #GdmWorkerManagerSkeleton.</doc>
      <source-position filename="gdm-client-glue.h" line="329"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="1787">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WorkerManagerSkeletonPrivate"
            c:type="GdmWorkerManagerSkeletonPrivate"
            disguised="1">
      <source-position filename="gdm-client-glue.h" line="317"/>
    </record>
    <function name="chooser_interface_info"
              c:identifier="gdm_chooser_interface_info"
              moved-to="Chooser.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8864">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1431"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8869">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="chooser_override_properties"
              c:identifier="gdm_chooser_override_properties"
              moved-to="Chooser.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="8877">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1432"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="8885">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8879">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="8880">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_session_ids" c:identifier="gdm_get_session_ids">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="308">Reads /usr/share/xsessions and other relevant places for possible sessions
to log into and returns the complete list.</doc>
      <source-position filename="gdm-sessions.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="314">a %NULL terminated list of session ids</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_session_name_and_description"
              c:identifier="gdm_get_session_name_and_description">
      <doc xml:space="preserve"
           filename="gdm-sessions.c"
           line="343">Takes an xsession id and returns the name and comment about it.</doc>
      <source-position filename="gdm-sessions.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gdm-sessions.c"
             line="350">The session name if found, or %NULL otherwise</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="345">an id from gdm_get_session_ids()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="description"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdm-sessions.c"
               line="346">optional returned session description</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="goto_login_session_sync"
              c:identifier="gdm_goto_login_session_sync"
              throws="1">
      <source-position filename="gdm-user-switching.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_interface_info"
              c:identifier="gdm_greeter_interface_info"
              moved-to="Greeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6147">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="975"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6152">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="greeter_override_properties"
              c:identifier="gdm_greeter_override_properties"
              moved-to="Greeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="6160">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="976"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="6168">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6162">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="6163">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="gdm_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="348">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-manager-glue.h" line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="353">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="gdm_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-manager-glue.c"
           line="361">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-manager-glue.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-manager-glue.c"
             line="369">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="363">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-manager-glue.c"
               line="364">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="remote_greeter_interface_info"
              c:identifier="gdm_remote_greeter_interface_info"
              moved-to="RemoteGreeter.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7970">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="1264"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7975">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="remote_greeter_override_properties"
              c:identifier="gdm_remote_greeter_override_properties"
              moved-to="RemoteGreeter.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="7983">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="1265"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="7991">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7985">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="7986">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_choice_list_interface_info"
              c:identifier="gdm_user_verifier_choice_list_interface_info"
              moved-to="UserVerifierChoiceList.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4831">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="753"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4836">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_choice_list_override_properties"
              c:identifier="gdm_user_verifier_choice_list_override_properties"
              moved-to="UserVerifierChoiceList.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="4844">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="754"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="4852">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4846">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="4847">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_interface_info"
              c:identifier="gdm_user_verifier_interface_info"
              moved-to="UserVerifier.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2626">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="439"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2631">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_override_properties"
              c:identifier="gdm_user_verifier_override_properties"
              moved-to="UserVerifier.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="2639">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="440"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="2647">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2641">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="2642">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="worker_manager_interface_info"
              c:identifier="gdm_worker_manager_interface_info"
              moved-to="WorkerManager.interface_info">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="479">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="gdm-client-glue.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="484">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="worker_manager_override_properties"
              c:identifier="gdm_worker_manager_override_properties"
              moved-to="WorkerManager.override_properties">
      <doc xml:space="preserve"
           filename="gdm-client-glue.c"
           line="492">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="gdm-client-glue.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdm-client-glue.c"
             line="500">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="494">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdm-client-glue.c"
               line="495">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
