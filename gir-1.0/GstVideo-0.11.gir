<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.11"/>
  <include name="GstBase" version="0.11"/>
  <package name="gstreamer-video-0.11"/>
  <c:include name="gst/video/colorbalance.h"/>
  <c:include name="gst/video/colorbalancechannel.h"/>
  <c:include name="gst/video/gstvideofilter.h"/>
  <c:include name="gst/video/gstvideometa.h"/>
  <c:include name="gst/video/gstvideopool.h"/>
  <c:include name="gst/video/gstvideosink.h"/>
  <c:include name="gst/video/video-enumtypes.h"/>
  <c:include name="gst/video/video-marshal.h"/>
  <c:include name="gst/video/video.h"/>
  <c:include name="gst/video/videoorientation.h"/>
  <c:include name="gst/video/videooverlay.h"/>
  <namespace name="GstVideo"
             version="0.11"
             shared-library="libgstvideo-0.11.so.28"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <constant name="BUFFER_POOL_OPTION_VIDEO_ALIGNMENT"
              value="GstBufferPoolOptionVideoAlignment"
              c:type="GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BUFFER_POOL_OPTION_VIDEO_META"
              value="GstBufferPoolOptionVideoMeta"
              c:type="GST_BUFFER_POOL_OPTION_VIDEO_META">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <interface name="ColorBalance"
               c:symbol-prefix="color_balance"
               c:type="GstColorBalance"
               glib:type-name="GstColorBalance"
               glib:get-type="gst_color_balance_get_type"
               glib:type-struct="ColorBalanceInterface">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;&lt;para&gt;
This interface is implemented by elements which can perform some color
balance operation on video frames they process. For example, modifying
the brightness, contrast, hue or saturation.
&lt;/para&gt;&lt;para&gt;
Example elements are 'xvimagesink' and 'colorbalance'
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <virtual-method name="get_balance_type"
                      invoker="get_balance_type"
                      version="0.10.24">
        <doc xml:whitespace="preserve">Get the #GstColorBalanceType of this implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A the #GstColorBalanceType.</doc>
          <type name="ColorBalanceType" c:type="GstColorBalanceType"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <doc xml:whitespace="preserve">Retrieve the current value of the indicated channel, between min_value
and max_value.

See Also: The #GstColorBalanceChannel.min_value and
#GstColorBalanceChannel.max_value members of the
#GstColorBalanceChannel object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current value of the channel.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_channels"
                      invoker="list_channels"
                      introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a list of the available channels.

The list is owned by the #GstColorBalance instance and must not
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A GList containing pointers to #GstColorBalanceChannel objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="set_value" invoker="set_value">
        <doc xml:whitespace="preserve">Sets the current value of the channel to the passed value, which must
be between min_value and max_value.

See Also: The #GstColorBalanceChannel.min_value and
#GstColorBalanceChannel.max_value members of the
#GstColorBalanceChannel object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value for the channel.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="value_changed" invoker="value_changed">
        <doc xml:whitespace="preserve">A helper function called by implementations of the GstColorBalance
interface. It fires the #GstColorBalance::value-changed signal on the
instance, and the #GstColorBalanceChannel::value-changed signal on the
channel object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel whose value has changed</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value of the channel</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_balance_type"
              c:identifier="gst_color_balance_get_balance_type"
              version="0.10.24">
        <doc xml:whitespace="preserve">Get the #GstColorBalanceType of this implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A the #GstColorBalanceType.</doc>
          <type name="ColorBalanceType" c:type="GstColorBalanceType"/>
        </return-value>
      </method>
      <method name="get_value" c:identifier="gst_color_balance_get_value">
        <doc xml:whitespace="preserve">Retrieve the current value of the indicated channel, between min_value
and max_value.

See Also: The #GstColorBalanceChannel.min_value and
#GstColorBalanceChannel.max_value members of the
#GstColorBalanceChannel object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current value of the channel.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_channels"
              c:identifier="gst_color_balance_list_channels"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a list of the available channels.

The list is owned by the #GstColorBalance instance and must not
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A GList containing pointers to #GstColorBalanceChannel objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="set_value" c:identifier="gst_color_balance_set_value">
        <doc xml:whitespace="preserve">Sets the current value of the channel to the passed value, which must
be between min_value and max_value.

See Also: The #GstColorBalanceChannel.min_value and
#GstColorBalanceChannel.max_value members of the
#GstColorBalanceChannel object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value for the channel.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="value_changed"
              c:identifier="gst_color_balance_value_changed">
        <doc xml:whitespace="preserve">A helper function called by implementations of the GstColorBalance
interface. It fires the #GstColorBalance::value-changed signal on the
instance, and the #GstColorBalanceChannel::value-changed signal on the
channel object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstColorBalanceChannel whose value has changed</doc>
            <type name="ColorBalanceChannel" c:type="GstColorBalanceChannel*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value of the channel</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="value-changed" when="last">
        <doc xml:whitespace="preserve">Fired when the value of the indicated channel has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GstColorBalanceChannel</doc>
            <type name="ColorBalanceChannel"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="ColorBalanceChannel"
           c:symbol-prefix="color_balance_channel"
           c:type="GstColorBalanceChannel"
           parent="GObject.Object"
           glib:type-name="GstColorBalanceChannel"
           glib:get-type="gst_color_balance_channel_get_type"
           glib:type-struct="ColorBalanceChannelClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;&lt;para&gt;The #GstColorBalanceChannel object represents a parameter
for modifying the color balance implemented by an element providing the
#GstColorBalance interface. For example, Hue or Saturation.
&lt;/para&gt;&lt;/refsect2&gt;</doc>
      <virtual-method name="value_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="label">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="min_value">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_value">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="value-changed" when="last">
        <doc xml:whitespace="preserve">Fired when the value of the indicated channel has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new value</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ColorBalanceChannelClass"
            c:type="GstColorBalanceChannelClass"
            glib:is-gtype-struct-for="ColorBalanceChannel">
      <doc xml:whitespace="preserve">Color-balance channel class.</doc>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="channel" transfer-ownership="none">
              <type name="ColorBalanceChannel"
                    c:type="GstColorBalanceChannel*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ColorBalanceInterface"
            c:type="GstColorBalanceInterface"
            glib:is-gtype-struct-for="ColorBalance">
      <doc xml:whitespace="preserve">Color-balance interface.</doc>
      <field name="iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="list_channels" introspectable="0">
        <callback name="list_channels" introspectable="0">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">A GList containing pointers to #GstColorBalanceChannel objects.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="balance" transfer-ownership="none">
              <type name="ColorBalance" c:type="GstColorBalance*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_value">
        <callback name="set_value">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="balance" transfer-ownership="none">
              <type name="ColorBalance" c:type="GstColorBalance*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
              <type name="ColorBalanceChannel"
                    c:type="GstColorBalanceChannel*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:whitespace="preserve">The new value for the channel.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The current value of the channel.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="balance" transfer-ownership="none">
              <type name="ColorBalance" c:type="GstColorBalance*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GstColorBalanceChannel instance</doc>
              <type name="ColorBalanceChannel"
                    c:type="GstColorBalanceChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_balance_type">
        <callback name="get_balance_type">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">A the #GstColorBalanceType.</doc>
            <type name="ColorBalanceType" c:type="GstColorBalanceType"/>
          </return-value>
          <parameters>
            <parameter name="balance" transfer-ownership="none">
              <type name="ColorBalance" c:type="GstColorBalance*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="value_changed">
        <callback name="value_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="balance" transfer-ownership="none">
              <type name="ColorBalance" c:type="GstColorBalance*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GstColorBalanceChannel whose value has changed</doc>
              <type name="ColorBalanceChannel"
                    c:type="GstColorBalanceChannel*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <doc xml:whitespace="preserve">The new value of the channel</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="ColorBalanceType"
                 glib:type-name="GstColorBalanceType"
                 glib:get-type="gst_color_balance_type_get_type"
                 c:type="GstColorBalanceType">
      <doc xml:whitespace="preserve">An enumeration indicating whether an element implements color balancing
operations in software or in dedicated hardware. In general, dedicated
hardware implementations (such as those provided by xvimagesink) are
preferred.</doc>
      <member name="hardware"
              value="0"
              c:identifier="GST_COLOR_BALANCE_HARDWARE"
              glib:nick="hardware"/>
      <member name="software"
              value="1"
              c:identifier="GST_COLOR_BALANCE_SOFTWARE"
              glib:nick="software"/>
    </enumeration>
    <constant name="VIDEO_COLORIMETRY_BT601"
              value="bt601"
              c:type="GST_VIDEO_COLORIMETRY_BT601">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COLORIMETRY_BT709"
              value="bt709"
              c:type="GST_VIDEO_COLORIMETRY_BT709">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COLORIMETRY_SMPTE240M"
              value="smpte240m"
              c:type="GST_VIDEO_COLORIMETRY_SMPTE240M">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP_A" value="3" c:type="GST_VIDEO_COMP_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_B" value="2" c:type="GST_VIDEO_COMP_B">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_G" value="1" c:type="GST_VIDEO_COMP_G">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_R" value="0" c:type="GST_VIDEO_COMP_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_U" value="1" c:type="GST_VIDEO_COMP_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_V" value="2" c:type="GST_VIDEO_COMP_V">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_Y" value="0" c:type="GST_VIDEO_COMP_Y">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_FORMATS_ALL"
              value="{ I420, YV12, YUY2, UYVY, AYUV, RGBx, BGRx, xRGB, xBGR, RGBA, BGRA, ARGB, ABGR, RGB, BGR, Y41B, Y42B, YVYU, Y444, v210, v216, NV12, NV21, GRAY8, GRAY16_BE, GRAY16_LE, v308, Y800, Y16, RGB16, BGR16, RGB15, BGR15, UYVP, A420, RGB8_PALETTED, YUV9, YVU9, IYU1, ARGB64, AYUV64, r210 }"
              c:type="GST_VIDEO_FORMATS_ALL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_FPS_RANGE"
              value="(fraction) [ 0, max ]"
              c:type="GST_VIDEO_FPS_RANGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_MAX_COMPONENTS"
              value="4"
              c:type="GST_VIDEO_MAX_COMPONENTS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_MAX_PLANES" value="4" c:type="GST_VIDEO_MAX_PLANES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_SIZE_RANGE"
              value="(int) [ 1, max ]"
              c:type="GST_VIDEO_SIZE_RANGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="VideoAlignment" c:type="GstVideoAlignment">
      <doc xml:whitespace="preserve">Extra alignment paramters for the memory of video buffers. This
structure is usually used to configure the bufferpool if it supports the
#GST_BUFFER_POOL_OPTION_VIDEO_ALIGNMENT.</doc>
      <field name="padding_top" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="padding_bottom" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="padding_left" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="padding_right" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="stride_align" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <method name="reset" c:identifier="gst_video_alignment_reset">
        <doc xml:whitespace="preserve">Set @align to its default values with no padding and no alignment.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <bitfield name="VideoBufferFlags"
              glib:type-name="GstVideoBufferFlags"
              glib:get-type="gst_video_buffer_flags_get_type"
              c:type="GstVideoBufferFlags">
      <doc xml:whitespace="preserve">Additional video buffer flags.</doc>
      <member name="interlaced"
              value="1048576"
              c:identifier="GST_VIDEO_BUFFER_FLAG_INTERLACED"
              glib:nick="interlaced"/>
      <member name="tff"
              value="2097152"
              c:identifier="GST_VIDEO_BUFFER_FLAG_TFF"
              glib:nick="tff"/>
      <member name="rff"
              value="4194304"
              c:identifier="GST_VIDEO_BUFFER_FLAG_RFF"
              glib:nick="rff"/>
      <member name="onefield"
              value="8388608"
              c:identifier="GST_VIDEO_BUFFER_FLAG_ONEFIELD"
              glib:nick="onefield"/>
      <member name="last"
              value="268435456"
              c:identifier="GST_VIDEO_BUFFER_FLAG_LAST"
              glib:nick="last"/>
    </bitfield>
    <class name="VideoBufferPool"
           c:symbol-prefix="video_buffer_pool"
           c:type="GstVideoBufferPool"
           parent="Gst.BufferPool"
           glib:type-name="GstVideoBufferPool"
           glib:get-type="gst_video_buffer_pool_get_type"
           glib:type-struct="VideoBufferPoolClass">
      <constructor name="new" c:identifier="gst_video_buffer_pool_new">
        <doc xml:whitespace="preserve">Create a new bufferpool that can allocate video frames. This bufferpool
supports all the video bufferpool options.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GstBufferPool to allocate video frames</doc>
          <type name="Gst.BufferPool" c:type="GstBufferPool*"/>
        </return-value>
      </constructor>
      <field name="bufferpool">
        <type name="Gst.BufferPool" c:type="GstBufferPool"/>
      </field>
      <field name="priv">
        <type name="VideoBufferPoolPrivate"
              c:type="GstVideoBufferPoolPrivate*"/>
      </field>
    </class>
    <record name="VideoBufferPoolClass"
            c:type="GstVideoBufferPoolClass"
            glib:is-gtype-struct-for="VideoBufferPool">
      <field name="parent_class">
        <type name="Gst.BufferPoolClass" c:type="GstBufferPoolClass"/>
      </field>
    </record>
    <record name="VideoBufferPoolPrivate"
            c:type="GstVideoBufferPoolPrivate"
            disguised="1">
    </record>
    <bitfield name="VideoChromaSite"
              glib:type-name="GstVideoChromaSite"
              glib:get-type="gst_video_chroma_site_get_type"
              c:type="GstVideoChromaSite">
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_CHROMA_SITE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="none"
              value="1"
              c:identifier="GST_VIDEO_CHROMA_SITE_NONE"
              glib:nick="none"/>
      <member name="h_cosited"
              value="2"
              c:identifier="GST_VIDEO_CHROMA_SITE_H_COSITED"
              glib:nick="h-cosited"/>
      <member name="v_cosited"
              value="4"
              c:identifier="GST_VIDEO_CHROMA_SITE_V_COSITED"
              glib:nick="v-cosited"/>
      <member name="alt_line"
              value="8"
              c:identifier="GST_VIDEO_CHROMA_SITE_ALT_LINE"
              glib:nick="alt-line"/>
      <member name="cosited"
              value="6"
              c:identifier="GST_VIDEO_CHROMA_SITE_COSITED"
              glib:nick="cosited"/>
      <member name="jpeg"
              value="1"
              c:identifier="GST_VIDEO_CHROMA_SITE_JPEG"
              glib:nick="jpeg"/>
      <member name="mpeg2"
              value="2"
              c:identifier="GST_VIDEO_CHROMA_SITE_MPEG2"
              glib:nick="mpeg2"/>
      <member name="dv"
              value="14"
              c:identifier="GST_VIDEO_CHROMA_SITE_DV"
              glib:nick="dv"/>
    </bitfield>
    <enumeration name="VideoColorMatrix"
                 glib:type-name="GstVideoColorMatrix"
                 glib:get-type="gst_video_color_matrix_get_type"
                 c:type="GstVideoColorMatrix">
      <doc xml:whitespace="preserve">The color matrix is used to convert between Y'PbPr and
non-linear RGB (R'G'B')</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_MATRIX_UNKNOWN"
              glib:nick="unknown"/>
      <member name="rgb"
              value="1"
              c:identifier="GST_VIDEO_COLOR_MATRIX_RGB"
              glib:nick="rgb"/>
      <member name="fcc"
              value="2"
              c:identifier="GST_VIDEO_COLOR_MATRIX_FCC"
              glib:nick="fcc"/>
      <member name="bt709"
              value="3"
              c:identifier="GST_VIDEO_COLOR_MATRIX_BT709"
              glib:nick="bt709"/>
      <member name="bt601"
              value="4"
              c:identifier="GST_VIDEO_COLOR_MATRIX_BT601"
              glib:nick="bt601"/>
      <member name="smpte240m"
              value="5"
              c:identifier="GST_VIDEO_COLOR_MATRIX_SMPTE240M"
              glib:nick="smpte240m"/>
    </enumeration>
    <enumeration name="VideoColorPrimaries"
                 glib:type-name="GstVideoColorPrimaries"
                 glib:get-type="gst_video_color_primaries_get_type"
                 c:type="GstVideoColorPrimaries">
      <doc xml:whitespace="preserve">The color primaries define the how to transform linear RGB values to and from
the CIE XYZ colorspace.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_UNKNOWN"
              glib:nick="unknown"/>
      <member name="bt709"
              value="1"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT709"
              glib:nick="bt709"/>
      <member name="bt470m"
              value="2"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT470M"
              glib:nick="bt470m"/>
      <member name="bt470bg"
              value="3"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT470BG"
              glib:nick="bt470bg"/>
      <member name="smpte170m"
              value="4"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_SMPTE170M"
              glib:nick="smpte170m"/>
      <member name="smpte240m"
              value="5"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_SMPTE240M"
              glib:nick="smpte240m"/>
    </enumeration>
    <enumeration name="VideoColorRange"
                 glib:type-name="GstVideoColorRange"
                 glib:get-type="gst_video_color_range_get_type"
                 c:type="GstVideoColorRange">
      <doc xml:whitespace="preserve">Possible color range values. These constants are defined for 8 bit color
values and can be scaled for other bit depths.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_RANGE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="0_255"
              value="1"
              c:identifier="GST_VIDEO_COLOR_RANGE_0_255"
              glib:nick="0-255"/>
      <member name="16_235"
              value="2"
              c:identifier="GST_VIDEO_COLOR_RANGE_16_235"
              glib:nick="16-235"/>
    </enumeration>
    <record name="VideoColorimetry" c:type="GstVideoColorimetry">
      <doc xml:whitespace="preserve">Structure describing the color info.</doc>
      <field name="range" writable="1">
        <type name="VideoColorRange" c:type="GstVideoColorRange"/>
      </field>
      <field name="matrix" writable="1">
        <type name="VideoColorMatrix" c:type="GstVideoColorMatrix"/>
      </field>
      <field name="transfer" writable="1">
        <type name="VideoTransferFunction" c:type="GstVideoTransferFunction"/>
      </field>
      <field name="primaries" writable="1">
        <type name="VideoColorPrimaries" c:type="GstVideoColorPrimaries"/>
      </field>
      <method name="from_string"
              c:identifier="gst_video_colorimetry_from_string">
        <doc xml:whitespace="preserve">Parse the colorimetry string and update @cinfo with the parsed
values.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if @color points to valid colorimetry info.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a colorimetry string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches" c:identifier="gst_video_colorimetry_matches">
        <doc xml:whitespace="preserve">Check if the colorimetry information in @info matches that of the
string @color.

information in @info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if @color conveys the same colorimetry info as the color</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a colorimetry string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gst_video_colorimetry_to_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </record>
    <callback name="VideoConvertSampleCallback"
              c:type="GstVideoConvertSampleCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sample" transfer-ownership="none">
          <type name="Gst.Sample" c:type="GstSample*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="VideoCropMeta" c:type="GstVideoCropMeta">
      <doc xml:whitespace="preserve">Extra buffer metadata describing image cropping.</doc>
      <field name="meta" writable="1">
        <type name="Gst.Meta" c:type="GstMeta"/>
      </field>
      <field name="x" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="y" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="width" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="height" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <function name="get_info" c:identifier="gst_video_crop_meta_get_info">
        <return-value transfer-ownership="none">
          <type name="Gst.MetaInfo" c:type="GstMetaInfo*"/>
        </return-value>
      </function>
    </record>
    <class name="VideoFilter"
           c:symbol-prefix="video_filter"
           c:type="GstVideoFilter"
           parent="GstBase.BaseTransform"
           abstract="1"
           glib:type-name="GstVideoFilter"
           glib:get-type="gst_video_filter_get_type"
           glib:type-struct="VideoFilterClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
Provides useful functions and a base class for video filters.
&lt;/para&gt;
&lt;para&gt;
The videofilter will by default enable QoS on the parent GstBaseTransform
to implement frame dropping.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <virtual-method name="set_info">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="incaps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="in_info" transfer-ownership="none">
            <type name="VideoInfo" c:type="GstVideoInfo*"/>
          </parameter>
          <parameter name="outcaps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="out_info" transfer-ownership="none">
            <type name="VideoInfo" c:type="GstVideoInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="transform_frame">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="inframe" transfer-ownership="none">
            <type name="VideoFrame" c:type="GstVideoFrame*"/>
          </parameter>
          <parameter name="outframe" transfer-ownership="none">
            <type name="VideoFrame" c:type="GstVideoFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="transform_frame_ip">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <type name="VideoFrame" c:type="GstVideoFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="element">
        <type name="GstBase.BaseTransform" c:type="GstBaseTransform"/>
      </field>
      <field name="negotiated">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="in_info">
        <type name="VideoInfo" c:type="GstVideoInfo"/>
      </field>
      <field name="out_info">
        <type name="VideoInfo" c:type="GstVideoInfo"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VideoFilterClass"
            c:type="GstVideoFilterClass"
            glib:is-gtype-struct-for="VideoFilter">
      <doc xml:whitespace="preserve">The video filter class structure.</doc>
      <field name="parent_class">
        <type name="GstBase.BaseTransformClass"
              c:type="GstBaseTransformClass"/>
      </field>
      <field name="set_info">
        <callback name="set_info">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="VideoFilter" c:type="GstVideoFilter*"/>
            </parameter>
            <parameter name="incaps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
            <parameter name="in_info" transfer-ownership="none">
              <type name="VideoInfo" c:type="GstVideoInfo*"/>
            </parameter>
            <parameter name="outcaps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
            <parameter name="out_info" transfer-ownership="none">
              <type name="VideoInfo" c:type="GstVideoInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="transform_frame">
        <callback name="transform_frame">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="VideoFilter" c:type="GstVideoFilter*"/>
            </parameter>
            <parameter name="inframe" transfer-ownership="none">
              <type name="VideoFrame" c:type="GstVideoFrame*"/>
            </parameter>
            <parameter name="outframe" transfer-ownership="none">
              <type name="VideoFrame" c:type="GstVideoFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="transform_frame_ip">
        <callback name="transform_frame_ip">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="trans" transfer-ownership="none">
              <type name="VideoFilter" c:type="GstVideoFilter*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="VideoFrame" c:type="GstVideoFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="VideoFlags"
              glib:type-name="GstVideoFlags"
              glib:get-type="gst_video_flags_get_type"
              c:type="GstVideoFlags">
      <doc xml:whitespace="preserve">Extra video flags</doc>
      <member name="none"
              value="0"
              c:identifier="GST_VIDEO_FLAG_NONE"
              glib:nick="none"/>
      <member name="interlaced"
              value="1"
              c:identifier="GST_VIDEO_FLAG_INTERLACED"
              glib:nick="interlaced"/>
      <member name="tff"
              value="2"
              c:identifier="GST_VIDEO_FLAG_TFF"
              glib:nick="tff"/>
      <member name="rff"
              value="4"
              c:identifier="GST_VIDEO_FLAG_RFF"
              glib:nick="rff"/>
      <member name="onefield"
              value="8"
              c:identifier="GST_VIDEO_FLAG_ONEFIELD"
              glib:nick="onefield"/>
      <member name="variable_fps"
              value="16"
              c:identifier="GST_VIDEO_FLAG_VARIABLE_FPS"
              glib:nick="variable-fps"/>
    </bitfield>
    <enumeration name="VideoFormat"
                 glib:type-name="GstVideoFormat"
                 glib:get-type="gst_video_format_get_type"
                 c:type="GstVideoFormat">
      <doc xml:whitespace="preserve">Enum value describing the most common video formats.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_FORMAT_UNKNOWN"
              glib:nick="unknown"/>
      <member name="i420"
              value="1"
              c:identifier="GST_VIDEO_FORMAT_I420"
              glib:nick="i420"/>
      <member name="yv12"
              value="2"
              c:identifier="GST_VIDEO_FORMAT_YV12"
              glib:nick="yv12"/>
      <member name="yuy2"
              value="3"
              c:identifier="GST_VIDEO_FORMAT_YUY2"
              glib:nick="yuy2"/>
      <member name="uyvy"
              value="4"
              c:identifier="GST_VIDEO_FORMAT_UYVY"
              glib:nick="uyvy"/>
      <member name="ayuv"
              value="5"
              c:identifier="GST_VIDEO_FORMAT_AYUV"
              glib:nick="ayuv"/>
      <member name="rgbx"
              value="6"
              c:identifier="GST_VIDEO_FORMAT_RGBx"
              glib:nick="rgbx"/>
      <member name="bgrx"
              value="7"
              c:identifier="GST_VIDEO_FORMAT_BGRx"
              glib:nick="bgrx"/>
      <member name="xrgb"
              value="8"
              c:identifier="GST_VIDEO_FORMAT_xRGB"
              glib:nick="xrgb"/>
      <member name="xbgr"
              value="9"
              c:identifier="GST_VIDEO_FORMAT_xBGR"
              glib:nick="xbgr"/>
      <member name="rgba"
              value="10"
              c:identifier="GST_VIDEO_FORMAT_RGBA"
              glib:nick="rgba"/>
      <member name="bgra"
              value="11"
              c:identifier="GST_VIDEO_FORMAT_BGRA"
              glib:nick="bgra"/>
      <member name="argb"
              value="12"
              c:identifier="GST_VIDEO_FORMAT_ARGB"
              glib:nick="argb"/>
      <member name="abgr"
              value="13"
              c:identifier="GST_VIDEO_FORMAT_ABGR"
              glib:nick="abgr"/>
      <member name="rgb"
              value="14"
              c:identifier="GST_VIDEO_FORMAT_RGB"
              glib:nick="rgb"/>
      <member name="bgr"
              value="15"
              c:identifier="GST_VIDEO_FORMAT_BGR"
              glib:nick="bgr"/>
      <member name="y41b"
              value="16"
              c:identifier="GST_VIDEO_FORMAT_Y41B"
              glib:nick="y41b"/>
      <member name="y42b"
              value="17"
              c:identifier="GST_VIDEO_FORMAT_Y42B"
              glib:nick="y42b"/>
      <member name="yvyu"
              value="18"
              c:identifier="GST_VIDEO_FORMAT_YVYU"
              glib:nick="yvyu"/>
      <member name="y444"
              value="19"
              c:identifier="GST_VIDEO_FORMAT_Y444"
              glib:nick="y444"/>
      <member name="v210"
              value="20"
              c:identifier="GST_VIDEO_FORMAT_v210"
              glib:nick="v210"/>
      <member name="v216"
              value="21"
              c:identifier="GST_VIDEO_FORMAT_v216"
              glib:nick="v216"/>
      <member name="nv12"
              value="22"
              c:identifier="GST_VIDEO_FORMAT_NV12"
              glib:nick="nv12"/>
      <member name="nv21"
              value="23"
              c:identifier="GST_VIDEO_FORMAT_NV21"
              glib:nick="nv21"/>
      <member name="gray8"
              value="24"
              c:identifier="GST_VIDEO_FORMAT_GRAY8"
              glib:nick="gray8"/>
      <member name="gray16_be"
              value="25"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_BE"
              glib:nick="gray16-be"/>
      <member name="gray16_le"
              value="26"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_LE"
              glib:nick="gray16-le"/>
      <member name="v308"
              value="27"
              c:identifier="GST_VIDEO_FORMAT_v308"
              glib:nick="v308"/>
      <member name="y800"
              value="28"
              c:identifier="GST_VIDEO_FORMAT_Y800"
              glib:nick="y800"/>
      <member name="y16"
              value="29"
              c:identifier="GST_VIDEO_FORMAT_Y16"
              glib:nick="y16"/>
      <member name="rgb16"
              value="30"
              c:identifier="GST_VIDEO_FORMAT_RGB16"
              glib:nick="rgb16"/>
      <member name="bgr16"
              value="31"
              c:identifier="GST_VIDEO_FORMAT_BGR16"
              glib:nick="bgr16"/>
      <member name="rgb15"
              value="32"
              c:identifier="GST_VIDEO_FORMAT_RGB15"
              glib:nick="rgb15"/>
      <member name="bgr15"
              value="33"
              c:identifier="GST_VIDEO_FORMAT_BGR15"
              glib:nick="bgr15"/>
      <member name="uyvp"
              value="34"
              c:identifier="GST_VIDEO_FORMAT_UYVP"
              glib:nick="uyvp"/>
      <member name="a420"
              value="35"
              c:identifier="GST_VIDEO_FORMAT_A420"
              glib:nick="a420"/>
      <member name="rgb8_paletted"
              value="36"
              c:identifier="GST_VIDEO_FORMAT_RGB8_PALETTED"
              glib:nick="rgb8-paletted"/>
      <member name="yuv9"
              value="37"
              c:identifier="GST_VIDEO_FORMAT_YUV9"
              glib:nick="yuv9"/>
      <member name="yvu9"
              value="38"
              c:identifier="GST_VIDEO_FORMAT_YVU9"
              glib:nick="yvu9"/>
      <member name="iyu1"
              value="39"
              c:identifier="GST_VIDEO_FORMAT_IYU1"
              glib:nick="iyu1"/>
      <member name="argb64"
              value="40"
              c:identifier="GST_VIDEO_FORMAT_ARGB64"
              glib:nick="argb64"/>
      <member name="ayuv64"
              value="41"
              c:identifier="GST_VIDEO_FORMAT_AYUV64"
              glib:nick="ayuv64"/>
      <member name="r210"
              value="42"
              c:identifier="GST_VIDEO_FORMAT_r210"
              glib:nick="r210"/>
      <function name="from_fourcc"
                c:identifier="gst_video_format_from_fourcc"
                version="0.10.16">
        <doc xml:whitespace="preserve">Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat describing the FOURCC value</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </return-value>
        <parameters>
          <parameter name="fourcc" transfer-ownership="none">
            <doc xml:whitespace="preserve">a FOURCC value representing raw YUV video</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_masks" c:identifier="gst_video_format_from_masks">
        <doc xml:whitespace="preserve">Find the #GstVideoFormat for the given parameters.

not specify a known format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat or GST_VIDEO_FORMAT_UNKNOWN when the parameters to</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of bits used for a pixel</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bpp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of bits used to store a pixel. This value is bigger than @depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="endianness" transfer-ownership="none">
            <doc xml:whitespace="preserve">the endianness of the masks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="red_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the red mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="green_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the green mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="blue_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the blue mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the optional alpha mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_string" c:identifier="gst_video_format_from_string">
        <doc xml:whitespace="preserve">Convert the @format string to its #GstVideoFormat.

string is not a known format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat for @format or GST_VIDEO_FORMAT_UNKNOWN when the</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a format string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_info" c:identifier="gst_video_format_get_info">
        <doc xml:whitespace="preserve">Get the #GstVideoFormatInfo for @format</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GstVideoFormatInfo for @format.</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_fourcc"
                c:identifier="gst_video_format_to_fourcc"
                version="0.10.16">
        <doc xml:whitespace="preserve">Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the FOURCC corresponding to @format</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string" c:identifier="gst_video_format_to_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="VideoFormatFlags"
              glib:type-name="GstVideoFormatFlags"
              glib:get-type="gst_video_format_flags_get_type"
              c:type="GstVideoFormatFlags">
      <doc xml:whitespace="preserve">The different video flags that a format info can have.</doc>
      <member name="yuv"
              value="1"
              c:identifier="GST_VIDEO_FORMAT_FLAG_YUV"
              glib:nick="yuv"/>
      <member name="rgb"
              value="2"
              c:identifier="GST_VIDEO_FORMAT_FLAG_RGB"
              glib:nick="rgb"/>
      <member name="gray"
              value="4"
              c:identifier="GST_VIDEO_FORMAT_FLAG_GRAY"
              glib:nick="gray"/>
      <member name="alpha"
              value="8"
              c:identifier="GST_VIDEO_FORMAT_FLAG_ALPHA"
              glib:nick="alpha"/>
      <member name="le"
              value="16"
              c:identifier="GST_VIDEO_FORMAT_FLAG_LE"
              glib:nick="le"/>
      <member name="palette"
              value="32"
              c:identifier="GST_VIDEO_FORMAT_FLAG_PALETTE"
              glib:nick="palette"/>
      <member name="complex"
              value="64"
              c:identifier="GST_VIDEO_FORMAT_FLAG_COMPLEX"
              glib:nick="complex"/>
    </bitfield>
    <record name="VideoFormatInfo" c:type="GstVideoFormatInfo">
      <doc xml:whitespace="preserve">Information for a video format.</doc>
      <field name="format" writable="1">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="VideoFormatFlags" c:type="GstVideoFormatFlags"/>
      </field>
      <field name="bits" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_components" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="shift" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="depth" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="pixel_stride" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="n_planes" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="plane" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="poffset" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="w_sub" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="h_sub" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="unpack_format" writable="1">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </field>
      <field name="unpack_func" writable="1">
        <type name="VideoFormatUnpack" c:type="GstVideoFormatUnpack"/>
      </field>
      <field name="pack_func" writable="1">
        <type name="VideoFormatPack" c:type="GstVideoFormatPack"/>
      </field>
    </record>
    <callback name="VideoFormatPack" c:type="GstVideoFormatPack">
      <doc xml:whitespace="preserve">Packs @width pixels from @src to the given planes and strides in the
format @info. The pixels from source have each component interleaved
and will be packed into the planes in @data.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormatInfo</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">a source array</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointers to the destination data planes</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:whitespace="preserve">strides of the destination planes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position in the image to pack to</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position in the image to pack to</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of pixels to pack.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="VideoFormatUnpack" c:type="GstVideoFormatUnpack">
      <doc xml:whitespace="preserve">Unpacks @width pixels from the given planes and strides containing data of
format @info. The pixels will be unpacked into @dest which each component
interleaved. @dest should at least be big enough to hold @width *
n_components * size(unpack_format) bytes.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormatInfo</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:whitespace="preserve">a destination array</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointers to the data planes</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:whitespace="preserve">strides of the planes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position in the image to start from</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position in the image to start from</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of pixels to unpack.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="VideoFrame" c:type="GstVideoFrame">
      <doc xml:whitespace="preserve">A video frame obtained from gst_video_frame_map()</doc>
      <field name="info" writable="1">
        <type name="VideoInfo" c:type="GstVideoInfo"/>
      </field>
      <field name="buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="meta" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="id" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="data" writable="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="map" writable="1">
        <array zero-terminated="0" c:type="GstMapInfo" fixed-size="4">
          <type name="Gst.MapInfo" c:type="GstMapInfo"/>
        </array>
      </field>
      <method name="copy" c:identifier="gst_video_frame_copy">
        <doc xml:whitespace="preserve">Copy the contents from @src to @dest.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the contents could be copied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFrame</doc>
            <type name="VideoFrame" c:type="GstVideoFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_plane" c:identifier="gst_video_frame_copy_plane">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <type name="VideoFrame" c:type="GstVideoFrame*"/>
          </parameter>
          <parameter name="plane" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="map" c:identifier="gst_video_frame_map">
        <doc xml:whitespace="preserve">Use @info and @buffer to fill in the values of @frame.

All video planes of @buffer will be mapped and the pointers will be set in
@frame-&gt;data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoInfo</doc>
            <type name="VideoInfo" c:type="GstVideoInfo*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the buffer to map</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GstMapFlags</doc>
            <type name="Gst.MapFlags" c:type="GstMapFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_id" c:identifier="gst_video_frame_map_id">
        <doc xml:whitespace="preserve">Use @info and @buffer to fill in the values of @frame with the video frame
information of frame @id.

When @id is -1, the default frame is mapped. When @id != -1, this function
will return %FALSE when there is no GstVideoMeta with that id.

All video planes of @buffer will be mapped and the pointers will be set in
@frame-&gt;data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoInfo</doc>
            <type name="VideoInfo" c:type="GstVideoInfo*"/>
          </parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">the buffer to map</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the frame id to map</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GstMapFlags</doc>
            <type name="Gst.MapFlags" c:type="GstMapFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="unmap" c:identifier="gst_video_frame_unmap">
        <doc xml:whitespace="preserve">Unmap the memory previously mapped with gst_video_frame_map.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <record name="VideoInfo" c:type="GstVideoInfo">
      <doc xml:whitespace="preserve">Information describing image properties. This information can be filled
in from GstCaps with gst_video_info_from_caps(). The information is also used
to store the specific video info when mapping a video frame with
gst_video_frame_map().

Use the provided macros to access the info in this structure.</doc>
      <field name="finfo" writable="1">
        <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
      </field>
      <field name="interlace_mode" writable="1">
        <type name="VideoInterlaceMode" c:type="GstVideoInterlaceMode"/>
      </field>
      <field name="flags" writable="1">
        <type name="VideoFlags" c:type="GstVideoFlags"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="size" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="views" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="chroma_site" writable="1">
        <type name="VideoChromaSite" c:type="GstVideoChromaSite"/>
      </field>
      <field name="colorimetry" writable="1">
        <type name="VideoColorimetry" c:type="GstVideoColorimetry"/>
      </field>
      <field name="palette" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="par_n" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="par_d" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fps_n" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fps_d" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="offset" writable="1">
        <array zero-terminated="0" c:type="gsize" fixed-size="4">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <field name="stride" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <method name="convert" c:identifier="gst_video_info_convert">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src_format" transfer-ownership="none">
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="src_value" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="dest_value" transfer-ownership="none">
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_caps" c:identifier="gst_video_info_from_caps">
        <doc xml:whitespace="preserve">Parse @caps and update @info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @caps could be parsed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstCaps</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="gst_video_info_init">
        <doc xml:whitespace="preserve">Initialize @info with default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_format" c:identifier="gst_video_info_set_format">
        <doc xml:whitespace="preserve">Set the default info for a video frame of @format and @width and @height.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">a width</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">a height</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_caps" c:identifier="gst_video_info_to_caps">
        <doc xml:whitespace="preserve">Convert the values of @info into a #GstCaps.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstCaps containing the info of @info.</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </method>
    </record>
    <enumeration name="VideoInterlaceMode"
                 glib:type-name="GstVideoInterlaceMode"
                 glib:get-type="gst_video_interlace_mode_get_type"
                 c:type="GstVideoInterlaceMode">
      <doc xml:whitespace="preserve">The possible values of the #GstVideoInterlaceMode describing the interlace
mode of the stream.</doc>
      <member name="progressive"
              value="0"
              c:identifier="GST_VIDEO_INTERLACE_MODE_PROGRESSIVE"
              glib:nick="progressive"/>
      <member name="interleaved"
              value="1"
              c:identifier="GST_VIDEO_INTERLACE_MODE_INTERLEAVED"
              glib:nick="interleaved"/>
      <member name="mixed"
              value="2"
              c:identifier="GST_VIDEO_INTERLACE_MODE_MIXED"
              glib:nick="mixed"/>
      <member name="fields"
              value="3"
              c:identifier="GST_VIDEO_INTERLACE_MODE_FIELDS"
              glib:nick="fields"/>
    </enumeration>
    <record name="VideoMeta" c:type="GstVideoMeta">
      <doc xml:whitespace="preserve">Extra buffer metadata describing image properties</doc>
      <field name="meta" writable="1">
        <type name="Gst.Meta" c:type="GstMeta"/>
      </field>
      <field name="buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="flags" writable="1">
        <type name="VideoFlags" c:type="GstVideoFlags"/>
      </field>
      <field name="format" writable="1">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </field>
      <field name="id" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="width" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="height" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_planes" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="offset" writable="1">
        <array zero-terminated="0" c:type="gsize" fixed-size="4">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <field name="stride" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="map">
        <callback name="map">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="meta" transfer-ownership="none">
              <type name="VideoMeta" c:type="GstVideoMeta*"/>
            </parameter>
            <parameter name="plane" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="Gst.MapInfo" c:type="GstMapInfo*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="gpointer" c:type="gpointer*"/>
            </parameter>
            <parameter name="stride" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="Gst.MapFlags" c:type="GstMapFlags"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unmap">
        <callback name="unmap">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="meta" transfer-ownership="none">
              <type name="VideoMeta" c:type="GstVideoMeta*"/>
            </parameter>
            <parameter name="plane" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="info" transfer-ownership="none">
              <type name="Gst.MapInfo" c:type="GstMapInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <method name="map" c:identifier="gst_video_meta_map">
        <doc xml:whitespace="preserve">Map the video plane with index @plane in @meta and return a pointer to the
first byte of the plane and the stride of the plane.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the map operation was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="plane" transfer-ownership="none">
            <doc xml:whitespace="preserve">a plane</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstMapInfo</doc>
            <type name="Gst.MapInfo" c:type="GstMapInfo*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data of @plane</doc>
            <type name="gpointer" c:type="gpointer*"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stride of @plane</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">@GstMapFlags</doc>
            <type name="Gst.MapFlags" c:type="GstMapFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="unmap" c:identifier="gst_video_meta_unmap">
        <doc xml:whitespace="preserve">Unmap a previously mapped plane with gst_video_meta_map().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the memory was successfully unmapped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="plane" transfer-ownership="none">
            <doc xml:whitespace="preserve">a plane</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstMapInfo</doc>
            <type name="Gst.MapInfo" c:type="GstMapInfo*"/>
          </parameter>
        </parameters>
      </method>
      <function name="get_info" c:identifier="gst_video_meta_get_info">
        <return-value transfer-ownership="none">
          <type name="Gst.MetaInfo" c:type="GstMetaInfo*"/>
        </return-value>
      </function>
    </record>
    <record name="VideoMetaTransform" c:type="GstVideoMetaTransform">
      <doc xml:whitespace="preserve">Extra data passed to a video transform #GstMetaTransformFunction such as:
"gst-video-scale".</doc>
      <field name="in_info" writable="1">
        <type name="VideoInfo" c:type="GstVideoInfo*"/>
      </field>
      <field name="out_info" writable="1">
        <type name="VideoInfo" c:type="GstVideoInfo*"/>
      </field>
      <function name="scale_get_quark"
                c:identifier="gst_video_meta_transform_scale_get_quark">
        <doc xml:whitespace="preserve">Get the #GQuark for the "gst-video-scale" metadata transform operation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GQuark</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </record>
    <interface name="VideoOrientation"
               c:symbol-prefix="video_orientation"
               c:type="GstVideoOrientation"
               glib:type-name="GstVideoOrientation"
               glib:get-type="gst_video_orientation_get_type"
               glib:type-struct="VideoOrientationInterface">
      <doc xml:whitespace="preserve">The interface allows unified access to control flipping and autocenter
operation of video-sources or operators.</doc>
      <virtual-method name="get_hcenter"
                      invoker="get_hcenter"
                      version="0.10.11">
        <doc xml:whitespace="preserve">Get the horizontal centering offset from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hflip" invoker="get_hflip" version="0.10.11">
        <doc xml:whitespace="preserve">Get the horizontal flipping state (%TRUE for flipped) from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vcenter"
                      invoker="get_vcenter"
                      version="0.10.11">
        <doc xml:whitespace="preserve">Get the vertical centering offset from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vflip" invoker="get_vflip" version="0.10.11">
        <doc xml:whitespace="preserve">Get the vertical flipping state (%TRUE for flipped) from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_hcenter"
                      invoker="set_hcenter"
                      version="0.10.11">
        <doc xml:whitespace="preserve">Set the horizontal centering offset for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">centering offset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_hflip" invoker="set_hflip" version="0.10.11">
        <doc xml:whitespace="preserve">Set the horizontal flipping state (%TRUE for flipped) for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">use flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_vcenter"
                      invoker="set_vcenter"
                      version="0.10.11">
        <doc xml:whitespace="preserve">Set the vertical centering offset for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">centering offset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_vflip" invoker="set_vflip" version="0.10.11">
        <doc xml:whitespace="preserve">Set the vertical flipping state (%TRUE for flipped) for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">use flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_hcenter"
              c:identifier="gst_video_orientation_get_hcenter"
              version="0.10.11">
        <doc xml:whitespace="preserve">Get the horizontal centering offset from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hflip"
              c:identifier="gst_video_orientation_get_hflip"
              version="0.10.11">
        <doc xml:whitespace="preserve">Get the horizontal flipping state (%TRUE for flipped) from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vcenter"
              c:identifier="gst_video_orientation_get_vcenter"
              version="0.10.11">
        <doc xml:whitespace="preserve">Get the vertical centering offset from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vflip"
              c:identifier="gst_video_orientation_get_vflip"
              version="0.10.11">
        <doc xml:whitespace="preserve">Get the vertical flipping state (%TRUE for flipped) from the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">return location for the result</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hcenter"
              c:identifier="gst_video_orientation_set_hcenter"
              version="0.10.11">
        <doc xml:whitespace="preserve">Set the horizontal centering offset for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">centering offset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hflip"
              c:identifier="gst_video_orientation_set_hflip"
              version="0.10.11">
        <doc xml:whitespace="preserve">Set the horizontal flipping state (%TRUE for flipped) for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">use flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vcenter"
              c:identifier="gst_video_orientation_set_vcenter"
              version="0.10.11">
        <doc xml:whitespace="preserve">Set the vertical centering offset for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="center" transfer-ownership="none">
            <doc xml:whitespace="preserve">centering offset</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vflip"
              c:identifier="gst_video_orientation_set_vflip"
              version="0.10.11">
        <doc xml:whitespace="preserve">Set the vertical flipping state (%TRUE for flipped) for the given object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="flip" transfer-ownership="none">
            <doc xml:whitespace="preserve">use flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VideoOrientationInterface"
            c:type="GstVideoOrientationInterface"
            glib:is-gtype-struct-for="VideoOrientation">
      <doc xml:whitespace="preserve">#GstVideoOrientationInterface interface.</doc>
      <field name="iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_hflip">
        <callback name="get_hflip">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="flip" transfer-ownership="none">
              <doc xml:whitespace="preserve">return location for the result</doc>
              <type name="gboolean" c:type="gboolean*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vflip">
        <callback name="get_vflip">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="flip" transfer-ownership="none">
              <doc xml:whitespace="preserve">return location for the result</doc>
              <type name="gboolean" c:type="gboolean*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hcenter">
        <callback name="get_hcenter">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="center" transfer-ownership="none">
              <doc xml:whitespace="preserve">return location for the result</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vcenter">
        <callback name="get_vcenter">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="center" transfer-ownership="none">
              <doc xml:whitespace="preserve">return location for the result</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_hflip">
        <callback name="set_hflip">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="flip" transfer-ownership="none">
              <doc xml:whitespace="preserve">use flipping</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_vflip">
        <callback name="set_vflip">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports flipping</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="flip" transfer-ownership="none">
              <doc xml:whitespace="preserve">use flipping</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_hcenter">
        <callback name="set_hcenter">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="center" transfer-ownership="none">
              <doc xml:whitespace="preserve">centering offset</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_vcenter">
        <callback name="set_vcenter">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE in case the element supports centering</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="video_orientation" transfer-ownership="none">
              <type name="VideoOrientation" c:type="GstVideoOrientation*"/>
            </parameter>
            <parameter name="center" transfer-ownership="none">
              <doc xml:whitespace="preserve">centering offset</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="VideoOverlay"
               c:symbol-prefix="video_overlay"
               c:type="GstVideoOverlay"
               glib:type-name="GstVideoOverlay"
               glib:get-type="gst_video_overlay_get_type"
               glib:type-struct="VideoOverlayInterface">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
The #GstVideoOverlay interface is used for 2 main purposes :
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;para&gt;
To get a grab on the Window where the video sink element is going to render.
This is achieved by either being informed about the Window identifier that
the video sink element generated, or by forcing the video sink element to use
a specific Window identifier for rendering.
&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;
To force a redrawing of the latest video frame the video sink element
displayed on the Window. Indeed if the #GstPipeline is in #GST_STATE_PAUSED
state, moving the Window around will damage its content. Application
developers will want to handle the Expose events themselves and force the
video sink element to refresh the Window's content.
&lt;/para&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/para&gt;
&lt;para&gt;
Using the Window created by the video sink is probably the simplest scenario,
in some cases, though, it might not be flexible enough for application
developers if they need to catch events such as mouse moves and button
clicks.
&lt;/para&gt;
&lt;para&gt;
Setting a specific Window identifier on the video sink element is the most
flexible solution but it has some issues. Indeed the application needs to set
its Window identifier at the right time to avoid internal Window creation
from the video sink element. To solve this issue a #GstMessage is posted on
the bus to inform the application that it should set the Window identifier
immediately. Here is an example on how to do that correctly:
|[
static GstBusSyncReply
create_window (GstBus * bus, GstMessage * message, GstPipeline * pipeline)
{
// ignore anything but 'prepare-window-handle' element messages
if (!gst_is_video_overlay_prepare_window_handle_message (message))
return GST_BUS_PASS;

win = XCreateSimpleWindow (disp, root, 0, 0, 320, 240, 0, 0, 0);

XSetWindowBackgroundPixmap (disp, win, None);

XMapRaised (disp, win);

XSync (disp, FALSE);

gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (GST_MESSAGE_SRC (message)),
win);

gst_message_unref (message);

return GST_BUS_DROP;
}
...
int
main (int argc, char **argv)
{
...
bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));
gst_bus_set_sync_handler (bus, (GstBusSyncHandler) create_window, pipeline);
...
}
]|
&lt;/para&gt;
&lt;/refsect2&gt;
&lt;refsect2&gt;
&lt;title&gt;Two basic usage scenarios&lt;/title&gt;
&lt;para&gt;
There are two basic usage scenarios: in the simplest case, the application
knows exactly what particular element is used for video output, which is
usually the case when the application creates the videosink to use
(e.g. #xvimagesink, #ximagesink, etc.) itself; in this case, the application
can just create the videosink element, create and realize the window to
render the video on and then call gst_video_overlay_set_window_handle() directly
with the XID or native window handle, before starting up the pipeline.
&lt;/para&gt;
&lt;para&gt;
In the other and more common case, the application does not know in advance
what GStreamer video sink element will be used for video output. This is
usually the case when an element such as #autovideosink or #gconfvideosink
is used. In this case, the video sink element itself is created
asynchronously from a GStreamer streaming thread some time after the
pipeline has been started up. When that happens, however, the video sink
will need to know right then whether to render onto an already existing
application window or whether to create its own window. This is when it
posts a prepare-window-handle message, and that is also why this message needs
to be handled in a sync bus handler which will be called from the streaming
thread directly (because the video sink will need an answer right then).
&lt;/para&gt;
&lt;para&gt;
As response to the prepare-window-handle element message in the bus sync
handler, the application may use gst_video_overlay_set_window_handle() to tell
the video sink to render onto an existing window surface. At this point the
application should already have obtained the window handle / XID, so it
just needs to set it. It is generally not advisable to call any GUI toolkit
functions or window system functions from the streaming thread in which the
prepare-window-handle message is handled, because most GUI toolkits and
windowing systems are not thread-safe at all and a lot of care would be
required to co-ordinate the toolkit and window system calls of the
different threads (Gtk+ users please note: prior to Gtk+ 2.18
GDK_WINDOW_XID() was just a simple structure access, so generally fine to do
within the bus sync handler; this macro was changed to a function call in
Gtk+ 2.18 and later, which is likely to cause problems when called from a
sync handler; see below for a better approach without GDK_WINDOW_XID()
used in the callback).
&lt;/para&gt;
&lt;/refsect2&gt;
&lt;refsect2&gt;
&lt;title&gt;GstVideoOverlay and Gtk+&lt;/title&gt;
&lt;para&gt;
|[
#include &amp;lt;gst/interfaces/xoverlay.h&amp;gt;
#include &amp;lt;gtk/gtk.h&amp;gt;
#ifdef GDK_WINDOWING_X11
#include &amp;lt;gdk/gdkx.h&amp;gt;  // for GDK_WINDOW_XID
#endif
#ifdef GDK_WINDOWING_WIN32
#include &amp;lt;gdk/gdkwin32.h&amp;gt;  // for GDK_WINDOW_HWND
#endif
...
static guintptr video_window_handle = 0;
...
static GstBusSyncReply
bus_sync_handler (GstBus * bus, GstMessage * message, gpointer user_data)
{
// ignore anything but 'prepare-window-handle' element messages
if (!gst_is_video_overlay_prepare_window_handle_message (message))
return GST_BUS_PASS;

if (video_window_handle != 0) {
GstXOverlay *xoverlay;

// GST_MESSAGE_SRC (message) will be the video sink element
xoverlay = GST_X_OVERLAY (GST_MESSAGE_SRC (message));
gst_x_overlay_set_window_handle (xoverlay, video_window_handle);
} else {
g_warning ("Should have obtained video_window_handle by now!");
}

gst_message_unref (message);
return GST_BUS_DROP;
}
...
static void
video_widget_realize_cb (GtkWidget * widget, gpointer data)
{
#if GTK_CHECK_VERSION(2,18,0)
// Tell Gtk+/Gdk to create a native window for this widget instead of
// drawing onto the parent widget.
// This is here just for pedagogical purposes, GDK_WINDOW_XID will call
// it as well in newer Gtk versions
if (!gdk_window_ensure_native (widget-&gt;window))
g_error ("Couldn't create native window needed for GstVideoOverlay!");
#endif

#ifdef GDK_WINDOWING_X11
{
gulong xid = GDK_WINDOW_XID (gtk_widget_get_window (video_window));
video_window_handle = xid;
}
#endif
#ifdef GDK_WINDOWING_WIN32
{
HWND wnd = GDK_WINDOW_HWND (gtk_widget_get_window (video_window));
video_window_handle = (guintptr) wnd;
}
#endif
}
...
int
main (int argc, char **argv)
{
GtkWidget *video_window;
GtkWidget *app_window;
...
app_window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
...
video_window = gtk_drawing_area_new ();
g_signal_connect (video_window, "realize",
G_CALLBACK (video_widget_realize_cb), NULL);
gtk_widget_set_double_buffered (video_window, FALSE);
...
// usually the video_window will not be directly embedded into the
// application window like this, but there will be many other widgets
// and the video window will be embedded in one of them instead
gtk_container_add (GTK_CONTAINER (ap_window), video_window);
...
// show the GUI
gtk_widget_show_all (app_window);

// realize window now so that the video window gets created and we can
// obtain its XID/HWND before the pipeline is started up and the videosink
// asks for the XID/HWND of the window to render onto
gtk_widget_realize (video_window);

// we should have the XID/HWND now
g_assert (video_window_handle != 0);
...
// set up sync handler for setting the xid once the pipeline is started
bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));
gst_bus_set_sync_handler (bus, (GstBusSyncHandler) bus_sync_handler, NULL);
gst_object_unref (bus);
...
gst_element_set_state (pipeline, GST_STATE_PLAYING);
...
}
]|
&lt;/para&gt;
&lt;/refsect2&gt;
&lt;refsect2&gt;
&lt;title&gt;GstVideoOverlay and Qt&lt;/title&gt;
&lt;para&gt;
|[
#include &amp;lt;glib.h&amp;gt;
#include &amp;lt;gst/gst.h&amp;gt;
#include &amp;lt;gst/interfaces/videooverlay.h&amp;gt;

#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QTimer&amp;gt;
#include &amp;lt;QWidget&amp;gt;

int main(int argc, char *argv[])
{
if (!g_thread_supported ())
g_thread_init (NULL);

gst_init (&amp;argc, &amp;argv);
QApplication app(argc, argv);
app.connect(&amp;app, SIGNAL(lastWindowClosed()), &amp;app, SLOT(quit ()));

// prepare the pipeline

GstElement *pipeline = gst_pipeline_new ("xvoverlay");
GstElement *src = gst_element_factory_make ("videotestsrc", NULL);
GstElement *sink = gst_element_factory_make ("xvimagesink", NULL);
gst_bin_add_many (GST_BIN (pipeline), src, sink, NULL);
gst_element_link (src, sink);

// prepare the ui

QWidget window;
window.resize(320, 240);
window.show();

WId xwinid = window.winId();
gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (sink), xwinid);

// run the pipeline

GstStateChangeReturn sret = gst_element_set_state (pipeline,
GST_STATE_PLAYING);
if (sret == GST_STATE_CHANGE_FAILURE) {
gst_element_set_state (pipeline, GST_STATE_NULL);
gst_object_unref (pipeline);
// Exit application
QTimer::singleShot(0, QApplication::activeWindow(), SLOT(quit()));
}

int ret = app.exec();

window.hide();
gst_element_set_state (pipeline, GST_STATE_NULL);
gst_object_unref (pipeline);

return ret;
}
]|
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <virtual-method name="expose" invoker="expose">
        <doc xml:whitespace="preserve">Tell an overlay that it has been exposed. This will redraw the current frame
in the drawable even if the pipeline is PAUSED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="handle_events"
                      invoker="handle_events"
                      version="0.10.12">
        <doc xml:whitespace="preserve">Tell an overlay that it should handle events from the window system. These
events are forwarded upstream as navigation events. In some window system,
events are not propagated in the window hierarchy if a client is listening
for them. This method allows you to disable events handling completely
from the XOverlay.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle_events" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #gboolean indicating if events should be handled or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_render_rectangle">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_window_handle"
                      invoker="set_window_handle"
                      version="0.10.31">
        <doc xml:whitespace="preserve">This will call the video overlay's set_window_handle method. You
should use this method to tell to a XOverlay to display video output to a
specific window (e.g. an XWindow on X11). Passing 0 as the  @handle will
tell the overlay to stop using that window and create an internal one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:whitespace="preserve">a handle referencing the window.</doc>
            <type name="guintptr" c:type="guintptr"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="expose" c:identifier="gst_video_overlay_expose">
        <doc xml:whitespace="preserve">Tell an overlay that it has been exposed. This will redraw the current frame
in the drawable even if the pipeline is PAUSED.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="got_window_handle"
              c:identifier="gst_video_overlay_got_window_handle">
        <doc xml:whitespace="preserve">This will post a "have-window-handle" element message on the bus.

This function should only be used by video overlay plugin developers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:whitespace="preserve">a platform-specific handle referencing the window</doc>
            <type name="guintptr" c:type="guintptr"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_events"
              c:identifier="gst_video_overlay_handle_events"
              version="0.10.12">
        <doc xml:whitespace="preserve">Tell an overlay that it should handle events from the window system. These
events are forwarded upstream as navigation events. In some window system,
events are not propagated in the window hierarchy if a client is listening
for them. This method allows you to disable events handling completely
from the XOverlay.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle_events" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #gboolean indicating if events should be handled or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_window_handle"
              c:identifier="gst_video_overlay_prepare_window_handle">
        <doc xml:whitespace="preserve">This will post a "prepare-window-handle" element message on the bus
to give applications an opportunity to call
gst_video_overlay_set_window_handle() before a plugin creates its own
window.

This function should only be used by video overlay plugin developers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_render_rectangle"
              c:identifier="gst_video_overlay_set_render_rectangle"
              version="0.10.29">
        <doc xml:whitespace="preserve">Configure a subregion as a video target within the window set by
gst_video_overlay_set_window_handle(). If this is not used or not supported
the video will fill the area of the window set as the overlay to 100%.
By specifying the rectangle, the video can be overlayed to a specific region
of that window only. After setting the new rectangle one should call
gst_video_overlay_expose() to force a redraw. To unset the region pass -1 for
the @width and @height parameters.

This method is needed for non fullscreen video overlay in UI toolkits that
do not support subwindows.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE if not supported by the sink.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">the horizontal offset of the render area inside the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">the vertical offset of the render area inside the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the render area inside the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the render area inside the window</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window_handle"
              c:identifier="gst_video_overlay_set_window_handle"
              version="0.10.31">
        <doc xml:whitespace="preserve">This will call the video overlay's set_window_handle method. You
should use this method to tell to a XOverlay to display video output to a
specific window (e.g. an XWindow on X11). Passing 0 as the  @handle will
tell the overlay to stop using that window and create an internal one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:whitespace="preserve">a handle referencing the window.</doc>
            <type name="guintptr" c:type="guintptr"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VideoOverlayInterface"
            c:type="GstVideoOverlayInterface"
            glib:is-gtype-struct-for="VideoOverlay">
      <doc xml:whitespace="preserve">#GstVideoOverlay interface</doc>
      <field name="iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="expose">
        <callback name="expose">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="overlay" transfer-ownership="none">
              <type name="VideoOverlay" c:type="GstVideoOverlay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_events">
        <callback name="handle_events">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="overlay" transfer-ownership="none">
              <type name="VideoOverlay" c:type="GstVideoOverlay*"/>
            </parameter>
            <parameter name="handle_events" transfer-ownership="none">
              <doc xml:whitespace="preserve">a #gboolean indicating if events should be handled or not.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_render_rectangle">
        <callback name="set_render_rectangle">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="overlay" transfer-ownership="none">
              <type name="VideoOverlay" c:type="GstVideoOverlay*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_window_handle">
        <callback name="set_window_handle">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="overlay" transfer-ownership="none">
              <type name="VideoOverlay" c:type="GstVideoOverlay*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <doc xml:whitespace="preserve">a handle referencing the window.</doc>
              <type name="guintptr" c:type="guintptr"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VideoRectangle" c:type="GstVideoRectangle">
      <doc xml:whitespace="preserve">Helper structure representing a rectangular area.</doc>
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="w" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="h" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <class name="VideoSink"
           c:symbol-prefix="video_sink"
           c:type="GstVideoSink"
           parent="GstBase.BaseSink"
           glib:type-name="GstVideoSink"
           glib:get-type="gst_video_sink_get_type"
           glib:type-struct="VideoSinkClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
Provides useful functions and a base class for video sinks. 
&lt;/para&gt;
&lt;para&gt;
GstVideoSink will configure the default base sink to drop frames that
arrive later than 20ms as this is considered the default threshold for
observing out-of-sync frames.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <function name="center_rect" c:identifier="gst_video_sink_center_rect">
        <doc xml:whitespace="preserve">Takes @src rectangle and position it at the center of @dst rectangle with or
without @scaling. It handles clipping if the @src rectangle is bigger than
the @dst one and @scaling is set to FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoRectangle describing the source area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoRectangle describing the destination area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GstVideoRectangle which will receive the result area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle*"/>
          </parameter>
          <parameter name="scaling" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #gboolean indicating if scaling should be applied or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="show_frame">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="show-preroll-frame"
                version="0.10.25"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to show video frames during preroll. If set to #FALSE, video
frames will only be rendered in PLAYING state.</doc>
        <type name="gboolean"/>
      </property>
      <field name="element">
        <type name="GstBase.BaseSink" c:type="GstBaseSink"/>
      </field>
      <field name="width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VideoSinkPrivate" c:type="GstVideoSinkPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VideoSinkClass"
            c:type="GstVideoSinkClass"
            glib:is-gtype-struct-for="VideoSink">
      <doc xml:whitespace="preserve">The video sink class structure. Derived classes should override the
@show_frame virtual function.</doc>
      <field name="parent_class">
        <type name="GstBase.BaseSinkClass" c:type="GstBaseSinkClass"/>
      </field>
      <field name="show_frame">
        <callback name="show_frame">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="video_sink" transfer-ownership="none">
              <type name="VideoSink" c:type="GstVideoSink*"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VideoSinkPrivate" c:type="GstVideoSinkPrivate" disguised="1">
    </record>
    <enumeration name="VideoTransferFunction"
                 glib:type-name="GstVideoTransferFunction"
                 glib:get-type="gst_video_transfer_function_get_type"
                 c:type="GstVideoTransferFunction">
      <doc xml:whitespace="preserve">The video transfer function defines the formula for converting between
non-linear RGB (R'G'B') and linear RGB</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_TRANSFER_UNKNOWN"
              glib:nick="unknown"/>
      <member name="gamma10"
              value="1"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA10"
              glib:nick="gamma10"/>
      <member name="gamma18"
              value="2"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA18"
              glib:nick="gamma18"/>
      <member name="gamma20"
              value="3"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA20"
              glib:nick="gamma20"/>
      <member name="gamma22"
              value="4"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA22"
              glib:nick="gamma22"/>
      <member name="bt709"
              value="5"
              c:identifier="GST_VIDEO_TRANSFER_BT709"
              glib:nick="bt709"/>
      <member name="smpte240m"
              value="6"
              c:identifier="GST_VIDEO_TRANSFER_SMPTE240M"
              glib:nick="smpte240m"/>
      <member name="srgb"
              value="7"
              c:identifier="GST_VIDEO_TRANSFER_SRGB"
              glib:nick="srgb"/>
      <member name="gamma28"
              value="8"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA28"
              glib:nick="gamma28"/>
      <member name="log100"
              value="9"
              c:identifier="GST_VIDEO_TRANSFER_LOG100"
              glib:nick="log100"/>
      <member name="log316"
              value="10"
              c:identifier="GST_VIDEO_TRANSFER_LOG316"
              glib:nick="log316"/>
    </enumeration>
    <function name="buffer_add_video_meta"
              c:identifier="gst_buffer_add_video_meta"
              introspectable="0">
      <doc xml:whitespace="preserve">Attaches GstVideoMeta metadata to @buffer with the given parameters and the
default offsets and strides for @format and @width x @height.

This function calculates the default offsets and strides and then calls
gst_buffer_add_video_meta_full() with them.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GstVideoMeta on @buffer.</doc>
        <type name="VideoMeta" c:type="GstVideoMeta*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstVideoFlags</doc>
          <type name="VideoFlags" c:type="GstVideoFlags"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_add_video_meta_full"
              c:identifier="gst_buffer_add_video_meta_full"
              introspectable="0">
      <doc xml:whitespace="preserve">Attaches GstVideoMeta metadata to @buffer with the given parameters.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GstVideoMeta on @buffer.</doc>
        <type name="VideoMeta" c:type="GstVideoMeta*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstVideoFlags</doc>
          <type name="VideoFlags" c:type="GstVideoFlags"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="n_planes" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of planes</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:whitespace="preserve">offset of each plane</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:whitespace="preserve">stride of each plane</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_get_video_meta_id"
              c:identifier="gst_buffer_get_video_meta_id"
              introspectable="0">
      <doc xml:whitespace="preserve">Find the #GstVideoMeta on @buffer with the given @id.

Buffers can contain multiple #GstVideoMeta metadata items when dealing with
multiview buffers.

on @buffer.</doc>
      <return-value>
        <doc xml:whitespace="preserve">the #GstVideoMeta with @id or %NULL when there is no such metadata</doc>
        <type name="VideoMeta" c:type="GstVideoMeta*"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:whitespace="preserve">a metadata id</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_pool_config_get_video_alignment"
              c:identifier="gst_buffer_pool_config_get_video_alignment">
      <doc xml:whitespace="preserve">Get the video alignment from the bufferpool configuration @config in
in @align</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">#TRUE if @config could be parsed correctly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="config" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstStructure</doc>
          <type name="Gst.Structure" c:type="GstStructure*"/>
        </parameter>
        <parameter name="align" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoAlignment</doc>
          <type name="VideoAlignment" c:type="GstVideoAlignment*"/>
        </parameter>
      </parameters>
    </function>
    <function name="buffer_pool_config_set_video_alignment"
              c:identifier="gst_buffer_pool_config_set_video_alignment">
      <doc xml:whitespace="preserve">Set the video alignment in @align to the bufferpool configuration
@config</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="config" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstStructure</doc>
          <type name="Gst.Structure" c:type="GstStructure*"/>
        </parameter>
        <parameter name="align" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoAlignment</doc>
          <type name="VideoAlignment" c:type="GstVideoAlignment*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_video_overlay_prepare_window_handle_message"
              c:identifier="gst_is_video_overlay_prepare_window_handle_message"
              version="0.11.2">
      <doc xml:whitespace="preserve">Convenience function to check if the given message is a
"prepare-window-handle" message from a #GstVideoOverlay.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">whether @msg is a "prepare-window-handle" message</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="msg" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstMessage</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_calculate_display_ratio"
              c:identifier="gst_video_calculate_display_ratio"
              version="0.10.7">
      <doc xml:whitespace="preserve">Given the Pixel Aspect Ratio and size of an input video frame, and the
pixel aspect ratio of the intended display device, calculates the actual
display ratio the video will be rendered with.

dar_n and dar_d parameters.
The return value is FALSE in the case of integer overflow or other error.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A boolean indicating success and a calculated Display Ratio in the</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dar_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the calculated display_ratio</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="dar_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the calculated display_ratio</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="video_width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Width of the video frame in pixels</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Height of the video frame in pixels</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the pixel aspect ratio of the input video.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the pixel aspect ratio of the input video.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the pixel aspect ratio of the display device</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the pixel aspect ratio of the display device</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_convert_sample"
              c:identifier="gst_video_convert_sample"
              version="0.10.31"
              throws="1">
      <doc xml:whitespace="preserve">Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.

will point to the #GError).</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The converted #GstSample, or %NULL if an error happened (in which case @err</doc>
        <type name="Gst.Sample" c:type="GstSample*"/>
      </return-value>
      <parameters>
        <parameter name="sample" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstSample</doc>
          <type name="Gst.Sample" c:type="GstSample*"/>
        </parameter>
        <parameter name="to_caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstCaps to convert to</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum amount of time allowed for the processing.</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_convert_sample_async"
              c:identifier="gst_video_convert_sample_async"
              version="0.10.31">
      <doc xml:whitespace="preserve">Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.

@callback will be called after conversion, when an error occured or if conversion didn't
finish after @timeout. @callback will always be called from the thread default
%GMainContext, see g_main_context_get_thread_default(). If GLib before 2.22 is used,
this will always be the global default main context.

@destroy_notify will be called after the callback was called and @user_data is not needed
anymore.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sample" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstSample</doc>
          <type name="Gst.Sample" c:type="GstSample*"/>
        </parameter>
        <parameter name="to_caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstCaps to convert to</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum amount of time allowed for the processing.</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4"
                   destroy="5">
          <doc xml:whitespace="preserve">%GstVideoConvertSampleCallback that will be called after conversion.</doc>
          <type name="VideoConvertSampleCallback"
                c:type="GstVideoConvertSampleCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">extra data that will be passed to the @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_notify"
                   transfer-ownership="none"
                   scope="async">
          <doc xml:whitespace="preserve">%GDestroyNotify to be called after @user_data is not needed anymore</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_crop_meta_api_get_type"
              c:identifier="gst_video_crop_meta_api_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="video_crop_meta_get_info"
              c:identifier="gst_video_crop_meta_get_info"
              moved-to="VideoCropMeta.get_info">
      <return-value transfer-ownership="none">
        <type name="Gst.MetaInfo" c:type="GstMetaInfo*"/>
      </return-value>
    </function>
    <function name="video_event_is_force_key_unit"
              c:identifier="gst_video_event_is_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Checks if an event is a force key unit event. Returns true for both upstream
and downstream force key unit events.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid force key unit event</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to check</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_downstream_force_key_unit"
              c:identifier="gst_video_event_new_downstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Creates a new downstream force key unit event. A downstream force key unit
event can be sent down the pipeline to request downstream elements to produce
a key unit. A downstream force key unit event must also be sent when handling
an upstream force key unit event to notify downstream that the latter has been
handled.

To parse an event created by gst_video_event_new_downstream_force_key_unit() use
gst_video_event_parse_downstream_force_key_unit().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="timestamp" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp of the buffer that starts a new key unit</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="stream_time" transfer-ownership="none">
          <doc xml:whitespace="preserve">the stream_time of the buffer that starts a new key unit</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="running_time" transfer-ownership="none">
          <doc xml:whitespace="preserve">the running_time of the buffer that starts a new key unit</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="all_headers" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to produce headers when starting a new key unit</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">integer that can be used to number key units</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_still_frame"
              c:identifier="gst_video_event_new_still_frame"
              version="0.10.26">
      <doc xml:whitespace="preserve">Creates a new Still Frame event. If @in_still is %TRUE, then the event
represents the start of a still frame sequence. If it is %FALSE, then
the event ends a still frame sequence.

To parse an event created by gst_video_event_new_still_frame() use
gst_video_event_parse_still_frame().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="in_still" transfer-ownership="none">
          <doc xml:whitespace="preserve">boolean value for the still-frame state of the event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_upstream_force_key_unit"
              c:identifier="gst_video_event_new_upstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Creates a new upstream force key unit event. An upstream force key unit event
can be sent to request upstream elements to produce a key unit. 

@running_time can be set to request a new key unit at a specific
running_time. If set to GST_CLOCK_TIME_NONE, upstream elements will produce a
new key unit as soon as possible.

To parse an event created by gst_video_event_new_downstream_force_key_unit() use
gst_video_event_parse_downstream_force_key_unit().</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="running_time" transfer-ownership="none">
          <doc xml:whitespace="preserve">the running_time at which a new key unit should be produced</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="all_headers" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to produce headers when starting a new key unit</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">integer that can be used to number key units</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_downstream_force_key_unit"
              c:identifier="gst_video_event_parse_downstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Get timestamp, stream-time, running-time, all-headers and count in the force
key unit event. See gst_video_event_new_downstream_force_key_unit() for a
full description of the downstream force key unit event.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid downstream force key unit event.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="timestamp"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the timestamp in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="stream_time"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the stream-time in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="running_time"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the running-time in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="all_headers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the all_headers flag in the event</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the count field of the event</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_still_frame"
              c:identifier="gst_video_event_parse_still_frame"
              version="0.10.26">
      <doc xml:whitespace="preserve">Parse a #GstEvent, identify if it is a Still Frame event, and
return the still-frame state from the event if it is.
If the event represents the start of a still frame, the in_still
variable will be set to TRUE, otherwise FALSE. It is OK to pass NULL for the
in_still variable order to just check whether the event is a valid still-frame
event.

Create a still frame event using gst_video_event_new_still_frame()</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid still-frame event. %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="in_still" transfer-ownership="none">
          <doc xml:whitespace="preserve">A boolean to receive the still-frame status from the event, or NULL</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_upstream_force_key_unit"
              c:identifier="gst_video_event_parse_upstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Get running-time, all-headers and count in the force key unit event. See
gst_video_event_new_upstream_force_key_unit() for a full description of the
upstream force key unit event.

Create an upstream force key unit event using  gst_video_event_new_upstream_force_key_unit()</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid upstream force-key-unit event. %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="running_time"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the running_time in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="all_headers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the all_headers flag in the event</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the count field in the event</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_from_fourcc"
              c:identifier="gst_video_format_from_fourcc"
              moved-to="VideoFormat.from_fourcc"
              version="0.10.16">
      <doc xml:whitespace="preserve">Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GstVideoFormat describing the FOURCC value</doc>
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="fourcc" transfer-ownership="none">
          <doc xml:whitespace="preserve">a FOURCC value representing raw YUV video</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_from_masks"
              c:identifier="gst_video_format_from_masks"
              moved-to="VideoFormat.from_masks">
      <doc xml:whitespace="preserve">Find the #GstVideoFormat for the given parameters.

not specify a known format.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstVideoFormat or GST_VIDEO_FORMAT_UNKNOWN when the parameters to</doc>
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="depth" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of bits used for a pixel</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="bpp" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of bits used to store a pixel. This value is bigger than @depth</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="endianness" transfer-ownership="none">
          <doc xml:whitespace="preserve">the endianness of the masks</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="red_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the red mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="green_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the green mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="blue_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the blue mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="alpha_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the optional alpha mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_from_string"
              c:identifier="gst_video_format_from_string"
              moved-to="VideoFormat.from_string">
      <doc xml:whitespace="preserve">Convert the @format string to its #GstVideoFormat.

string is not a known format.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GstVideoFormat for @format or GST_VIDEO_FORMAT_UNKNOWN when the</doc>
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a format string</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_info"
              c:identifier="gst_video_format_get_info"
              moved-to="VideoFormat.get_info">
      <doc xml:whitespace="preserve">Get the #GstVideoFormatInfo for @format</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GstVideoFormatInfo for @format.</doc>
        <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_to_fourcc"
              c:identifier="gst_video_format_to_fourcc"
              moved-to="VideoFormat.to_fourcc"
              version="0.10.16">
      <doc xml:whitespace="preserve">Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the FOURCC corresponding to @format</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_to_string"
              c:identifier="gst_video_format_to_string"
              moved-to="VideoFormat.to_string">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_marshal_VOID__OBJECT_INT"
              c:identifier="gst_video_marshal_VOID__OBJECT_INT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_meta_api_get_type"
              c:identifier="gst_video_meta_api_get_type">
      <return-value transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </return-value>
    </function>
    <function name="video_meta_get_info"
              c:identifier="gst_video_meta_get_info"
              moved-to="VideoMeta.get_info">
      <return-value transfer-ownership="none">
        <type name="Gst.MetaInfo" c:type="GstMetaInfo*"/>
      </return-value>
    </function>
    <function name="video_meta_transform_scale_get_quark"
              c:identifier="gst_video_meta_transform_scale_get_quark"
              moved-to="VideoMetaTransform.scale_get_quark">
      <doc xml:whitespace="preserve">Get the #GQuark for the "gst-video-scale" metadata transform operation.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GQuark</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="video_parse_caps_palette"
              c:identifier="gst_video_parse_caps_palette"
              version="0.10.32">
      <doc xml:whitespace="preserve">Returns the palette data from the caps as a #GstBuffer. For
#GST_VIDEO_FORMAT_RGB8_PALETTED this is containing 256 #guint32
values, each containing ARGB colors in native endianness.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a #GstBuffer containing the palette data. Unref after usage.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
