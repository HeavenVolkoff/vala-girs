<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2"><include name="GLib" version="2.0" />
  <include name="GObject" version="2.0" />
  <include name="Gio" version="2.0" />
  <namespace c:identifier-prefixes="" c:symbol-prefixes="" name="Tracker" shared-library="libtracker-sparql-2.0.so.0" version="2.0"><class name="NamespaceManager" parent="GObject.Object" c:symbol-prefix="namespace_manager" c:type="TrackerNamespaceManager" glib:get-type="tracker_namespace_manager_get_type" glib:type-name="TrackerNamespaceManager" glib:type-struct="NamespaceManagerClass">
      <source-position filename="tracker-namespace-manager.h" line="32" />
      <constructor name="new" version="1.10" c:identifier="tracker_namespace_manager_new">
        <doc filename="tracker-namespace-manager.c" line="96" xml:space="preserve">Creates a new #TrackerNamespaceManager instance.</doc>
        <source-position filename="tracker-namespace-manager.h" line="34" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-namespace-manager.c" line="101" xml:space="preserve">a new #TrackerNamespaceManager instance</doc>
          <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
        </return-value>
      </constructor>
      <function name="get_default" version="1.10" c:identifier="tracker_namespace_manager_get_default">
        <doc filename="tracker-namespace-manager.c" line="115" xml:space="preserve">Returns the global #TrackerNamespaceManager that contains a set of well-known
namespaces and prefixes, such as rdf:, rdfs:, nie:, tracker:, etc.

Note that the list of prefixes and namespaces is hardcoded in
libtracker-sparql. It may not correspond with the installed set of
ontologies, if they have been modified since they were installed.</doc>
        <source-position filename="tracker-namespace-manager.h" line="35" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-namespace-manager.c" line="125" xml:space="preserve">a global, shared #TrackerNamespaceManager instance</doc>
          <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
        </return-value>
      </function>
      <method name="add_prefix" version="1.10" c:identifier="tracker_namespace_manager_add_prefix">
        <doc filename="tracker-namespace-manager.c" line="210" xml:space="preserve">Adds @prefix as the recognised abbreviaton of @namespace.

Only one prefix is allowed for a given namespace, and all prefixes must
be unique.</doc>
        <source-position filename="tracker-namespace-manager.h" line="42" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="212" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="213" xml:space="preserve">a short, unique prefix to identify @namespace</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="ns" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="214" xml:space="preserve">the URL of the given namespace</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="expand_uri" version="1.10" c:identifier="tracker_namespace_manager_expand_uri">
        <doc filename="tracker-namespace-manager.c" line="258" xml:space="preserve">If @compact_uri begins with one of the prefixes known to this
#TrackerNamespaceManager, then the return value will be the
expanded URI. Otherwise, a copy of @compact_uri will be returned.</doc>
        <source-position filename="tracker-namespace-manager.h" line="37" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-namespace-manager.c" line="267" xml:space="preserve">a newly-allocated string</doc>
          <type name="utf8" c:type="char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="260" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
          <parameter name="compact_uri" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="261" xml:space="preserve">a URI or compact URI</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method introspectable="0" name="foreach" version="1.10" c:identifier="tracker_namespace_manager_foreach">
        <doc filename="tracker-namespace-manager.c" line="335" xml:space="preserve">Calls @func for each known prefix / URI pair.</doc>
        <source-position filename="tracker-namespace-manager.h" line="46" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="337" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
          <parameter closure="1" name="func" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="338" xml:space="preserve">the function to call for each prefix / URI pair</doc>
            <type name="GLib.HFunc" c:type="GHFunc" />
          </parameter>
          <parameter allow-none="1" name="user_data" nullable="1" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="339" xml:space="preserve">user data to pass to the function</doc>
            <type name="gpointer" c:type="gpointer" />
          </parameter>
        </parameters>
      </method>
      <method name="has_prefix" version="1.10" c:identifier="tracker_namespace_manager_has_prefix">
        <source-position filename="tracker-namespace-manager.h" line="39" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-namespace-manager.c" line="168" xml:space="preserve">%TRUE if the #TrackerNamespaceManager knows about @prefix, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="165" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="166" xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="lookup_prefix" version="1.10" c:identifier="tracker_namespace_manager_lookup_prefix">
        <doc filename="tracker-namespace-manager.c" line="185" xml:space="preserve">Looks up the namespace URI corresponding to @prefix, or %NULL if the prefix
is not known.</doc>
        <source-position filename="tracker-namespace-manager.h" line="40" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-namespace-manager.c" line="193" xml:space="preserve">a string owned by the #TrackerNamespaceManager, or %NULL</doc>
          <type name="utf8" c:type="const char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="187" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="188" xml:space="preserve">a string</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="print_turtle" version="1.10" c:identifier="tracker_namespace_manager_print_turtle">
        <doc filename="tracker-namespace-manager.c" line="304" xml:space="preserve">Writes out all namespaces as Turtle @prefix statements.</doc>
        <source-position filename="tracker-namespace-manager.h" line="44" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-namespace-manager.c" line="310" xml:space="preserve">a newly-allocated string</doc>
          <type name="utf8" c:type="char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-namespace-manager.c" line="306" xml:space="preserve">a #TrackerNamespaceManager</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="NamespaceManagerClass" c:type="TrackerNamespaceManagerClass" glib:is-gtype-struct-for="NamespaceManager">
      <source-position filename="tracker-namespace-manager.h" line="32" />
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass" />
      </field>
    </record>
    <class name="Notifier" parent="GObject.Object" c:symbol-prefix="notifier" c:type="TrackerNotifier" glib:get-type="tracker_notifier_get_type" glib:type-name="TrackerNotifier" glib:type-struct="NotifierClass">
      <source-position filename="tracker-notifier.h" line="43" />
      <implements name="Gio.Initable" />
      <constructor name="new" throws="1" version="1.12" c:identifier="tracker_notifier_new">
        <doc filename="tracker-notifier.c" line="885" xml:space="preserve">Creates a new notifier, events can be listened through the
TrackerNotifier::events signal.</doc>
        <source-position filename="tracker-notifier.h" line="78" />
        <return-value nullable="1" transfer-ownership="full">
          <doc filename="tracker-notifier.c" line="896" xml:space="preserve">a newly created #TrackerNotifier, %NULL on error.</doc>
          <type name="Notifier" c:type="TrackerNotifier*" />
        </return-value>
        <parameters>
          <parameter allow-none="1" name="classes" nullable="1" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="887" xml:space="preserve">Array of RDF classes to
          receive notifications from, or %NULL for all.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*" />
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="889" xml:space="preserve">flags affecting the notifier behavior</doc>
            <type name="NotifierFlags" c:type="TrackerNotifierFlags" />
          </parameter>
          <parameter allow-none="1" name="cancellable" nullable="1" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="890" xml:space="preserve">Cancellable for the operation</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*" />
          </parameter>
        </parameters>
      </constructor>
      <virtual-method introspectable="0" name="events">
        <source-position filename="tracker-notifier.h" line="38" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="notifier" transfer-ownership="none">
            <type name="Notifier" c:type="TrackerNotifier*" />
          </instance-parameter>
          <parameter name="events" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="const GPtrArray*">
              <type name="gpointer" c:type="gpointer" />
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <property construct-only="1" name="classes" transfer-ownership="none" writable="1">
        <doc filename="tracker-notifier.c" line="839" xml:space="preserve">RDF classes to listen notifications about.</doc>
        <array>
          <type name="utf8" />
        </array>
      </property>
      <property construct-only="1" introspectable="0" name="flags" transfer-ownership="none" writable="1">
        <doc filename="tracker-notifier.c" line="852" xml:space="preserve">Flags affecting #TrackerNotifier behavior.</doc>
        <type />
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject" />
      </field>
      <glib:signal name="events">
        <doc filename="tracker-notifier.c" line="823" xml:space="preserve">Notifies of changes in the Tracker database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <parameter name="events" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="826" xml:space="preserve">A #GPtrArray of #TrackerNotifierEvent</doc>
            <array name="GLib.PtrArray">
              <type name="NotifierEvent" />
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="NotifierClass" c:type="TrackerNotifierClass" glib:is-gtype-struct-for="Notifier">
      <source-position filename="tracker-notifier.h" line="43" />
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass" />
      </field>
      <field introspectable="0" name="events">
        <callback introspectable="0" name="events">
          <source-position filename="tracker-notifier.h" line="38" />
          <return-value transfer-ownership="none">
            <type name="none" c:type="void" />
          </return-value>
          <parameters>
            <parameter name="notifier" transfer-ownership="none">
              <type name="Notifier" c:type="TrackerNotifier*" />
            </parameter>
            <parameter name="events" transfer-ownership="none">
              <array name="GLib.PtrArray" c:type="const GPtrArray*">
                <type name="gpointer" c:type="gpointer" />
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array fixed-size="20" zero-terminated="0">
          <type name="gpointer" c:type="gpointer" />
        </array>
      </field>
    </record>
    <record disguised="1" name="NotifierEvent" c:type="TrackerNotifierEvent">
      <source-position filename="tracker-notifier.h" line="33" />
      <method name="get_event_type" version="1.12" c:identifier="tracker_notifier_event_get_event_type">
        <doc filename="tracker-notifier.c" line="913" xml:space="preserve">Returns the event type.</doc>
        <source-position filename="tracker-notifier.h" line="84" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-notifier.c" line="919" xml:space="preserve">The event type</doc>
          <type name="NotifierEventType" c:type="TrackerNotifierEventType" />
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="915" xml:space="preserve">A #TrackerNotifierEvent</doc>
            <type name="NotifierEvent" c:type="TrackerNotifierEvent*" />
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" version="1.12" c:identifier="tracker_notifier_event_get_id">
        <doc filename="tracker-notifier.c" line="930" xml:space="preserve">Returns the tracker:id of the element being notified upon.</doc>
        <source-position filename="tracker-notifier.h" line="85" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-notifier.c" line="936" xml:space="preserve">the resource ID</doc>
          <type name="gint64" c:type="gint64" />
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="932" xml:space="preserve">A #TrackerNotifierEvent</doc>
            <type name="NotifierEvent" c:type="TrackerNotifierEvent*" />
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" version="1.12" c:identifier="tracker_notifier_event_get_location">
        <doc filename="tracker-notifier.c" line="994" xml:space="preserve">Returns the location (e.g. an URI) of the element if the notifier
has the flag %TRACKER_NOTIFIER_FLAG_QUERY_LOCATION, and it can
be obtained at the time of emission.</doc>
        <source-position filename="tracker-notifier.h" line="88" />
        <return-value nullable="1" transfer-ownership="none">
          <doc filename="tracker-notifier.c" line="1002" xml:space="preserve">The element location, or %NULL</doc>
          <type name="utf8" c:type="const gchar*" />
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="996" xml:space="preserve">A #TrackerNotifierEvent</doc>
            <type name="NotifierEvent" c:type="TrackerNotifierEvent*" />
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type" version="1.12" c:identifier="tracker_notifier_event_get_type">
        <doc filename="tracker-notifier.c" line="947" xml:space="preserve">Returns the RDF type that this notification event relates to, in their
expanded forms (for example,
http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio).

A resource may have multiple RDF types. In the case of changes to a
resource with multiple types, one event will be notified for each
RDF type the notifier is subscribed to.

For performance reasons, Tracker only sends notifications for events that
are explicitly marked with the tracker:notify property in their ontology.</doc>
        <source-position filename="tracker-notifier.h" line="86" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-notifier.c" line="962" xml:space="preserve">the RDF type of the element</doc>
          <type name="utf8" c:type="const gchar*" />
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="949" xml:space="preserve">A #TrackerNotifierEvent</doc>
            <type name="NotifierEvent" c:type="TrackerNotifierEvent*" />
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urn" version="1.12" c:identifier="tracker_notifier_event_get_urn">
        <doc filename="tracker-notifier.c" line="973" xml:space="preserve">Returns the Uniform Resource Name of the element if the
notifier has the flag %TRACKER_NOTIFIER_FLAG_QUERY_URN enabled.

This URN is an unique string identifier for the resource being
notified upon, typically of the form "urn:uuid:...".</doc>
        <source-position filename="tracker-notifier.h" line="87" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-notifier.c" line="983" xml:space="preserve">The element URN</doc>
          <type name="utf8" c:type="const gchar*" />
        </return-value>
        <parameters>
          <instance-parameter name="event" transfer-ownership="none">
            <doc filename="tracker-notifier.c" line="975" xml:space="preserve">A #TrackerNotifierEvent</doc>
            <type name="NotifierEvent" c:type="TrackerNotifierEvent*" />
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="NotifierEventType" c:type="TrackerNotifierEventType">
      <doc filename="tracker-notifier.h" line="64" xml:space="preserve">Notifier event types.</doc>
      <source-position filename="tracker-notifier.h" line="76" />
      <member name="create" value="0" c:identifier="TRACKER_NOTIFIER_EVENT_CREATE">
        <doc filename="tracker-notifier.h" line="66" xml:space="preserve">An element was created.</doc>
      </member>
      <member name="delete" value="1" c:identifier="TRACKER_NOTIFIER_EVENT_DELETE">
        <doc filename="tracker-notifier.h" line="67" xml:space="preserve">An element was deleted.</doc>
      </member>
      <member name="update" value="2" c:identifier="TRACKER_NOTIFIER_EVENT_UPDATE">
        <doc filename="tracker-notifier.h" line="68" xml:space="preserve">An element was updated.</doc>
      </member>
    </enumeration>
    <bitfield name="NotifierFlags" c:type="TrackerNotifierFlags">
      <doc filename="tracker-notifier.h" line="45" xml:space="preserve">Flags affecting #TrackerNotifier behavior.</doc>
      <source-position filename="tracker-notifier.h" line="62" />
      <member name="none" value="0" c:identifier="TRACKER_NOTIFIER_FLAG_NONE">
        <doc filename="tracker-notifier.h" line="47" xml:space="preserve">No flags</doc>
      </member>
      <member name="query_urn" value="2" c:identifier="TRACKER_NOTIFIER_FLAG_QUERY_URN">
        <doc filename="tracker-notifier.h" line="48" xml:space="preserve">Query URN of notified elements</doc>
      </member>
      <member name="query_location" value="4" c:identifier="TRACKER_NOTIFIER_FLAG_QUERY_LOCATION">
        <doc filename="tracker-notifier.h" line="49" xml:space="preserve">Query location of notified elements</doc>
      </member>
      <member name="notify_unextracted" value="8" c:identifier="TRACKER_NOTIFIER_FLAG_NOTIFY_UNEXTRACTED">
        <doc filename="tracker-notifier.h" line="50" xml:space="preserve">Added/updated Elements are
  notified in 2 steps (a CREATE/UPDATE event after the file is first
  known, and an UPDATE event after metadata is extracted). The default
  #TrackerNotifier behavior coalesces those events in one.</doc>
      </member>
    </bitfield>
    <class name="Resource" parent="GObject.Object" c:symbol-prefix="resource" c:type="TrackerResource" glib:get-type="tracker_resource_get_type" glib:type-name="TrackerResource" glib:type-struct="ResourceClass">
      <doc filename="tracker-resource.c" line="64" xml:space="preserve">The &lt;structname&gt;TrackerResource&lt;/structname&gt; object represents information
about a given resource.</doc>
      <source-position filename="tracker-resource.h" line="35" />
      <constructor name="new" version="1.10" c:identifier="tracker_resource_new">
        <doc filename="tracker-resource.c" line="209" xml:space="preserve">Creates a TrackerResource instance.</doc>
        <source-position filename="tracker-resource.h" line="37" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-resource.c" line="215" xml:space="preserve">a newly created #TrackerResource. Free with g_object_unref() when done</doc>
          <type name="Resource" c:type="TrackerResource*" />
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="211" xml:space="preserve">A string containing a URI</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </constructor>
      <method name="add_boolean" version="1.10" c:identifier="tracker_resource_add_boolean">
        <doc filename="tracker-resource.c" line="565" xml:space="preserve">Adds a boolean object to a multi-valued property.</doc>
        <source-position filename="tracker-resource.h" line="50" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="567" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="568" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="569" xml:space="preserve">the property object</doc>
            <type name="gboolean" c:type="gboolean" />
          </parameter>
        </parameters>
      </method>
      <method name="add_double" version="1.10" c:identifier="tracker_resource_add_double">
        <doc filename="tracker-resource.c" line="577" xml:space="preserve">Adds a double object to a multi-valued property.</doc>
        <source-position filename="tracker-resource.h" line="51" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="579" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="580" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="581" xml:space="preserve">the property object</doc>
            <type name="gdouble" c:type="double" />
          </parameter>
        </parameters>
      </method>
      <method name="add_gvalue" version="1.10" c:identifier="tracker_resource_add_gvalue">
        <doc filename="tracker-resource.c" line="449" xml:space="preserve">Add 'value' to the list of values for given property.

You can pass any kind of GValue for @value, but serialization functions will
normally only be able to serialize URIs/relationships and fundamental value
types (string, int, etc.).</doc>
        <source-position filename="tracker-resource.h" line="49" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="451" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="452" xml:space="preserve">a string identifying the property to set</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="453" xml:space="preserve">an initialised #GValue</doc>
            <type name="GObject.Value" c:type="const GValue*" />
          </parameter>
        </parameters>
      </method>
      <method name="add_int" version="1.10" c:identifier="tracker_resource_add_int">
        <doc filename="tracker-resource.c" line="589" xml:space="preserve">Adds an integer object to a multi-valued property.</doc>
        <source-position filename="tracker-resource.h" line="52" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="591" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="592" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="593" xml:space="preserve">the property object</doc>
            <type name="gint" c:type="int" />
          </parameter>
        </parameters>
      </method>
      <method name="add_int64" version="1.10" c:identifier="tracker_resource_add_int64">
        <doc filename="tracker-resource.c" line="601" xml:space="preserve">Adds an integer object to a multi-valued property.</doc>
        <source-position filename="tracker-resource.h" line="53" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="603" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="604" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="605" xml:space="preserve">the property object</doc>
            <type name="gint64" c:type="gint64" />
          </parameter>
        </parameters>
      </method>
      <method name="add_relation" version="1.10" c:identifier="tracker_resource_add_relation">
        <doc filename="tracker-resource.c" line="613" xml:space="preserve">Adds a resource object to a multi-valued property. This
function produces similar RDF to tracker_resource_add_uri(),
although in this function the URI will depend on the identifier
set on @resource.</doc>
        <source-position filename="tracker-resource.h" line="54" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="615" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="616" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="617" xml:space="preserve">the property object</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </parameter>
        </parameters>
      </method>
      <method name="add_string" version="1.10" c:identifier="tracker_resource_add_string">
        <doc filename="tracker-resource.c" line="644" xml:space="preserve">Adds a string object to a multi-valued property.</doc>
        <source-position filename="tracker-resource.h" line="56" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="646" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="647" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="648" xml:space="preserve">the property object</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method introspectable="0" name="add_take_relation" version="2.0" c:identifier="tracker_resource_add_take_relation">
        <doc filename="tracker-resource.c" line="628" xml:space="preserve">Adds a resource object to a multi-valued property. This
function produces similar RDF to tracker_resource_add_uri(),
although in this function the URI will depend on the identifier
set on @resource. This function takes ownership of @resource.</doc>
        <source-position filename="tracker-resource.h" line="55" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="630" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="631" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="632" xml:space="preserve">the property object</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </parameter>
        </parameters>
      </method>
      <method name="add_uri" version="1.10" c:identifier="tracker_resource_add_uri">
        <doc filename="tracker-resource.c" line="656" xml:space="preserve">Adds a resource object to a multi-valued property. This function
produces similar RDF to tracker_resource_add_relation(), although
it requires that the URI is previously known.</doc>
        <source-position filename="tracker-resource.h" line="57" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="658" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="659" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="660" xml:space="preserve">the property object</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_boolean" version="1.10" c:identifier="tracker_resource_get_first_boolean">
        <doc filename="tracker-resource.c" line="749" xml:space="preserve">Returns the first boolean object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="61" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="756" xml:space="preserve">the first boolean object</doc>
          <type name="gboolean" c:type="gboolean" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="751" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="752" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_double" version="1.10" c:identifier="tracker_resource_get_first_double">
        <doc filename="tracker-resource.c" line="762" xml:space="preserve">Returns the first double object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="62" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="769" xml:space="preserve">the first double object</doc>
          <type name="gdouble" c:type="double" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="764" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="765" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_int" version="1.10" c:identifier="tracker_resource_get_first_int">
        <doc filename="tracker-resource.c" line="775" xml:space="preserve">Returns the first integer object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="63" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="782" xml:space="preserve">the first integer object</doc>
          <type name="gint" c:type="int" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="777" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="778" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_int64" version="1.10" c:identifier="tracker_resource_get_first_int64">
        <doc filename="tracker-resource.c" line="788" xml:space="preserve">Returns the first integer object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="64" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="795" xml:space="preserve">the first integer object</doc>
          <type name="gint64" c:type="gint64" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="790" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="791" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_relation" version="1.10" c:identifier="tracker_resource_get_first_relation">
        <doc filename="tracker-resource.c" line="801" xml:space="preserve">Returns the first resource object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="65" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="808" xml:space="preserve">the first resource object</doc>
          <type name="Resource" c:type="TrackerResource*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="803" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="804" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_string" version="1.10" c:identifier="tracker_resource_get_first_string">
        <doc filename="tracker-resource.c" line="814" xml:space="preserve">Returns the first string object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="66" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="821" xml:space="preserve">the first string object</doc>
          <type name="utf8" c:type="const char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="816" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="817" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_first_uri" version="1.10" c:identifier="tracker_resource_get_first_uri">
        <doc filename="tracker-resource.c" line="827" xml:space="preserve">Returns the first resource object previously assigned to a property.</doc>
        <source-position filename="tracker-resource.h" line="67" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="834" xml:space="preserve">the first resource object as an URI.</doc>
          <type name="utf8" c:type="const char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="829" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="830" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="get_identifier" version="1.10" c:identifier="tracker_resource_get_identifier">
        <doc filename="tracker-resource.c" line="840" xml:space="preserve">Returns the identifier of a resource.

If the identifier was set to NULL, the identifier returned will be a unique
SPARQL blank node identifier, such as "_:123".</doc>
        <source-position filename="tracker-resource.h" line="69" />
        <return-value transfer-ownership="none">
          <doc filename="tracker-resource.c" line="849" xml:space="preserve">a string owned by the resource</doc>
          <type name="utf8" c:type="const char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="842" xml:space="preserve">A #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_values" version="1.10" c:identifier="tracker_resource_get_values">
        <doc filename="tracker-resource.c" line="671" xml:space="preserve">Returns the list of all known values of the given property.</doc>
        <source-position filename="tracker-resource.h" line="59" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-resource.c" line="678" xml:space="preserve">a #GList of #GValue
instances, which must be freed by the caller.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Value" />
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="673" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="674" xml:space="preserve">a string identifying the property to look up</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="identifier_compare_func" c:identifier="tracker_resource_identifier_compare_func">
        <source-position filename="tracker-resource.h" line="71" />
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint" />
        </return-value>
        <parameters>
          <instance-parameter name="resource" transfer-ownership="none">
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="identifier" transfer-ownership="none">
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="print_jsonld" version="2.0.5" c:identifier="tracker_resource_print_jsonld">
        <doc filename="tracker-resource.c" line="1644" xml:space="preserve">Serialize all the information in @resource as a JSON-LD document.

See &lt;http://www.jsonld.org/&gt; for more information on the JSON-LD
serialization format.

The @namespaces object is used to expand any compact URI values. In most
cases you should pass %NULL, which means the set of namespaces returned by
tracker_namespace_manager_get_default() will be used. This defines the
usual prefixes for all of the ontologies that Tracker ships with by default.</doc>
        <source-position filename="tracker-resource.h" line="77" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-resource.c" line="1660" xml:space="preserve">a newly-allocated string containing JSON-LD data.</doc>
          <type name="utf8" c:type="char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1646" xml:space="preserve">a #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter allow-none="1" name="namespaces" nullable="1" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1647" xml:space="preserve">a set of prefixed URLs, or %NULL to use the
    default set</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </parameter>
        </parameters>
      </method>
      <method name="print_sparql_update" version="1.10" c:identifier="tracker_resource_print_sparql_update">
        <doc filename="tracker-resource.c" line="1461" xml:space="preserve">Generates a SPARQL command to update a database with the information
stored in @resource.

The @namespaces object is used to expand any compact URI values. In most
cases you should pass %NULL, which means the set of namespaces returned by
tracker_namespace_manager_get_default() will be used. This defines the
usual prefixes for all of the ontologies that Tracker ships with by default.</doc>
        <source-position filename="tracker-resource.h" line="75" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-resource.c" line="1477" xml:space="preserve">a newly-allocated string containing a SPARQL update command.</doc>
          <type name="utf8" c:type="char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1463" xml:space="preserve">a #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter allow-none="1" name="namespaces" nullable="1" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1464" xml:space="preserve">a set of prefixed URLs, or %NULL to use the
    default set</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </parameter>
          <parameter allow-none="1" name="graph_id" nullable="1" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1466" xml:space="preserve">the URN of the graph the data should be added to,
    or %NULL</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="print_turtle" version="1.10" c:identifier="tracker_resource_print_turtle">
        <doc filename="tracker-resource.c" line="1218" xml:space="preserve">Serialize all the information in @resource as a Turtle document.

The generated Turtle should correspond to this standard:
&lt;https://www.w3.org/TR/2014/REC-turtle-20140225/&gt;

The @namespaces object is used to expand any compact URI values. In most
cases you should pass %NULL, which means the set of namespaces returned by
tracker_namespace_manager_get_default() will be used. This defines the
usual prefixes for all of the ontologies that Tracker ships with by default.</doc>
        <source-position filename="tracker-resource.h" line="73" />
        <return-value transfer-ownership="full">
          <doc filename="tracker-resource.c" line="1234" xml:space="preserve">a newly-allocated string</doc>
          <type name="utf8" c:type="char*" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1220" xml:space="preserve">a #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter allow-none="1" name="namespaces" nullable="1" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="1221" xml:space="preserve">a set of prefixed URLs, or %NULL to use the
    default set</doc>
            <type name="NamespaceManager" c:type="TrackerNamespaceManager*" />
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" version="1.10" c:identifier="tracker_resource_set_boolean">
        <doc filename="tracker-resource.c" line="345" xml:space="preserve">Sets a single-valued boolean object.</doc>
        <source-position filename="tracker-resource.h" line="40" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="347" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="348" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="349" xml:space="preserve">the property object</doc>
            <type name="gboolean" c:type="gboolean" />
          </parameter>
        </parameters>
      </method>
      <method name="set_double" version="1.10" c:identifier="tracker_resource_set_double">
        <doc filename="tracker-resource.c" line="357" xml:space="preserve">Sets a single-valued double object.</doc>
        <source-position filename="tracker-resource.h" line="41" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="359" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="360" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="361" xml:space="preserve">the property object</doc>
            <type name="gdouble" c:type="double" />
          </parameter>
        </parameters>
      </method>
      <method name="set_gvalue" version="1.10" c:identifier="tracker_resource_set_gvalue">
        <doc filename="tracker-resource.c" line="237" xml:space="preserve">State that the only value for the given property is 'value'. Any existing
values for 'property' will be removed.

When serialising to SPARQL, any properties that were set with this function
will get a corresponding DELETE statement to remove any existing values in
the database.

You can pass any kind of GValue for @value, but serialization functions will
normally only be able to serialize URIs/relationships and fundamental value
types (string, int, etc.).</doc>
        <source-position filename="tracker-resource.h" line="39" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="239" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="240" xml:space="preserve">a string identifying the property to set</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="241" xml:space="preserve">an initialised #GValue</doc>
            <type name="GObject.Value" c:type="const GValue*" />
          </parameter>
        </parameters>
      </method>
      <method name="set_identifier" version="1.10" c:identifier="tracker_resource_set_identifier">
        <doc filename="tracker-resource.c" line="865" xml:space="preserve">Changes the identifier of a #TrackerResource. The identifier should be a
URI or compact URI, but this is not necessarily enforced. Invalid
identifiers may cause errors when serializing the resource or trying to
insert the results in a database.

If the identifier is set to NULL, a SPARQL blank node identifier such as
"_:123" is assigned to the resource.</doc>
        <source-position filename="tracker-resource.h" line="70" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="867" xml:space="preserve">a #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter allow-none="1" name="identifier" nullable="1" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="868" xml:space="preserve">a string identifying the resource</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method name="set_int" version="1.10" c:identifier="tracker_resource_set_int">
        <doc filename="tracker-resource.c" line="369" xml:space="preserve">Sets a single-valued integer object.</doc>
        <source-position filename="tracker-resource.h" line="42" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="371" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="372" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="373" xml:space="preserve">the property object</doc>
            <type name="gint" c:type="int" />
          </parameter>
        </parameters>
      </method>
      <method name="set_int64" version="1.10" c:identifier="tracker_resource_set_int64">
        <doc filename="tracker-resource.c" line="381" xml:space="preserve">Sets a single-valued integer object.</doc>
        <source-position filename="tracker-resource.h" line="43" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="383" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="384" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="385" xml:space="preserve">the property object</doc>
            <type name="gint64" c:type="gint64" />
          </parameter>
        </parameters>
      </method>
      <method name="set_relation" version="1.10" c:identifier="tracker_resource_set_relation">
        <doc filename="tracker-resource.c" line="393" xml:space="preserve">Sets a single-valued resource object as a #TrackerResource. This
function produces similar RDF to tracker_resource_set_uri(),
although in this function the URI will depend on the identifier
set on @resource.</doc>
        <source-position filename="tracker-resource.h" line="44" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="395" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="396" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="397" xml:space="preserve">the property object</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </parameter>
        </parameters>
      </method>
      <method name="set_string" version="1.10" c:identifier="tracker_resource_set_string">
        <doc filename="tracker-resource.c" line="423" xml:space="preserve">Sets a single-valued string object.</doc>
        <source-position filename="tracker-resource.h" line="46" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="425" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="426" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="427" xml:space="preserve">the property object</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <method introspectable="0" name="set_take_relation" version="2.0" c:identifier="tracker_resource_set_take_relation">
        <doc filename="tracker-resource.c" line="408" xml:space="preserve">Sets a single-valued resource object as a #TrackerResource. This
function produces similar RDF to tracker_resource_set_uri(),
although in this function the URI will depend on the identifier
set on @resource. This function takes ownership of @resource.</doc>
        <source-position filename="tracker-resource.h" line="45" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="410" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="411" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="resource" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="412" xml:space="preserve">the property object</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </parameter>
        </parameters>
      </method>
      <method name="set_uri" version="1.10" c:identifier="tracker_resource_set_uri">
        <doc filename="tracker-resource.c" line="435" xml:space="preserve">Sets a single-valued resource object as a string URI. This function
produces similar RDF to tracker_resource_set_relation(), although
it requires that the URI is previously known.</doc>
        <source-position filename="tracker-resource.h" line="47" />
        <return-value transfer-ownership="none">
          <type name="none" c:type="void" />
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="437" xml:space="preserve">the #TrackerResource</doc>
            <type name="Resource" c:type="TrackerResource*" />
          </instance-parameter>
          <parameter name="property_uri" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="438" xml:space="preserve">a string identifying the property to modify</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc filename="tracker-resource.c" line="439" xml:space="preserve">the property object</doc>
            <type name="utf8" c:type="const char*" />
          </parameter>
        </parameters>
      </method>
      <property name="identifier" transfer-ownership="none" writable="1">
        <doc filename="tracker-resource.c" line="99" xml:space="preserve">The URI identifier for this class, or %NULL for a
blank node.</doc>
        <type name="utf8" c:type="gchar*" />
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject" />
      </field>
    </class>
    <record name="ResourceClass" c:type="TrackerResourceClass" glib:is-gtype-struct-for="Resource">
      <source-position filename="tracker-resource.h" line="35" />
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass" />
      </field>
    </record>
    <function name="check_version" version="0.10" c:identifier="tracker_check_version">
      <doc filename="tracker-version.c" line="33" xml:space="preserve">Checks that the Tracker library in use is compatible with the
given version. Generally you would pass in the constants
#TRACKER_MAJOR_VERSION, #TRACKER_MINOR_VERSION, #TRACKER_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of Tracker the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)</doc>
      <source-position filename="tracker-version.h" line="68" />
      <return-value transfer-ownership="none">
        <doc filename="tracker-version.c" line="54" xml:space="preserve">%NULL if the Tracker library is compatible with the
  given version, or a string describing the version mismatch.
  The returned string is owned by Tracker and must not be modified
  or freed.</doc>
        <type name="utf8" c:type="const gchar*" />
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc filename="tracker-version.c" line="35" xml:space="preserve">the required major version.</doc>
          <type name="guint" c:type="guint" />
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc filename="tracker-version.c" line="36" xml:space="preserve">the required minor version.</doc>
          <type name="guint" c:type="guint" />
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc filename="tracker-version.c" line="37" xml:space="preserve">the required micro version.</doc>
          <type name="guint" c:type="guint" />
        </parameter>
      </parameters>
    </function>
  <enumeration name="SparqlConnectionFlags" c:type="TrackerSparqlConnectionFlags" glib:get-type="tracker_sparql_connection_flags_get_type" glib:type-name="TrackerSparqlConnectionFlags">
		<member name="none" value="0" c:identifier="TRACKER_SPARQL_CONNECTION_FLAGS_NONE" />
		<member name="readonly" value="(null)" c:identifier="TRACKER_SPARQL_CONNECTION_FLAGS_READONLY" />
	</enumeration>
	<enumeration name="SparqlValueType" c:type="TrackerSparqlValueType" glib:get-type="tracker_sparql_value_type_get_type" glib:type-name="TrackerSparqlValueType">
		<member name="unbound" value="0" c:identifier="TRACKER_SPARQL_VALUE_TYPE_UNBOUND" />
		<member name="uri" value="1" c:identifier="TRACKER_SPARQL_VALUE_TYPE_URI" />
		<member name="string" value="2" c:identifier="TRACKER_SPARQL_VALUE_TYPE_STRING" />
		<member name="integer" value="3" c:identifier="TRACKER_SPARQL_VALUE_TYPE_INTEGER" />
		<member name="double" value="4" c:identifier="TRACKER_SPARQL_VALUE_TYPE_DOUBLE" />
		<member name="datetime" value="5" c:identifier="TRACKER_SPARQL_VALUE_TYPE_DATETIME" />
		<member name="blank_node" value="6" c:identifier="TRACKER_SPARQL_VALUE_TYPE_BLANK_NODE" />
		<member name="boolean" value="7" c:identifier="TRACKER_SPARQL_VALUE_TYPE_BOOLEAN" />
	</enumeration>
	<enumeration name="Error" c:type="TrackerSparqlError" glib:error-domain="tracker-sparql-error-quark">
		<member name="parse" value="0" c:identifier="TRACKER_SPARQL_ERROR_PARSE" />
		<member name="unknown_class" value="1" c:identifier="TRACKER_SPARQL_ERROR_UNKNOWN_CLASS" />
		<member name="unknown_property" value="2" c:identifier="TRACKER_SPARQL_ERROR_UNKNOWN_PROPERTY" />
		<member name="type" value="3" c:identifier="TRACKER_SPARQL_ERROR_TYPE" />
		<member name="constraint" value="4" c:identifier="TRACKER_SPARQL_ERROR_CONSTRAINT" />
		<member name="no_space" value="5" c:identifier="TRACKER_SPARQL_ERROR_NO_SPACE" />
		<member name="internal" value="6" c:identifier="TRACKER_SPARQL_ERROR_INTERNAL" />
		<member name="unsupported" value="7" c:identifier="TRACKER_SPARQL_ERROR_UNSUPPORTED" />
	</enumeration>
	<class name="SparqlBuilder" parent="GObject.Object" c:type="TrackerSparqlBuilder" glib:get-type="tracker_sparql_builder_get_type" glib:type-name="TrackerSparqlBuilder" glib:type-struct="SparqlBuilderClass">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject" />
		</field>
		<field name="priv">
			<type name="SparqlBuilderPrivate" c:type="TrackerSparqlBuilderPrivate*" />
		</field>
		<constructor name="update" c:identifier="tracker_sparql_builder_new_update">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*" />
			</return-value>
		</constructor>
		<constructor name="embedded_insert" c:identifier="tracker_sparql_builder_new_embedded_insert">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*" />
			</return-value>
		</constructor>
		<method deprecated="1" deprecated-version="2.0" name="insert_open" c:identifier="tracker_sparql_builder_insert_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="graph" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="insert_silent_open" c:identifier="tracker_sparql_builder_insert_silent_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="graph" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="insert_close" c:identifier="tracker_sparql_builder_insert_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="delete_open" c:identifier="tracker_sparql_builder_delete_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="graph" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="delete_close" c:identifier="tracker_sparql_builder_delete_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="graph_open" c:identifier="tracker_sparql_builder_graph_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="graph" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="graph_close" c:identifier="tracker_sparql_builder_graph_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="where_open" c:identifier="tracker_sparql_builder_where_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="where_close" c:identifier="tracker_sparql_builder_where_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="subject_variable" c:identifier="tracker_sparql_builder_subject_variable">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="var_name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_variable" c:identifier="tracker_sparql_builder_object_variable">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="var_name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="subject_iri" c:identifier="tracker_sparql_builder_subject_iri">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="iri" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="subject" c:identifier="tracker_sparql_builder_subject">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="s" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="predicate_iri" c:identifier="tracker_sparql_builder_predicate_iri">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="iri" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="predicate" c:identifier="tracker_sparql_builder_predicate">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="s" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_iri" c:identifier="tracker_sparql_builder_object_iri">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="iri" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object" c:identifier="tracker_sparql_builder_object">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="s" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_string" c:identifier="tracker_sparql_builder_object_string">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="literal" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_unvalidated" c:identifier="tracker_sparql_builder_object_unvalidated">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_boolean" c:identifier="tracker_sparql_builder_object_boolean">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="literal" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_int64" c:identifier="tracker_sparql_builder_object_int64">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="literal" transfer-ownership="none">
					<type name="gint64" c:type="gint64" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_date" c:identifier="tracker_sparql_builder_object_date">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter direction="inout" name="literal" transfer-ownership="full">
					<type name="glong" c:type="time_t*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_double" c:identifier="tracker_sparql_builder_object_double">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="literal" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_blank_open" c:identifier="tracker_sparql_builder_object_blank_open">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="object_blank_close" c:identifier="tracker_sparql_builder_object_blank_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="prepend" c:identifier="tracker_sparql_builder_prepend">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="raw" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method deprecated="1" deprecated-version="2.0" name="append" c:identifier="tracker_sparql_builder_append">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="raw" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="tracker_sparql_builder_new">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*" />
			</return-value>
		</constructor>
		<property name="result">
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_result" c:identifier="tracker_sparql_builder_get_result">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
		</method>
		<property name="length" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_length" c:identifier="tracker_sparql_builder_get_length">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
		</method>
		<property name="state">
			<type name="Tracker.SparqlBuilderState" c:type="TrackerSparqlBuilderState" />
		</property>
		<method name="get_state" c:identifier="tracker_sparql_builder_get_state">
			<return-value transfer-ownership="none">
				<type name="Tracker.SparqlBuilderState" c:type="TrackerSparqlBuilderState" />
			</return-value>
		</method>
	</class>
	<record name="SparqlBuilderClass" c:type="TrackerSparqlBuilderClass" glib:is-gtype-struct-for="SparqlBuilder">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass" />
		</field>
	</record>
	<record disguised="1" name="SparqlBuilderPrivate" c:type="TrackerSparqlBuilderPrivate" />
	<enumeration name="SparqlBuilderState" c:type="TrackerSparqlBuilderState" glib:get-type="tracker_sparql_builder_state_get_type" glib:type-name="TrackerSparqlBuilderState">
		<member name="update" value="0" c:identifier="TRACKER_SPARQL_BUILDER_STATE_UPDATE" />
		<member name="insert" value="1" c:identifier="TRACKER_SPARQL_BUILDER_STATE_INSERT" />
		<member name="delete" value="2" c:identifier="TRACKER_SPARQL_BUILDER_STATE_DELETE" />
		<member name="subject" value="3" c:identifier="TRACKER_SPARQL_BUILDER_STATE_SUBJECT" />
		<member name="predicate" value="4" c:identifier="TRACKER_SPARQL_BUILDER_STATE_PREDICATE" />
		<member name="object" value="5" c:identifier="TRACKER_SPARQL_BUILDER_STATE_OBJECT" />
		<member name="blank" value="6" c:identifier="TRACKER_SPARQL_BUILDER_STATE_BLANK" />
		<member name="where" value="7" c:identifier="TRACKER_SPARQL_BUILDER_STATE_WHERE" />
		<member name="embedded_insert" value="8" c:identifier="TRACKER_SPARQL_BUILDER_STATE_EMBEDDED_INSERT" />
		<member name="graph" value="9" c:identifier="TRACKER_SPARQL_BUILDER_STATE_GRAPH" />
	</enumeration>
	<class abstract="1" name="SparqlConnection" parent="GObject.Object" c:type="TrackerSparqlConnection" glib:get-type="tracker_sparql_connection_get_type" glib:type-name="TrackerSparqlConnection" glib:type-struct="SparqlConnectionClass">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject" />
		</field>
		<field name="priv">
			<type name="SparqlConnectionPrivate" c:type="TrackerSparqlConnectionPrivate*" />
		</field>
		<function name="get_async" c:identifier="tracker_sparql_connection_get_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</function>
		<function name="get_finish" throws="1" c:identifier="tracker_sparql_connection_get_finish">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</function>
		<function name="get" throws="1" c:identifier="tracker_sparql_connection_get">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</function>
		<function name="remote_new" c:identifier="tracker_sparql_connection_remote_new">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
			<parameters>
				<parameter name="uri_base" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</function>
		<function name="local_new" throws="1" c:identifier="tracker_sparql_connection_local_new">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
			<parameters>
				<parameter name="flags" transfer-ownership="none">
					<type name="Tracker.SparqlConnectionFlags" c:type="TrackerSparqlConnectionFlags" />
				</parameter>
				<parameter name="store" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="journal" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="ontology" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</function>
		<function name="local_new_async" c:identifier="tracker_sparql_connection_local_new_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="flags" transfer-ownership="none">
					<type name="Tracker.SparqlConnectionFlags" c:type="TrackerSparqlConnectionFlags" />
				</parameter>
				<parameter name="store" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="journal" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="ontology" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="6" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</function>
		<function name="local_new_finish" throws="1" c:identifier="tracker_sparql_connection_local_new_finish">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</function>
		<method name="query" throws="1" c:identifier="tracker_sparql_connection_query">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="query" name="query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="query_async" c:identifier="tracker_sparql_connection_query_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="query_finish" throws="1" c:identifier="tracker_sparql_connection_query_finish">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="query_async" name="query_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="query_finish" name="query_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update" throws="1" c:identifier="tracker_sparql_connection_update">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="update" name="update" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_async" c:identifier="tracker_sparql_connection_update_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="update_finish" throws="1" c:identifier="tracker_sparql_connection_update_finish">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="update_async" name="update_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="update_finish" name="update_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_array_async" c:identifier="tracker_sparql_connection_update_array_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*" />
					</array>
				</parameter>
				<parameter name="sparql_length1" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="5" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="update_array_finish" throws="1" c:identifier="tracker_sparql_connection_update_array_finish">
			<return-value allow-none="1" transfer-ownership="full">
				<array name="GLib.PtrArray" c:type="GPtrArray*">
					<type name="Tracker.SparqlError" c:type="GError*" />
				</array>
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="update_array_async" name="update_array_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<array length="1" c:type="gchar**">
						<type name="utf8" c:type="gchar*" />
					</array>
				</parameter>
				<parameter name="sparql_length1" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="5" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="update_array_finish" name="update_array_finish" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<array name="GLib.PtrArray" c:type="GPtrArray*">
					<type name="Tracker.SparqlError" c:type="GError*" />
				</array>
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_blank" throws="1" c:identifier="tracker_sparql_connection_update_blank">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="GLib.Variant" c:type="GVariant*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="update_blank" name="update_blank" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="GLib.Variant" c:type="GVariant*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_blank_async" c:identifier="tracker_sparql_connection_update_blank_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="update_blank_finish" throws="1" c:identifier="tracker_sparql_connection_update_blank_finish">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="GLib.Variant" c:type="GVariant*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="update_blank_async" name="update_blank_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="priority" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="update_blank_finish" name="update_blank_finish" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="GLib.Variant" c:type="GVariant*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="load" throws="1" c:identifier="tracker_sparql_connection_load">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="load" name="load" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="load_async" c:identifier="tracker_sparql_connection_load_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="load_finish" throws="1" c:identifier="tracker_sparql_connection_load_finish">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="load_async" name="load_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="load_finish" name="load_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="statistics" throws="1" c:identifier="tracker_sparql_connection_statistics">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="statistics" name="statistics" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="statistics_async" c:identifier="tracker_sparql_connection_statistics_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="statistics_finish" throws="1" c:identifier="tracker_sparql_connection_statistics_finish">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="statistics_async" name="statistics_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="statistics_finish" name="statistics_finish" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_namespace_manager" c:identifier="tracker_sparql_connection_get_namespace_manager">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.NamespaceManager" c:type="TrackerNamespaceManager*" />
			</return-value>
		</method>
		<virtual-method invoker="get_namespace_manager" name="get_namespace_manager">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.NamespaceManager" c:type="TrackerNamespaceManager*" />
			</return-value>
		</virtual-method>
		<function name="set_domain" c:identifier="tracker_sparql_connection_set_domain">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="domain" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</function>
		<function name="get_domain" c:identifier="tracker_sparql_connection_get_domain">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
		</function>
		<function name="set_dbus_connection" c:identifier="tracker_sparql_connection_set_dbus_connection">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="dbus_connection" transfer-ownership="none">
					<type name="Gio.DBusConnection" c:type="GDBusConnection*" />
				</parameter>
			</parameters>
		</function>
		<function name="get_dbus_connection" c:identifier="tracker_sparql_connection_get_dbus_connection">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Gio.DBusConnection" c:type="GDBusConnection*" />
			</return-value>
		</function>
		<method name="query_statement" throws="1" c:identifier="tracker_sparql_connection_query_statement">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="query_statement" name="query_statement" throws="1">
			<return-value allow-none="1" transfer-ownership="full">
				<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
			</return-value>
			<parameters>
				<parameter name="sparql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
	</class>
	<record name="SparqlConnectionClass" c:type="TrackerSparqlConnectionClass" glib:is-gtype-struct-for="SparqlConnection">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass" />
		</field>
		<field name="query">
			<callback name="query" throws="1" c:type="query">
				<return-value transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="query_async">
			<callback name="query_async" c:type="query_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="query_finish">
			<callback name="query_finish" throws="1" c:type="query_finish">
				<return-value transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update">
			<callback name="update" throws="1" c:type="update">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="priority" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_async">
			<callback name="update_async" c:type="update_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="priority" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="5" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_finish">
			<callback name="update_finish" throws="1" c:type="update_finish">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_array_async">
			<callback name="update_array_async" c:type="update_array_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<array length="2" c:type="gchar**">
							<type name="utf8" c:type="gchar*" />
						</array>
					</parameter>
					<parameter name="sparql_length1" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter name="priority" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="6" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_array_finish">
			<callback name="update_array_finish" throws="1" c:type="update_array_finish">
				<return-value allow-none="1" transfer-ownership="full">
					<array name="GLib.PtrArray" c:type="GPtrArray*">
						<type name="Tracker.SparqlError" c:type="GError*" />
					</array>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_blank">
			<callback name="update_blank" throws="1" c:type="update_blank">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="GLib.Variant" c:type="GVariant*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="priority" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_blank_async">
			<callback name="update_blank_async" c:type="update_blank_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="priority" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="5" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_blank_finish">
			<callback name="update_blank_finish" throws="1" c:type="update_blank_finish">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="GLib.Variant" c:type="GVariant*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="load">
			<callback name="load" throws="1" c:type="load">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="file" transfer-ownership="none">
						<type name="Gio.File" c:type="GFile*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="load_async">
			<callback name="load_async" c:type="load_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="file" transfer-ownership="none">
						<type name="Gio.File" c:type="GFile*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="4" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="load_finish">
			<callback name="load_finish" throws="1" c:type="load_finish">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="statistics">
			<callback name="statistics" throws="1" c:type="statistics">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="statistics_async">
			<callback name="statistics_async" c:type="statistics_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="statistics_finish">
			<callback name="statistics_finish" throws="1" c:type="statistics_finish">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_namespace_manager">
			<callback name="get_namespace_manager" c:type="get_namespace_manager">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="Tracker.NamespaceManager" c:type="TrackerNamespaceManager*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="query_statement">
			<callback name="query_statement" throws="1" c:type="query_statement">
				<return-value allow-none="1" transfer-ownership="full">
					<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
					</parameter>
					<parameter name="sparql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record disguised="1" name="SparqlConnectionPrivate" c:type="TrackerSparqlConnectionPrivate" />
	<class abstract="1" name="SparqlCursor" parent="GObject.Object" c:type="TrackerSparqlCursor" glib:get-type="tracker_sparql_cursor_get_type" glib:type-name="TrackerSparqlCursor" glib:type-struct="SparqlCursorClass">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject" />
		</field>
		<field name="priv">
			<type name="SparqlCursorPrivate" c:type="TrackerSparqlCursorPrivate*" />
		</field>
		<method name="get_value_type" c:identifier="tracker_sparql_cursor_get_value_type">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlValueType" c:type="TrackerSparqlValueType" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_value_type" name="get_value_type">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlValueType" c:type="TrackerSparqlValueType" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_variable_name" c:identifier="tracker_sparql_cursor_get_variable_name">
			<return-value allow-none="1" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_variable_name" name="get_variable_name">
			<return-value allow-none="1" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_string" c:identifier="tracker_sparql_cursor_get_string">
			<return-value allow-none="1" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter direction="out" name="length" transfer-ownership="full">
					<type name="glong" c:type="glong*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_string" name="get_string">
			<return-value allow-none="1" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
				<parameter direction="out" name="length" transfer-ownership="full">
					<type name="glong" c:type="glong*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="next" throws="1" c:identifier="tracker_sparql_cursor_next">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="next" name="next" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="next_async" c:identifier="tracker_sparql_cursor_next_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="next_finish" throws="1" c:identifier="tracker_sparql_cursor_next_finish">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="next_async" name="next_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="next_finish" name="next_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="rewind" c:identifier="tracker_sparql_cursor_rewind">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<virtual-method invoker="rewind" name="rewind">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</virtual-method>
		<method name="close" c:identifier="tracker_sparql_cursor_close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</method>
		<virtual-method invoker="close" name="close">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
		</virtual-method>
		<method name="get_integer" c:identifier="tracker_sparql_cursor_get_integer">
			<return-value transfer-ownership="full">
				<type name="gint64" c:type="gint64" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_integer" name="get_integer">
			<return-value transfer-ownership="full">
				<type name="gint64" c:type="gint64" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_double" c:identifier="tracker_sparql_cursor_get_double">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_double" name="get_double">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_boolean" c:identifier="tracker_sparql_cursor_get_boolean">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="get_boolean" name="get_boolean">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="is_bound" c:identifier="tracker_sparql_cursor_is_bound">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="is_bound" name="is_bound">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<parameter name="column" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</virtual-method>
		<property name="connection" writable="1">
			<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
		</property>
		<method name="get_connection" c:identifier="tracker_sparql_cursor_get_connection">
			<return-value transfer-ownership="none">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
		</method>
		<method name="set_connection" c:identifier="tracker_sparql_cursor_set_connection">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
				</parameter>
			</parameters>
		</method>
		<property name="n-columns">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_n_columns" c:identifier="tracker_sparql_cursor_get_n_columns">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
		</method>
		<virtual-method invoker="get_n_columns" name="get_n_columns">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
		</virtual-method>
	</class>
	<record name="SparqlCursorClass" c:type="TrackerSparqlCursorClass" glib:is-gtype-struct-for="SparqlCursor">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass" />
		</field>
		<field name="get_value_type">
			<callback name="get_value_type" c:type="get_value_type">
				<return-value transfer-ownership="full">
					<type name="Tracker.SparqlValueType" c:type="TrackerSparqlValueType" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_variable_name">
			<callback name="get_variable_name" c:type="get_variable_name">
				<return-value allow-none="1" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_string">
			<callback name="get_string" c:type="get_string">
				<return-value allow-none="1" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
					<parameter direction="out" name="length" transfer-ownership="full">
						<type name="glong" c:type="glong*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="next">
			<callback name="next" throws="1" c:type="next">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="next_async">
			<callback name="next_async" c:type="next_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="next_finish">
			<callback name="next_finish" throws="1" c:type="next_finish">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="rewind">
			<callback name="rewind" c:type="rewind">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="close">
			<callback name="close" c:type="close">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_integer">
			<callback name="get_integer" c:type="get_integer">
				<return-value transfer-ownership="full">
					<type name="gint64" c:type="gint64" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_double">
			<callback name="get_double" c:type="get_double">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_boolean">
			<callback name="get_boolean" c:type="get_boolean">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="is_bound">
			<callback name="is_bound" c:type="is_bound">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
					</parameter>
					<parameter name="column" transfer-ownership="none">
						<type name="gint" c:type="gint" />
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record disguised="1" name="SparqlCursorPrivate" c:type="TrackerSparqlCursorPrivate" />
	<class abstract="1" name="SparqlStatement" parent="GObject.Object" c:type="TrackerSparqlStatement" glib:get-type="tracker_sparql_statement_get_type" glib:type-name="TrackerSparqlStatement" glib:type-struct="SparqlStatementClass">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject" />
		</field>
		<field name="priv">
			<type name="SparqlStatementPrivate" c:type="TrackerSparqlStatementPrivate*" />
		</field>
		<method name="bind_int" c:identifier="tracker_sparql_statement_bind_int">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint64" c:type="gint64" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="bind_int" name="bind_int">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint64" c:type="gint64" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="bind_boolean" c:identifier="tracker_sparql_statement_bind_boolean">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="bind_boolean" name="bind_boolean">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="bind_string" c:identifier="tracker_sparql_statement_bind_string">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="bind_string" name="bind_string">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="bind_double" c:identifier="tracker_sparql_statement_bind_double">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="bind_double" name="bind_double">
			<return-value transfer-ownership="full">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="execute" throws="1" c:identifier="tracker_sparql_statement_execute">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="execute" name="execute" throws="1">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
			</parameters>
		</virtual-method>
		<method name="execute_async" c:identifier="tracker_sparql_statement_execute_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</method>
		<method name="execute_finish" throws="1" c:identifier="tracker_sparql_statement_execute_finish">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method invoker="execute_async" name="execute_async">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter allow-none="1" name="cancellable" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*" />
				</parameter>
				<parameter allow-none="1" closure="2" name="_callback_" scope="async" transfer-ownership="none">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
				</parameter>
				<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
					<type name="gpointer" c:type="void*" />
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method invoker="execute_finish" name="execute_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
			</return-value>
			<parameters>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
				</parameter>
			</parameters>
		</virtual-method>
		<property construct="1" name="sparql" writable="1">
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_sparql" c:identifier="tracker_sparql_statement_get_sparql">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
		</method>
		<method name="set_sparql" c:identifier="tracker_sparql_statement_set_sparql">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property construct="1" name="connection" writable="1">
			<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
		</property>
		<method name="get_connection" c:identifier="tracker_sparql_statement_get_connection">
			<return-value transfer-ownership="none">
				<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
			</return-value>
		</method>
		<method name="set_connection" c:identifier="tracker_sparql_statement_set_connection">
			<return-value transfer-ownership="none">
				<type name="none" />
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="Tracker.SparqlConnection" c:type="TrackerSparqlConnection*" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="SparqlStatementClass" c:type="TrackerSparqlStatementClass" glib:is-gtype-struct-for="SparqlStatement">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass" />
		</field>
		<field name="bind_int">
			<callback name="bind_int" c:type="bind_int">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gint64" c:type="gint64" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="bind_boolean">
			<callback name="bind_boolean" c:type="bind_boolean">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="bind_string">
			<callback name="bind_string" c:type="bind_string">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="bind_double">
			<callback name="bind_double" c:type="bind_double">
				<return-value transfer-ownership="full">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="execute">
			<callback name="execute" throws="1" c:type="execute">
				<return-value transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="execute_async">
			<callback name="execute_async" c:type="execute_async">
				<return-value transfer-ownership="none">
					<type name="none" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter allow-none="1" name="cancellable" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*" />
					</parameter>
					<parameter allow-none="1" closure="3" name="_callback_" scope="async" transfer-ownership="none">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback" />
					</parameter>
					<parameter allow-none="1" name="_callback__target" transfer-ownership="none">
						<type name="gpointer" c:type="void*" />
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="execute_finish">
			<callback name="execute_finish" throws="1" c:type="execute_finish">
				<return-value transfer-ownership="full">
					<type name="Tracker.SparqlCursor" c:type="TrackerSparqlCursor*" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Tracker.SparqlStatement" c:type="TrackerSparqlStatement*" />
					</parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*" />
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record disguised="1" name="SparqlStatementPrivate" c:type="TrackerSparqlStatementPrivate" />
	<function introspectable="0" name="sparql_escape_uri_vprintf" c:identifier="tracker_sparql_escape_uri_vprintf">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="format" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
			<parameter name="args" transfer-ownership="none">
				<type name="va_list" c:type="va_list" />
			</parameter>
		</parameters>
	</function>
	<function introspectable="0" name="sparql_escape_uri_printf" c:identifier="tracker_sparql_escape_uri_printf">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="format" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
			<parameter name="..." transfer-ownership="none">
				<varargs />
			</parameter>
		</parameters>
	</function>
	<function name="sparql_escape_uri" c:identifier="tracker_sparql_escape_uri">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="uri" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
		</parameters>
	</function>
	<function name="sparql_escape_string" c:identifier="tracker_sparql_escape_string">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="literal" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
		</parameters>
	</function>
	<function name="sparql_get_uuid_urn" c:identifier="tracker_sparql_get_uuid_urn">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
	</function>
	<constant name="DBUS_SERVICE" value="org.freedesktop.Tracker1" c:identifier="TRACKER_DBUS_SERVICE">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_INTERFACE_RESOURCES" value="org.freedesktop.Tracker1.Resources" c:identifier="TRACKER_DBUS_INTERFACE_RESOURCES">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_OBJECT_RESOURCES" value="/org/freedesktop/Tracker1/Resources" c:identifier="TRACKER_DBUS_OBJECT_RESOURCES">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_INTERFACE_STATISTICS" value="org.freedesktop.Tracker1.Statistics" c:identifier="TRACKER_DBUS_INTERFACE_STATISTICS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_OBJECT_STATISTICS" value="/org/freedesktop/Tracker1/Statistics" c:identifier="TRACKER_DBUS_OBJECT_STATISTICS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_INTERFACE_STATUS" value="org.freedesktop.Tracker1.Status" c:identifier="TRACKER_DBUS_INTERFACE_STATUS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_OBJECT_STATUS" value="/org/freedesktop/Tracker1/Status" c:identifier="TRACKER_DBUS_OBJECT_STATUS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_INTERFACE_STEROIDS" value="org.freedesktop.Tracker1.Steroids" c:identifier="TRACKER_DBUS_INTERFACE_STEROIDS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<constant name="DBUS_OBJECT_STEROIDS" value="/org/freedesktop/Tracker1/Steroids" c:identifier="TRACKER_DBUS_OBJECT_STEROIDS">
		<type name="utf8" c:type="const gchar*" />
	</constant>
</namespace></repository>
