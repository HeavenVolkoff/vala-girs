<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="libosinfo-1.0"/>
  <c:include name="osinfo/osinfo.h"/>
  <namespace name="Libosinfo"
             version="1.0"
             shared-library="libosinfo-1.0.so.0"
             c:identifier-prefixes="Osinfo"
             c:symbol-prefixes="osinfo">
    <constant name="ARCHITECTURE_ALL"
              value="all"
              c:type="OSINFO_ARCHITECTURE_ALL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICELINK_PROP_DRIVER"
              value="driver"
              c:type="OSINFO_DEVICELINK_PROP_DRIVER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_BUS_TYPE"
              value="bus-type"
              c:type="OSINFO_DEVICE_PROP_BUS_TYPE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_CLASS"
              value="class"
              c:type="OSINFO_DEVICE_PROP_CLASS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_NAME"
              value="name"
              c:type="OSINFO_DEVICE_PROP_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_PRODUCT"
              value="product"
              c:type="OSINFO_DEVICE_PROP_PRODUCT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_PRODUCT_ID"
              value="product-id"
              c:type="OSINFO_DEVICE_PROP_PRODUCT_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_VENDOR"
              value="vendor"
              c:type="OSINFO_DEVICE_PROP_VENDOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PROP_VENDOR_ID"
              value="vendor-id"
              c:type="OSINFO_DEVICE_PROP_VENDOR_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Db"
           c:symbol-prefix="db"
           c:type="OsinfoDb"
           parent="GObject.Object"
           glib:type-name="OsinfoDb"
           glib:get-type="osinfo_db_get_type"
           glib:type-struct="DbClass">
      <constructor name="new" c:identifier="osinfo_db_new">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new database</doc>
          <type name="Db" c:type="OsinfoDb*"/>
        </return-value>
      </constructor>
      <method name="add_deployment" c:identifier="osinfo_db_add_deployment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="deployment" transfer-ownership="none">
            <doc xml:whitespace="preserve">a deployment</doc>
            <type name="Deployment" c:type="OsinfoDeployment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_device" c:identifier="osinfo_db_add_device">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a device</doc>
            <type name="Device" c:type="OsinfoDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_os" c:identifier="osinfo_db_add_os">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="os" transfer-ownership="none">
            <doc xml:whitespace="preserve">an operating system</doc>
            <type name="Os" c:type="OsinfoOs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_platform" c:identifier="osinfo_db_add_platform">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:whitespace="preserve">an platform</doc>
            <type name="Platform" c:type="OsinfoPlatform*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_deployment" c:identifier="osinfo_db_find_deployment">
        <doc xml:whitespace="preserve">Find the deployment for @os on @platform, if any.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the deployment, or NULL</doc>
          <type name="Deployment" c:type="OsinfoDeployment*"/>
        </return-value>
        <parameters>
          <parameter name="os" transfer-ownership="none">
            <doc xml:whitespace="preserve">the operating system to find</doc>
            <type name="Os" c:type="OsinfoOs*"/>
          </parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:whitespace="preserve">the virtualization platform</doc>
            <type name="Platform" c:type="OsinfoPlatform*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_deployment" c:identifier="osinfo_db_get_deployment">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operating system, or NULL if none is found</doc>
          <type name="Deployment" c:type="OsinfoDeployment*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique operating system identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_deployment_list"
              c:identifier="osinfo_db_get_deployment_list">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the list of deployments</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
      </method>
      <method name="get_device" c:identifier="osinfo_db_get_device">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the device, or NULL if none is found</doc>
          <type name="Device" c:type="OsinfoDevice*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique device identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_list" c:identifier="osinfo_db_get_device_list">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the list of devices</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
      </method>
      <method name="get_os" c:identifier="osinfo_db_get_os">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operating system, or NULL if none is found</doc>
          <type name="Os" c:type="OsinfoOs*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique operating system identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_os_list" c:identifier="osinfo_db_get_os_list">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the list of operating systems</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
      </method>
      <method name="get_platform" c:identifier="osinfo_db_get_platform">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the platform, or NULL if none is found</doc>
          <type name="Platform" c:type="OsinfoPlatform*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique platform identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_platform_list"
              c:identifier="osinfo_db_get_platform_list">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the list of platforms</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
      </method>
      <method name="guess_os_from_media"
              c:identifier="osinfo_db_guess_os_from_media">
        <doc xml:whitespace="preserve">Guess operating system given a #OsinfoMedia object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operating system, or NULL if guessing failed</doc>
          <type name="Os" c:type="OsinfoOs*"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">the installation media</doc>
            <type name="Media" c:type="OsinfoMedia*"/>
          </parameter>
          <parameter name="matched_media"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the matched operating system media</doc>
            <type name="Media" c:type="OsinfoMedia**"/>
          </parameter>
        </parameters>
      </method>
      <method name="guess_os_from_tree"
              c:identifier="osinfo_db_guess_os_from_tree">
        <doc xml:whitespace="preserve">Guess operating system given a #OsinfoTree object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operating system, or NULL if guessing failed</doc>
          <type name="Os" c:type="OsinfoOs*"/>
        </return-value>
        <parameters>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:whitespace="preserve">the installation tree</doc>
            <type name="Tree" c:type="OsinfoTree*"/>
          </parameter>
          <parameter name="matched_tree"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the matched operating system tree</doc>
            <type name="Tree" c:type="OsinfoTree**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_os_relationship"
              c:identifier="osinfo_db_unique_values_for_os_relationship">
        <doc xml:whitespace="preserve">Get all operating systems that are the referee
in an operating system relationship.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of operating systems</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the product relationship</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_platform_relationship"
              c:identifier="osinfo_db_unique_values_for_platform_relationship">
        <doc xml:whitespace="preserve">Get all platforms that are the referee
in an platform relationship.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of virtualization platforms</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the product relationship</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_property_in_deployment"
              c:identifier="osinfo_db_unique_values_for_property_in_deployment">
        <doc xml:whitespace="preserve">Get all unique values for a named property amongst all
deployments in the database</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">a property name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_property_in_device"
              c:identifier="osinfo_db_unique_values_for_property_in_device">
        <doc xml:whitespace="preserve">Get all unique values for a named property amongst all
devices in the database</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">a property name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_property_in_os"
              c:identifier="osinfo_db_unique_values_for_property_in_os">
        <doc xml:whitespace="preserve">Get all unique values for a named property amongst all
operating systems in the database</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">a property name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unique_values_for_property_in_platform"
              c:identifier="osinfo_db_unique_values_for_property_in_platform">
        <doc xml:whitespace="preserve">Get all unique values for a named property amongst all
platforms in the database</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of strings</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">a property name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DbPrivate" c:type="OsinfoDbPrivate*"/>
      </field>
    </class>
    <record name="DbClass"
            c:type="OsinfoDbClass"
            glib:is-gtype-struct-for="Db">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DbPrivate" c:type="OsinfoDbPrivate" disguised="1">
    </record>
    <class name="Deployment"
           c:symbol-prefix="deployment"
           c:type="OsinfoDeployment"
           parent="Entity"
           glib:type-name="OsinfoDeployment"
           glib:get-type="osinfo_deployment_get_type"
           glib:type-struct="DeploymentClass">
      <constructor name="new" c:identifier="osinfo_deployment_new">
        <doc xml:whitespace="preserve">Create a new deployment entity</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A deployment entity</doc>
          <type name="Deployment" c:type="OsinfoDeployment*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="os" transfer-ownership="none">
            <doc xml:whitespace="preserve">the operating system to deploy</doc>
            <type name="Os" c:type="OsinfoOs*"/>
          </parameter>
          <parameter name="platform" transfer-ownership="none">
            <doc xml:whitespace="preserve">the platform to deploy on</doc>
            <type name="Platform" c:type="OsinfoPlatform*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_device" c:identifier="osinfo_deployment_add_device">
        <doc xml:whitespace="preserve">Associate a device with a deployment. The returned #OsinfoDeviceLink
can be used to record extra metadata against the link</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the device association</doc>
          <type name="DeviceLink" c:type="OsinfoDeviceLink*"/>
        </return-value>
        <parameters>
          <parameter name="dev" transfer-ownership="none">
            <doc xml:whitespace="preserve">the device to associate</doc>
            <type name="Device" c:type="OsinfoDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_links"
              c:identifier="osinfo_deployment_get_device_links">
        <doc xml:whitespace="preserve">Retrieve all the associated devices matching the filter.
The filter matches against the link, not the device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of #OsinfoDevice entities</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="osinfo_deployment_get_devices">
        <doc xml:whitespace="preserve">Retrieve all the associated devices matching the filter.
The filter matches against the device, not the link.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of #OsinfoDevice entities</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_os" c:identifier="osinfo_deployment_get_os">
        <doc xml:whitespace="preserve">Get the operating system for the deployment</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">an OS, or NULL</doc>
          <type name="Os" c:type="OsinfoOs*"/>
        </return-value>
      </method>
      <method name="get_platform"
              c:identifier="osinfo_deployment_get_platform">
        <doc xml:whitespace="preserve">Get the platform for the deployment</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a platform, or NULL</doc>
          <type name="Platform" c:type="OsinfoPlatform*"/>
        </return-value>
      </method>
      <method name="get_preferred_device"
              c:identifier="osinfo_deployment_get_preferred_device">
        <doc xml:whitespace="preserve">Get the preferred device matching a given filter</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a device, or NULL</doc>
          <type name="Device" c:type="OsinfoDevice*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a device metadata filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_preferred_device_link"
              c:identifier="osinfo_deployment_get_preferred_device_link">
        <doc xml:whitespace="preserve">Get the preferred device link matching a given filter and platform.
The filter matches against attributes on the link, not the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a device, or NULL</doc>
          <type name="DeviceLink" c:type="OsinfoDeviceLink*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a device metadata filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <property name="os"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The operating system to be deployed</doc>
        <type name="Os"/>
      </property>
      <property name="platform"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The platform to deploy on</doc>
        <type name="Platform"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="DeploymentPrivate" c:type="OsinfoDeploymentPrivate*"/>
      </field>
    </class>
    <record name="DeploymentClass"
            c:type="OsinfoDeploymentClass"
            glib:is-gtype-struct-for="Deployment">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="DeploymentList"
           c:symbol-prefix="deploymentlist"
           c:type="OsinfoDeploymentList"
           parent="List"
           glib:type-name="OsinfoDeploymentList"
           glib:get-type="osinfo_deploymentlist_get_type"
           glib:type-struct="DeploymentListClass">
      <constructor name="new" c:identifier="osinfo_deploymentlist_new">
        <doc xml:whitespace="preserve">Construct a new deployment list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty deployment list</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_deploymentlist_new_copy">
        <doc xml:whitespace="preserve">Construct a new deployment list that is filled with deployments
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the deployment list</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_deploymentlist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new deployment list that is filled with deployments
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the deployment list</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_deploymentlist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new deployment list that is filled with only the
deployments that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two deployment lists</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second deployment list to copy</doc>
            <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_deploymentlist_new_union">
        <doc xml:whitespace="preserve">Construct a new deployment list that is filled with all the
deployments that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two deployment lists</doc>
          <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second deployment list to copy</doc>
            <type name="DeploymentList" c:type="OsinfoDeploymentList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="DeploymentListPrivate"
              c:type="OsinfoDeploymentListPrivate*"/>
      </field>
    </class>
    <record name="DeploymentListClass"
            c:type="OsinfoDeploymentListClass"
            glib:is-gtype-struct-for="DeploymentList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="DeploymentListPrivate"
            c:type="OsinfoDeploymentListPrivate"
            disguised="1">
    </record>
    <record name="DeploymentPrivate"
            c:type="OsinfoDeploymentPrivate"
            disguised="1">
    </record>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="OsinfoDevice"
           parent="Entity"
           glib:type-name="OsinfoDevice"
           glib:get-type="osinfo_device_get_type"
           glib:type-struct="DeviceClass">
      <constructor name="new" c:identifier="osinfo_device_new">
        <return-value transfer-ownership="full">
          <type name="Device" c:type="OsinfoDevice*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_bus_type" c:identifier="osinfo_device_get_bus_type">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_class" c:identifier="osinfo_device_get_class">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="osinfo_device_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_product" c:identifier="osinfo_device_get_product">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_product_id"
              c:identifier="osinfo_device_get_product_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_vendor" c:identifier="osinfo_device_get_vendor">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_vendor_id" c:identifier="osinfo_device_get_vendor_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="DevicePrivate" c:type="OsinfoDevicePrivate*"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="OsinfoDeviceClass"
            glib:is-gtype-struct-for="Device">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="DeviceLink"
           c:symbol-prefix="devicelink"
           c:type="OsinfoDeviceLink"
           parent="Entity"
           glib:type-name="OsinfoDeviceLink"
           glib:get-type="osinfo_devicelink_get_type"
           glib:type-struct="DeviceLinkClass">
      <constructor name="new" c:identifier="osinfo_devicelink_new">
        <doc xml:whitespace="preserve">Construct a new link to a #OsinfoDevice. The unique ID
of the link is set to match the ID of the target device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the new device link</doc>
          <type name="DeviceLink" c:type="OsinfoDeviceLink*"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target device</doc>
            <type name="Device" c:type="OsinfoDevice*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_driver" c:identifier="osinfo_devicelink_get_driver">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_target" c:identifier="osinfo_devicelink_get_target">
        <doc xml:whitespace="preserve">Retrieve the #OsinfoDevice that the link points to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the target of the device link</doc>
          <type name="Device" c:type="OsinfoDevice*"/>
        </return-value>
      </method>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The target of the device link.</doc>
        <type name="Device"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="DeviceLinkPrivate" c:type="OsinfoDeviceLinkPrivate*"/>
      </field>
    </class>
    <record name="DeviceLinkClass"
            c:type="OsinfoDeviceLinkClass"
            glib:is-gtype-struct-for="DeviceLink">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="DeviceLinkFilter"
           c:symbol-prefix="devicelinkfilter"
           c:type="OsinfoDeviceLinkFilter"
           parent="Filter"
           glib:type-name="OsinfoDeviceLinkFilter"
           glib:get-type="osinfo_devicelinkfilter_get_type"
           glib:type-struct="DeviceLinkFilterClass">
      <constructor name="new" c:identifier="osinfo_devicelinkfilter_new">
        <doc xml:whitespace="preserve">Construct a new filter that matches all operating
systems</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new filter</doc>
          <type name="DeviceLinkFilter" c:type="OsinfoDeviceLinkFilter*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target device filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_target_filter"
              c:identifier="osinfo_devicelinkfilter_get_target_filter">
        <doc xml:whitespace="preserve">Retrieve the filter used to match against the target of
the device link</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the target filter object</doc>
          <type name="Filter" c:type="OsinfoFilter*"/>
        </return-value>
      </method>
      <property name="target-filter"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The operating system to be deployed</doc>
        <type name="Filter"/>
      </property>
      <field name="parent_instance">
        <type name="Filter" c:type="OsinfoFilter"/>
      </field>
      <field name="priv">
        <type name="DeviceLinkFilterPrivate"
              c:type="OsinfoDeviceLinkFilterPrivate*"/>
      </field>
    </class>
    <record name="DeviceLinkFilterClass"
            c:type="OsinfoDeviceLinkFilterClass"
            glib:is-gtype-struct-for="DeviceLinkFilter">
      <field name="parent_class">
        <type name="FilterClass" c:type="OsinfoFilterClass"/>
      </field>
    </record>
    <record name="DeviceLinkFilterPrivate"
            c:type="OsinfoDeviceLinkFilterPrivate"
            disguised="1">
    </record>
    <class name="DeviceLinkList"
           c:symbol-prefix="devicelinklist"
           c:type="OsinfoDeviceLinkList"
           parent="List"
           glib:type-name="OsinfoDeviceLinkList"
           glib:get-type="osinfo_devicelinklist_get_type"
           glib:type-struct="DeviceLinkListClass">
      <constructor name="new" c:identifier="osinfo_devicelinklist_new">
        <doc xml:whitespace="preserve">Construct a new devicelink list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty devicelink list</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
      </constructor>
      <method name="get_devices"
              c:identifier="osinfo_devicelinklist_get_devices">
        <doc xml:whitespace="preserve">Get all devices matching a given filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of devices</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional device property filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_copy" c:identifier="osinfo_devicelinklist_new_copy">
        <doc xml:whitespace="preserve">Construct a new devicelink list that is filled with devicelinks
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the devicelink list</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_devicelinklist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new devicelink list that is filled with devicelinks
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the devicelink list</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_devicelinklist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new devicelink list that is filled with only the
devicelinks that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two devicelink lists</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second devicelink list to copy</doc>
            <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_devicelinklist_new_union">
        <doc xml:whitespace="preserve">Construct a new devicelink list that is filled with all the
devicelinks that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two devicelink lists</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second devicelink list to copy</doc>
            <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="DeviceLinkListPrivate"
              c:type="OsinfoDeviceLinkListPrivate*"/>
      </field>
    </class>
    <record name="DeviceLinkListClass"
            c:type="OsinfoDeviceLinkListClass"
            glib:is-gtype-struct-for="DeviceLinkList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="DeviceLinkListPrivate"
            c:type="OsinfoDeviceLinkListPrivate"
            disguised="1">
    </record>
    <record name="DeviceLinkPrivate"
            c:type="OsinfoDeviceLinkPrivate"
            disguised="1">
    </record>
    <class name="DeviceList"
           c:symbol-prefix="devicelist"
           c:type="OsinfoDeviceList"
           parent="List"
           glib:type-name="OsinfoDeviceList"
           glib:get-type="osinfo_devicelist_get_type"
           glib:type-struct="DeviceListClass">
      <constructor name="new" c:identifier="osinfo_devicelist_new">
        <doc xml:whitespace="preserve">Construct a new device list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty device list</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_devicelist_new_copy">
        <doc xml:whitespace="preserve">Construct a new device list that is filled with devices
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the device list</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_devicelist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new device list that is filled with devices
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the device list</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_devicelist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new device list that is filled with only the
devices that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two device lists</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second device list to copy</doc>
            <type name="DeviceList" c:type="OsinfoDeviceList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_devicelist_new_union">
        <doc xml:whitespace="preserve">Construct a new device list that is filled with all the
devices that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two device lists</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second device list to copy</doc>
            <type name="DeviceList" c:type="OsinfoDeviceList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="DeviceListPrivate" c:type="OsinfoDeviceListPrivate*"/>
      </field>
    </class>
    <record name="DeviceListClass"
            c:type="OsinfoDeviceListClass"
            glib:is-gtype-struct-for="DeviceList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="DeviceListPrivate"
            c:type="OsinfoDeviceListPrivate"
            disguised="1">
    </record>
    <record name="DevicePrivate" c:type="OsinfoDevicePrivate" disguised="1">
    </record>
    <constant name="ENTITY_PROP_ID" value="id" c:type="OSINFO_ENTITY_PROP_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Entity"
           c:symbol-prefix="entity"
           c:type="OsinfoEntity"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="OsinfoEntity"
           glib:get-type="osinfo_entity_get_type"
           glib:type-struct="EntityClass">
      <method name="add_param" c:identifier="osinfo_entity_add_param">
        <doc xml:whitespace="preserve">Adds a new parameter against the entity. A key can have multiple
values associated. Thus repeated calls with the same key will
build up a list of possible values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to associated with that key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_param" c:identifier="osinfo_entity_clear_param">
        <doc xml:whitespace="preserve">Remove all values associated with a key</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="osinfo_entity_get_id">
        <doc xml:whitespace="preserve">Retrieves the unique key for the entity. The format of identifiers
is undefined, but the recommended practice is to use a URI.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the unique key for the entity</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_param_keys"
              c:identifier="osinfo_entity_get_param_keys">
        <doc xml:whitespace="preserve">Retrieve all the known parameter keys associated with
the entity</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">The list of string parameters</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_param_value"
              c:identifier="osinfo_entity_get_param_value">
        <doc xml:whitespace="preserve">Retrieve the parameter value associated with a named key. If
multiple values are stored against the key, only the first
value is returned. If no value is associated, NULL is returned</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the value associated with the key, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_param_value_list"
              c:identifier="osinfo_entity_get_param_value_list">
        <doc xml:whitespace="preserve">Retrieve all the parameter values associated with a named
key. If no values are associated, NULL is returned</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">the values associated with the key</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_param" c:identifier="osinfo_entity_set_param">
        <doc xml:whitespace="preserve">Sets a new parameter against the entity. If the key already
has a value associated with it, the existing value will be
cleared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to associated with that key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The unique identifier for the entity The format of identifiers
is undefined, but the recommended practice is to use a URI.
This parameter must be set at time of construction as no
default value is provided.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="EntityPrivate" c:type="OsinfoEntityPrivate*"/>
      </field>
    </class>
    <record name="EntityClass"
            c:type="OsinfoEntityClass"
            glib:is-gtype-struct-for="Entity">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EntityPrivate" c:type="OsinfoEntityPrivate" disguised="1">
    </record>
    <class name="Filter"
           c:symbol-prefix="filter"
           c:type="OsinfoFilter"
           parent="GObject.Object"
           glib:type-name="OsinfoFilter"
           glib:get-type="osinfo_filter_get_type"
           glib:type-struct="FilterClass">
      <constructor name="new" c:identifier="osinfo_filter_new">
        <doc xml:whitespace="preserve">Construct a new filter that matches all entities</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filter object</doc>
          <type name="Filter" c:type="OsinfoFilter*"/>
        </return-value>
      </constructor>
      <virtual-method name="matches" invoker="matches">
        <doc xml:whitespace="preserve">Determine of an entity matches a filter</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if entity passes the filter, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="entity" transfer-ownership="none">
            <doc xml:whitespace="preserve">a entity to query</doc>
            <type name="Entity" c:type="OsinfoEntity*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_constraint"
              c:identifier="osinfo_filter_add_constraint">
        <doc xml:whitespace="preserve">Adds a constraint that requires the entity to have
a property key @propName with a value of @propVal.
If multiple constraints are added for the same
@propName, with different values, the entity have
all property values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the parameter key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="propVal" transfer-ownership="none">
            <doc xml:whitespace="preserve">the required property value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_constraint"
              c:identifier="osinfo_filter_clear_constraint">
        <doc xml:whitespace="preserve">Remove all filter constraints for the matching property
name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the key to remove constraints for</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_constraints"
              c:identifier="osinfo_filter_clear_constraints">
        <doc xml:whitespace="preserve">Remove all filter property constraints</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_constraint_keys"
              c:identifier="osinfo_filter_get_constraint_keys">
        <doc xml:whitespace="preserve">Get a list of all constraint property keys</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">List of constraint keys</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_constraint_values"
              c:identifier="osinfo_filter_get_constraint_values">
        <doc xml:whitespace="preserve">Get a list values for filter constriants with the named key</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">List of constraint values</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="propName" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches" c:identifier="osinfo_filter_matches">
        <doc xml:whitespace="preserve">Determine of an entity matches a filter</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if entity passes the filter, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="entity" transfer-ownership="none">
            <doc xml:whitespace="preserve">a entity to query</doc>
            <type name="Entity" c:type="OsinfoEntity*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FilterPrivate" c:type="OsinfoFilterPrivate*"/>
      </field>
    </class>
    <record name="FilterClass"
            c:type="OsinfoFilterClass"
            glib:is-gtype-struct-for="Filter">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="matches">
        <callback name="matches">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">TRUE if entity passes the filter, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="Filter" c:type="OsinfoFilter*"/>
            </parameter>
            <parameter name="entity" transfer-ownership="none">
              <doc xml:whitespace="preserve">a entity to query</doc>
              <type name="Entity" c:type="OsinfoEntity*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FilterPrivate" c:type="OsinfoFilterPrivate" disguised="1">
    </record>
    <constant name="GIBIBYTES" value="1073741824" c:type="OSINFO_GIBIBYTES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="KIBIBYTES" value="1024" c:type="OSINFO_KIBIBYTES">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="List"
           c:symbol-prefix="list"
           c:type="OsinfoList"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="OsinfoList"
           glib:get-type="osinfo_list_get_type"
           glib:type-struct="ListClass">
      <method name="add" c:identifier="osinfo_list_add">
        <doc xml:whitespace="preserve">Adds a new entity to the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="entity" transfer-ownership="none">
            <doc xml:whitespace="preserve">the entity to add to the list</doc>
            <type name="Entity" c:type="OsinfoEntity*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_all" c:identifier="osinfo_list_add_all">
        <doc xml:whitespace="preserve">Adds all entities from @source to @list. Using one
of the constructors in a subclass is preferrable
to this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the list to add</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_filtered" c:identifier="osinfo_list_add_filtered">
        <doc xml:whitespace="preserve">Adds all entities from @source which are matched by @filter. Using one
of the constructors in a subclass is preferrable
to this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source for elements</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">filter to process the source with</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_intersection"
              c:identifier="osinfo_list_add_intersection">
        <doc xml:whitespace="preserve">Computes the intersection between @sourceOne and @sourceTwo and
adds the resulting list of entities to the @list. Using one
of the constructors in a subclass is preferrable
to this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sourceOne" transfer-ownership="none">
            <doc xml:whitespace="preserve">the first list to add</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second list to add</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_union" c:identifier="osinfo_list_add_union">
        <doc xml:whitespace="preserve">Computes the union between @sourceOne and @sourceTwo and
adds the resulting list of entities to the @list. Using one
of the constructors in a subclass is preferrable
to this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sourceOne" transfer-ownership="none">
            <doc xml:whitespace="preserve">the first list to add</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second list to add</doc>
            <type name="List" c:type="OsinfoList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_id" c:identifier="osinfo_list_find_by_id">
        <doc xml:whitespace="preserve">Search the list looking for the entity with a matching
unique identifier.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the matching entity, or NULL</doc>
          <type name="Entity" c:type="OsinfoEntity*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the unique identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_element_type"
              c:identifier="osinfo_list_get_element_type">
        <doc xml:whitespace="preserve">Retrieves the type of the subclass of #OsinfoEntity
that may be stored in the list</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the type of entity stored</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
      </method>
      <method name="get_elements" c:identifier="osinfo_list_get_elements">
        <doc xml:whitespace="preserve">Retrieve a linked list of all elements in the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">the list elements</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Entity"/>
          </type>
        </return-value>
      </method>
      <method name="get_length" c:identifier="osinfo_list_get_length">
        <doc xml:whitespace="preserve">Retrieves the number of elements currently stored
in the list</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the list length</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_nth" c:identifier="osinfo_list_get_nth">
        <doc xml:whitespace="preserve">Retrieves the element in the list at position @idx. If
@idx is less than zero, or greater than the number of
elements in the list, the results are undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the list element</doc>
          <type name="Entity" c:type="OsinfoEntity*"/>
        </return-value>
        <parameters>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:whitespace="preserve">the list position to fetch</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="element-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The specialization of the list. The list will be
restricted to storing #OsinfoEntity objects of
the specified type.</doc>
        <type name="GType"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ListPrivate" c:type="OsinfoListPrivate*"/>
      </field>
    </class>
    <record name="ListClass"
            c:type="OsinfoListClass"
            glib:is-gtype-struct-for="List">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ListPrivate" c:type="OsinfoListPrivate" disguised="1">
    </record>
    <class name="Loader"
           c:symbol-prefix="loader"
           c:type="OsinfoLoader"
           parent="GObject.Object"
           glib:type-name="OsinfoLoader"
           glib:get-type="osinfo_loader_get_type"
           glib:type-struct="LoaderClass">
      <constructor name="new" c:identifier="osinfo_loader_new">
        <doc xml:whitespace="preserve">Create a new database loader</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a loader object</doc>
          <type name="Loader" c:type="OsinfoLoader*"/>
        </return-value>
      </constructor>
      <method name="get_db" c:identifier="osinfo_loader_get_db">
        <doc xml:whitespace="preserve">Retrieves the database being populated</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the database</doc>
          <type name="Db" c:type="OsinfoDb*"/>
        </return-value>
      </method>
      <method name="process_default_path"
              c:identifier="osinfo_loader_process_default_path"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="process_local_path"
              c:identifier="osinfo_loader_process_local_path"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="process_path"
              c:identifier="osinfo_loader_process_path"
              throws="1">
        <doc xml:whitespace="preserve">Loads data from the specified path. If the path
points to a file, that will be loaded as XML
Otherwise it can point to a directory which will
be recursively traversed, loading all files as XML.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">the fully qualified path</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_system_path"
              c:identifier="osinfo_loader_process_system_path"
              throws="1">
        <doc xml:whitespace="preserve">Loads data from the default paths.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="process_uri"
              c:identifier="osinfo_loader_process_uri"
              throws="1">
        <doc xml:whitespace="preserve">Loads data from the specified URI. If the URI
points to a file, that will be loaded as XML
Otherwise it can point to a directory which will
be recursively traversed, loading all files as XML.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data source URI</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_user_path"
              c:identifier="osinfo_loader_process_user_path"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="LoaderPrivate" c:type="OsinfoLoaderPrivate*"/>
      </field>
    </class>
    <record name="LoaderClass"
            c:type="OsinfoLoaderClass"
            glib:is-gtype-struct-for="Loader">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="LoaderPrivate" c:type="OsinfoLoaderPrivate" disguised="1">
    </record>
    <constant name="MEBIBYTES" value="1048576" c:type="OSINFO_MEBIBYTES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MEDIA_PROP_APPLICATION_ID"
              value="application-id"
              c:type="OSINFO_MEDIA_PROP_APPLICATION_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_ARCHITECTURE"
              value="architecture"
              c:type="OSINFO_MEDIA_PROP_ARCHITECTURE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_INITRD"
              value="initrd"
              c:type="OSINFO_MEDIA_PROP_INITRD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_INSTALLER"
              value="installer"
              c:type="OSINFO_MEDIA_PROP_INSTALLER">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_KERNEL"
              value="kernel"
              c:type="OSINFO_MEDIA_PROP_KERNEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_LIVE"
              value="live"
              c:type="OSINFO_MEDIA_PROP_LIVE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_PUBLISHER_ID"
              value="publisher-id"
              c:type="OSINFO_MEDIA_PROP_PUBLISHER_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_SYSTEM_ID"
              value="system-id"
              c:type="OSINFO_MEDIA_PROP_SYSTEM_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_URL" value="url" c:type="OSINFO_MEDIA_PROP_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PROP_VOLUME_ID"
              value="volume-id"
              c:type="OSINFO_MEDIA_PROP_VOLUME_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEGAHERTZ" value="1000000" c:type="OSINFO_MEGAHERTZ">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Media"
           c:symbol-prefix="media"
           c:type="OsinfoMedia"
           parent="Entity"
           glib:type-name="OsinfoMedia"
           glib:get-type="osinfo_media_get_type"
           glib:type-struct="MediaClass">
      <constructor name="new" c:identifier="osinfo_media_new">
        <return-value transfer-ownership="full">
          <type name="Media" c:type="OsinfoMedia*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="architecture" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_from_location"
                c:identifier="osinfo_media_create_from_location"
                throws="1">
        <doc xml:whitespace="preserve">Creates a new #OsinfoMedia for installation media at @location. The @location
could be any URI that GIO can handle or a local path.

NOTE: Currently this only works for ISO images/devices.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #OsinfoMedia , or NULL on error</doc>
          <type name="Media" c:type="OsinfoMedia*"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">the location of an installation media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_from_location_async"
                c:identifier="osinfo_media_create_from_location_async">
        <doc xml:whitespace="preserve">Asynchronous variant of #osinfo_media_create_from_location.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">the location of an installation media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:whitespace="preserve">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:whitespace="preserve">Function to call when result of this call is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data to pass to @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_from_location_finish"
                c:identifier="osinfo_media_create_from_location_finish"
                throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous media object creation process started with
#osinfo_media_create_from_location_async.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #OsinfoMedia , or NULL on error</doc>
          <type name="Media" c:type="OsinfoMedia*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="osinfo_media_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_application_id"
              c:identifier="osinfo_media_get_application_id">
        <doc xml:whitespace="preserve">If @media is an ISO9660 image/device, this function retrieves the expected
application ID.

Note: In practice, this will usually not be the exact copy of the application
ID string on the ISO image/device but rather a regular expression that
matches it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the application id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_architecture"
              c:identifier="osinfo_media_get_architecture">
        <doc xml:whitespace="preserve">Retrieves the target hardware architecture of the OS @media provides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the hardware architecture, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_initrd_path"
              c:identifier="osinfo_media_get_initrd_path">
        <doc xml:whitespace="preserve">Retrieves the path to the initrd image in the install tree.

Note: This only applies to installer medias of 'linux' OS family.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to initrd image, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_installer" c:identifier="osinfo_media_get_installer">
        <doc xml:whitespace="preserve">Whether @media provides a installer for an OS.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if media is installer, #FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_kernel_path"
              c:identifier="osinfo_media_get_kernel_path">
        <doc xml:whitespace="preserve">Retrieves the path to the kernel image in the install tree.

Note: This only applies to installer medias of 'linux' OS family.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to kernel image, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_live" c:identifier="osinfo_media_get_live">
        <doc xml:whitespace="preserve">Whether @media can boot directly an OS without any installations.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if media is live, #FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_publisher_id"
              c:identifier="osinfo_media_get_publisher_id">
        <doc xml:whitespace="preserve">If @media is an ISO9660 image/device, this function retrieves the expected
publisher ID.

Note: In practice, this will usually not be the exact copy of the publisher
ID string on the ISO image/device but rather a regular expression that
matches it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the publisher id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_system_id" c:identifier="osinfo_media_get_system_id">
        <doc xml:whitespace="preserve">If @media is an ISO9660 image/device, this function retrieves the expected
system ID.

Note: In practice, this will usually not be the exact copy of the system ID
string on the ISO image/device but rather a regular expression that matches
it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the system id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url" c:identifier="osinfo_media_get_url">
        <doc xml:whitespace="preserve">The URL to the @media</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URL, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_volume_id" c:identifier="osinfo_media_get_volume_id">
        <doc xml:whitespace="preserve">If @media is an ISO9660 image/device, this function retrieves the expected
volume ID.

Note: In practice, this will usually not be the exact copy of the volume ID
string on the ISO image/device but rather a regular expression that matches
it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the volume id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="application-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="architecture" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="initrd-path" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="installer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="kernel-path" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="live"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="publisher-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="system-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="url" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="volume-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="MediaPrivate" c:type="OsinfoMediaPrivate*"/>
      </field>
    </class>
    <record name="MediaClass"
            c:type="OsinfoMediaClass"
            glib:is-gtype-struct-for="Media">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <enumeration name="MediaError" c:type="OsinfoMediaError">
      <doc xml:whitespace="preserve">#GError codes used for errors in the #OSINFO_MEDIA_ERROR domain, during
reading of data from install media location.</doc>
      <member name="no_descriptors"
              value="0"
              c:identifier="OSINFO_MEDIA_ERROR_NO_DESCRIPTORS"/>
      <member name="no_pvd"
              value="1"
              c:identifier="OSINFO_MEDIA_ERROR_NO_PVD"/>
      <member name="no_svd"
              value="2"
              c:identifier="OSINFO_MEDIA_ERROR_NO_SVD"/>
      <member name="insufficient_metadata"
              value="3"
              c:identifier="OSINFO_MEDIA_ERROR_INSUFFICIENT_METADATA"/>
      <member name="not_bootable"
              value="4"
              c:identifier="OSINFO_MEDIA_ERROR_NOT_BOOTABLE"/>
    </enumeration>
    <class name="MediaList"
           c:symbol-prefix="medialist"
           c:type="OsinfoMediaList"
           parent="List"
           glib:type-name="OsinfoMediaList"
           glib:get-type="osinfo_medialist_get_type"
           glib:type-struct="MediaListClass">
      <constructor name="new" c:identifier="osinfo_medialist_new">
        <doc xml:whitespace="preserve">Construct a new media list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty media list</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_medialist_new_copy">
        <doc xml:whitespace="preserve">Construct a new media list that is filled with medias
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the media list</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
      </method>
      <method name="new_filtered" c:identifier="osinfo_medialist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new media list that is filled with medias
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the media list</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_medialist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new media list that is filled with only the
medias that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two media lists</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second media list to copy</doc>
            <type name="MediaList" c:type="OsinfoMediaList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_medialist_new_union">
        <doc xml:whitespace="preserve">Construct a new media list that is filled with all the
medias that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two media lists</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second media list to copy</doc>
            <type name="MediaList" c:type="OsinfoMediaList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="MediaListPrivate" c:type="OsinfoMediaListPrivate*"/>
      </field>
    </class>
    <record name="MediaListClass"
            c:type="OsinfoMediaListClass"
            glib:is-gtype-struct-for="MediaList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="MediaListPrivate"
            c:type="OsinfoMediaListPrivate"
            disguised="1">
    </record>
    <record name="MediaPrivate" c:type="OsinfoMediaPrivate" disguised="1">
    </record>
    <constant name="OS_PROP_DISTRO"
              value="distro"
              c:type="OSINFO_OS_PROP_DISTRO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OS_PROP_FAMILY"
              value="family"
              c:type="OSINFO_OS_PROP_FAMILY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Os"
           c:symbol-prefix="os"
           c:type="OsinfoOs"
           parent="Product"
           glib:type-name="OsinfoOs"
           glib:get-type="osinfo_os_get_type"
           glib:type-struct="OsClass">
      <constructor name="new" c:identifier="osinfo_os_new">
        <doc xml:whitespace="preserve">Create a new operating system entity</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new operating system entity</doc>
          <type name="Os" c:type="OsinfoOs*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a unique identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_device" c:identifier="osinfo_os_add_device">
        <doc xml:whitespace="preserve">Associated a device with an operating system.  The
returned #OsinfoDeviceLink can be used to record
extra metadata against the link</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the device association</doc>
          <type name="DeviceLink" c:type="OsinfoDeviceLink*"/>
        </return-value>
        <parameters>
          <parameter name="dev" transfer-ownership="none">
            <doc xml:whitespace="preserve">the device to associate with</doc>
            <type name="Device" c:type="OsinfoDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_media" c:identifier="osinfo_os_add_media">
        <doc xml:whitespace="preserve">Adds installation media @media to operating system @os.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">the media to add</doc>
            <type name="Media" c:type="OsinfoMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_minimum_resources"
              c:identifier="osinfo_os_add_minimum_resources">
        <doc xml:whitespace="preserve">Adds @resources to list of minimum resources of operating system @os.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resources" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resources to add</doc>
            <type name="Resources" c:type="OsinfoResources*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_recommended_resources"
              c:identifier="osinfo_os_add_recommended_resources">
        <doc xml:whitespace="preserve">Adds @resources to list of recommended resources of operating system @os.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="resources" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resources to add</doc>
            <type name="Resources" c:type="OsinfoResources*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_tree" c:identifier="osinfo_os_add_tree">
        <doc xml:whitespace="preserve">Adds installation tree @tree to operating system @os.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:whitespace="preserve">the tree to add</doc>
            <type name="Tree" c:type="OsinfoTree*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_devices" c:identifier="osinfo_os_get_all_devices">
        <doc xml:whitespace="preserve">Get all devices matching a given filter but unlike osinfo_os_get_devices
this function also retreives devices from all derived and cloned operating
systems.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of devices</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional device property filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_links"
              c:identifier="osinfo_os_get_device_links">
        <doc xml:whitespace="preserve">Get all devices matching a given filter. The filter
matches against the links, not the devices.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of device links</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional device property filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="osinfo_os_get_devices">
        <doc xml:whitespace="preserve">Get all devices matching a given filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of devices</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional device property filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices_by_property"
              c:identifier="osinfo_os_get_devices_by_property">
        <doc xml:whitespace="preserve">A utility function that gets devices found from the list of devices
@os supports, for which the value of @property is @value.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The found devices</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <doc xml:whitespace="preserve">the property of interest</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the required value of property @property</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="inherited" transfer-ownership="none">
            <doc xml:whitespace="preserve">Should devices from inherited and cloned OSs be included in the search.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distro" c:identifier="osinfo_os_get_distro">
        <doc xml:whitespace="preserve">Retrieves the generic family the OS @os belongs to, for example fedora,
ubuntu, windows, solaris, freebsd etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the distro of this os</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_family" c:identifier="osinfo_os_get_family">
        <doc xml:whitespace="preserve">Retrieves the generic family the OS @os belongs to, based upon its kernel,
for example linux, winnt, solaris, freebsd etc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the family of this os</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_media_list" c:identifier="osinfo_os_get_media_list">
        <doc xml:whitespace="preserve">Get all installation medias associated with operating system @os.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of medias</doc>
          <type name="MediaList" c:type="OsinfoMediaList*"/>
        </return-value>
      </method>
      <method name="get_minimum_resources"
              c:identifier="osinfo_os_get_minimum_resources">
        <doc xml:whitespace="preserve">Get the list of minimum required resources for the operating system @os.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of resources</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
      </method>
      <method name="get_recommended_resources"
              c:identifier="osinfo_os_get_recommended_resources">
        <doc xml:whitespace="preserve">Get the list of recommended resources for the operating system @os.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of resources</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
      </method>
      <method name="get_tree_list" c:identifier="osinfo_os_get_tree_list">
        <doc xml:whitespace="preserve">Get all installation trees associated with operating system @os.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of trees</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
      </method>
      <property name="distro" transfer-ownership="none">
        <doc xml:whitespace="preserve">The generic distro this OS belongs to, for example fedora, windows,
solaris, freebsd etc.</doc>
        <type name="utf8"/>
      </property>
      <property name="family" transfer-ownership="none">
        <doc xml:whitespace="preserve">The generic family this OS belongs to, based upon its kernel,
for example linux, winnt, solaris, freebsd etc.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="Product" c:type="OsinfoProduct"/>
      </field>
      <field name="priv">
        <type name="OsPrivate" c:type="OsinfoOsPrivate*"/>
      </field>
    </class>
    <record name="OsClass"
            c:type="OsinfoOsClass"
            glib:is-gtype-struct-for="Os">
      <field name="parent_class">
        <type name="ProductClass" c:type="OsinfoProductClass"/>
      </field>
    </record>
    <class name="OsList"
           c:symbol-prefix="oslist"
           c:type="OsinfoOsList"
           parent="ProductList"
           glib:type-name="OsinfoOsList"
           glib:get-type="osinfo_oslist_get_type"
           glib:type-struct="OsListClass">
      <constructor name="new" c:identifier="osinfo_oslist_new">
        <doc xml:whitespace="preserve">Construct a new os list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty os list</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_oslist_new_copy">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with oss
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the os list</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
      </method>
      <method name="new_filtered" c:identifier="osinfo_oslist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with oss
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the os list</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_oslist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with only the
oss that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two os lists</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second os list to copy</doc>
            <type name="OsList" c:type="OsinfoOsList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_oslist_new_union">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with all the
oss that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two os lists</doc>
          <type name="OsList" c:type="OsinfoOsList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second os list to copy</doc>
            <type name="OsList" c:type="OsinfoOsList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="ProductList" c:type="OsinfoProductList"/>
      </field>
      <field name="priv">
        <type name="OsListPrivate" c:type="OsinfoOsListPrivate*"/>
      </field>
    </class>
    <record name="OsListClass"
            c:type="OsinfoOsListClass"
            glib:is-gtype-struct-for="OsList">
      <field name="parent_class">
        <type name="ProductListClass" c:type="OsinfoProductListClass"/>
      </field>
    </record>
    <record name="OsListPrivate" c:type="OsinfoOsListPrivate" disguised="1">
    </record>
    <record name="OsPrivate" c:type="OsinfoOsPrivate" disguised="1">
    </record>
    <constant name="PRODUCT_PROP_CODENAME"
              value="codename"
              c:type="OSINFO_PRODUCT_PROP_CODENAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_EOL_DATE"
              value="eol-date"
              c:type="OSINFO_PRODUCT_PROP_EOL_DATE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_NAME"
              value="name"
              c:type="OSINFO_PRODUCT_PROP_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_RELEASE_DATE"
              value="release-date"
              c:type="OSINFO_PRODUCT_PROP_RELEASE_DATE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_SHORT_ID"
              value="short-id"
              c:type="OSINFO_PRODUCT_PROP_SHORT_ID">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_VENDOR"
              value="vendor"
              c:type="OSINFO_PRODUCT_PROP_VENDOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PRODUCT_PROP_VERSION"
              value="version"
              c:type="OSINFO_PRODUCT_PROP_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Platform"
           c:symbol-prefix="platform"
           c:type="OsinfoPlatform"
           parent="Product"
           glib:type-name="OsinfoPlatform"
           glib:get-type="osinfo_platform_get_type"
           glib:type-struct="PlatformClass">
      <constructor name="new" c:identifier="osinfo_platform_new">
        <doc xml:whitespace="preserve">Create a new platform entity</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A platform entity</doc>
          <type name="Platform" c:type="OsinfoPlatform*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">a unique identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_device" c:identifier="osinfo_platform_add_device">
        <doc xml:whitespace="preserve">Associate a device with a platform. The returned #OsinfoDeviceLink
can be used to record extra metadata against the link</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the device association</doc>
          <type name="DeviceLink" c:type="OsinfoDeviceLink*"/>
        </return-value>
        <parameters>
          <parameter name="dev" transfer-ownership="none">
            <doc xml:whitespace="preserve">the device to associate</doc>
            <type name="Device" c:type="OsinfoDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_links"
              c:identifier="osinfo_platform_get_device_links">
        <doc xml:whitespace="preserve">Retrieve all the associated devices matching the filter.
The filter matches against the link, not the device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of #OsinfoDevice entities</doc>
          <type name="DeviceLinkList" c:type="OsinfoDeviceLinkList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="osinfo_platform_get_devices">
        <doc xml:whitespace="preserve">Retrieve all the associated devices matching the filter.
The filter matches against the device, not the link.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of #OsinfoDevice entities</doc>
          <type name="DeviceList" c:type="OsinfoDeviceList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">an optional filter</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Product" c:type="OsinfoProduct"/>
      </field>
      <field name="priv">
        <type name="PlatformPrivate" c:type="OsinfoPlatformPrivate*"/>
      </field>
    </class>
    <record name="PlatformClass"
            c:type="OsinfoPlatformClass"
            glib:is-gtype-struct-for="Platform">
      <field name="parent_class">
        <type name="ProductClass" c:type="OsinfoProductClass"/>
      </field>
    </record>
    <class name="PlatformList"
           c:symbol-prefix="platformlist"
           c:type="OsinfoPlatformList"
           parent="ProductList"
           glib:type-name="OsinfoPlatformList"
           glib:get-type="osinfo_platformlist_get_type"
           glib:type-struct="PlatformListClass">
      <constructor name="new" c:identifier="osinfo_platformlist_new">
        <doc xml:whitespace="preserve">Construct a new platform list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty platform list</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_platformlist_new_copy">
        <doc xml:whitespace="preserve">Construct a new platform list that is filled with platforms
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the platform list</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_platformlist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new platform list that is filled with platforms
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the platform list</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_platformlist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new platform list that is filled with only the
platforms that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two platform lists</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second platform list to copy</doc>
            <type name="PlatformList" c:type="OsinfoPlatformList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_platformlist_new_union">
        <doc xml:whitespace="preserve">Construct a new platform list that is filled with all the
platforms that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two platform lists</doc>
          <type name="PlatformList" c:type="OsinfoPlatformList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second platform list to copy</doc>
            <type name="PlatformList" c:type="OsinfoPlatformList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="ProductList" c:type="OsinfoProductList"/>
      </field>
      <field name="priv">
        <type name="PlatformListPrivate" c:type="OsinfoPlatformListPrivate*"/>
      </field>
    </class>
    <record name="PlatformListClass"
            c:type="OsinfoPlatformListClass"
            glib:is-gtype-struct-for="PlatformList">
      <field name="parent_class">
        <type name="ProductListClass" c:type="OsinfoProductListClass"/>
      </field>
    </record>
    <record name="PlatformListPrivate"
            c:type="OsinfoPlatformListPrivate"
            disguised="1">
    </record>
    <record name="PlatformPrivate"
            c:type="OsinfoPlatformPrivate"
            disguised="1">
    </record>
    <class name="Product"
           c:symbol-prefix="product"
           c:type="OsinfoProduct"
           parent="Entity"
           abstract="1"
           glib:type-name="OsinfoProduct"
           glib:get-type="osinfo_product_get_type"
           glib:type-struct="ProductClass">
      <method name="add_related" c:identifier="osinfo_product_add_related">
        <doc xml:whitespace="preserve">Add an association between two products</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relationship</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
          <parameter name="otherproduct" transfer-ownership="none">
            <doc xml:whitespace="preserve">the product to relate to</doc>
            <type name="Product" c:type="OsinfoProduct*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_codename" c:identifier="osinfo_product_get_codename">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_eol_date" c:identifier="osinfo_product_get_eol_date">
        <return-value transfer-ownership="full">
          <type name="GLib.Date" c:type="GDate*"/>
        </return-value>
      </method>
      <method name="get_eol_date_string"
              c:identifier="osinfo_product_get_eol_date_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="osinfo_product_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_related" c:identifier="osinfo_product_get_related">
        <doc xml:whitespace="preserve">Get a list of products satisfying the requested
relationship</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of related products</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relationship to query</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_release_date"
              c:identifier="osinfo_product_get_release_date">
        <return-value transfer-ownership="full">
          <type name="GLib.Date" c:type="GDate*"/>
        </return-value>
      </method>
      <method name="get_release_date_string"
              c:identifier="osinfo_product_get_release_date_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_short_id" c:identifier="osinfo_product_get_short_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_vendor" c:identifier="osinfo_product_get_vendor">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_version" c:identifier="osinfo_product_get_version">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="codename" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="short-id" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="vendor" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="version" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="ProductPrivate" c:type="OsinfoProductPrivate*"/>
      </field>
    </class>
    <record name="ProductClass"
            c:type="OsinfoProductClass"
            glib:is-gtype-struct-for="Product">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="ProductFilter"
           c:symbol-prefix="productfilter"
           c:type="OsinfoProductFilter"
           parent="Filter"
           glib:type-name="OsinfoProductFilter"
           glib:get-type="osinfo_productfilter_get_type"
           glib:type-struct="ProductFilterClass">
      <constructor name="new" c:identifier="osinfo_productfilter_new">
        <doc xml:whitespace="preserve">Construct a new filter that matches all operating
systems</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new filter</doc>
          <type name="ProductFilter" c:type="OsinfoProductFilter*"/>
        </return-value>
      </constructor>
      <method name="add_product_constraint"
              c:identifier="osinfo_productfilter_add_product_constraint">
        <doc xml:whitespace="preserve">Adds a constraint that matches products which
have a relationship @relshp with @product. Multiple constraints
can be set for the same @relshp or @product, in which case
all must match</doc>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relationship to filter on</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
          <parameter name="product" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target product to filter on</doc>
            <type name="Product" c:type="OsinfoProduct*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_support_date_constraint"
              c:identifier="osinfo_productfilter_add_support_date_constraint">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="when" transfer-ownership="none">
            <type name="GLib.Date" c:type="GDate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_product_constraint"
              c:identifier="osinfo_productfilter_clear_product_constraint">
        <doc xml:whitespace="preserve">Remove all constraints for the relationship @relshp</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the relationship to clear</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_product_constraints"
              c:identifier="osinfo_productfilter_clear_product_constraints">
        <doc xml:whitespace="preserve">Remove all relationship constraints</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_product_constraint_values"
              c:identifier="osinfo_productfilter_get_product_constraint_values">
        <doc xml:whitespace="preserve">Retrieve a list of all operating systems that are
the target of constraint for the  relationship
@relshp.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list of operating systems</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Product"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="relshp" transfer-ownership="none">
            <doc xml:whitespace="preserve">a relationship to query</doc>
            <type name="ProductRelationship"
                  c:type="OsinfoProductRelationship"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Filter" c:type="OsinfoFilter"/>
      </field>
      <field name="priv">
        <type name="ProductFilterPrivate"
              c:type="OsinfoProductFilterPrivate*"/>
      </field>
    </class>
    <record name="ProductFilterClass"
            c:type="OsinfoProductFilterClass"
            glib:is-gtype-struct-for="ProductFilter">
      <field name="parent_class">
        <type name="FilterClass" c:type="OsinfoFilterClass"/>
      </field>
    </record>
    <record name="ProductFilterPrivate"
            c:type="OsinfoProductFilterPrivate"
            disguised="1">
    </record>
    <class name="ProductList"
           c:symbol-prefix="productlist"
           c:type="OsinfoProductList"
           parent="List"
           glib:type-name="OsinfoProductList"
           glib:get-type="osinfo_productlist_get_type"
           glib:type-struct="ProductListClass">
      <constructor name="new" c:identifier="osinfo_productlist_new">
        <doc xml:whitespace="preserve">Construct a new os list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty os list</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_productlist_new_copy">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with oss
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the os list</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_productlist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with oss
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the os list</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_productlist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with only the
oss that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two os lists</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second os list to copy</doc>
            <type name="ProductList" c:type="OsinfoProductList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_productlist_new_union">
        <doc xml:whitespace="preserve">Construct a new os list that is filled with all the
oss that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two os lists</doc>
          <type name="ProductList" c:type="OsinfoProductList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second os list to copy</doc>
            <type name="ProductList" c:type="OsinfoProductList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="ProductListPrivate" c:type="OsinfoProductListPrivate*"/>
      </field>
    </class>
    <record name="ProductListClass"
            c:type="OsinfoProductListClass"
            glib:is-gtype-struct-for="ProductList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="ProductListPrivate"
            c:type="OsinfoProductListPrivate"
            disguised="1">
    </record>
    <record name="ProductPrivate" c:type="OsinfoProductPrivate" disguised="1">
    </record>
    <enumeration name="ProductRelationship" c:type="OsinfoProductRelationship">
      <doc xml:whitespace="preserve">Enum values used to form relationships between products</doc>
      <member name="derives_from"
              value="0"
              c:identifier="OSINFO_PRODUCT_RELATIONSHIP_DERIVES_FROM"/>
      <member name="upgrades"
              value="1"
              c:identifier="OSINFO_PRODUCT_RELATIONSHIP_UPGRADES"/>
      <member name="clones"
              value="2"
              c:identifier="OSINFO_PRODUCT_RELATIONSHIP_CLONES"/>
    </enumeration>
    <constant name="RESOURCES_PROP_ARCHITECTURE"
              value="architecture"
              c:type="OSINFO_RESOURCES_PROP_ARCHITECTURE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RESOURCES_PROP_CPU"
              value="cpu"
              c:type="OSINFO_RESOURCES_PROP_CPU">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RESOURCES_PROP_N_CPUS"
              value="n-cpus"
              c:type="OSINFO_RESOURCES_PROP_N_CPUS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RESOURCES_PROP_RAM"
              value="ram"
              c:type="OSINFO_RESOURCES_PROP_RAM">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RESOURCES_PROP_STORAGE"
              value="storage"
              c:type="OSINFO_RESOURCES_PROP_STORAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Resources"
           c:symbol-prefix="resources"
           c:type="OsinfoResources"
           parent="Entity"
           glib:type-name="OsinfoResources"
           glib:get-type="osinfo_resources_get_type"
           glib:type-struct="ResourcesClass">
      <constructor name="new" c:identifier="osinfo_resources_new">
        <return-value transfer-ownership="full">
          <type name="Resources" c:type="OsinfoResources*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="architecture" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_architecture"
              c:identifier="osinfo_resources_get_architecture">
        <doc xml:whitespace="preserve">Retrieves the target hardware architecture to which @resources applies. Some
operating systems specify the same requirements and recommendations for all
architectures. In such cases, the string returned by this call will be
#OSINFO_ARCHITECTURE_ALL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the hardware architecture.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_cpu" c:identifier="osinfo_resources_get_cpu">
        <doc xml:whitespace="preserve">Retrieves the CPU frequency in hertz (Hz). Divide the value by #OSINFO_MEGAHERTZ if
you need this value in megahertz (MHz).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the CPU frequency, or -1.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="get_n_cpus" c:identifier="osinfo_resources_get_n_cpus">
        <doc xml:whitespace="preserve">Retrieves the number of CPUs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of CPUs, or -1.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_ram" c:identifier="osinfo_resources_get_ram">
        <doc xml:whitespace="preserve">Retrieves the amount of Random Access Memory (RAM) in bytes. Divide the value
by #OSINFO_MEBIBYTES if you need this value in mebibytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of RAM, or -1.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="get_storage" c:identifier="osinfo_resources_get_storage">
        <doc xml:whitespace="preserve">Retrieves the amount of storage space in bytes. Divide the value by
#OSINFO_GIBIBYTES if you need this value in gibibytes.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of storage, or -1.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
      </method>
      <method name="set_cpu" c:identifier="osinfo_resources_set_cpu">
        <doc xml:whitespace="preserve">Sets the CPU frequency.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cpu" transfer-ownership="none">
            <doc xml:whitespace="preserve">the CPU frequency in hertz (Hz)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_cpus" c:identifier="osinfo_resources_set_n_cpus">
        <doc xml:whitespace="preserve">Sets the number of CPUs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_cpus" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of CPUs</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ram" c:identifier="osinfo_resources_set_ram">
        <doc xml:whitespace="preserve">Sets the amount of RAM in bytes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ram" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of ram in bytes</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_storage" c:identifier="osinfo_resources_set_storage">
        <doc xml:whitespace="preserve">Sets the amount of storage space.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="storage" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of storage in bytes</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="architecture"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="cpu" writable="1" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <property name="n-cpus" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="ram" writable="1" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <property name="storage" writable="1" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="ResourcesPrivate" c:type="OsinfoResourcesPrivate*"/>
      </field>
    </class>
    <record name="ResourcesClass"
            c:type="OsinfoResourcesClass"
            glib:is-gtype-struct-for="Resources">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="ResourcesList"
           c:symbol-prefix="resourceslist"
           c:type="OsinfoResourcesList"
           parent="List"
           glib:type-name="OsinfoResourcesList"
           glib:get-type="osinfo_resourceslist_get_type"
           glib:type-struct="ResourcesListClass">
      <constructor name="new" c:identifier="osinfo_resourceslist_new">
        <doc xml:whitespace="preserve">Construct a new resources list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty resources list</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_resourceslist_new_copy">
        <doc xml:whitespace="preserve">Construct a new resources list that is filled with resources instances
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the resources list</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
      </method>
      <method name="new_filtered"
              c:identifier="osinfo_resourceslist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new resources list that is filled with resources instances
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the resources list</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_resourceslist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new resources list that is filled with only the
resources instances that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two resources lists</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second resources list to copy</doc>
            <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_resourceslist_new_union">
        <doc xml:whitespace="preserve">Construct a new resources list that is filled with all the
resources instances that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two resources lists</doc>
          <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second resources list to copy</doc>
            <type name="ResourcesList" c:type="OsinfoResourcesList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="ResourcesListPrivate"
              c:type="OsinfoResourcesListPrivate*"/>
      </field>
    </class>
    <record name="ResourcesListClass"
            c:type="OsinfoResourcesListClass"
            glib:is-gtype-struct-for="ResourcesList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="ResourcesListPrivate"
            c:type="OsinfoResourcesListPrivate"
            disguised="1">
    </record>
    <record name="ResourcesPrivate"
            c:type="OsinfoResourcesPrivate"
            disguised="1">
    </record>
    <constant name="TREE_PROP_ARCHITECTURE"
              value="architecture"
              c:type="OSINFO_TREE_PROP_ARCHITECTURE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_BOOT_ISO"
              value="boot-iso"
              c:type="OSINFO_TREE_PROP_BOOT_ISO">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_INITRD"
              value="initrd"
              c:type="OSINFO_TREE_PROP_INITRD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_KERNEL"
              value="kernel"
              c:type="OSINFO_TREE_PROP_KERNEL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_TREEINFO_ARCH"
              value="treeinfo-arch"
              c:type="OSINFO_TREE_PROP_TREEINFO_ARCH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_TREEINFO_FAMILY"
              value="treeinfo-family"
              c:type="OSINFO_TREE_PROP_TREEINFO_FAMILY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_TREEINFO_VARIANT"
              value="treeinfo-variant"
              c:type="OSINFO_TREE_PROP_TREEINFO_VARIANT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_TREEINFO_VERSION"
              value="treeinfo-version"
              c:type="OSINFO_TREE_PROP_TREEINFO_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TREE_PROP_URL" value="url" c:type="OSINFO_TREE_PROP_URL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Tree"
           c:symbol-prefix="tree"
           c:type="OsinfoTree"
           parent="Entity"
           glib:type-name="OsinfoTree"
           glib:get-type="osinfo_tree_get_type"
           glib:type-struct="TreeClass">
      <constructor name="new" c:identifier="osinfo_tree_new">
        <return-value transfer-ownership="full">
          <type name="Tree" c:type="OsinfoTree*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="architecture" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="create_from_location"
                c:identifier="osinfo_tree_create_from_location"
                throws="1">
        <doc xml:whitespace="preserve">Creates a new #OsinfoTree for installation tree at @location. The @location
could be any URI that GIO can handle or a local path.

NOTE: Currently this only works for trees with a .treeinfo file</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #OsinfoTree , or NULL on error</doc>
          <type name="Tree" c:type="OsinfoTree*"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">the location of an installation tree</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_from_location_async"
                c:identifier="osinfo_tree_create_from_location_async">
        <doc xml:whitespace="preserve">Asynchronous variant of #osinfo_tree_create_from_location.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">the location of an installation tree</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:whitespace="preserve">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:whitespace="preserve">Function to call when result of this call is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The user data to pass to @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_from_location_finish"
                c:identifier="osinfo_tree_create_from_location_finish"
                throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous tree object creation process started with
#osinfo_tree_create_from_location_async.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #OsinfoTree , or NULL on error</doc>
          <type name="Tree" c:type="OsinfoTree*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="osinfo_tree_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_architecture"
              c:identifier="osinfo_tree_get_architecture">
        <doc xml:whitespace="preserve">Retrieves the target hardware architecture of the OS @tree provides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the hardware architecture, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_boot_iso_path"
              c:identifier="osinfo_tree_get_boot_iso_path">
        <doc xml:whitespace="preserve">Retrieves the path to the boot_iso image in the install tree.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to boot_iso image, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_initrd_path"
              c:identifier="osinfo_tree_get_initrd_path">
        <doc xml:whitespace="preserve">Retrieves the path to the initrd image in the install tree.

Note: This only applies to installer trees of 'linux' OS family.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to initrd image, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_kernel_path"
              c:identifier="osinfo_tree_get_kernel_path">
        <doc xml:whitespace="preserve">Retrieves the path to the kernel image in the install tree.

Note: This only applies to installer trees of 'linux' OS family.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to kernel image, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_treeinfo_arch"
              c:identifier="osinfo_tree_get_treeinfo_arch">
        <doc xml:whitespace="preserve">If @tree is an ISO9660 image/device, this function retrieves the expected
system ID.

Note: In practice, this will usually not be the exact copy of the system ID
string on the ISO image/device but rather a regular expression that matches
it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the system id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_treeinfo_family"
              c:identifier="osinfo_tree_get_treeinfo_family">
        <doc xml:whitespace="preserve">If @tree is an ISO9660 image/device, this function retrieves the expected
volume ID.

Note: In practice, this will usually not be the exact copy of the volume ID
string on the ISO image/device but rather a regular expression that matches
it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the volume id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_treeinfo_variant"
              c:identifier="osinfo_tree_get_treeinfo_variant">
        <doc xml:whitespace="preserve">If @tree is an ISO9660 image/device, this function retrieves the expected
publisher ID.

Note: In practice, this will usually not be the exact copy of the publisher
ID string on the ISO image/device but rather a regular expression that
matches it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the publisher id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_treeinfo_version"
              c:identifier="osinfo_tree_get_treeinfo_version">
        <doc xml:whitespace="preserve">If @tree is an ISO9660 image/device, this function retrieves the expected
application ID.

Note: In practice, this will usually not be the exact copy of the application
ID string on the ISO image/device but rather a regular expression that
matches it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the application id, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url" c:identifier="osinfo_tree_get_url">
        <doc xml:whitespace="preserve">The URL to the @tree</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the URL, or NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <property name="application-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="architecture" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="boot-iso-path" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="initrd-path" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="kernel-path" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="publisher-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="system-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="url" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="volume-id" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="Entity" c:type="OsinfoEntity"/>
      </field>
      <field name="priv">
        <type name="TreePrivate" c:type="OsinfoTreePrivate*"/>
      </field>
    </class>
    <record name="TreeClass"
            c:type="OsinfoTreeClass"
            glib:is-gtype-struct-for="Tree">
      <field name="parent_class">
        <type name="EntityClass" c:type="OsinfoEntityClass"/>
      </field>
    </record>
    <class name="TreeList"
           c:symbol-prefix="treelist"
           c:type="OsinfoTreeList"
           parent="List"
           glib:type-name="OsinfoTreeList"
           glib:get-type="osinfo_treelist_get_type"
           glib:type-struct="TreeListClass">
      <constructor name="new" c:identifier="osinfo_treelist_new">
        <doc xml:whitespace="preserve">Construct a new tree list that is initially empty.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an empty tree list</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
      </constructor>
      <method name="new_copy" c:identifier="osinfo_treelist_new_copy">
        <doc xml:whitespace="preserve">Construct a new tree list that is filled with trees
from @source</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a copy of the tree list</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
      </method>
      <method name="new_filtered" c:identifier="osinfo_treelist_new_filtered">
        <doc xml:whitespace="preserve">Construct a new tree list that is filled with trees
from @source that match @filter</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filtered copy of the tree list</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
        <parameters>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:whitespace="preserve">the filter to apply</doc>
            <type name="Filter" c:type="OsinfoFilter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_intersection"
              c:identifier="osinfo_treelist_new_intersection">
        <doc xml:whitespace="preserve">Construct a new tree list that is filled with only the
trees that are present in both @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an intersection of the two tree lists</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second tree list to copy</doc>
            <type name="TreeList" c:type="OsinfoTreeList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_union" c:identifier="osinfo_treelist_new_union">
        <doc xml:whitespace="preserve">Construct a new tree list that is filled with all the
trees that are present in either @sourceOne and @sourceTwo.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a union of the two tree lists</doc>
          <type name="TreeList" c:type="OsinfoTreeList*"/>
        </return-value>
        <parameters>
          <parameter name="sourceTwo" transfer-ownership="none">
            <doc xml:whitespace="preserve">the second tree list to copy</doc>
            <type name="TreeList" c:type="OsinfoTreeList*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="List" c:type="OsinfoList"/>
      </field>
      <field name="priv">
        <type name="TreeListPrivate" c:type="OsinfoTreeListPrivate*"/>
      </field>
    </class>
    <record name="TreeListClass"
            c:type="OsinfoTreeListClass"
            glib:is-gtype-struct-for="TreeList">
      <field name="parent_class">
        <type name="ListClass" c:type="OsinfoListClass"/>
      </field>
    </record>
    <record name="TreeListPrivate"
            c:type="OsinfoTreeListPrivate"
            disguised="1">
    </record>
    <record name="TreePrivate" c:type="OsinfoTreePrivate" disguised="1">
    </record>
  </namespace>
</repository>
