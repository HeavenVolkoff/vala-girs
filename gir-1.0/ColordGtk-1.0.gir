<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="Colord" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="xlib" version="2.0"/>
  <package name="colord-gtk"/>
  <c:include name="colord-gtk.h"/>
  <namespace name="ColordGtk"
             version="1.0"
             shared-library="libcolord-gtk.so.1"
             c:identifier-prefixes="Cd"
             c:symbol-prefixes="cd">
    <constant name="GTK_MAJOR_VERSION" value="0" c:type="CD_GTK_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GTK_MICRO_VERSION"
              value="24"
              c:type="CD_GTK_MICRO_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="GTK_MINOR_VERSION" value="1" c:type="CD_GTK_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="SampleWindow"
           c:symbol-prefix="sample_window"
           c:type="CdSampleWindow"
           parent="Gtk.Window"
           glib:type-name="CdSampleWindow"
           glib:get-type="cd_sample_window_get_type"
           glib:type-struct="SampleWindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="cd_sample_window_new">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #CdSampleWindow object.</doc>
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </return-value>
      </constructor>
      <method name="set_fraction" c:identifier="cd_sample_window_set_fraction">
        <doc xml:whitespace="preserve">Sets the percentage value on the window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fraction" transfer-ownership="none">
            <doc xml:whitespace="preserve">the fraction value to show, or -1 for pulsing.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
      <field name="priv">
        <type name="SampleWindowPrivate" c:type="CdSampleWindowPrivate*"/>
      </field>
    </class>
    <record name="SampleWindowClass"
            c:type="CdSampleWindowClass"
            glib:is-gtype-struct-for="SampleWindow">
      <field name="parent_class">
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <record name="SampleWindowPrivate"
            c:type="CdSampleWindowPrivate"
            disguised="1">
      <doc xml:whitespace="preserve">Private #CdSampleWindow data</doc>
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="CdWindow"
           parent="GObject.Object"
           glib:type-name="CdWindow"
           glib:get-type="cd_window_get_type">
      <constructor name="new" c:identifier="cd_window_new" version="0.1.20">
        <doc xml:whitespace="preserve">Creates a new #CdWindow object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new CdWindow object.</doc>
          <type name="Window" c:type="CdWindow*"/>
        </return-value>
      </constructor>
      <function name="error_quark"
                c:identifier="cd_window_error_quark"
                version="0.1.20">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">An error quark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_profile"
              c:identifier="cd_window_get_profile"
              version="0.1.20">
        <doc xml:whitespace="preserve">Gets the screen profile that should be used for the widget,
which corresponds to the screen output the widget most covers.

This method should be called when the widget has mapped, i.e.
g_signal_connect (dialog, "map", G_CALLBACK (map_cb), priv);

Note, the returned profile from cd_client_get_profile_for_widget_finish()
has already been connected to, as is ready to use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:whitespace="preserve">the function to run on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="Profile" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WindowPrivate" c:type="CdWindowPrivate*"/>
      </field>
      <glib:signal name="changed" when="last" version="0.1.20">
        <doc xml:whitespace="preserve">The ::changed signal is emitted when the device profile has
changed. The #CdProfile that is referenced in the callback
has not been connected to, and you will need to call
cd_profile_connect() if the ICC filename is required.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Colord.Profile"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="WindowError" c:type="CdWindowError">
      <doc xml:whitespace="preserve">Errors that can be thrown</doc>
      <member name="failed" value="0" c:identifier="CD_WINDOW_ERROR_FAILED"/>
      <member name="last" value="1" c:identifier="CD_WINDOW_ERROR_LAST"/>
    </enumeration>
    <record name="WindowPrivate" c:type="CdWindowPrivate" disguised="1">
      <doc xml:whitespace="preserve">Private #CdWindow data</doc>
    </record>
  </namespace>
</repository>
