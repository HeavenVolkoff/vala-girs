<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gtk" version="3.0"/>
  <include name="WebKit2" version="4.0"/>
  <package name="libdevhelp-3.0"/>
  <c:include name="devhelp/devhelp.h"/>
  <namespace name="Devhelp"
             version="3.0"
             shared-library="libdevhelp-3.so.6"
             c:identifier-prefixes="Dh"
             c:symbol-prefixes="dh">
    <class name="AssistantView"
           c:symbol-prefix="assistant_view"
           c:type="DhAssistantView"
           parent="WebKit2.WebView"
           glib:type-name="DhAssistantView"
           glib:get-type="dh_assistant_view_get_type"
           glib:type-struct="AssistantViewClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dh_assistant_view_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhAssistantView widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="search" c:identifier="dh_assistant_view_search">
        <doc xml:space="preserve">Search for @str in the current assistant view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @str was found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhAssistantView.</doc>
            <type name="AssistantView" c:type="DhAssistantView*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the search query.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_link" c:identifier="dh_assistant_view_set_link">
        <doc xml:space="preserve">Open @link in the assistant view, if %NULL the view will be blanked.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the requested link is open, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhAssistantView.</doc>
            <type name="AssistantView" c:type="DhAssistantView*"/>
          </instance-parameter>
          <parameter name="link"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhLink to set or %NULL.</doc>
            <type name="Link" c:type="DhLink*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="WebKit2.WebView" c:type="WebKitWebView"/>
      </field>
      <glib:signal name="open-uri">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the uri to open</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AssistantViewClass"
            c:type="DhAssistantViewClass"
            glib:is-gtype-struct-for="AssistantView">
      <field name="parent_class">
        <type name="WebKit2.WebViewClass" c:type="WebKitWebViewClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Book"
           c:symbol-prefix="book"
           c:type="DhBook"
           parent="GObject.Object"
           glib:type-name="DhBook"
           glib:get-type="dh_book_get_type"
           glib:type-struct="BookClass">
      <constructor name="new" c:identifier="dh_book_new">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a new #DhBook object, or %NULL if parsing the index file
failed.</doc>
          <type name="Book" c:type="DhBook*"/>
        </return-value>
        <parameters>
          <parameter name="index_file" transfer-ownership="none">
            <doc xml:space="preserve">the index file.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cmp_by_id" c:identifier="dh_book_cmp_by_id">
        <doc xml:space="preserve">Compares the #DhBook's by their IDs, with g_ascii_strcasecmp().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer less than, equal to, or greater than zero, if @a is &lt;, ==
or &gt; than @b.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cmp_by_title" c:identifier="dh_book_cmp_by_title">
        <doc xml:space="preserve">Compares the #DhBook's by their title.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer less than, equal to, or greater than zero, if @a is &lt;, ==
or &gt; than @b.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_completion"
              c:identifier="dh_book_get_completion"
              version="3.28">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhCompletion of @book.</doc>
          <type name="Completion" c:type="DhCompletion*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="dh_book_get_id">
        <doc xml:space="preserve">Gets the book ID. In the Devhelp index file format version 2, it is actually
the “name”, not the ID, but “book ID” is clearer, “book name” can be confused
with the title.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the book ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index_file" c:identifier="dh_book_get_index_file">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the index file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="dh_book_get_language">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the programming language used in @book.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_links" c:identifier="dh_book_get_links">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the list of
&lt;emphasis&gt;all&lt;/emphasis&gt; #DhLink's part of @book.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Link"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="dh_book_get_title">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the book title.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="dh_book_get_tree">
        <doc xml:space="preserve">Gets the general structure of the book, as a tree. The tree contains only
#DhLink's of type %DH_LINK_TYPE_BOOK or %DH_LINK_TYPE_PAGE. The other
#DhLink's are not contained in the tree. To have a list of
&lt;emphasis&gt;all&lt;/emphasis&gt; #DhLink's part of the book, you need to call
dh_book_get_links().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the tree of #DhLink's part of @book.</doc>
          <type name="GLib.Node" c:type="GNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="deleted" when="last">
        <doc xml:space="preserve">The ::deleted signal is emitted when the index file has been deleted
from the filesystem.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="updated" when="last">
        <doc xml:space="preserve">The ::updated signal is emitted when the index file has been
modified (but the file still exists).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BookClass"
            c:type="DhBookClass"
            glib:is-gtype-struct-for="Book">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="BookList"
           c:symbol-prefix="book_list"
           c:type="DhBookList"
           parent="GObject.Object"
           glib:type-name="DhBookList"
           glib:get-type="dh_book_list_get_type"
           glib:type-struct="BookListClass">
      <constructor name="new" c:identifier="dh_book_list_new" version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new empty #DhBookList object.</doc>
          <type name="BookList" c:type="DhBookList*"/>
        </return-value>
      </constructor>
      <function name="get_default"
                c:identifier="dh_book_list_get_default"
                version="3.30">
        <doc xml:space="preserve">Gets the default #DhBookList object. It is created with #DhBookListBuilder,
dh_book_list_builder_add_default_sub_book_lists() is called, and
dh_book_list_builder_read_books_disabled_setting() is called with the default
#DhSettings object as returned by dh_settings_get_default().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default #DhBookList object.</doc>
          <type name="BookList" c:type="DhBookList*"/>
        </return-value>
      </function>
      <virtual-method name="add_book" invoker="add_book" version="3.30">
        <doc xml:space="preserve">Emits the #DhBookList::add-book signal.

It is a programmer error to call this function if @book is already inserted
in @book_list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_books" invoker="get_books" version="3.30">
        <doc xml:space="preserve">Gets the list of #DhBook's part of @book_list, in no particular order. Each
book ID in the list is unique (see dh_book_get_id()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GList of #DhBook's part
of @book_list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Book"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_book" invoker="remove_book" version="3.30">
        <doc xml:space="preserve">Emits the #DhBookList::remove-book signal.

It is a programmer error to call this function if @book is not present in
@book_list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_book"
              c:identifier="dh_book_list_add_book"
              version="3.30">
        <doc xml:space="preserve">Emits the #DhBookList::add-book signal.

It is a programmer error to call this function if @book is already inserted
in @book_list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_books"
              c:identifier="dh_book_list_get_books"
              version="3.30">
        <doc xml:space="preserve">Gets the list of #DhBook's part of @book_list, in no particular order. Each
book ID in the list is unique (see dh_book_get_id()).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GList of #DhBook's part
of @book_list.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Book"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_book"
              c:identifier="dh_book_list_remove_book"
              version="3.30">
        <doc xml:space="preserve">Emits the #DhBookList::remove-book signal.

It is a programmer error to call this function if @book is not present in
@book_list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BookListPrivate" c:type="DhBookListPrivate*"/>
      </field>
      <glib:signal name="add-book" when="last" version="3.30">
        <doc xml:space="preserve">The ::add-book signal is emitted when a #DhBook is added to a
#DhBookList.

The default object method handler adds @book to the internal #GList
of @book_list after verifying that @book is not already present in
the list.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">the #DhBook being added.</doc>
            <type name="Book"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-book" when="last" version="3.30">
        <doc xml:space="preserve">The ::remove-book signal is emitted when a #DhBook is removed from a
#DhBookList.

The default object method handler removes @book from the internal
#GList of @book_list, and verifies that @book was present in the list
and that @book was not inserted several times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">the #DhBook being removed.</doc>
            <type name="Book"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="BookListBuilder"
           c:symbol-prefix="book_list_builder"
           c:type="DhBookListBuilder"
           parent="GObject.Object"
           glib:type-name="DhBookListBuilder"
           glib:get-type="dh_book_list_builder_get_type"
           glib:type-struct="BookListBuilderClass">
      <constructor name="new"
                   c:identifier="dh_book_list_builder_new"
                   version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhBookListBuilder.</doc>
          <type name="BookListBuilder" c:type="DhBookListBuilder*"/>
        </return-value>
      </constructor>
      <method name="add_default_sub_book_lists"
              c:identifier="dh_book_list_builder_add_default_sub_book_lists"
              version="3.30">
        <doc xml:space="preserve">Creates the default #DhBookListDirectory's and adds them to @builder with
dh_book_list_builder_add_sub_book_list().

It creates and adds a #DhBookListDirectory for the following directories (in
that order):
- `$XDG_DATA_HOME/gtk-doc/html/`
- `$XDG_DATA_HOME/devhelp/books/`
- For each directory in `$XDG_DATA_DIRS`:
  - `$xdg_data_dir/gtk-doc/html/`
  - `$xdg_data_dir/devhelp/books/`

See g_get_user_data_dir() and g_get_system_data_dirs().

Additionally, if the libdevhelp has been compiled with the `flatpak_build`
option, it creates and adds a #DhBookListDirectory for the following
directories (in that order, after the above ones):
- `/run/host/usr/share/gtk-doc/html/`
- `/run/host/usr/share/devhelp/books/`

The exact list of directories is subject to change, it is not part of the
API.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookListBuilder.</doc>
            <type name="BookListBuilder" c:type="DhBookListBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_sub_book_list"
              c:identifier="dh_book_list_builder_add_sub_book_list"
              version="3.30">
        <doc xml:space="preserve">Adds @sub_book_list.

The #DhBookList object that will be created with
dh_book_list_builder_create_object() will contain all the sub-#DhBookList's
added with this function (and it will listen to their signals). The
sub-#DhBookList's must be added in order of decreasing priority (the first
sub-#DhBookList added has the highest priority). The priority is used in case
of book ID conflicts (see dh_book_get_id()).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookListBuilder.</doc>
            <type name="BookListBuilder" c:type="DhBookListBuilder*"/>
          </instance-parameter>
          <parameter name="sub_book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_object"
              c:identifier="dh_book_list_builder_create_object"
              version="3.30">
        <doc xml:space="preserve">Creates the #DhBookList. It actually creates a subclass of #DhBookList, but
the subclass is not exposed to the public API.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #DhBookList object.</doc>
          <type name="BookList" c:type="DhBookList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookListBuilder.</doc>
            <type name="BookListBuilder" c:type="DhBookListBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="read_books_disabled_setting"
              c:identifier="dh_book_list_builder_read_books_disabled_setting"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings object from which to read the "books-disabled"
#GSettings key. If @settings is %NULL or if this function isn't called, then
the #DhBookList object that will be created with
dh_book_list_builder_create_object() will not read a "books-disabled"
setting.

With #DhBookListBuilder it is not possible to read the "books-disabled"
settings from several #DhSettings objects and combine them. Only the last
call to this function is taken into account when creating the #DhBookList
with dh_book_list_builder_create_object().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookListBuilder.</doc>
            <type name="BookListBuilder" c:type="DhBookListBuilder*"/>
          </instance-parameter>
          <parameter name="settings"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhSettings, or %NULL.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BookListBuilderPrivate"
              c:type="DhBookListBuilderPrivate*"/>
      </field>
    </class>
    <record name="BookListBuilderClass"
            c:type="DhBookListBuilderClass"
            glib:is-gtype-struct-for="BookListBuilder">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="BookListBuilderPrivate"
            c:type="DhBookListBuilderPrivate"
            disguised="1">
    </record>
    <record name="BookListClass"
            c:type="DhBookListClass"
            glib:is-gtype-struct-for="BookList">
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_book">
        <callback name="add_book">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="book_list" transfer-ownership="none">
              <doc xml:space="preserve">a #DhBookList.</doc>
              <type name="BookList" c:type="DhBookList*"/>
            </parameter>
            <parameter name="book" transfer-ownership="none">
              <doc xml:space="preserve">a #DhBook.</doc>
              <type name="Book" c:type="DhBook*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_book">
        <callback name="remove_book">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="book_list" transfer-ownership="none">
              <doc xml:space="preserve">a #DhBookList.</doc>
              <type name="BookList" c:type="DhBookList*"/>
            </parameter>
            <parameter name="book" transfer-ownership="none">
              <doc xml:space="preserve">a #DhBook.</doc>
              <type name="Book" c:type="DhBook*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_books">
        <callback name="get_books">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">the #GList of #DhBook's part
of @book_list.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Book"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="book_list" transfer-ownership="none">
              <doc xml:space="preserve">a #DhBookList.</doc>
              <type name="BookList" c:type="DhBookList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="BookListDirectory"
           c:symbol-prefix="book_list_directory"
           c:type="DhBookListDirectory"
           parent="BookList"
           glib:type-name="DhBookListDirectory"
           glib:get-type="dh_book_list_directory_get_type"
           glib:type-struct="BookListDirectoryClass">
      <constructor name="new"
                   c:identifier="dh_book_list_directory_new"
                   version="3.30">
        <doc xml:space="preserve">Returns a #DhBookListDirectory for @directory.

If a #DhBookListDirectory instance is still alive for @directory (according
to g_file_equal()), the same instance is returned with the reference count
increased by one, to avoid data duplication. If no #DhBookListDirectory
instance already exists for @directory, this function returns a new instance
with a reference count of one (so it's the responsibility of the caller to
keep the object alive if wanted, to avoid destroying and re-creating the same
#DhBookListDirectory repeatedly).</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #DhBookListDirectory for @directory.</doc>
          <type name="BookListDirectory" c:type="DhBookListDirectory*"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve">the #DhBookListDirectory:directory.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_directory"
              c:identifier="dh_book_list_directory_get_directory"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhBookListDirectory:directory.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list_directory" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookListDirectory.</doc>
            <type name="BookListDirectory" c:type="DhBookListDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="directory"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The directory, as a #GFile, containing a set of Devhelp books.</doc>
        <type name="Gio.File"/>
      </property>
      <field name="parent">
        <type name="BookList" c:type="DhBookList"/>
      </field>
      <field name="priv">
        <type name="BookListDirectoryPrivate"
              c:type="DhBookListDirectoryPrivate*"/>
      </field>
    </class>
    <record name="BookListDirectoryClass"
            c:type="DhBookListDirectoryClass"
            glib:is-gtype-struct-for="BookListDirectory">
      <field name="parent_class">
        <type name="BookListClass" c:type="DhBookListClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="BookListDirectoryPrivate"
            c:type="DhBookListDirectoryPrivate"
            disguised="1">
    </record>
    <record name="BookListPrivate" c:type="DhBookListPrivate" disguised="1">
    </record>
    <class name="BookManager"
           c:symbol-prefix="book_manager"
           c:type="DhBookManager"
           parent="GObject.Object"
           glib:type-name="DhBookManager"
           glib:get-type="dh_book_manager_get_type"
           glib:type-struct="BookManagerClass">
      <constructor name="new"
                   c:identifier="dh_book_manager_new"
                   deprecated="1"
                   deprecated-version="3.26">
        <doc-deprecated xml:space="preserve">the #DhBookManager class is deprecated.</doc-deprecated>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhBookManager object.</doc>
          <type name="BookManager" c:type="DhBookManager*"/>
        </return-value>
      </constructor>
      <method name="populate"
              c:identifier="dh_book_manager_populate"
              deprecated="1"
              deprecated-version="3.26">
        <doc-deprecated xml:space="preserve">the #DhBookManager class is deprecated.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="book_manager" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookManager.</doc>
            <type name="BookManager" c:type="DhBookManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="BookManagerClass"
            c:type="DhBookManagerClass"
            glib:is-gtype-struct-for="BookManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="BookTree"
           c:symbol-prefix="book_tree"
           c:type="DhBookTree"
           parent="Gtk.TreeView"
           glib:type-name="DhBookTree"
           glib:get-type="dh_book_tree_get_type"
           glib:type-struct="BookTreeClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="dh_book_tree_new">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhBookTree widget.</doc>
          <type name="BookTree" c:type="DhBookTree*"/>
        </return-value>
        <parameters>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhProfile, or %NULL for the default profile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_profile"
              c:identifier="dh_book_tree_get_profile"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhProfile of @tree.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookTree.</doc>
            <type name="BookTree" c:type="DhBookTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_link"
              c:identifier="dh_book_tree_get_selected_link"
              version="3.30">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the currently selected #DhLink in @tree,
or %NULL if the selection is empty or if a language group row is selected.
Unref with dh_link_unref() when no longer needed.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookTree.</doc>
            <type name="BookTree" c:type="DhBookTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_uri" c:identifier="dh_book_tree_select_uri">
        <doc xml:space="preserve">Selects the row corresponding to @uri. It searches in the tree a #DhLink
being at @uri (if it's an exact match), or containing @uri (if @uri contains
an anchor).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookTree.</doc>
            <type name="BookTree" c:type="DhBookTree*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the URI to select.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="profile"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #DhProfile. If set to %NULL, the default profile as returned by
dh_profile_get_default() is used.</doc>
        <type name="Profile"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.TreeView" c:type="GtkTreeView"/>
      </field>
      <glib:signal name="link-selected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">the selected #DhLink.</doc>
            <type name="Link"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BookTreeClass"
            c:type="DhBookTreeClass"
            glib:is-gtype-struct-for="BookTree">
      <field name="parent_class">
        <type name="Gtk.TreeViewClass" c:type="GtkTreeViewClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Completion"
           c:symbol-prefix="completion"
           c:type="DhCompletion"
           parent="GObject.Object"
           glib:type-name="DhCompletion"
           glib:get-type="dh_completion_get_type"
           glib:type-struct="CompletionClass">
      <constructor name="new" c:identifier="dh_completion_new" version="3.28">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhCompletion object.</doc>
          <type name="Completion" c:type="DhCompletion*"/>
        </return-value>
      </constructor>
      <function name="aggregate_complete"
                c:identifier="dh_completion_aggregate_complete"
                version="3.28">
        <doc xml:space="preserve">The same as dh_completion_complete(), but aggregated for several
#DhCompletion objects.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the completed prefix, or %NULL if a
longer prefix has not been found. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="completion_objects"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GList of
  #DhCompletion objects.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Completion"/>
            </type>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the string to complete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_string"
              c:identifier="dh_completion_add_string"
              version="3.28">
        <doc xml:space="preserve">Adds a string to the @completion object.

After adding all the strings you need to call dh_completion_sort().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="completion" transfer-ownership="none">
            <doc xml:space="preserve">a #DhCompletion.</doc>
            <type name="Completion" c:type="DhCompletion*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">a string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete"
              c:identifier="dh_completion_complete"
              version="3.28">
        <doc xml:space="preserve">This function does the equivalent of:
1. Searches the data structure of @completion to find all strings that have
   @prefix as prefix.
2. From the list found at step 1, find the longest prefix that still matches
   all the strings in the list.

This function assumes that @prefix and the strings contained in @completion
are in UTF-8. If all the strings are valid UTF-8, then the return value will
also be valid UTF-8 (it won't return a partial multi-byte character).</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the completed prefix, or %NULL if a
longer prefix has not been found. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="completion" transfer-ownership="none">
            <doc xml:space="preserve">a #DhCompletion.</doc>
            <type name="Completion" c:type="DhCompletion*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve">the string to complete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sort" c:identifier="dh_completion_sort" version="3.28">
        <doc xml:space="preserve">Sorts all the strings. It is required to call this function after adding
strings with dh_completion_add_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="completion" transfer-ownership="none">
            <doc xml:space="preserve">a #DhCompletion.</doc>
            <type name="Completion" c:type="DhCompletion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="CompletionPrivate" c:type="DhCompletionPrivate*"/>
      </field>
    </class>
    <record name="CompletionClass"
            c:type="DhCompletionClass"
            glib:is-gtype-struct-for="Completion">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="CompletionPrivate"
            c:type="DhCompletionPrivate"
            disguised="1">
    </record>
    <class name="KeywordModel"
           c:symbol-prefix="keyword_model"
           c:type="DhKeywordModel"
           parent="GObject.Object"
           glib:type-name="DhKeywordModel"
           glib:get-type="dh_keyword_model_get_type"
           glib:type-struct="KeywordModelClass">
      <implements name="Gtk.TreeModel"/>
      <constructor name="new" c:identifier="dh_keyword_model_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhKeywordModel object.</doc>
          <type name="KeywordModel" c:type="DhKeywordModel*"/>
        </return-value>
      </constructor>
      <method name="filter" c:identifier="dh_keyword_model_filter">
        <doc xml:space="preserve">Searches in the #DhBookList of @profile the list of #DhLink's that correspond
to @search_string, and fills the @model with that list (erasing the previous
content).

Attention, when calling this function the @model needs to be disconnected
from the #GtkTreeView, because the #GtkTreeModel signals are not emitted, to
improve the performances (sending a lot of signals is slow) and have a
simpler implementation. The previous row selection is anyway no longer
relevant.

Note that there is a maximum number of matches (configured internally). When
the maximum is reached the search is stopped, to avoid blocking the GUI
(since this function runs synchronously) if the @search_string contains for
example only one character. (And it is anyway not very useful to show to the
user tens of thousands search results).</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #DhLink that matches exactly
@search_string, or %NULL if no such #DhLink was found within the maximum
number of matches.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <instance-parameter name="model" transfer-ownership="none">
            <doc xml:space="preserve">a #DhKeywordModel.</doc>
            <type name="KeywordModel" c:type="DhKeywordModel*"/>
          </instance-parameter>
          <parameter name="search_string" transfer-ownership="none">
            <doc xml:space="preserve">a search query.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="current_book_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the ID of the book currently shown, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhProfile, or %NULL for the default profile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="KeywordModelClass"
            c:type="DhKeywordModelClass"
            glib:is-gtype-struct-for="KeywordModel">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="Link"
            c:type="DhLink"
            glib:type-name="DhLink"
            glib:get-type="dh_link_get_type"
            c:symbol-prefix="link">
      <constructor name="new" c:identifier="dh_link_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhLink.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the #DhLinkType. Must be different than %DH_LINK_TYPE_BOOK.</doc>
            <type name="LinkType" c:type="DhLinkType"/>
          </parameter>
          <parameter name="book_link" transfer-ownership="none">
            <doc xml:space="preserve">the #DhLink of type %DH_LINK_TYPE_BOOK for the book that the link
  is contained in.</doc>
            <type name="Link" c:type="DhLink*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the link.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="relative_url" transfer-ownership="none">
            <doc xml:space="preserve">the URL relative to the book base path. Can contain an anchor.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_book"
                   c:identifier="dh_link_new_book"
                   version="3.28">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhLink of type %DH_LINK_TYPE_BOOK.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <parameter name="base_path" transfer-ownership="none">
            <doc xml:space="preserve">the base path for the book.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="book_id" transfer-ownership="none">
            <doc xml:space="preserve">the book ID.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="book_title" transfer-ownership="none">
            <doc xml:space="preserve">the name of the link.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="relative_url" transfer-ownership="none">
            <doc xml:space="preserve">the URL relative to the book @base_path. Can contain an
anchor. Usually the index.html page.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="belongs_to_page"
              c:identifier="dh_link_belongs_to_page"
              version="3.28">
        <doc xml:space="preserve">This function permits to know if @link belongs to a certain page.

@page_id is usually the HTML filename without the `.html` extension. More
generally, @page_id must be a relative URL (relative to the book base path),
without the anchor nor the file extension.

For example if @link has the relative URL `"DhLink.html#dh-link-ref"`, then
this function will return %TRUE if the @page_id is `"DhLink"`.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @link belongs to @page_id.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
          <parameter name="page_id" transfer-ownership="none">
            <doc xml:space="preserve">a page ID, i.e. the filename without its extension.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="dh_link_compare">
        <doc xml:space="preserve">Compares the links @a and @b. This function is used to determine in which
order the links should be displayed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an integer less than zero if @a should appear before @b; zero if
there are no preferences; an integer greater than zero if @b should appear
before @a.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="gconstpointer"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_book_id" c:identifier="dh_link_get_book_id">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the ID of the book that the @link is contained in.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_book_title" c:identifier="dh_link_get_book_title">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the title of the book that the @link is contained in.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="dh_link_get_flags">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhLinkFlags of @link.</doc>
          <type name="LinkFlags" c:type="DhLinkFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_link_type" c:identifier="dh_link_get_link_type">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhLinkType of @link.</doc>
          <type name="LinkType" c:type="DhLinkType"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="dh_link_get_name">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the name of the @link. For a link of type %DH_LINK_TYPE_BOOK,
returns the book title.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="dh_link_get_uri">
        <doc xml:space="preserve">Gets the @link URI, by concateneting the book base path with the @link
relative URL.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the @link URI, or %NULL if getting the URI failed. Free
with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match_relative_url"
              c:identifier="dh_link_match_relative_url"
              version="3.28">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the relative URL of @link matches with @relative_url. There
is a special case for the index.html page, it can also match the empty
string.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
          <parameter name="relative_url" transfer-ownership="none">
            <doc xml:space="preserve">an URL relative to the book base path. Can contain an anchor.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="dh_link_ref">
        <doc xml:space="preserve">Increases the reference count of @link.

Not thread-safe.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the @link.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="dh_link_set_flags">
        <doc xml:space="preserve">Sets the flags of the link.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">the new flags of the link.</doc>
            <type name="LinkFlags" c:type="DhLinkFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="dh_link_unref">
        <doc xml:space="preserve">Decreases the reference count of @link.

Not thread-safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLink.</doc>
            <type name="Link" c:type="DhLink*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="LinkFlags"
              glib:type-name="DhLinkFlags"
              glib:get-type="dh_link_flags_get_type"
              c:type="DhLinkFlags">
      <member name="none"
              value="0"
              c:identifier="DH_LINK_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags set.</doc>
      </member>
      <member name="deprecated"
              value="1"
              c:identifier="DH_LINK_FLAGS_DEPRECATED"
              glib:nick="deprecated">
        <doc xml:space="preserve">The symbol that the link points to is deprecated.</doc>
      </member>
    </bitfield>
    <enumeration name="LinkType"
                 glib:type-name="DhLinkType"
                 glib:get-type="dh_link_type_get_type"
                 c:type="DhLinkType">
      <doc xml:space="preserve">The type of the content the link points to.</doc>
      <member name="book"
              value="0"
              c:identifier="DH_LINK_TYPE_BOOK"
              glib:nick="book">
        <doc xml:space="preserve">The top-level page of a #DhBook.</doc>
      </member>
      <member name="page"
              value="1"
              c:identifier="DH_LINK_TYPE_PAGE"
              glib:nick="page">
        <doc xml:space="preserve">A page.</doc>
      </member>
      <member name="keyword"
              value="2"
              c:identifier="DH_LINK_TYPE_KEYWORD"
              glib:nick="keyword">
        <doc xml:space="preserve">Another kind of keyword.</doc>
      </member>
      <member name="function"
              value="3"
              c:identifier="DH_LINK_TYPE_FUNCTION"
              glib:nick="function">
        <doc xml:space="preserve">A function keyword.</doc>
      </member>
      <member name="struct"
              value="4"
              c:identifier="DH_LINK_TYPE_STRUCT"
              glib:nick="struct">
        <doc xml:space="preserve">A struct keyword.</doc>
      </member>
      <member name="macro"
              value="5"
              c:identifier="DH_LINK_TYPE_MACRO"
              glib:nick="macro">
        <doc xml:space="preserve">A macro keyword.</doc>
      </member>
      <member name="enum"
              value="6"
              c:identifier="DH_LINK_TYPE_ENUM"
              glib:nick="enum">
        <doc xml:space="preserve">An enum keyword.</doc>
      </member>
      <member name="typedef"
              value="7"
              c:identifier="DH_LINK_TYPE_TYPEDEF"
              glib:nick="typedef">
        <doc xml:space="preserve">A typedef keyword.</doc>
      </member>
      <member name="property"
              value="8"
              c:identifier="DH_LINK_TYPE_PROPERTY"
              glib:nick="property">
        <doc xml:space="preserve">A property keyword.</doc>
      </member>
      <member name="signal"
              value="9"
              c:identifier="DH_LINK_TYPE_SIGNAL"
              glib:nick="signal">
        <doc xml:space="preserve">A signal keyword.</doc>
      </member>
      <function name="to_string" c:identifier="dh_link_type_to_string">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string representation of the #DhLinkType, translated in the
current language.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="link_type" transfer-ownership="none">
            <doc xml:space="preserve">a #DhLinkType.</doc>
            <type name="LinkType" c:type="DhLinkType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Notebook"
           c:symbol-prefix="notebook"
           c:type="DhNotebook"
           parent="Gtk.Notebook"
           glib:type-name="DhNotebook"
           glib:get-type="dh_notebook_get_type"
           glib:type-struct="NotebookClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dh_notebook_new" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhNotebook.</doc>
          <type name="Notebook" c:type="DhNotebook*"/>
        </return-value>
        <parameters>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhProfile, or %NULL for the default profile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active_tab"
              c:identifier="dh_notebook_get_active_tab"
              version="3.30">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #DhTab currently shown in @notebook.</doc>
          <type name="Tab" c:type="DhTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_web_view"
              c:identifier="dh_notebook_get_active_web_view"
              version="3.30">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #DhWebView of the active tab.</doc>
          <type name="WebView" c:type="DhWebView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_web_views"
              c:identifier="dh_notebook_get_all_web_views"
              version="3.30">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a #GList of all
  #DhWebView's contained in @notebook.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="WebView"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile"
              c:identifier="dh_notebook_get_profile"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhNotebook:profile.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_new_tab"
              c:identifier="dh_notebook_open_new_tab"
              version="3.30">
        <doc xml:space="preserve">Creates a new #DhTab and #DhTabLabel and appends them to the #GtkNotebook.

The #DhWebView will have the same #DhProfile as @notebook.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the URI to open, or %NULL for a blank page.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="switch_focus" transfer-ownership="none">
            <doc xml:space="preserve">whether to call gtk_notebook_set_current_page() on the new
  tab.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="profile"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #DhProfile. If set to %NULL, the default profile as returned by
dh_profile_get_default() is used.</doc>
        <type name="Profile"/>
      </property>
      <field name="parent">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv">
        <type name="NotebookPrivate" c:type="DhNotebookPrivate*"/>
      </field>
    </class>
    <record name="NotebookClass"
            c:type="DhNotebookClass"
            glib:is-gtype-struct-for="Notebook">
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NotebookPrivate" c:type="DhNotebookPrivate" disguised="1">
    </record>
    <class name="Profile"
           c:symbol-prefix="profile"
           c:type="DhProfile"
           parent="GObject.Object"
           glib:type-name="DhProfile"
           glib:get-type="dh_profile_get_type"
           glib:type-struct="ProfileClass">
      <function name="get_default"
                c:identifier="dh_profile_get_default"
                version="3.30">
        <doc xml:space="preserve">Gets the default #DhProfile object. It has the default #DhSettings object as
returned by dh_settings_get_default(), and the default #DhBookList object as
returned by dh_book_list_get_default().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default #DhProfile object.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
      </function>
      <method name="get_book_list"
              c:identifier="dh_profile_get_book_list"
              version="3.30">
        <doc xml:space="preserve">Gets the #DhBookList object of @profile. The returned object is guaranteed to
be the same for the lifetime of @profile.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhBookList of @profile.</doc>
          <type name="BookList" c:type="DhBookList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve">a #DhProfile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settings"
              c:identifier="dh_profile_get_settings"
              version="3.30">
        <doc xml:space="preserve">Gets the #DhSettings object of @profile. The returned object is guaranteed to
be the same for the lifetime of @profile.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhSettings of @profile.</doc>
          <type name="Settings" c:type="DhSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="profile" transfer-ownership="none">
            <doc xml:space="preserve">a #DhProfile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ProfilePrivate" c:type="DhProfilePrivate*"/>
      </field>
    </class>
    <class name="ProfileBuilder"
           c:symbol-prefix="profile_builder"
           c:type="DhProfileBuilder"
           parent="GObject.Object"
           glib:type-name="DhProfileBuilder"
           glib:get-type="dh_profile_builder_get_type"
           glib:type-struct="ProfileBuilderClass">
      <constructor name="new"
                   c:identifier="dh_profile_builder_new"
                   version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhProfileBuilder.</doc>
          <type name="ProfileBuilder" c:type="DhProfileBuilder*"/>
        </return-value>
      </constructor>
      <method name="create_object"
              c:identifier="dh_profile_builder_create_object"
              version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #DhProfile object.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhProfileBuilder.</doc>
            <type name="ProfileBuilder" c:type="DhProfileBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_book_list"
              c:identifier="dh_profile_builder_set_book_list"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhBookList object.

If you don't call this function, the default #DhBookList object as returned
by dh_book_list_get_default() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhProfileBuilder.</doc>
            <type name="ProfileBuilder" c:type="DhProfileBuilder*"/>
          </instance-parameter>
          <parameter name="book_list" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBookList.</doc>
            <type name="BookList" c:type="DhBookList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_settings"
              c:identifier="dh_profile_builder_set_settings"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings object.

If you don't call this function, the default #DhSettings object as returned
by dh_settings_get_default() will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhProfileBuilder.</doc>
            <type name="ProfileBuilder" c:type="DhProfileBuilder*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ProfileBuilderPrivate" c:type="DhProfileBuilderPrivate*"/>
      </field>
    </class>
    <record name="ProfileBuilderClass"
            c:type="DhProfileBuilderClass"
            glib:is-gtype-struct-for="ProfileBuilder">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ProfileBuilderPrivate"
            c:type="DhProfileBuilderPrivate"
            disguised="1">
    </record>
    <record name="ProfileClass"
            c:type="DhProfileClass"
            glib:is-gtype-struct-for="Profile">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ProfilePrivate" c:type="DhProfilePrivate" disguised="1">
    </record>
    <class name="SearchBar"
           c:symbol-prefix="search_bar"
           c:type="DhSearchBar"
           parent="Gtk.SearchBar"
           glib:type-name="DhSearchBar"
           glib:get-type="dh_search_bar_get_type"
           glib:type-struct="SearchBarClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dh_search_bar_new" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhSearchBar.</doc>
          <type name="SearchBar" c:type="DhSearchBar*"/>
        </return-value>
        <parameters>
          <parameter name="notebook" transfer-ownership="none">
            <doc xml:space="preserve">a #DhNotebook.</doc>
            <type name="Notebook" c:type="DhNotebook*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_notebook"
              c:identifier="dh_search_bar_get_notebook"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhSearchBar:notebook.</doc>
          <type name="Notebook" c:type="DhNotebook*"/>
        </return-value>
        <parameters>
          <instance-parameter name="search_bar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSearchBar.</doc>
            <type name="SearchBar" c:type="DhSearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="notebook"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The associated #DhNotebook. #DhSearchBar has a strong reference to
the #DhNotebook.</doc>
        <type name="Notebook"/>
      </property>
      <field name="parent">
        <type name="Gtk.SearchBar" c:type="GtkSearchBar"/>
      </field>
      <field name="priv">
        <type name="SearchBarPrivate" c:type="DhSearchBarPrivate*"/>
      </field>
    </class>
    <record name="SearchBarClass"
            c:type="DhSearchBarClass"
            glib:is-gtype-struct-for="SearchBar">
      <field name="parent_class">
        <type name="Gtk.SearchBarClass" c:type="GtkSearchBarClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SearchBarPrivate" c:type="DhSearchBarPrivate" disguised="1">
    </record>
    <class name="Settings"
           c:symbol-prefix="settings"
           c:type="DhSettings"
           parent="GObject.Object"
           glib:type-name="DhSettings"
           glib:get-type="dh_settings_get_type"
           glib:type-struct="SettingsClass">
      <function name="get_default"
                c:identifier="dh_settings_get_default"
                version="3.30">
        <doc xml:space="preserve">Gets the default #DhSettings object. It has the default #GSettings paths (see
#DhSettingsBuilder) and dh_settings_bind_all() has been called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default #DhSettings object.</doc>
          <type name="Settings" c:type="DhSettings*"/>
        </return-value>
      </function>
      <virtual-method name="books_disabled_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="fonts_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="bind_all"
              c:identifier="dh_settings_bind_all"
              version="3.30">
        <doc xml:space="preserve">Binds all the #DhSettings properties to their corresponding #GSettings keys.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bind_fonts"
              c:identifier="dh_settings_bind_fonts"
              version="3.30">
        <doc xml:space="preserve">Binds the #DhSettings:use-system-fonts, #DhSettings:variable-font and
#DhSettings:fixed-font properties to their corresponding #GSettings keys.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bind_group_books_by_language"
              c:identifier="dh_settings_bind_group_books_by_language"
              version="3.30">
        <doc xml:space="preserve">Binds the #DhSettings:group-books-by-language property to the corresponding
#GSettings key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="freeze_books_disabled_changed"
              c:identifier="dh_settings_freeze_books_disabled_changed"
              version="3.30">
        <doc xml:space="preserve">Tells @settings to not emit the #DhSettings::books-disabled-changed signal
until dh_settings_thaw_books_disabled_changed() is called.

A bit like g_object_freeze_notify(), except that there is no freeze count.

This function is useful if you call dh_settings_set_book_enabled() several
times in a row.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fixed_font"
              c:identifier="dh_settings_get_fixed_font"
              version="3.30">
        <doc xml:space="preserve">Warning: you probably want to use the dh_settings_get_selected_fonts()
function instead, to take into account the #DhSettings:use-system-fonts
property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the #DhSettings:fixed-font property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group_books_by_language"
              c:identifier="dh_settings_get_group_books_by_language"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the #DhSettings:group-books-by-language property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_fonts"
              c:identifier="dh_settings_get_selected_fonts"
              version="3.30">
        <doc xml:space="preserve">If #DhSettings:use-system-fonts is %TRUE, returns the system fonts. Otherwise
returns the values of the #DhSettings:variable-font and
#DhSettings:fixed-font properties.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="variable_font"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">location to store the font name for text with variable
  width. Free with g_free().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="fixed_font"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">location to store the font name for text with fixed
  width. Free with g_free().</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_use_system_fonts"
              c:identifier="dh_settings_get_use_system_fonts"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the #DhSettings:use-system-fonts property.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_variable_font"
              c:identifier="dh_settings_get_variable_font"
              version="3.30">
        <doc xml:space="preserve">Warning: you probably want to use the dh_settings_get_selected_fonts()
function instead, to take into account the #DhSettings:use-system-fonts
property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the #DhSettings:variable-font property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_book_enabled"
              c:identifier="dh_settings_is_book_enabled"
              version="3.30">
        <doc xml:space="preserve">Returns whether @book is enabled according to the "books-disabled" #GSettings
key. If the @book ID is present in "books-disabled", this function returns
%FALSE, otherwise %TRUE is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether @book is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_book_enabled"
              c:identifier="dh_settings_set_book_enabled"
              version="3.30">
        <doc xml:space="preserve">Modifies the "books-disabled" #GSettings key. It adds or removes the @book ID
from "books-disabled".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="book" transfer-ownership="none">
            <doc xml:space="preserve">a #DhBook.</doc>
            <type name="Book" c:type="DhBook*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fixed_font"
              c:identifier="dh_settings_set_fixed_font"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings:fixed-font property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="fixed_font" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group_books_by_language"
              c:identifier="dh_settings_set_group_books_by_language"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings:group-books-by-language property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="group_books_by_language" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_system_fonts"
              c:identifier="dh_settings_set_use_system_fonts"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings:use-system-fonts property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="use_system_fonts" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variable_font"
              c:identifier="dh_settings_set_variable_font"
              version="3.30">
        <doc xml:space="preserve">Sets the #DhSettings:variable-font property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
          <parameter name="variable_font" transfer-ownership="none">
            <doc xml:space="preserve">the new value.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_books_disabled_changed"
              c:identifier="dh_settings_thaw_books_disabled_changed"
              version="3.30">
        <doc xml:space="preserve">Stops the effect of dh_settings_freeze_books_disabled_changed(), and emits
the #DhSettings::books-disabled-changed signal.

A bit like g_object_thaw_notify(), except that there is no freeze count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettings.</doc>
            <type name="Settings" c:type="DhSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="fixed-font"
                version="3.30"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Font for text with fixed width, such as code examples.

This property is independent of #DhSettings:use-system-fonts.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="group-books-by-language"
                version="3.30"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether books should be grouped by programming language in the UI.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-system-fonts"
                version="3.30"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether to use the system default fonts.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="variable-font"
                version="3.30"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Font for text with variable width.

This property is independent of #DhSettings:use-system-fonts.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SettingsPrivate" c:type="DhSettingsPrivate*"/>
      </field>
      <glib:signal name="books-disabled-changed" when="first" version="3.30">
        <doc xml:space="preserve">The ::books-disabled-changed signal is emitted when the
"books-disabled" #GSettings key changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="fonts-changed" when="first" version="3.30">
        <doc xml:space="preserve">The ::fonts-changed signal is emitted when the return values of
dh_settings_get_selected_fonts() have potentially changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="SettingsBuilder"
           c:symbol-prefix="settings_builder"
           c:type="DhSettingsBuilder"
           parent="GObject.Object"
           glib:type-name="DhSettingsBuilder"
           glib:get-type="dh_settings_builder_get_type"
           glib:type-struct="SettingsBuilderClass">
      <constructor name="new"
                   c:identifier="dh_settings_builder_new"
                   version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #DhSettingsBuilder.</doc>
          <type name="SettingsBuilder" c:type="DhSettingsBuilder*"/>
        </return-value>
      </constructor>
      <method name="create_object"
              c:identifier="dh_settings_builder_create_object"
              version="3.30">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created #DhSettings object.</doc>
          <type name="Settings" c:type="DhSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettingsBuilder.</doc>
            <type name="SettingsBuilder" c:type="DhSettingsBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_contents_path"
              c:identifier="dh_settings_builder_set_contents_path"
              version="3.30">
        <doc xml:space="preserve">Sets the path for the "contents" schema.

If you don't call this function, the default path for this schema will be
used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettingsBuilder.</doc>
            <type name="SettingsBuilder" c:type="DhSettingsBuilder*"/>
          </instance-parameter>
          <parameter name="contents_path" transfer-ownership="none">
            <doc xml:space="preserve">the path for the "contents" schema.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fonts_path"
              c:identifier="dh_settings_builder_set_fonts_path"
              version="3.30">
        <doc xml:space="preserve">Sets the path for the "fonts" schema.

If you don't call this function, the default path for this schema will be
used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSettingsBuilder.</doc>
            <type name="SettingsBuilder" c:type="DhSettingsBuilder*"/>
          </instance-parameter>
          <parameter name="fonts_path" transfer-ownership="none">
            <doc xml:space="preserve">the path for the "fonts" schema.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SettingsBuilderPrivate"
              c:type="DhSettingsBuilderPrivate*"/>
      </field>
    </class>
    <record name="SettingsBuilderClass"
            c:type="DhSettingsBuilderClass"
            glib:is-gtype-struct-for="SettingsBuilder">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SettingsBuilderPrivate"
            c:type="DhSettingsBuilderPrivate"
            disguised="1">
    </record>
    <record name="SettingsClass"
            c:type="DhSettingsClass"
            glib:is-gtype-struct-for="Settings">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="books_disabled_changed">
        <callback name="books_disabled_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="settings" transfer-ownership="none">
              <type name="Settings" c:type="DhSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="fonts_changed">
        <callback name="fonts_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="settings" transfer-ownership="none">
              <type name="Settings" c:type="DhSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SettingsPrivate" c:type="DhSettingsPrivate" disguised="1">
    </record>
    <class name="Sidebar"
           c:symbol-prefix="sidebar"
           c:type="DhSidebar"
           parent="Gtk.Grid"
           glib:type-name="DhSidebar"
           glib:get-type="dh_sidebar_get_type"
           glib:type-struct="SidebarClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="dh_sidebar_new"
                   deprecated="1"
                   deprecated-version="3.30">
        <doc-deprecated xml:space="preserve">Use dh_sidebar_new2() instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhSidebar widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="book_manager"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhBookManager. This parameter is deprecated,
you should just pass %NULL.</doc>
            <type name="BookManager" c:type="DhBookManager*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new2" c:identifier="dh_sidebar_new2" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhSidebar widget.</doc>
          <type name="Sidebar" c:type="DhSidebar*"/>
        </return-value>
        <parameters>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhProfile, or %NULL for the default profile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="link_selected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
          <parameter name="link" transfer-ownership="none">
            <type name="Link" c:type="DhLink*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_profile"
              c:identifier="dh_sidebar_get_profile"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhProfile of @sidebar.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSidebar.</doc>
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_link"
              c:identifier="dh_sidebar_get_selected_link"
              version="3.30">
        <doc xml:space="preserve">Note: the return value of this function is not necessarily the same as the
last #DhLink emitted by the #DhSidebar::link-selected signal. See the
documentation of #DhSidebar::link-selected.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">the currently selected #DhLink in the
visible #GtkTreeView of @sidebar, or %NULL if the selection is empty or if a
language group row is selected. Unref with dh_link_unref() when no longer
needed.</doc>
          <type name="Link" c:type="DhLink*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSidebar.</doc>
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_uri" c:identifier="dh_sidebar_select_uri">
        <doc xml:space="preserve">Calls dh_book_tree_select_uri().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSidebar.</doc>
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the URI to select.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_focus"
              c:identifier="dh_sidebar_set_search_focus">
        <doc xml:space="preserve">Gives the focus to the search entry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSidebar.</doc>
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_search_string"
              c:identifier="dh_sidebar_set_search_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sidebar" transfer-ownership="none">
            <doc xml:space="preserve">a #DhSidebar.</doc>
            <type name="Sidebar" c:type="DhSidebar*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve">the string to search.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="profile"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #DhProfile. If set to %NULL, the default profile as returned by
dh_profile_get_default() is used.</doc>
        <type name="Profile"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <glib:signal name="link-selected" when="last">
        <doc xml:space="preserve">The ::link-selected signal is emitted when:
1. One row in one of the #GtkTreeView's is selected and contains a
   #DhLink (i.e. when the row is not a language group);
2. Or if there is an exact match returned by
   dh_keyword_model_filter() when a search occurs.

Note that dh_sidebar_get_selected_link() takes into account only the
former, not the latter. So the last @link emitted with this signal is
not necessarily the same as the current return value of
dh_sidebar_get_selected_link().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="link" transfer-ownership="none">
            <doc xml:space="preserve">the selected #DhLink.</doc>
            <type name="Link"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SidebarClass"
            c:type="DhSidebarClass"
            glib:is-gtype-struct-for="Sidebar">
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="link_selected">
        <callback name="link_selected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="sidebar" transfer-ownership="none">
              <type name="Sidebar" c:type="DhSidebar*"/>
            </parameter>
            <parameter name="link" transfer-ownership="none">
              <type name="Link" c:type="DhLink*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="DhTab"
           parent="Gtk.Grid"
           glib:type-name="DhTab"
           glib:get-type="dh_tab_get_type"
           glib:type-struct="TabClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dh_tab_new" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhTab.</doc>
          <type name="Tab" c:type="DhTab*"/>
        </return-value>
        <parameters>
          <parameter name="web_view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhWebView, or %NULL to create a #DhWebView with the
  default #DhProfile.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_web_view"
              c:identifier="dh_tab_get_web_view"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhTab:web-view.</doc>
          <type name="WebView" c:type="DhWebView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #DhTab.</doc>
            <type name="Tab" c:type="DhTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="web-view"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #DhWebView of the tab. If set to %NULL a #DhWebView is created
with the default #DhProfile.</doc>
        <type name="WebView"/>
      </property>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="TabPrivate" c:type="DhTabPrivate*"/>
      </field>
    </class>
    <record name="TabClass" c:type="DhTabClass" glib:is-gtype-struct-for="Tab">
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="TabLabel"
           c:symbol-prefix="tab_label"
           c:type="DhTabLabel"
           parent="Gtk.Grid"
           glib:type-name="DhTabLabel"
           glib:get-type="dh_tab_label_get_type"
           glib:type-struct="TabLabelClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="dh_tab_label_new" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhTabLabel.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">the associated #DhTab.</doc>
            <type name="Tab" c:type="DhTab*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_tab"
              c:identifier="dh_tab_label_get_tab"
              version="3.30">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the #DhTabLabel:tab.</doc>
          <type name="Tab" c:type="DhTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab_label" transfer-ownership="none">
            <doc xml:space="preserve">a #DhTabLabel.</doc>
            <type name="TabLabel" c:type="DhTabLabel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="tab"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The associated #DhTab. #DhTabLabel has a weak reference to the
#DhTab.</doc>
        <type name="Tab"/>
      </property>
      <field name="parent">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
      <field name="priv">
        <type name="TabLabelPrivate" c:type="DhTabLabelPrivate*"/>
      </field>
    </class>
    <record name="TabLabelClass"
            c:type="DhTabLabelClass"
            glib:is-gtype-struct-for="TabLabel">
      <field name="parent_class">
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="TabLabelPrivate" c:type="DhTabLabelPrivate" disguised="1">
    </record>
    <record name="TabPrivate" c:type="DhTabPrivate" disguised="1">
    </record>
    <class name="WebView"
           c:symbol-prefix="web_view"
           c:type="DhWebView"
           parent="WebKit2.WebView"
           glib:type-name="DhWebView"
           glib:get-type="dh_web_view_get_type"
           glib:type-struct="WebViewClass">
      <implements name="Atk.Implementor"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="dh_web_view_new" version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #DhWebView widget.</doc>
          <type name="WebView" c:type="DhWebView*"/>
        </return-value>
        <parameters>
          <parameter name="profile"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #DhProfile, or %NULL for the default profile.</doc>
            <type name="Profile" c:type="DhProfile*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="open_new_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_reset_zoom"
              c:identifier="dh_web_view_can_reset_zoom"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether calling dh_web_view_reset_zoom() will have an effect.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_zoom_in"
              c:identifier="dh_web_view_can_zoom_in"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether calling dh_web_view_zoom_in() will have an effect.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_zoom_out"
              c:identifier="dh_web_view_can_zoom_out"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether calling dh_web_view_zoom_out() will have an effect.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devhelp_title"
              c:identifier="dh_web_view_get_devhelp_title"
              version="3.30">
        <doc xml:space="preserve">An enhanced getter function for the #WebKitWebView:title property: when that
property is the empty string or %NULL, this function returns “Empty Page”
(translated).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the title of @view, suitable for a tab label or window title.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_profile"
              c:identifier="dh_web_view_get_profile"
              version="3.30">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #DhWebView:profile.</doc>
          <type name="Profile" c:type="DhProfile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_zoom"
              c:identifier="dh_web_view_reset_zoom"
              version="3.30">
        <doc xml:space="preserve">Reset the text size to the normal size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_next"
              c:identifier="dh_web_view_search_next"
              version="3.30">
        <doc xml:space="preserve">Like webkit_find_controller_search_next(), but takes into account whether
dh_web_view_set_search_text() has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_previous"
              c:identifier="dh_web_view_search_previous"
              version="3.30">
        <doc xml:space="preserve">Like webkit_find_controller_search_previous(), but takes into account whether
dh_web_view_set_search_text() has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_search_text"
              c:identifier="dh_web_view_set_search_text"
              version="3.30">
        <doc xml:space="preserve">A more convenient API (for Devhelp needs) than #WebKitFindController. If
@search_text is not empty, it calls webkit_find_controller_search() if not
already done. If @search_text is empty or %NULL, it calls
webkit_find_controller_search_finish().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
          <parameter name="search_text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the search string, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="zoom_in" c:identifier="dh_web_view_zoom_in" version="3.30">
        <doc xml:space="preserve">Makes the text larger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="zoom_out"
              c:identifier="dh_web_view_zoom_out"
              version="3.30">
        <doc xml:space="preserve">Makes the text smaller.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #DhWebView.</doc>
            <type name="WebView" c:type="DhWebView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="profile"
                version="3.30"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #DhProfile. If set to %NULL, the default profile as returned by
dh_profile_get_default() is used.</doc>
        <type name="Profile"/>
      </property>
      <field name="parent">
        <type name="WebKit2.WebView" c:type="WebKitWebView"/>
      </field>
      <field name="priv">
        <type name="WebViewPrivate" c:type="DhWebViewPrivate*"/>
      </field>
      <glib:signal name="open-new-tab" when="last" version="3.30">
        <doc xml:space="preserve">The ::open-new-tab signal is emitted when a URI needs to be opened in
a new #DhWebView. This happens when doing Ctrl+click or middle click
on a link.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">the URI to open.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WebViewClass"
            c:type="DhWebViewClass"
            glib:is-gtype-struct-for="WebView">
      <field name="parent_class">
        <type name="WebKit2.WebViewClass" c:type="WebKitWebViewClass"/>
      </field>
      <field name="open_new_tab">
        <callback name="open_new_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="WebView" c:type="DhWebView*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" c:type="gpointer" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="WebViewPrivate" c:type="DhWebViewPrivate" disguised="1">
    </record>
    <function name="application_window_bind_sidebar_and_notebook"
              c:identifier="dh_application_window_bind_sidebar_and_notebook"
              version="3.30">
      <doc xml:space="preserve">Binds @sidebar and @notebook:
- When the #DhSidebar::link-selected signal is emitted, open the URI in the
  active #DhWebView.
- On #GtkNotebook::switch-page or when the user clicks on a link, calls
  dh_sidebar_select_uri() with the new active URI.

You need to call this function when the #DhNotebook is empty, i.e. before
adding the first #DhTab.

Note that this function doesn't take a “self” window parameter, to be more
flexible: it is possible to have several pairs of #DhSidebar/#DhNotebook per
window, to show different #DhProfile's.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sidebar" transfer-ownership="none">
          <doc xml:space="preserve">a #DhSidebar.</doc>
          <type name="Sidebar" c:type="DhSidebar*"/>
        </parameter>
        <parameter name="notebook" transfer-ownership="none">
          <doc xml:space="preserve">an empty #DhNotebook.</doc>
          <type name="Notebook" c:type="DhNotebook*"/>
        </parameter>
      </parameters>
    </function>
    <function name="finalize" c:identifier="dh_finalize" version="3.26">
      <doc xml:space="preserve">Free the resources allocated by Devhelp. For example it unrefs the singleton
objects.

It is not mandatory to call this function, it's just to be friendlier to
memory debugging tools. This function is meant to be called at the end of
main(). It can be called several times.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="init" c:identifier="dh_init">
      <doc xml:space="preserve">Initializes the Devhelp library (e.g. for the internationalization).

This function can be called several times, but is meant to be called at the
beginning of main(), before any other Devhelp function call.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="link_type_to_string"
              c:identifier="dh_link_type_to_string"
              moved-to="LinkType.to_string">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a string representation of the #DhLinkType, translated in the
current language.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="link_type" transfer-ownership="none">
          <doc xml:space="preserve">a #DhLinkType.</doc>
          <type name="LinkType" c:type="DhLinkType"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
