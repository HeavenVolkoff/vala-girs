<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="Clutter" version="1.0"/>
  <include name="Cogl" version="1.0"/>
  <include name="CoglPango" version="1.0"/>
  <include name="GL" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="Json" version="1.0"/>
  <include name="Pango" version="1.0"/>
  <include name="PangoCairo" version="1.0"/>
  <include name="PangoFT2" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="fontconfig" version="2.0"/>
  <include name="freetype2" version="2.0"/>
  <include name="libxml2" version="2.0"/>
  <package name="cheese"/>
  <namespace name="Cheese"
             version="3.0"
             shared-library="libcheese.so.3"
             c:identifier-prefixes="Cheese"
             c:symbol-prefixes="cheese">
    <class name="Camera"
           c:symbol-prefix="camera"
           c:type="CheeseCamera"
           parent="GObject.Object"
           glib:type-name="CheeseCamera"
           glib:get-type="cheese_camera_get_type"
           glib:type-struct="CameraClass">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <constructor name="new" c:identifier="cheese_camera_new">
        <doc xml:whitespace="preserve">Create a new #CheeseCamera object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #CheeseCamera</doc>
          <type name="Camera" c:type="CheeseCamera*"/>
        </return-value>
        <parameters>
          <parameter name="video_texture" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #ClutterTexture</doc>
            <type name="Clutter.Texture" c:type="ClutterTexture*"/>
          </parameter>
          <parameter name="camera_device_node"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">the device node path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="x_resolution" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y_resolution" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="photo_saved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="photo_taken">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_flags_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_state" transfer-ownership="none">
            <type name="Gst.State" c:type="GstState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="video_saved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="connect_effect_texture"
              c:identifier="cheese_camera_connect_effect_texture">
        <doc xml:whitespace="preserve">Connect the supplied @texture to the @camera, using @effect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="effect" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #CheeseEffect</doc>
            <type name="Effect" c:type="CheeseEffect*"/>
          </parameter>
          <parameter name="texture" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #ClutterTexture</doc>
            <type name="Clutter.Texture" c:type="ClutterTexture*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_balance_property_range"
              c:identifier="cheese_camera_get_balance_property_range">
        <doc xml:whitespace="preserve">Get the minimum, maximum and default values for the requested @property of
the @camera.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the operation was successful, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the balance property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">minimum value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="max"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">maximum value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="def"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">default value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_camera_devices"
              c:identifier="cheese_camera_get_camera_devices">
        <doc xml:whitespace="preserve">Get the list of #CheeseCameraDevice objects, representing active video
capture devices on the system.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">an array of #CheeseCameraDevice</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CameraDevice"/>
          </array>
        </return-value>
      </method>
      <method name="get_current_video_format"
              c:identifier="cheese_camera_get_current_video_format">
        <doc xml:whitespace="preserve">Get the #CheeseVideoFormat that is currently set on the @camera.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #CheeseVideoFormat set on the #CheeseCamera</doc>
          <type name="VideoFormat" c:type="const CheeseVideoFormat*"/>
        </return-value>
      </method>
      <method name="get_recorded_time"
              c:identifier="cheese_camera_get_recorded_time">
        <doc xml:whitespace="preserve">Get a string representation of the playing time
of the current video recording</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A string with the time representation.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_selected_device"
              c:identifier="cheese_camera_get_selected_device">
        <doc xml:whitespace="preserve">Get the currently-selected #CheeseCameraDevice of the @camera.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #CheeseCameraDevice, or %NULL if there is no selected device</doc>
          <type name="CameraDevice" c:type="CheeseCameraDevice*"/>
        </return-value>
      </method>
      <method name="get_video_formats"
              c:identifier="cheese_camera_get_video_formats">
        <doc xml:whitespace="preserve">Gets the list of #CheeseVideoFormat supported by the selected
#CheeseCameraDevice on the @camera.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of #CheeseVideoFormat, or %NULL if there was no device selected</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VideoFormat"/>
          </type>
        </return-value>
      </method>
      <method name="play" c:identifier="cheese_camera_play">
        <doc xml:whitespace="preserve">Set the state of the GStreamer pipeline associated with the #CheeseCamera to
playing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_balance_property"
              c:identifier="cheese_camera_set_balance_property">
        <doc xml:whitespace="preserve">Set the requested @property on the @camera to @value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="property" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the balance property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">value to be set</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_by_device_node"
              c:identifier="cheese_camera_set_device_by_device_node">
        <doc xml:whitespace="preserve">Set the active video capture device of the @camera, matching by device node
path.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">the device node path</doc>
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_effect" c:identifier="cheese_camera_set_effect">
        <doc xml:whitespace="preserve">Set the @effect on the @camera.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="effect" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #CheeseEffect</doc>
            <type name="Effect" c:type="CheeseEffect*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_video_format"
              c:identifier="cheese_camera_set_video_format">
        <doc xml:whitespace="preserve">Sets a #CheeseVideoFormat on a #CheeseCamera, restarting the video stream if
necessary.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #CheeseVideoFormat</doc>
            <type name="VideoFormat" c:type="CheeseVideoFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="cheese_camera_setup" throws="1">
        <doc xml:whitespace="preserve">Setup a video capture device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">UUID of the video capture device, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_video_recording"
              c:identifier="cheese_camera_start_video_recording">
        <doc xml:whitespace="preserve">Start a video recording with the @camera and save it to @filename.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the name of the video file to where the recording will be saved</doc>
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="cheese_camera_stop">
        <doc xml:whitespace="preserve">Set the state of the GStreamer pipeline associated with the #CheeseCamera to
NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="stop_video_recording"
              c:identifier="cheese_camera_stop_video_recording">
        <doc xml:whitespace="preserve">Stop recording video on the @camera.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="switch_camera_device"
              c:identifier="cheese_camera_switch_camera_device">
        <doc xml:whitespace="preserve">Toggle the playing/recording state of the @camera.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="take_photo" c:identifier="cheese_camera_take_photo">
        <doc xml:whitespace="preserve">Save a photo taken with the @camera to a new file at @filename.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success, %FALSE if an error occurred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the file to save a photo to</doc>
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_photo_pixbuf"
              c:identifier="cheese_camera_take_photo_pixbuf">
        <doc xml:whitespace="preserve">Take a photo with the @camera and emit it in the ::capture-start signal as a
#GdkPixbuf.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the photo was successfully captured, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="toggle_effects_pipeline"
              c:identifier="cheese_camera_toggle_effects_pipeline">
        <doc xml:whitespace="preserve">Control whether the effects pipeline is enabled for @camera.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="active" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if effects pipeline is active, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="device-node" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The path to the device node for the video capture device.</doc>
        <type name="utf8"/>
      </property>
      <property name="format" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The format of the video capture device.</doc>
        <type name="VideoFormat"/>
      </property>
      <property name="num-camera-devices" transfer-ownership="none">
        <doc xml:whitespace="preserve">The currently number of camera devices available for being used.</doc>
        <type name="guint"/>
      </property>
      <property name="video-texture" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">The video texture for the #CheeseCamera to render into.</doc>
        <type name="gpointer"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CameraPrivate" c:type="CheeseCameraPrivate*"/>
      </field>
      <glib:signal name="photo-saved" when="last" action="1">
        <doc xml:whitespace="preserve">Emitted when a photo was saved to disk.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="photo-taken" when="last" action="1">
        <doc xml:whitespace="preserve">Emitted when a photo was taken.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-flags-changed" when="last" action="1">
        <doc xml:whitespace="preserve">Emitted when the state of the @camera #GstElement changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="video-saved" when="last" action="1">
        <doc xml:whitespace="preserve">Emitted when a video was saved to disk.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="CameraClass"
            c:type="CheeseCameraClass"
            glib:is-gtype-struct-for="Camera">
      <doc xml:whitespace="preserve">Class for #CheeseCamera.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="photo_saved">
        <callback name="photo_saved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="camera" transfer-ownership="none">
              <type name="Camera" c:type="CheeseCamera*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="photo_taken">
        <callback name="photo_taken">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="camera" transfer-ownership="none">
              <type name="Camera" c:type="CheeseCamera*"/>
            </parameter>
            <parameter name="pixbuf" transfer-ownership="none">
              <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="video_saved">
        <callback name="video_saved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="camera" transfer-ownership="none">
              <type name="Camera" c:type="CheeseCamera*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_flags_changed">
        <callback name="state_flags_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="camera" transfer-ownership="none">
              <type name="Camera" c:type="CheeseCamera*"/>
            </parameter>
            <parameter name="new_state" transfer-ownership="none">
              <type name="Gst.State" c:type="GstState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CameraDevice"
           c:symbol-prefix="camera_device"
           c:type="CheeseCameraDevice"
           parent="GObject.Object"
           glib:type-name="CheeseCameraDevice"
           glib:get-type="cheese_camera_device_get_type"
           glib:type-struct="CameraDeviceClass">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="cheese_camera_device_new"
                   throws="1">
        <doc xml:whitespace="preserve">Tries to create a new #CheeseCameraDevice with the supplied parameters. If
construction fails, %NULL is returned, and @error is set.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #CheeseCameraDevice, or %NULL</doc>
          <type name="CameraDevice" c:type="CheeseCameraDevice*"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:whitespace="preserve">UUID of the device, as supplied by udev</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="device_node" transfer-ownership="none">
            <doc xml:whitespace="preserve">path to the device node of the video capture device</doc>
            <type name="filename" c:type="gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">human-readable name of the device, as supplied by udev</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="v4l_api_version" transfer-ownership="none">
            <doc xml:whitespace="preserve">version of the Video4Linux API that the device uses. Currently either 1 or 2</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_best_format"
              c:identifier="cheese_camera_device_get_best_format">
        <doc xml:whitespace="preserve">Get the #CheeseVideoFormat with the highest rsolution for this @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the highest-resolution supported #CheeseVideoFormat</doc>
          <type name="VideoFormat" c:type="CheeseVideoFormat*"/>
        </return-value>
      </method>
      <method name="get_caps_for_format"
              c:identifier="cheese_camera_device_get_caps_for_format">
        <doc xml:whitespace="preserve">Get the #GstCaps for the given @format on the @device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstCaps for the given @format</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #CheeseVideoFormat</doc>
            <type name="VideoFormat" c:type="CheeseVideoFormat*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_node"
              c:identifier="cheese_camera_device_get_device_node">
        <doc xml:whitespace="preserve">Get the path to the device node associated with the @device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the path to the device node of the video capture device</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_format_list"
              c:identifier="cheese_camera_device_get_format_list">
        <doc xml:whitespace="preserve">Get the sorted list of #CheeseVideoFormat that the @device supports.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">list of #CheeseVideoFormat</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="VideoFormat"/>
          </type>
        </return-value>
      </method>
      <method name="get_name" c:identifier="cheese_camera_device_get_name">
        <doc xml:whitespace="preserve">Get a human-readable name for the device, as reported by udev, which is
suitable for display to a user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the human-readable name of the video capture device</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_src" c:identifier="cheese_camera_device_get_src">
        <doc xml:whitespace="preserve">Get the name of the source GStreamer element for the @device. Currently,
this will be either v4lsrc or v4l2src, depending on the version of the
Video4Linux API that the device supports.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the source GStreamer element</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_uuid" c:identifier="cheese_camera_device_get_uuid">
        <doc xml:whitespace="preserve">Get the UUID of the @device, as reported by udev.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the UUID of the video capture device</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <property name="device-node"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Path to the device node of the video capture device.</doc>
        <type name="utf8"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Human-readable name of the video capture device, for display to the user.</doc>
        <type name="utf8"/>
      </property>
      <property name="uuid"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">UUID of the video capture device.</doc>
        <type name="utf8"/>
      </property>
      <property name="v4l-api-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Version of the Video4Linux API that the device supports. Currently, either
1 or 2 are supported.</doc>
        <type name="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CameraDevicePrivate" c:type="CheeseCameraDevicePrivate*"/>
      </field>
    </class>
    <record name="CameraDeviceClass"
            c:type="CheeseCameraDeviceClass"
            glib:is-gtype-struct-for="CameraDevice">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="CameraDeviceMonitor"
           c:symbol-prefix="camera_device_monitor"
           c:type="CheeseCameraDeviceMonitor"
           parent="GObject.Object"
           glib:type-name="CheeseCameraDeviceMonitor"
           glib:get-type="cheese_camera_device_monitor_get_type"
           glib:type-struct="CameraDeviceMonitorClass">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <constructor name="new" c:identifier="cheese_camera_device_monitor_new">
        <doc xml:whitespace="preserve">Returns a new #CheeseCameraDeviceMonitor object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #CheeseCameraDeviceMonitor object.</doc>
          <type name="CameraDeviceMonitor"
                c:type="CheeseCameraDeviceMonitor*"/>
        </return-value>
      </constructor>
      <virtual-method name="added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <type name="CameraDevice" c:type="CheeseCameraDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="coldplug"
              c:identifier="cheese_camera_device_monitor_coldplug">
        <doc xml:whitespace="preserve">Enumerate plugged in cameras and emit ::added for those which already exist.
This is only required when your program starts, so be sure to connect to
at least the ::added signal before calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CameraDeviceMonitorPrivate"
              c:type="CheeseCameraDeviceMonitorPrivate*"/>
      </field>
      <glib:signal name="added" when="last" action="1">
        <doc xml:whitespace="preserve">The ::added signal is emitted when a camera is added, or on start-up
after cheese_camera_device_monitor_coldplug() is called.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new #CheeseCameraDevice representing the video capture device</doc>
            <type name="CameraDevice"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last" action="1">
        <doc xml:whitespace="preserve">The ::removed signal is emitted when a camera is unplugged, or disabled on
the system.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:whitespace="preserve">UUID for the device on the system</doc>
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CameraDeviceMonitorClass"
            c:type="CheeseCameraDeviceMonitorClass"
            glib:is-gtype-struct-for="CameraDeviceMonitor">
      <doc xml:whitespace="preserve">Class for #CheeseCameraDeviceMonitor.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="added">
        <callback name="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="monitor" transfer-ownership="none">
              <type name="CameraDeviceMonitor"
                    c:type="CheeseCameraDeviceMonitor*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="CameraDevice" c:type="CheeseCameraDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="monitor" transfer-ownership="none">
              <type name="CameraDeviceMonitor"
                    c:type="CheeseCameraDeviceMonitor*"/>
            </parameter>
            <parameter name="uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="CameraDeviceMonitorPrivate"
            c:type="CheeseCameraDeviceMonitorPrivate"
            disguised="1">
    </record>
    <record name="CameraDevicePrivate"
            c:type="CheeseCameraDevicePrivate"
            disguised="1">
    </record>
    <enumeration name="CameraError" c:type="CheeseCameraError">
      <doc xml:whitespace="preserve">Errors that can occur during camera setup, when calling
cheese_camera_setup().</doc>
      <member name="unknown"
              value="0"
              c:identifier="CHEESE_CAMERA_ERROR_UNKNOWN"/>
      <member name="element_not_found"
              value="1"
              c:identifier="CHEESE_CAMERA_ERROR_ELEMENT_NOT_FOUND"/>
      <member name="no_device"
              value="2"
              c:identifier="CHEESE_CAMERA_ERROR_NO_DEVICE"/>
    </enumeration>
    <record name="CameraPrivate" c:type="CheeseCameraPrivate" disguised="1">
    </record>
    <class name="Effect"
           c:symbol-prefix="effect"
           c:type="CheeseEffect"
           parent="GObject.Object"
           glib:type-name="CheeseEffect"
           glib:get-type="cheese_effect_get_type"
           glib:type-struct="EffectClass">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <constructor name="new" c:identifier="cheese_effect_new">
        <doc xml:whitespace="preserve">Create a new #CheeseEffect.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #CheeseEffect</doc>
          <type name="Effect" c:type="CheeseEffect*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the effect</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pipeline_desc" transfer-ownership="none">
            <doc xml:whitespace="preserve">GStreamer pipeline of the new effect</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="load_effects" c:identifier="cheese_effect_load_effects">
        <doc xml:whitespace="preserve">Load effects from standard directories, including the user's data directory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a list of #CheeseEffect, or %NULL if no effects could be found</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Effect"/>
          </type>
        </return-value>
      </function>
      <function name="load_from_file"
                c:identifier="cheese_effect_load_from_file">
        <doc xml:whitespace="preserve">Load effect from file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #CheeseEffect, or %NULL on error</doc>
          <type name="Effect" c:type="CheeseEffect*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">name of the file containing the effect specification</doc>
            <type name="filename" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="disable_preview"
              c:identifier="cheese_effect_disable_preview">
        <doc xml:whitespace="preserve">Disable the preview of a #CheeseEffect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="enable_preview"
              c:identifier="cheese_effect_enable_preview">
        <doc xml:whitespace="preserve">Enable the preview of a #CheeseEffect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="cheese_effect_get_name">
        <doc xml:whitespace="preserve">Get the human-readable name of the @effect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the human-readable name of the effect.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_pipeline_desc"
              c:identifier="cheese_effect_get_pipeline_desc">
        <doc xml:whitespace="preserve">Get the Gstreamer pipeline description of the @effect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the Gstreamer pipeline description of the effect.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="is_preview_connected"
              c:identifier="cheese_effect_is_preview_connected">
        <doc xml:whitespace="preserve">Get whether the @effect is connected to a video stream, for previews.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the preview is connected, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="control-valve" writable="1" transfer-ownership="none">
        <doc xml:whitespace="preserve">If the control valve is active, then the effect is currently connected to
a video stream, for previews.</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Name of the effect, for display in a UI.</doc>
        <type name="utf8"/>
      </property>
      <property name="pipeline-desc"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Description of the GStreamer pipeline associated with the effect.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EffectPrivate" c:type="CheeseEffectPrivate*"/>
      </field>
    </class>
    <record name="EffectClass"
            c:type="CheeseEffectClass"
            glib:is-gtype-struct-for="Effect">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="EffectPrivate" c:type="CheeseEffectPrivate" disguised="1">
    </record>
    <class name="FileUtil"
           c:symbol-prefix="fileutil"
           c:type="CheeseFileUtil"
           parent="GObject.Object"
           glib:type-name="CheeseFileUtil"
           glib:get-type="cheese_fileutil_get_type"
           glib:type-struct="FileUtilClass">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <constructor name="new" c:identifier="cheese_fileutil_new">
        <doc xml:whitespace="preserve">Create a new #CheeseFileUtil object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #CheeseFileUtil</doc>
          <type name="FileUtil" c:type="CheeseFileUtil*"/>
        </return-value>
      </constructor>
      <method name="get_new_media_filename"
              c:identifier="cheese_fileutil_get_new_media_filename">
        <doc xml:whitespace="preserve">Creates a filename for one of the three media types: photo, photo burst or
video. If a filename for a photo burst image was previously created, this
function increments the burst count automatically. To start a new burst,
first call cheese_fileutil_reset_burst().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new filename</doc>
          <type name="filename" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of media to create a filename for</doc>
            <type name="MediaMode" c:type="CheeseMediaMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_photo_path"
              c:identifier="cheese_fileutil_get_photo_path">
        <doc xml:whitespace="preserve">Get the path where Cheese photo files are stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the Cheese photo path</doc>
          <type name="filename" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_video_path"
              c:identifier="cheese_fileutil_get_video_path">
        <doc xml:whitespace="preserve">Get the path where Cheese video files are stored.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the Cheese video path</doc>
          <type name="filename" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="reset_burst" c:identifier="cheese_fileutil_reset_burst">
        <doc xml:whitespace="preserve">Resets the burst counter, so that calling
cheese_fileutil_get_new_media_filename() with a photo burst starts a new
burst of photos.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FileUtilPrivate" c:type="CheeseFileUtilPrivate*"/>
      </field>
    </class>
    <record name="FileUtilClass"
            c:type="CheeseFileUtilClass"
            glib:is-gtype-struct-for="FileUtil">
      <doc xml:whitespace="preserve">Use the accessor functions below.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FileUtilPrivate"
            c:type="CheeseFileUtilPrivate"
            disguised="1">
    </record>
    <enumeration name="MediaMode" c:type="CheeseMediaMode">
      <doc xml:whitespace="preserve">The media type, used for generating filenames with
cheese_fileutil_get_new_media_filename().</doc>
      <member name="photo" value="0" c:identifier="CHEESE_MEDIA_MODE_PHOTO"/>
      <member name="video" value="1" c:identifier="CHEESE_MEDIA_MODE_VIDEO"/>
      <member name="burst" value="2" c:identifier="CHEESE_MEDIA_MODE_BURST"/>
    </enumeration>
    <constant name="PHOTO_NAME_SUFFIX"
              value=".jpg"
              c:type="CHEESE_PHOTO_NAME_SUFFIX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_NAME_SUFFIX"
              value=".webm"
              c:type="CHEESE_VIDEO_NAME_SUFFIX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="VideoFormat"
            c:type="CheeseVideoFormat"
            glib:type-name="CheeseVideoFormat"
            glib:get-type="cheese_video_format_get_type"
            c:symbol-prefix="video_format">
      <doc xml:whitespace="preserve">A description of the resolution, in pixels, of the format to capture with a
#CheeseCameraDevice.</doc>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <enumeration name="WidgetState"
                 glib:type-name="CheeseWidgetState"
                 glib:get-type="cheese_widget_state_get_type"
                 c:type="CheeseWidgetState">
      <member name="none"
              value="0"
              c:identifier="CHEESE_WIDGET_STATE_NONE"
              glib:nick="none"/>
      <member name="ready"
              value="1"
              c:identifier="CHEESE_WIDGET_STATE_READY"
              glib:nick="ready"/>
      <member name="error"
              value="2"
              c:identifier="CHEESE_WIDGET_STATE_ERROR"
              glib:nick="error"/>
    </enumeration>
  </namespace>
</repository>
