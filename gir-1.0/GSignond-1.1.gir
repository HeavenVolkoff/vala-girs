<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <c:include name="gsignond.h"/>
  <namespace name="GSignond"
             version="1.1"
             shared-library="libgsignond-common.so.1"
             c:identifier-prefixes="GSignond"
             c:symbol-prefixes="gsignond">
    <class name="AccessControlManager"
           c:symbol-prefix="access_control_manager"
           c:type="GSignondAccessControlManager"
           parent="GObject.Object"
           glib:type-name="GSignondAccessControlManager"
           glib:get-type="gsignond_access_control_manager_get_type"
           glib:type-struct="AccessControlManagerClass">
      <doc xml:space="preserve">Opaque #GSignondAccessControlManager data structure.</doc>
      <virtual-method name="acl_is_valid" invoker="acl_is_valid">
        <doc xml:space="preserve">Checks if the specified peer is allowed to set the specified access
control list. gsignond_access_control_manager_peer_is_owner_of_identity()
is used before calling this method to verify identity ownership.

The default implementation always returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the ACL is valid, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="identity_acl" transfer-ownership="none">
            <doc xml:space="preserve">access control list
for the identity.</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="SecurityContext"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="peer_is_allowed_to_use_identity"
                      invoker="peer_is_allowed_to_use_identity">
        <doc xml:space="preserve">Checks if specified peer is allowed to access the specified identity.

The default implementation goes over items in @identity_acl, using
gsignond_security_context_check() to check them against @peer_ctx.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the peer is allowed to use the identity, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="owner_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the identity owner.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="identity_acl" transfer-ownership="none">
            <doc xml:space="preserve">access control list
for the identity in question. Includes the @owner_ctx as well.</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="SecurityContext"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="peer_is_owner_of_identity"
                      invoker="peer_is_owner_of_identity">
        <doc xml:space="preserve">Checks if the peer specified in @peer_ctx is the owner of the identity.

The default implementation is using gsignond_security_context_check()
to check @peer_ctx against @owner_ctx directly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the peer is the owner to use the identity, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="owner_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the identity owner.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="security_context_of_keychain"
                      invoker="security_context_of_keychain">
        <doc xml:space="preserve">Retrieves security context of the keychain application. Keychain application
has a special management access to all stored identities and is able to
perform deletion of all identities from storage.

The default implementation returns a context either set in #GSignondConfig,
or if not set, a value specified through a configure --enable-keychain
option (see
&lt;link linkend="gsignond-building"&gt;Building gsignond&lt;/link&gt;), or if that is not
set either then an empty string "" is returned.

If gSSO was compiled
with --enable-debug and SSO_KEYCHAIN_SYSCTX environment variable is set, then
the value of that variable is used to set the returned system context instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">security context of the keychain application.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="security_context_of_peer"
                      invoker="security_context_of_peer">
        <doc xml:space="preserve">Retrieves and sets #GSignondSecurityContext of the specified peer.

The default implementation sets the app context as it was passed, and sets
the system context to the binary path of the process that is determined from
@peer_fd and @peer_service parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">instance of security context to be set.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </parameter>
          <parameter name="peer_fd" transfer-ownership="none">
            <doc xml:space="preserve">file descriptor of the peer connection if using peer-to-peer dbus, -1 otherwise.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="peer_service" transfer-ownership="none">
            <doc xml:space="preserve">g_dbus_method_invocation_get_sender() of the peer connection, if not using peer-to-peer dbus, NULL otherwise</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="peer_app_ctx" transfer-ownership="none">
            <doc xml:space="preserve">application context of the peer connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="acl_is_valid"
              c:identifier="gsignond_access_control_manager_acl_is_valid">
        <doc xml:space="preserve">Checks if the specified peer is allowed to set the specified access
control list. gsignond_access_control_manager_peer_is_owner_of_identity()
is used before calling this method to verify identity ownership.

The default implementation always returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the ACL is valid, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="identity_acl" transfer-ownership="none">
            <doc xml:space="preserve">access control list
for the identity.</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="SecurityContext"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="peer_is_allowed_to_use_identity"
              c:identifier="gsignond_access_control_manager_peer_is_allowed_to_use_identity">
        <doc xml:space="preserve">Checks if specified peer is allowed to access the specified identity.

The default implementation goes over items in @identity_acl, using
gsignond_security_context_check() to check them against @peer_ctx.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the peer is allowed to use the identity, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="owner_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the identity owner.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="identity_acl" transfer-ownership="none">
            <doc xml:space="preserve">access control list
for the identity in question. Includes the @owner_ctx as well.</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="SecurityContext"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="peer_is_owner_of_identity"
              c:identifier="gsignond_access_control_manager_peer_is_owner_of_identity">
        <doc xml:space="preserve">Checks if the peer specified in @peer_ctx is the owner of the identity.

The default implementation is using gsignond_security_context_check()
to check @peer_ctx against @owner_ctx directly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the peer is the owner to use the identity, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the peer connection.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
          <parameter name="owner_ctx" transfer-ownership="none">
            <doc xml:space="preserve">security context of the identity owner.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="security_context_of_keychain"
              c:identifier="gsignond_access_control_manager_security_context_of_keychain">
        <doc xml:space="preserve">Retrieves security context of the keychain application. Keychain application
has a special management access to all stored identities and is able to
perform deletion of all identities from storage.

The default implementation returns a context either set in #GSignondConfig,
or if not set, a value specified through a configure --enable-keychain
option (see
&lt;link linkend="gsignond-building"&gt;Building gsignond&lt;/link&gt;), or if that is not
set either then an empty string "" is returned.

If gSSO was compiled
with --enable-debug and SSO_KEYCHAIN_SYSCTX environment variable is set, then
the value of that variable is used to set the returned system context instead.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">security context of the keychain application.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="security_context_of_peer"
              c:identifier="gsignond_access_control_manager_security_context_of_peer">
        <doc xml:space="preserve">Retrieves and sets #GSignondSecurityContext of the specified peer.

The default implementation sets the app context as it was passed, and sets
the system context to the binary path of the process that is determined from
@peer_fd and @peer_service parameters.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </instance-parameter>
          <parameter name="peer_ctx" transfer-ownership="none">
            <doc xml:space="preserve">instance of security context to be set.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </parameter>
          <parameter name="peer_fd" transfer-ownership="none">
            <doc xml:space="preserve">file descriptor of the peer connection if using peer-to-peer dbus, -1 otherwise.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="peer_service" transfer-ownership="none">
            <doc xml:space="preserve">g_dbus_method_invocation_get_sender() of the peer connection, if not using peer-to-peer dbus, NULL otherwise</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="peer_app_ctx" transfer-ownership="none">
            <doc xml:space="preserve">application context of the peer connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Config"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="config">
        <type name="Config" c:type="GSignondConfig*"/>
      </field>
      <field name="priv">
        <type name="AccessControlManagerPrivate"
              c:type="GSignondAccessControlManagerPrivate*"/>
      </field>
    </class>
    <record name="AccessControlManagerClass"
            c:type="GSignondAccessControlManagerClass"
            glib:is-gtype-struct-for="AccessControlManager">
      <doc xml:space="preserve">#GSignondAccessControlManagerClass class containing pointers to class methods.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="security_context_of_peer">
        <callback name="security_context_of_peer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="AccessControlManager"
                    c:type="GSignondAccessControlManager*"/>
            </parameter>
            <parameter name="peer_ctx" transfer-ownership="none">
              <doc xml:space="preserve">instance of security context to be set.</doc>
              <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
            </parameter>
            <parameter name="peer_fd" transfer-ownership="none">
              <doc xml:space="preserve">file descriptor of the peer connection if using peer-to-peer dbus, -1 otherwise.</doc>
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="peer_service" transfer-ownership="none">
              <doc xml:space="preserve">g_dbus_method_invocation_get_sender() of the peer connection, if not using peer-to-peer dbus, NULL otherwise</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="peer_app_ctx" transfer-ownership="none">
              <doc xml:space="preserve">application context of the peer connection.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="peer_is_allowed_to_use_identity">
        <callback name="peer_is_allowed_to_use_identity">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the peer is allowed to use the identity, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="AccessControlManager"
                    c:type="GSignondAccessControlManager*"/>
            </parameter>
            <parameter name="peer_ctx" transfer-ownership="none">
              <doc xml:space="preserve">security context of the peer connection.</doc>
              <type name="SecurityContext"
                    c:type="const GSignondSecurityContext*"/>
            </parameter>
            <parameter name="owner_ctx" transfer-ownership="none">
              <doc xml:space="preserve">security context of the identity owner.</doc>
              <type name="SecurityContext"
                    c:type="const GSignondSecurityContext*"/>
            </parameter>
            <parameter name="identity_acl" transfer-ownership="none">
              <doc xml:space="preserve">access control list
for the identity in question. Includes the @owner_ctx as well.</doc>
              <type name="GLib.List" c:type="const GList*">
                <type name="SecurityContext"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="peer_is_owner_of_identity">
        <callback name="peer_is_owner_of_identity">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the peer is the owner to use the identity, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="AccessControlManager"
                    c:type="GSignondAccessControlManager*"/>
            </parameter>
            <parameter name="peer_ctx" transfer-ownership="none">
              <doc xml:space="preserve">security context of the peer connection.</doc>
              <type name="SecurityContext"
                    c:type="const GSignondSecurityContext*"/>
            </parameter>
            <parameter name="owner_ctx" transfer-ownership="none">
              <doc xml:space="preserve">security context of the identity owner.</doc>
              <type name="SecurityContext"
                    c:type="const GSignondSecurityContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="acl_is_valid">
        <callback name="acl_is_valid">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the ACL is valid, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="AccessControlManager"
                    c:type="GSignondAccessControlManager*"/>
            </parameter>
            <parameter name="peer_ctx" transfer-ownership="none">
              <doc xml:space="preserve">security context of the peer connection.</doc>
              <type name="SecurityContext"
                    c:type="const GSignondSecurityContext*"/>
            </parameter>
            <parameter name="identity_acl" transfer-ownership="none">
              <doc xml:space="preserve">access control list
for the identity.</doc>
              <type name="GLib.List" c:type="const GList*">
                <type name="SecurityContext"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="security_context_of_keychain">
        <callback name="security_context_of_keychain">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">security context of the keychain application.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="AccessControlManager"
                    c:type="GSignondAccessControlManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AccessControlManagerPrivate"
            c:type="GSignondAccessControlManagerPrivate"
            disguised="1">
    </record>
    <constant name="CONFIG_DBUS_TIMEOUTS"
              value="ObjectTimeouts"
              c:type="GSIGNOND_CONFIG_DBUS_TIMEOUTS">
      <doc xml:space="preserve">A prefix for dbus timeout keys. Should be used only when defining new keys.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_GENERAL"
              value="General"
              c:type="GSIGNOND_CONFIG_GENERAL">
      <doc xml:space="preserve">A prefix for general keys. Should be used only when defining new keys.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Config"
           c:symbol-prefix="config"
           c:type="GSignondConfig"
           parent="GObject.Object"
           glib:type-name="GSignondConfig"
           glib:get-type="gsignond_config_get_type"
           glib:type-struct="ConfigClass">
      <doc xml:space="preserve">Opaque structure for the object.</doc>
      <constructor name="new" c:identifier="gsignond_config_new">
        <doc xml:space="preserve">Create a #GSignondConfig object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an instance of #GSignondConfig. gSSO extensions should not use this
as they're already provided with a config object when they're created.</doc>
          <type name="Config" c:type="GSignondConfig*"/>
        </return-value>
      </constructor>
      <method name="get_integer" c:identifier="gsignond_config_get_integer">
        <doc xml:space="preserve">Get an integer configuration value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value corresponding to the key as an integer. If the key does not
exist or cannot be converted to the integer, 0 is returned.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an instance of #GSignondConfig</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="gsignond_config_get_string">
        <doc xml:space="preserve">Get a string configuration value.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the value corresponding to the key as string. If the key
does not exist, %NULL is returned.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an instance of #GSignondConfig</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_integer" c:identifier="gsignond_config_set_integer">
        <doc xml:space="preserve">Sets the configuration value to the provided integer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an instance of #GSignondConfig</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="gsignond_config_set_string">
        <doc xml:space="preserve">Sets the configuration value to the provided string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an instance of #GSignondConfig</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigPrivate" c:type="GSignondConfigPrivate*"/>
      </field>
    </class>
    <record name="ConfigClass"
            c:type="GSignondConfigClass"
            glib:is-gtype-struct-for="Config">
      <doc xml:space="preserve">Opaque structure for the class.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ConfigPrivate" c:type="GSignondConfigPrivate" disguised="1">
    </record>
    <class name="Credentials"
           c:symbol-prefix="credentials"
           c:type="GSignondCredentials"
           parent="GObject.Object"
           glib:type-name="GSignondCredentials"
           glib:get-type="gsignond_credentials_get_type"
           glib:type-struct="CredentialsClass">
      <doc xml:space="preserve">Opaque #GSignondCredentials data structure.</doc>
      <constructor name="new" c:identifier="gsignond_credentials_new">
        <doc xml:space="preserve">Creates a new empty #GSignondCredentials object</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the #GSignondCredentials object</doc>
          <type name="Credentials" c:type="GSignondCredentials*"/>
        </return-value>
      </constructor>
      <method name="equal" c:identifier="gsignond_credentials_equal">
        <doc xml:space="preserve">Compares elements of two GSignondCredentials object for equality.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if id, username and password are same for both credential
objects, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="one" transfer-ownership="none">
            <doc xml:space="preserve">the first credential to be compared.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
          <parameter name="two" transfer-ownership="none">
            <doc xml:space="preserve">the second credential to be compared.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gsignond_credentials_get_id">
        <doc xml:space="preserve">Gets the identity id</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the id</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose id is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="gsignond_credentials_get_password">
        <doc xml:space="preserve">Gets the password from the #GSignondCredentials object</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the password if the object is valid, %NULL otherwise.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose password is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="gsignond_credentials_get_username">
        <doc xml:space="preserve">Gets the username of the #GSignondCredentials object</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the username if the object is valid,
%NULL otherwise.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose username is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="gsignond_credentials_set_data">
        <doc xml:space="preserve">Sets the data of the #GSignondCredentials.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose data is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity id associated with the credentials.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">the username.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">the password.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="gsignond_credentials_set_id">
        <doc xml:space="preserve">Sets the identity id of the #GSignondCredentials object</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose id is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the id.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="gsignond_credentials_set_password">
        <doc xml:space="preserve">Sets the password of the GSignondCredentials object</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose password is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
          <parameter name="password"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the password.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="gsignond_credentials_set_username">
        <doc xml:space="preserve">Sets the username of the GSignondCredentials object</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the object whose username is to be set.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </instance-parameter>
          <parameter name="username"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the username.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CredentialsPrivate" c:type="GSignondCredentialsPrivate*"/>
      </field>
    </class>
    <record name="CredentialsClass"
            c:type="GSignondCredentialsClass"
            glib:is-gtype-struct-for="Credentials">
      <doc xml:space="preserve">Opaque #GSignondCredentialsClass data structure.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CredentialsPrivate"
            c:type="GSignondCredentialsPrivate"
            disguised="1">
    </record>
    <class name="Dictionary"
           c:symbol-prefix="dictionary"
           c:type="GSignondDictionary"
           parent="GObject.Object"
           glib:type-name="GSignondDictionary"
           glib:get-type="gsignond_dictionary_get_type"
           glib:type-struct="DictionaryClass">
      <doc xml:space="preserve">Opaque #GSignondDictionary data structure.</doc>
      <constructor name="new" c:identifier="gsignond_dictionary_new">
        <doc xml:space="preserve">Creates a new instance of #GSignondDictionary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GSignondDictionary instance.</doc>
          <type name="Dictionary" c:type="GSignondDictionary*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="gsignond_dictionary_new_from_variant">
        <doc xml:space="preserve">Converts the #GVariant to #GSignondDictionary. This is useful for example if
the dictionary needs to be deserialized, or if it's contained in another
#GSignondDictionary and has been retrieved using gsignond_dictionary_get().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondDictionary if successful, NULL otherwise.</doc>
          <type name="Dictionary" c:type="GSignondDictionary*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="contains" c:identifier="gsignond_dictionary_contains">
        <doc xml:space="preserve">Checks if the @dict contains @key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if found, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gsignond_dictionary_copy">
        <doc xml:space="preserve">Creates a copy of the dictionary.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondDictionary object containing the same
keys and values than @other.</doc>
          <type name="Dictionary" c:type="GSignondDictionary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="gsignond_dictionary_get">
        <doc xml:space="preserve">Retrieves a #GVariant value from the dictionary. This can be used to retrieve
a value of an arbitrary type, and then convert it manually to a specific type
using #GVariant methods. For most commonly used types, also getters that
return the specific type directly are provided (gsignond_dictionary_get_string()
and similar).</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the value; %NULL is returned in case of
failure (for example if the entry corresponding to the supplied key doesn't
exist).</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the key to look up in the dictionary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean"
              c:identifier="gsignond_dictionary_get_boolean">
        <doc xml:space="preserve">Retrieves a gboolean value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was retrieved successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">points to the location where the value should be set</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int32" c:identifier="gsignond_dictionary_get_int32">
        <doc xml:space="preserve">Retrieves a int32 value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was retrieved successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">points to the location where the value should be set</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int64" c:identifier="gsignond_dictionary_get_int64">
        <doc xml:space="preserve">Retrieves a int64 value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was retrieved successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">points to the location where the value should be set</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="gsignond_dictionary_get_string">
        <doc xml:space="preserve">Retrieves a string value.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the value if it was retrieved successfully,
%NULL otherwise.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_table" c:identifier="gsignond_dictionary_get_table">
        <doc xml:space="preserve">Get the #GHashTable associated to the #GSignondDictionary.

It should not be modified.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GHashTable
contained into the #GSignondDictionary.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.Variant"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uint32" c:identifier="gsignond_dictionary_get_uint32">
        <doc xml:space="preserve">Retrieves a uint32 value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was retrieved successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">points to the location where the value should be set</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uint64" c:identifier="gsignond_dictionary_get_uint64">
        <doc xml:space="preserve">Retrieves a uint64 value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was retrieved successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to look up</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">points to the location where the value should be set</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gsignond_dictionary_remove">
        <doc xml:space="preserve">Removes key-value pair in the dictionary as per key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key which needs to be removed from the dictionary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="gsignond_dictionary_set">
        <doc xml:space="preserve">Adds or replaces key-value pair in the dictionary. This allows to set a value
of an arbitrary type: it first needs to be converted to a #GVariant. For most
commonly used types also type-specific setters are provided.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to be set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to be set</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="gsignond_dictionary_set_boolean">
        <doc xml:space="preserve">Sets or replaces a gboolean value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int32" c:identifier="gsignond_dictionary_set_int32">
        <doc xml:space="preserve">Sets or replaces a int32 value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int64" c:identifier="gsignond_dictionary_set_int64">
        <doc xml:space="preserve">Sets or replaces a int64 value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="gsignond_dictionary_set_string">
        <doc xml:space="preserve">Sets or replaces a string value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint32" c:identifier="gsignond_dictionary_set_uint32">
        <doc xml:space="preserve">Sets or replaces a uint32 value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint64" c:identifier="gsignond_dictionary_set_uint64">
        <doc xml:space="preserve">Sets or replaces a uint64 value in the dictionary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the value was set or replaced successfully, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">value to set</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="gsignond_dictionary_to_variant">
        <doc xml:space="preserve">Converts the #GSignondDictionary to a #GVariant. The result can be serialized
or put into another #GSignondDictionary using gsignond_dictionary_set().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#GVariant object if successful,
%NULL otherwise.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_variant_builder"
              c:identifier="gsignond_dictionary_to_variant_builder">
        <doc xml:space="preserve">Converts the #GSignondDictionary to a #GVariantBuilder of type
G_VARIANT_TYPE_VARDICT.

Caller should use g_variant_builder_unref() on the return value when it is
no longer needed.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#GVariantBuilder if successful,
%NULL otherwise.</doc>
          <type name="GLib.VariantBuilder" c:type="GVariantBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondDictionary</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DictionaryPrivate" c:type="GSignondDictionaryPrivate*"/>
      </field>
    </class>
    <record name="DictionaryClass"
            c:type="GSignondDictionaryClass"
            glib:is-gtype-struct-for="Dictionary">
      <doc xml:space="preserve">Opaque #GSignondDictionaryClass data structure.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DictionaryPrivate"
            c:type="GSignondDictionaryPrivate"
            disguised="1">
    </record>
    <enumeration name="Error"
                 c:type="GSignondError"
                 glib:error-domain="gsignond">
      <doc xml:space="preserve">This enum provides a list of errors that plugins and extensions can use.</doc>
      <member name="none" value="0" c:identifier="GSIGNOND_ERROR_NONE">
        <doc xml:space="preserve">No error</doc>
      </member>
      <member name="unknown" value="1" c:identifier="GSIGNOND_ERROR_UNKNOWN">
        <doc xml:space="preserve">Catch-all for errors not distinguished by another code.</doc>
      </member>
      <member name="internal_server"
              value="2"
              c:identifier="GSIGNOND_ERROR_INTERNAL_SERVER">
        <doc xml:space="preserve">Signon Daemon internal error.</doc>
      </member>
      <member name="internal_communication"
              value="3"
              c:identifier="GSIGNOND_ERROR_INTERNAL_COMMUNICATION">
        <doc xml:space="preserve">Communication with Signon Daemon error.</doc>
      </member>
      <member name="permission_denied"
              value="4"
              c:identifier="GSIGNOND_ERROR_PERMISSION_DENIED">
        <doc xml:space="preserve">The operation cannot be performed due to insufficient client permissions.</doc>
      </member>
      <member name="encryption_failure"
              value="5"
              c:identifier="GSIGNOND_ERROR_ENCRYPTION_FAILURE">
        <doc xml:space="preserve">Failure during data encryption/decryption.</doc>
      </member>
      <member name="auth_service_err"
              value="100"
              c:identifier="GSIGNOND_ERROR_AUTH_SERVICE_ERR">
        <doc xml:space="preserve">Placeholder to rearrange enumeration - AuthService specific</doc>
      </member>
      <member name="method_not_known"
              value="101"
              c:identifier="GSIGNOND_ERROR_METHOD_NOT_KNOWN">
        <doc xml:space="preserve">The method with this name is not found.</doc>
      </member>
      <member name="service_not_available"
              value="102"
              c:identifier="GSIGNOND_ERROR_SERVICE_NOT_AVAILABLE">
        <doc xml:space="preserve">The service is temporarily unavailable.</doc>
      </member>
      <member name="invalid_query"
              value="103"
              c:identifier="GSIGNOND_ERROR_INVALID_QUERY">
        <doc xml:space="preserve">Parameters for the query are invalid.</doc>
      </member>
      <member name="identity_err"
              value="200"
              c:identifier="GSIGNOND_ERROR_IDENTITY_ERR">
        <doc xml:space="preserve">Placeholder to rearrange enumeration - Identity specific</doc>
      </member>
      <member name="method_not_available"
              value="201"
              c:identifier="GSIGNOND_ERROR_METHOD_NOT_AVAILABLE">
        <doc xml:space="preserve">The requested method is not available.</doc>
      </member>
      <member name="identity_not_found"
              value="202"
              c:identifier="GSIGNOND_ERROR_IDENTITY_NOT_FOUND">
        <doc xml:space="preserve">The identity matching this Identity object was not found on the service.</doc>
      </member>
      <member name="store_failed"
              value="203"
              c:identifier="GSIGNOND_ERROR_STORE_FAILED">
        <doc xml:space="preserve">Storing credentials failed.</doc>
      </member>
      <member name="remove_failed"
              value="204"
              c:identifier="GSIGNOND_ERROR_REMOVE_FAILED">
        <doc xml:space="preserve">Removing credentials failed.</doc>
      </member>
      <member name="sign_out_failed"
              value="205"
              c:identifier="GSIGNOND_ERROR_SIGN_OUT_FAILED">
        <doc xml:space="preserve">SignOut failed.</doc>
      </member>
      <member name="identity_operation_canceled"
              value="206"
              c:identifier="GSIGNOND_ERROR_IDENTITY_OPERATION_CANCELED">
        <doc xml:space="preserve">Identity operation was canceled by user.</doc>
      </member>
      <member name="credentials_not_available"
              value="207"
              c:identifier="GSIGNOND_ERROR_CREDENTIALS_NOT_AVAILABLE">
        <doc xml:space="preserve">Query failed.</doc>
      </member>
      <member name="reference_not_found"
              value="208"
              c:identifier="GSIGNOND_ERROR_REFERENCE_NOT_FOUND">
        <doc xml:space="preserve">Trying to remove nonexistent reference.</doc>
      </member>
      <member name="auth_session_err"
              value="300"
              c:identifier="GSIGNOND_ERROR_AUTH_SESSION_ERR">
        <doc xml:space="preserve">Placeholder to rearrange enumeration - AuthSession/PluginInterface specific</doc>
      </member>
      <member name="mechanism_not_available"
              value="301"
              c:identifier="GSIGNOND_ERROR_MECHANISM_NOT_AVAILABLE">
        <doc xml:space="preserve">The requested mechanism is not available.</doc>
      </member>
      <member name="missing_data"
              value="302"
              c:identifier="GSIGNOND_ERROR_MISSING_DATA">
        <doc xml:space="preserve">The SessionData object does not contain necessary information.</doc>
      </member>
      <member name="invalid_credentials"
              value="303"
              c:identifier="GSIGNOND_ERROR_INVALID_CREDENTIALS">
        <doc xml:space="preserve">The supplied credentials are invalid for the mechanism implementation.</doc>
      </member>
      <member name="not_authorized"
              value="304"
              c:identifier="GSIGNOND_ERROR_NOT_AUTHORIZED">
        <doc xml:space="preserve">Authorization failed.</doc>
      </member>
      <member name="wrong_state"
              value="305"
              c:identifier="GSIGNOND_ERROR_WRONG_STATE">
        <doc xml:space="preserve">An operation method has been called in a wrong state.</doc>
      </member>
      <member name="operation_not_supported"
              value="306"
              c:identifier="GSIGNOND_ERROR_OPERATION_NOT_SUPPORTED">
        <doc xml:space="preserve">The operation is not supported by the mechanism implementation.</doc>
      </member>
      <member name="no_connection"
              value="307"
              c:identifier="GSIGNOND_ERROR_NO_CONNECTION">
        <doc xml:space="preserve">No Network connetion.</doc>
      </member>
      <member name="network" value="308" c:identifier="GSIGNOND_ERROR_NETWORK">
        <doc xml:space="preserve">Network connetion failed.</doc>
      </member>
      <member name="ssl" value="309" c:identifier="GSIGNOND_ERROR_SSL">
        <doc xml:space="preserve">Ssl connection failed.</doc>
      </member>
      <member name="runtime" value="310" c:identifier="GSIGNOND_ERROR_RUNTIME">
        <doc xml:space="preserve">Casting SessionData into subclass failed</doc>
      </member>
      <member name="session_canceled"
              value="311"
              c:identifier="GSIGNOND_ERROR_SESSION_CANCELED">
        <doc xml:space="preserve">Challenge was cancelled.</doc>
      </member>
      <member name="timed_out"
              value="312"
              c:identifier="GSIGNOND_ERROR_TIMED_OUT">
        <doc xml:space="preserve">Challenge was timed out.</doc>
      </member>
      <member name="user_interaction"
              value="313"
              c:identifier="GSIGNOND_ERROR_USER_INTERACTION">
        <doc xml:space="preserve">User interaction dialog failed</doc>
      </member>
      <member name="operation_failed"
              value="314"
              c:identifier="GSIGNOND_ERROR_OPERATION_FAILED">
        <doc xml:space="preserve">Temporary failure in authentication.</doc>
      </member>
      <member name="encryption_failed"
              value="315"
              c:identifier="GSIGNOND_ERROR_ENCRYPTION_FAILED">
        <doc xml:space="preserve">Failure during data encryption/decryption.</doc>
      </member>
      <member name="tos_not_accepted"
              value="316"
              c:identifier="GSIGNOND_ERROR_TOS_NOT_ACCEPTED">
        <doc xml:space="preserve">User declined Terms of Service.</doc>
      </member>
      <member name="forgot_password"
              value="317"
              c:identifier="GSIGNOND_ERROR_FORGOT_PASSWORD">
        <doc xml:space="preserve">User requested reset password sequence.</doc>
      </member>
      <member name="method_or_mechanism_not_allowed"
              value="318"
              c:identifier="GSIGNOND_ERROR_METHOD_OR_MECHANISM_NOT_ALLOWED">
        <doc xml:space="preserve">Method or mechanism not allowed for this identity.</doc>
      </member>
      <member name="incorrect_date"
              value="319"
              c:identifier="GSIGNOND_ERROR_INCORRECT_DATE">
        <doc xml:space="preserve">Date time incorrect on device.</doc>
      </member>
      <member name="user_err"
              value="400"
              c:identifier="GSIGNOND_ERROR_USER_ERR">
        <doc xml:space="preserve">Placeholder to rearrange enumeration - User space specific</doc>
      </member>
    </enumeration>
    <class name="Extension"
           c:symbol-prefix="extension"
           c:type="GSignondExtension"
           parent="GObject.Object"
           glib:type-name="GSignondExtension"
           glib:get-type="gsignond_extension_get_type"
           glib:type-struct="ExtensionClass">
      <doc xml:space="preserve">Opaque #GSignondExtension data structure.</doc>
      <virtual-method name="get_access_control_manager"
                      invoker="get_access_control_manager">
        <doc xml:space="preserve">Factory method to get a singleton access control manager object. See
#GSignondAccessControlManager for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">access control manager object instance.</doc>
          <type name="AccessControlManager"
                c:type="GSignondAccessControlManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_extension_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_extension_version">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secret_storage" invoker="get_secret_storage">
        <doc xml:space="preserve">Factory method to get a singleton secret storage object. See
#GSignondSecretStorage for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">secret storage object instance.</doc>
          <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_storage_manager" invoker="get_storage_manager">
        <doc xml:space="preserve">Factory method to get a singleton storage manager object. See
#GSignondStorageManager for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">storage manager object instance.</doc>
          <type name="StorageManager" c:type="GSignondStorageManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_access_control_manager"
              c:identifier="gsignond_extension_get_access_control_manager">
        <doc xml:space="preserve">Factory method to get a singleton access control manager object. See
#GSignondAccessControlManager for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">access control manager object instance.</doc>
          <type name="AccessControlManager"
                c:type="GSignondAccessControlManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gsignond_extension_get_name">
        <doc xml:space="preserve">Get a human readable name of the extension. Default implementation
returns "default".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">name of the extension.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secret_storage"
              c:identifier="gsignond_extension_get_secret_storage">
        <doc xml:space="preserve">Factory method to get a singleton secret storage object. See
#GSignondSecretStorage for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">secret storage object instance.</doc>
          <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_storage_manager"
              c:identifier="gsignond_extension_get_storage_manager">
        <doc xml:space="preserve">Factory method to get a singleton storage manager object. See
#GSignondStorageManager for the description of the default implementation.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">storage manager object instance.</doc>
          <type name="StorageManager" c:type="GSignondStorageManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve">configuration object instance.</doc>
            <type name="Config" c:type="GSignondConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="gsignond_extension_get_version">
        <doc xml:space="preserve">Get version of the extension, split into four bytes in order from MSB to LSB;
major, minor, patchlevel, build. Default implementation returns 0.</doc>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="Extension" c:type="GSignondExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ExtensionPrivate" c:type="GSignondExtensionPrivate*"/>
      </field>
    </class>
    <record name="ExtensionClass"
            c:type="GSignondExtensionClass"
            glib:is-gtype-struct-for="Extension">
      <doc xml:space="preserve">#GSignondExtensionClass class containing pointers to class methods.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_extension_name">
        <callback name="get_extension_name">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Extension" c:type="GSignondExtension*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_extension_version">
        <callback name="get_extension_version">
          <return-value transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Extension" c:type="GSignondExtension*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_storage_manager">
        <callback name="get_storage_manager">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">storage manager object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="Extension" c:type="GSignondExtension*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve">configuration object instance.</doc>
              <type name="Config" c:type="GSignondConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_secret_storage">
        <callback name="get_secret_storage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">secret storage object instance.</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="Extension" c:type="GSignondExtension*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve">configuration object instance.</doc>
              <type name="Config" c:type="GSignondConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_access_control_manager">
        <callback name="get_access_control_manager">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">access control manager object instance.</doc>
            <type name="AccessControlManager"
                  c:type="GSignondAccessControlManager*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="Extension" c:type="GSignondExtension*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve">configuration object instance.</doc>
              <type name="Config" c:type="GSignondConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ExtensionPrivate"
            c:type="GSignondExtensionPrivate"
            disguised="1">
    </record>
    <interface name="Plugin"
               c:symbol-prefix="plugin"
               c:type="GSignondPlugin"
               glib:type-name="GSignondPlugin"
               glib:get-type="gsignond_plugin_get_type"
               glib:type-struct="PluginInterface">
      <doc xml:space="preserve">Opaque #GSignondPlugin data structure.</doc>
      <virtual-method name="cancel" invoker="cancel">
        <doc xml:space="preserve">This method cancels an ongoing authentication session. The plugin implementations
should issue a #GSignondPlugin::error signal with #GSIGNOND_ERROR_SESSION_CANCELED
error, and prepare for a new authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh" invoker="refresh">
        <doc xml:space="preserve">This method asks the plugin to refresh the UI. The plugin responds with
#GSignondPlugin::refreshed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">UI refresh parameters</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request" invoker="request">
        <doc xml:space="preserve">This method provides the plugin with additional parameters for the session
after the plugin has asked for it via #GSignondPlugin::response signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">additional parameters for the session</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_initial" invoker="request_initial">
        <doc xml:space="preserve">This method starts a new authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">parameters for the session</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
          <parameter name="identity_method_cache" transfer-ownership="none">
            <doc xml:space="preserve">data from persistent storage, saved previously via
#GSignondPlugin::store signal</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve">mechanism to use for the authentication</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="user_action_finished"
                      invoker="user_action_finished">
        <doc xml:space="preserve">This method provides the plugin with the results of UI interaction
after the plugin has asked for it via #GSignondPlugin::user-action-required signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">results of UI interaction</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="cancel" c:identifier="gsignond_plugin_cancel">
        <doc xml:space="preserve">This method cancels an ongoing authentication session. The plugin implementations
should issue a #GSignondPlugin::error signal with #GSIGNOND_ERROR_SESSION_CANCELED
error, and prepare for a new authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="error" c:identifier="gsignond_plugin_error">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::error
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">the error</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="gsignond_plugin_refresh">
        <doc xml:space="preserve">This method asks the plugin to refresh the UI. The plugin responds with
#GSignondPlugin::refreshed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">UI refresh parameters</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refreshed" c:identifier="gsignond_plugin_refreshed">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::refreshed
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">UI data</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request" c:identifier="gsignond_plugin_request">
        <doc xml:space="preserve">This method provides the plugin with additional parameters for the session
after the plugin has asked for it via #GSignondPlugin::response signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">additional parameters for the session</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_initial"
              c:identifier="gsignond_plugin_request_initial">
        <doc xml:space="preserve">This method starts a new authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">parameters for the session</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
          <parameter name="identity_method_cache" transfer-ownership="none">
            <doc xml:space="preserve">data from persistent storage, saved previously via
#GSignondPlugin::store signal</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </parameter>
          <parameter name="mechanism" transfer-ownership="none">
            <doc xml:space="preserve">mechanism to use for the authentication</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="response" c:identifier="gsignond_plugin_response">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::response
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">session data</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="response_final"
              c:identifier="gsignond_plugin_response_final">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::response-final
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">session data</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="status_changed"
              c:identifier="gsignond_plugin_status_changed">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::status-changed
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">the new state</doc>
            <type name="PluginState" c:type="GSignondPluginState"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="gsignond_plugin_store">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::store
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="identity_method_cache" transfer-ownership="none">
            <doc xml:space="preserve">data to store</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_action_finished"
              c:identifier="gsignond_plugin_user_action_finished">
        <doc xml:space="preserve">This method provides the plugin with the results of UI interaction
after the plugin has asked for it via #GSignondPlugin::user-action-required signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">results of UI interaction</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_action_required"
              c:identifier="gsignond_plugin_user_action_required">
        <doc xml:space="preserve">Plugin implementations should use this to issue #GSignondPlugin::user-action-required
signal. This method should not be used otherwise.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">plugin instance</doc>
            <type name="Plugin" c:type="GSignondPlugin*"/>
          </instance-parameter>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">UI data</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </parameter>
        </parameters>
      </method>
      <property name="mechanisms" transfer-ownership="none">
        <doc xml:space="preserve">This property holds a list of authentication mechanisms that the plugin
implements, all specified within the authentication method. For example,
OAuth plugin could implement "oauth1" and "oauth2" mechanisms.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="type" transfer-ownership="none">
        <doc xml:space="preserve">This property holds a plugin type, or authentication method it implements
(for example "oauth" or "sasl").</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="error" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when an error has occurred, or the
plugin otherwise has a reason to cancel the authentication session. The
@error should be specified according to
&lt;link linkend="gsignond-Errors"&gt;GSignond errors.&lt;/link&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">the details of the error</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="refreshed" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when the UI interaction is ongoing
and the UI needs to be refreshed. This can be used for example to update
captcha image in the UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">parameters for UI refresh</doc>
            <type name="SignonuiData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="response" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when it wants to provide an intermediate
response to the application or needs additional information from the application.

After issuing this signal the plugin expects a gsignond_plugin_response() call.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSessionData containing signal parameters</doc>
            <type name="SessionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="response-final" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when it has completed the authentication
sequence and is used to provide the final response to the application.

After issuing this signal the plugin is idle and is ready for a new
authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="session_data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSessionData containing signal parameters</doc>
            <type name="SessionData"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="status-changed" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when plugin state has changed. This
can be used by applications to report authentication progress.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">the plugin state</doc>
            <type name="PluginState"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message that accompanies the state change</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="store" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when it has data to store in persistent
storage. The same data would later be provided to plugin via
gsignond_plugin_request_initial @identity_method_cache parameter.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary containing data to place in persistent storage</doc>
            <type name="Dictionary"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="user-action-required" when="first">
        <doc xml:space="preserve">This signal is issued by the plugin when it needs a UI interaction with
the user to happen. When the interaction is complete, gsignond_plugin_user_action_finished()
should be issued.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ui_data" transfer-ownership="none">
            <doc xml:space="preserve">parameters for UI interaction</doc>
            <type name="SignonuiData"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PluginInterface"
            c:type="GSignondPluginInterface"
            glib:is-gtype-struct-for="Plugin">
      <doc xml:space="preserve">#GSignondPluginInterface interface containing pointers to methods that all
plugin implementations should provide.</doc>
      <field name="parent">
        <doc xml:space="preserve">parent interface type.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="cancel">
        <callback name="cancel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">plugin instance</doc>
              <type name="Plugin" c:type="GSignondPlugin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_initial">
        <callback name="request_initial">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">plugin instance</doc>
              <type name="Plugin" c:type="GSignondPlugin*"/>
            </parameter>
            <parameter name="session_data" transfer-ownership="none">
              <doc xml:space="preserve">parameters for the session</doc>
              <type name="SessionData" c:type="GSignondSessionData*"/>
            </parameter>
            <parameter name="identity_method_cache" transfer-ownership="none">
              <doc xml:space="preserve">data from persistent storage, saved previously via
#GSignondPlugin::store signal</doc>
              <type name="Dictionary" c:type="GSignondDictionary*"/>
            </parameter>
            <parameter name="mechanism" transfer-ownership="none">
              <doc xml:space="preserve">mechanism to use for the authentication</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request">
        <callback name="request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">plugin instance</doc>
              <type name="Plugin" c:type="GSignondPlugin*"/>
            </parameter>
            <parameter name="session_data" transfer-ownership="none">
              <doc xml:space="preserve">additional parameters for the session</doc>
              <type name="SessionData" c:type="GSignondSessionData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_action_finished">
        <callback name="user_action_finished">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">plugin instance</doc>
              <type name="Plugin" c:type="GSignondPlugin*"/>
            </parameter>
            <parameter name="ui_data" transfer-ownership="none">
              <doc xml:space="preserve">results of UI interaction</doc>
              <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh">
        <callback name="refresh">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">plugin instance</doc>
              <type name="Plugin" c:type="GSignondPlugin*"/>
            </parameter>
            <parameter name="ui_data" transfer-ownership="none">
              <doc xml:space="preserve">UI refresh parameters</doc>
              <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="PluginState"
                 glib:type-name="GSignondPluginState"
                 glib:get-type="gsignond_plugin_state_get_type"
                 c:type="GSignondPluginState">
      <doc xml:space="preserve">The plugin provides state updates by emitting #GSignondPlugin::status-changed
signal with this enum and a string describing what happened.</doc>
      <member name="none"
              value="0"
              c:identifier="GSIGNOND_PLUGIN_STATE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">State unknown</doc>
      </member>
      <member name="resolving"
              value="1"
              c:identifier="GSIGNOND_PLUGIN_STATE_RESOLVING"
              glib:nick="resolving">
        <doc xml:space="preserve">Resolving remote server host name</doc>
      </member>
      <member name="connecting"
              value="2"
              c:identifier="GSIGNOND_PLUGIN_STATE_CONNECTING"
              glib:nick="connecting">
        <doc xml:space="preserve">Connecting to remote server</doc>
      </member>
      <member name="sending_data"
              value="3"
              c:identifier="GSIGNOND_PLUGIN_STATE_SENDING_DATA"
              glib:nick="sending-data">
        <doc xml:space="preserve">Sending data to remote server</doc>
      </member>
      <member name="waiting"
              value="4"
              c:identifier="GSIGNOND_PLUGIN_STATE_WAITING"
              glib:nick="waiting">
        <doc xml:space="preserve">Waiting for reply from remote server</doc>
      </member>
      <member name="user_pending"
              value="5"
              c:identifier="GSIGNOND_PLUGIN_STATE_USER_PENDING"
              glib:nick="user-pending">
        <doc xml:space="preserve">Waiting for response from user</doc>
      </member>
      <member name="refreshing"
              value="6"
              c:identifier="GSIGNOND_PLUGIN_STATE_REFRESHING"
              glib:nick="refreshing">
        <doc xml:space="preserve">Refreshing ui request</doc>
      </member>
      <member name="process_pending"
              value="7"
              c:identifier="GSIGNOND_PLUGIN_STATE_PROCESS_PENDING"
              glib:nick="process-pending">
        <doc xml:space="preserve">Request has been queued</doc>
      </member>
      <member name="started"
              value="8"
              c:identifier="GSIGNOND_PLUGIN_STATE_STARTED"
              glib:nick="started">
        <doc xml:space="preserve">Request has been dequeued</doc>
      </member>
      <member name="canceling"
              value="9"
              c:identifier="GSIGNOND_PLUGIN_STATE_CANCELING"
              glib:nick="canceling">
        <doc xml:space="preserve">Canceling current process</doc>
      </member>
      <member name="done"
              value="10"
              c:identifier="GSIGNOND_PLUGIN_STATE_DONE"
              glib:nick="done">
        <doc xml:space="preserve">Process is finished</doc>
      </member>
      <member name="holding"
              value="11"
              c:identifier="GSIGNOND_PLUGIN_STATE_HOLDING"
              glib:nick="holding">
        <doc xml:space="preserve">Holding long non-expired token</doc>
      </member>
    </enumeration>
    <class name="SecretStorage"
           c:symbol-prefix="secret_storage"
           c:type="GSignondSecretStorage"
           parent="GObject.Object"
           glib:type-name="GSignondSecretStorage"
           glib:get-type="gsignond_secret_storage_get_type"
           glib:type-struct="SecretStorageClass">
      <doc xml:space="preserve">Opaque #GSignondSecretStorage data structure.</doc>
      <virtual-method name="check_credentials" invoker="check_credentials">
        <doc xml:space="preserve">Checks whether the given credentials match what is stored in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="creds" transfer-ownership="none">
            <doc xml:space="preserve">the credentials that are being checked.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_db" invoker="clear_db">
        <doc xml:space="preserve">Removes all stored secrets from the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="close_db" invoker="close_db">
        <doc xml:space="preserve">Closes the database. To reopen it, call gsignond_secret_storage_open_db().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_last_error" invoker="get_last_error">
        <doc xml:space="preserve">Retrieves the last occurred error that has occurred</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last occurred #GError</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_open_db" invoker="is_open_db">
        <doc xml:space="preserve">Checks if the database is open or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_credentials" invoker="load_credentials">
        <doc xml:space="preserve">Loads the credentials from the database.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#GSignondCredentials if successful,
%NULL otherwise.</doc>
          <type name="Credentials" c:type="GSignondCredentials*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity id whose credentials are being loaded.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_data" invoker="load_data">
        <doc xml:space="preserve">Loads the secret data associated with a given identity and method.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the secret data</doc>
          <type name="Dictionary" c:type="GSignondDictionary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity id whose data are fetched</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_db" invoker="open_db">
        <doc xml:space="preserve">Opens (and initializes) the database. The implementation should take
care of creating the DB, if it doesn't exist, and it should use
#GSIGNOND_CONFIG_GENERAL_SECURE_DIR
to determine database location in the filesystem.

The default implementation is using SQLite for the storage.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_credentials" invoker="remove_credentials">
        <doc xml:space="preserve">Remove the credentials for the given identity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose credentials are being updated.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_data" invoker="remove_data">
        <doc xml:space="preserve">Removes secret data associated with a given id/method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose data are fetched.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_credentials" invoker="update_credentials">
        <doc xml:space="preserve">Stores/updates the credentials for the given identity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="creds" transfer-ownership="none">
            <doc xml:space="preserve">the credentials that are being updated.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_data" invoker="update_data">
        <doc xml:space="preserve">Calling this method updates the secret data
associated with the given id/method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose data are fetched.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the data to update</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_credentials"
              c:identifier="gsignond_secret_storage_check_credentials">
        <doc xml:space="preserve">Checks whether the given credentials match what is stored in the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="creds" transfer-ownership="none">
            <doc xml:space="preserve">the credentials that are being checked.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_db" c:identifier="gsignond_secret_storage_clear_db">
        <doc xml:space="preserve">Removes all stored secrets from the database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close_db" c:identifier="gsignond_secret_storage_close_db">
        <doc xml:space="preserve">Closes the database. To reopen it, call gsignond_secret_storage_open_db().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_error"
              c:identifier="gsignond_secret_storage_get_last_error">
        <doc xml:space="preserve">Retrieves the last occurred error that has occurred</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">last occurred #GError</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_open_db"
              c:identifier="gsignond_secret_storage_is_open_db">
        <doc xml:space="preserve">Checks if the database is open or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_credentials"
              c:identifier="gsignond_secret_storage_load_credentials">
        <doc xml:space="preserve">Loads the credentials from the database.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#GSignondCredentials if successful,
%NULL otherwise.</doc>
          <type name="Credentials" c:type="GSignondCredentials*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity id whose credentials are being loaded.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_data"
              c:identifier="gsignond_secret_storage_load_data">
        <doc xml:space="preserve">Loads the secret data associated with a given identity and method.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the secret data</doc>
          <type name="Dictionary" c:type="GSignondDictionary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity id whose data are fetched</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_db" c:identifier="gsignond_secret_storage_open_db">
        <doc xml:space="preserve">Opens (and initializes) the database. The implementation should take
care of creating the DB, if it doesn't exist, and it should use
#GSIGNOND_CONFIG_GENERAL_SECURE_DIR
to determine database location in the filesystem.

The default implementation is using SQLite for the storage.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_credentials"
              c:identifier="gsignond_secret_storage_remove_credentials">
        <doc xml:space="preserve">Remove the credentials for the given identity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose credentials are being updated.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_data"
              c:identifier="gsignond_secret_storage_remove_data">
        <doc xml:space="preserve">Removes secret data associated with a given id/method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose data are fetched.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_credentials"
              c:identifier="gsignond_secret_storage_update_credentials">
        <doc xml:space="preserve">Stores/updates the credentials for the given identity.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="creds" transfer-ownership="none">
            <doc xml:space="preserve">the credentials that are being updated.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_data"
              c:identifier="gsignond_secret_storage_update_data">
        <doc xml:space="preserve">Calling this method updates the secret data
associated with the given id/method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
            <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identity whose data are fetched.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the authentication method the data is used for.</doc>
            <type name="guint32" c:type="const guint32"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">the data to update</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Config"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="config" readable="0" private="1">
        <type name="Config" c:type="GSignondConfig*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SecretStoragePrivate"
              c:type="GSignondSecretStoragePrivate*"/>
      </field>
    </class>
    <record name="SecretStorageClass"
            c:type="GSignondSecretStorageClass"
            glib:is-gtype-struct-for="SecretStorage">
      <doc xml:space="preserve">#GSignondSecretStorageClass class containing pointers to class methods.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="open_db">
        <callback name="open_db">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close_db">
        <callback name="close_db">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_db">
        <callback name="clear_db">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_open_db">
        <callback name="is_open_db">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_credentials">
        <callback name="load_credentials">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">#GSignondCredentials if successful,
%NULL otherwise.</doc>
            <type name="Credentials" c:type="GSignondCredentials*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <doc xml:space="preserve">the identity id whose credentials are being loaded.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_credentials">
        <callback name="update_credentials">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="creds" transfer-ownership="none">
              <doc xml:space="preserve">the credentials that are being updated.</doc>
              <type name="Credentials" c:type="GSignondCredentials*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_credentials">
        <callback name="remove_credentials">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <doc xml:space="preserve">the identity whose credentials are being updated.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="check_credentials">
        <callback name="check_credentials">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="creds" transfer-ownership="none">
              <doc xml:space="preserve">the credentials that are being checked.</doc>
              <type name="Credentials" c:type="GSignondCredentials*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_data">
        <callback name="load_data">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">the secret data</doc>
            <type name="Dictionary" c:type="GSignondDictionary*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <doc xml:space="preserve">the identity id whose data are fetched</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve">the authentication method the data is used for.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_data">
        <callback name="update_data">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <doc xml:space="preserve">the identity whose data are fetched.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve">the authentication method the data is used for.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <doc xml:space="preserve">the data to update</doc>
              <type name="Dictionary" c:type="GSignondDictionary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_data">
        <callback name="remove_data">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
            <parameter name="id" transfer-ownership="none">
              <doc xml:space="preserve">the identity whose data are fetched.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve">the authentication method the data is used for.</doc>
              <type name="guint32" c:type="const guint32"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_last_error">
        <callback name="get_last_error">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">last occurred #GError</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">instance of #GSignondSecretStorage</doc>
              <type name="SecretStorage" c:type="GSignondSecretStorage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SecretStoragePrivate"
            c:type="GSignondSecretStoragePrivate"
            disguised="1">
    </record>
    <record name="SecurityContext"
            c:type="GSignondSecurityContext"
            glib:type-name="GSignondSecurityContext"
            glib:get-type="gsignond_security_context_get_type"
            c:symbol-prefix="security_context">
      <field name="sys_ctx" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="app_ctx" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new" c:identifier="gsignond_security_context_new">
        <doc xml:space="preserve">Allocates a new security context item. System and app context are empty strings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">allocated #GSignondSecurityContext.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_values"
                   c:identifier="gsignond_security_context_new_from_values">
        <doc xml:space="preserve">Allocates and initializes a new security context item.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">allocated #GSignondSecurityContext.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
        <parameters>
          <parameter name="system_context" transfer-ownership="none">
            <doc xml:space="preserve">system security context</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="application_context" transfer-ownership="none">
            <doc xml:space="preserve">application security context</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="check" c:identifier="gsignond_security_context_check">
        <doc xml:space="preserve">Check if @test is covered by @reference.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if contexts are equal or the @reference has a wildcard
system context, or if system contexts are equal and @reference has a wildcard
application context, otherwise FALSE. If either or both contexts are NULL,
FALSE is returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reference" transfer-ownership="none">
            <doc xml:space="preserve">reference security context item to check against.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
          <parameter name="test" transfer-ownership="none">
            <doc xml:space="preserve">security context item to be checked.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="gsignond_security_context_compare">
        <doc xml:space="preserve">Compare two #GSignondSecurityContext items in a similar way to strcmp().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">negative if ctx1 &lt; ctx2, 0 if ctx1 == ctx2 and positive if ctx1 &gt; ctx2.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx1" transfer-ownership="none">
            <doc xml:space="preserve">first item to compare.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
          <parameter name="ctx2" transfer-ownership="none">
            <doc xml:space="preserve">second item to compare.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="gsignond_security_context_copy">
        <doc xml:space="preserve">Copies a security context item.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of the #GSignondSecurityContext item.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src_ctx" transfer-ownership="none">
            <doc xml:space="preserve">source security context to copy.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="gsignond_security_context_free">
        <doc xml:space="preserve">Frees a security context item.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext to be freed.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_application_context"
              c:identifier="gsignond_security_context_get_application_context">
        <doc xml:space="preserve">Get the application context part of
the #GSignondSecurityContext.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">application context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_context"
              c:identifier="gsignond_security_context_get_system_context">
        <doc xml:space="preserve">Get the system context partof the
#GSignondSecurityContext.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">system context.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="gsignond_security_context_match">
        <doc xml:space="preserve">Compare two #GSignondSecurityContext items match.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">TRUE if contexts are equal or if either side has a wildcard match for
system context, or if system contexts are equal and either side has a wildcard
match for the app context,
otherwise FALSE. Two NULL contexts match.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx1" transfer-ownership="none">
            <doc xml:space="preserve">first item to compare.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
          <parameter name="ctx2" transfer-ownership="none">
            <doc xml:space="preserve">second item to compare.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_application_context"
              c:identifier="gsignond_security_context_set_application_context">
        <doc xml:space="preserve">Sets the application context part of
the #GSignondSecurityContext.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </instance-parameter>
          <parameter name="application_context" transfer-ownership="none">
            <doc xml:space="preserve">application security context.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_system_context"
              c:identifier="gsignond_security_context_set_system_context">
        <doc xml:space="preserve">Sets the system context part of the
#GSignondSecurityContext.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
            <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
          </instance-parameter>
          <parameter name="system_context" transfer-ownership="none">
            <doc xml:space="preserve">system security context.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant"
              c:identifier="gsignond_security_context_to_variant">
        <doc xml:space="preserve">Build a GVariant of type "(ss)" from a #GSignondSecurityContext item.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">GVariant construct of a #GSignondSecurityContext.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctx" transfer-ownership="none">
            <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
            <type name="SecurityContext"
                  c:type="const GSignondSecurityContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_variant"
                c:identifier="gsignond_security_context_from_variant">
        <doc xml:space="preserve">Builds a #GSignondSecurityContext item from a GVariant of type "(ss)".</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
          <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve">GVariant item with a #GSignondSecurityContext construct.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="SessionData"
           c:symbol-prefix="session_data"
           c:type="GSignondSessionData"
           parent="Dictionary"
           glib:type-name="GSignondSessionData"
           glib:get-type="gsignond_session_data_get_type"
           glib:type-struct="SessionDataClass">
      <doc xml:space="preserve">Opaque #GSignondSessionData data structure.</doc>
      <constructor name="new" c:identifier="gsignond_session_data_new">
        <doc xml:space="preserve">Creates a new instance of #GSignondSessionData.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondSessionData object if successful,
NULL otherwise.</doc>
          <type name="SessionData" c:type="GSignondSessionData*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="gsignond_session_data_new_from_variant">
        <doc xml:space="preserve">Converts the #GVariant to #GSignondSessionData. This is useful for example if
the dictionary needs to be deserialized, or if it's contained in another
#GSignondSessionData and has been retrieved using gsignond_dictionary_get().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondSessionData if successful, NULL otherwise.</doc>
          <type name="SessionData" c:type="GSignondSessionData*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gsignond_session_data_copy">
        <doc xml:space="preserve">Creates a copy of the dictionary session data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSignondSessionData object if the copy was successful,
NULL otherwise.</doc>
          <type name="SessionData" c:type="GSignondSessionData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSessionData</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allowed_realms"
              c:identifier="gsignond_session_data_get_allowed_realms"
              introspectable="0">
        <doc xml:space="preserve">A getter for a list of realms allowed for the identity use.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">#GSequence of allowed realms</doc>
          <type name="GLib.Sequence" c:type="GSequence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_caption"
              c:identifier="gsignond_session_data_get_caption">
        <doc xml:space="preserve">A getter for a caption associated with the authentication session.
Caption tells the user which application/credentials/provider is requestion
authentication.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_proxy"
              c:identifier="gsignond_session_data_get_network_proxy">
        <doc xml:space="preserve">A getter for a network proxy setting associated with the authentication session.
If this property is not set, the default system proxy settings should be used.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_timeout"
              c:identifier="gsignond_session_data_get_network_timeout">
        <doc xml:space="preserve">A getter for a network timeout setting associated with the authentication session.
This can be used to change the default timeout in case of unresponsive servers.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the key-value pair exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="network_timeout"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the value for the parameter is written here</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_realm" c:identifier="gsignond_session_data_get_realm">
        <doc xml:space="preserve">A getter for a realm associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_renew_token"
              c:identifier="gsignond_session_data_get_renew_token">
        <doc xml:space="preserve">A getter for a renew token property associated with the authentication session.
This property tells the plugin to discard any cached tokens and start
the authentication process anew.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the key-value pair exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="renew_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the value for the parameter is written here</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secret"
              c:identifier="gsignond_session_data_get_secret">
        <doc xml:space="preserve">A getter for a secret (e.g. a password) associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ui_policy"
              c:identifier="gsignond_session_data_get_ui_policy">
        <doc xml:space="preserve">A getter for UI policy setting associated with the authentication session.
The UI policy indicates how the authentication plugin should interact with the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the key-value pair exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="ui_policy"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the value for the parameter is written here</doc>
            <type name="UiPolicy" c:type="GSignondUiPolicy*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="gsignond_session_data_get_username">
        <doc xml:space="preserve">A getter for a username associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_id"
              c:identifier="gsignond_session_data_get_window_id">
        <doc xml:space="preserve">A getter for a window id setting associated with the authentication session.
This can be used to embed the user interaction window produced by the authentication
session into an application window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether the key-value pair exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="window_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the value for the parameter is written here</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allowed_realms"
              c:identifier="gsignond_session_data_set_allowed_realms">
        <doc xml:space="preserve">A setter for a list of realms allowed for the identity use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="realms" transfer-ownership="none">
            <doc xml:space="preserve">a #GSequence if allowed realms</doc>
            <type name="GLib.Sequence" c:type="GSequence*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_caption"
              c:identifier="gsignond_session_data_set_caption">
        <doc xml:space="preserve">A setter for a caption associated with the authentication session.
Caption tells the user which application/credentials/provider is requestion
authentication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="caption" transfer-ownership="none">
            <doc xml:space="preserve">a caption to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network_proxy"
              c:identifier="gsignond_session_data_set_network_proxy">
        <doc xml:space="preserve">A setter for a network proxy setting associated with the authentication session.
If this property is not set, the default system proxy settings should be used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="network_proxy" transfer-ownership="none">
            <doc xml:space="preserve">network proxy to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network_timeout"
              c:identifier="gsignond_session_data_set_network_timeout">
        <doc xml:space="preserve">A setter for a network timeout setting associated with the authentication session.
This can be used to change the default timeout in case of unresponsive servers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="network_timeout" transfer-ownership="none">
            <doc xml:space="preserve">network timeout to use</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_realm" c:identifier="gsignond_session_data_set_realm">
        <doc xml:space="preserve">A setter for a realm associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="realm" transfer-ownership="none">
            <doc xml:space="preserve">a realm to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_renew_token"
              c:identifier="gsignond_session_data_set_renew_token">
        <doc xml:space="preserve">A setter for a renew token property associated with the authentication session.
This property tells the plugin to discard any cached tokens and start
the authentication process anew.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="renew_token" transfer-ownership="none">
            <doc xml:space="preserve">whether to renew the token set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secret"
              c:identifier="gsignond_session_data_set_secret">
        <doc xml:space="preserve">A setter for a secret (e.g. a password) associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="secret" transfer-ownership="none">
            <doc xml:space="preserve">a secret to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ui_policy"
              c:identifier="gsignond_session_data_set_ui_policy">
        <doc xml:space="preserve">A getter for UI policy setting associated with the authentication session.
The UI policy indicates how the authentication plugin should interact with the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="ui_policy" transfer-ownership="none">
            <doc xml:space="preserve">ui policy to set</doc>
            <type name="UiPolicy" c:type="GSignondUiPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="gsignond_session_data_set_username">
        <doc xml:space="preserve">A setter for a username associated with the authentication session.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">username to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window_id"
              c:identifier="gsignond_session_data_set_window_id">
        <doc xml:space="preserve">A setter for a window id setting associated with the authentication session.
This can be used to embed the user interaction window produced by the authentication
session into an application window.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SessionData" c:type="GSignondSessionData*"/>
          </instance-parameter>
          <parameter name="window_id" transfer-ownership="none">
            <doc xml:space="preserve">window id to use</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Dictionary" c:type="GSignondDictionary"/>
      </field>
    </class>
    <record name="SessionDataClass"
            c:type="GSignondSessionDataClass"
            glib:is-gtype-struct-for="SessionData">
      <doc xml:space="preserve">Opaque #GSignondSessionDataClass data structure.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="DictionaryClass" c:type="GSignondDictionaryClass"/>
      </field>
    </record>
    <class name="SignonuiData"
           c:symbol-prefix="signonui_data"
           c:type="GSignondSignonuiData"
           parent="Dictionary"
           glib:type-name="GSignondSignonuiData"
           glib:get-type="gsignond_signonui_data_get_type"
           glib:type-struct="SignonuiDataClass">
      <doc xml:space="preserve">#GSignondSignonuiData is simply a typedef for #GSignondDictionary, which
means the developers may also freely use methods associated with that structure,
in particular for creating a #GSignondSignonuiData object with
gsignond_dictionary_new().</doc>
      <constructor name="new" c:identifier="gsignond_signonui_data_new">
        <doc xml:space="preserve">Creates a new instance of #GSignondSignonuiData.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GSignondSignonuiData object.</doc>
          <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="gsignond_signonui_data_new_from_variant">
        <doc xml:space="preserve">Converts the #GVariant to #GSignondSignonuiData. This is useful for example if
the dictionary needs to be deserialized, or if it's contained in another
#GSignondSignonuiData and has been retrieved using gsignond_dictionary_get().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GSignondSignonuiData object.</doc>
          <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="gsignond_signonui_data_copy">
        <doc xml:space="preserve">Creates a copy of the dictionary session data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #GSignondSignonuiData object copied from
@other.</doc>
          <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve">instance of #GSignondSignonuiData</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_captcha_response"
              c:identifier="gsignond_signonui_data_get_captcha_response">
        <doc xml:space="preserve">A getter for the user's response to a captcha query.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the string entered by the user in response to a captcha query.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSignonuiData structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_captcha_url"
              c:identifier="gsignond_signonui_data_get_captcha_url">
        <doc xml:space="preserve">A getter for the captcha URL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the URL to the captcha image to be verified by user.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSignonuiData structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_caption"
              c:identifier="gsignond_signonui_data_get_caption">
        <doc xml:space="preserve">A getter for the caption string. Caption tells the user which
application/credentials/provider is requestion authentication.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSignonuiData structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confirm"
              c:identifier="gsignond_signonui_data_get_confirm">
        <doc xml:space="preserve">A getter for the confirm mode. In confirm mode the user is asked to enter
an old password (which is compared to the supplied password), and a new password twice
(which is returned).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether this property exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="confirm"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the value for the property is written here</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_final_url"
              c:identifier="gsignond_signonui_data_get_final_url">
        <doc xml:space="preserve">A getter for the final URL. When the signon UI detects that the user is at
the final URL (possibly with additional query or fragment parameters), it
will close the window and return the full URL via url response property.
This is used by redirection-based authentication, such as OAuth.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forgot_password"
              c:identifier="gsignond_signonui_data_get_forgot_password">
        <doc xml:space="preserve">A getter for the forgot password string which is shown to the user as a link to
reset the password or remind him of the password.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forgot_password_url"
              c:identifier="gsignond_signonui_data_get_forgot_password_url">
        <doc xml:space="preserve">A getter for the forgot password URL, where the user can reset or request a
reminder of the password.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="gsignond_signonui_data_get_message">
        <doc xml:space="preserve">A getter for the message which is show to the user in the signon UI dialog.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_open_url"
              c:identifier="gsignond_signonui_data_get_open_url">
        <doc xml:space="preserve">A getter for the URL that should be opened by signon UI.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="gsignond_signonui_data_get_password">
        <doc xml:space="preserve">A getter for the password string.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query_error"
              c:identifier="gsignond_signonui_data_get_query_error">
        <doc xml:space="preserve">A getter for the UI interaction error. Signon UI sets this to @SIGNONUI_ERROR_NONE if
there were no errors.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether this property exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="error"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the error is written here</doc>
            <type name="SignonuiError" c:type="GSignondSignonuiError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_query_password"
              c:identifier="gsignond_signonui_data_get_query_password">
        <doc xml:space="preserve">A getter for the query password property. It indicates whether the signon UI
should ask the user for a password (and return it in the password property).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether this property exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="query_password"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the property is written here</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_query_username"
              c:identifier="gsignond_signonui_data_get_query_username">
        <doc xml:space="preserve">A getter for the query username property. It indicates whether the signon UI
should ask the user for a username (and return it in the username property).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether this property exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="query_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the property is written here</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remember_password"
              c:identifier="gsignond_signonui_data_get_remember_password">
        <doc xml:space="preserve">A getter for whether the password should be remembered.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">whether this property exists in the @data dictionary or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="remember_password"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the property is written here</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_request_id"
              c:identifier="gsignond_signonui_data_get_request_id">
        <doc xml:space="preserve">A getter for the dialog request id. The id identifies the dialog so that it
can be refreshed or updated.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_test_reply"
              c:identifier="gsignond_signonui_data_get_test_reply">
        <doc xml:space="preserve">A getter for the test reply values. It's used only by the signon ui
implementations to test themselves.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="gsignond_signonui_data_get_title">
        <doc xml:space="preserve">A getter for the UI dialog title.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url_response"
              c:identifier="gsignond_signonui_data_get_url_response">
        <doc xml:space="preserve">A getter for the response URL. If the final URL was set in the request to the signon UI, and the signon UI
detects that it has been reached, then the full final URL is returned using
this property. This is used by redirection-based authentication such as OAauth.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="gsignond_signonui_data_get_username">
        <doc xml:space="preserve">A getter for the username string.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_captcha_response"
              c:identifier="gsignond_signonui_data_set_captcha_response">
        <doc xml:space="preserve">A setter for the user's response to a captcha query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSignonuiData structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">the string entered by the user in response to a captcha query.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_captcha_url"
              c:identifier="gsignond_signonui_data_set_captcha_url">
        <doc xml:space="preserve">A setter for the captcha URL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondSignonuiData structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">the URL to the captcha image to be verified by user</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_caption"
              c:identifier="gsignond_signonui_data_set_caption">
        <doc xml:space="preserve">A setter for the caption string. Caption tells the user which
application/credentials/provider is requestion authentication.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="caption" transfer-ownership="none">
            <doc xml:space="preserve">the caption string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_confirm"
              c:identifier="gsignond_signonui_data_set_confirm">
        <doc xml:space="preserve">A setter for the confirm mode. In confirm mode the user is asked to enter
an old password (which is compared to the supplied password), and a new password twice
(which is returned).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="confirm" transfer-ownership="none">
            <doc xml:space="preserve">the value for the property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_final_url"
              c:identifier="gsignond_signonui_data_set_final_url">
        <doc xml:space="preserve">A setter for the final URL. When the signon UI detects that the user is at
the final URL (possibly with additional query or fragment parameters), it
will close the window and return the full URL via url response property.
This is used by redirection-based authentication, such as OAuth.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">the final url</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_forgot_password"
              c:identifier="gsignond_signonui_data_set_forgot_password">
        <doc xml:space="preserve">A setter for the forgot password string, which is shown to the user as a link to
reset the password or remind him of the password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="forgot" transfer-ownership="none">
            <doc xml:space="preserve">the forgot password string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_forgot_password_url"
              c:identifier="gsignond_signonui_data_set_forgot_password_url">
        <doc xml:space="preserve">A setter for the forgot password URL, where the user can reset or request a
reminder of the password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">the forgot password URL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message"
              c:identifier="gsignond_signonui_data_set_message">
        <doc xml:space="preserve">A setter for the message which is show to the user in the signon UI dialog.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_open_url"
              c:identifier="gsignond_signonui_data_set_open_url">
        <doc xml:space="preserve">A setter for the URL that should be opened by signon UI.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve">the url to open</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="gsignond_signonui_data_set_password">
        <doc xml:space="preserve">A setter for the password string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">the password string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query_error"
              c:identifier="gsignond_signonui_data_set_query_error">
        <doc xml:space="preserve">A setter for the UI interaction error. Signon UI sets this to @SIGNONUI_ERROR_NONE if
there were no errors.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve">the error</doc>
            <type name="SignonuiError" c:type="GSignondSignonuiError"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query_password"
              c:identifier="gsignond_signonui_data_set_query_password">
        <doc xml:space="preserve">A setter for the query password property. It indicates whether the signon UI
should ask the user for a password (and return it in the password property).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">the property value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query_username"
              c:identifier="gsignond_signonui_data_set_query_username">
        <doc xml:space="preserve">A setter for the query username property. It indicates whether the signon UI
should ask the user for a username (and return it in the username property).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">the property value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remember_password"
              c:identifier="gsignond_signonui_data_set_remember_password">
        <doc xml:space="preserve">A setter for whether the password should be remembered.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="remember" transfer-ownership="none">
            <doc xml:space="preserve">the property value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_id"
              c:identifier="gsignond_signonui_data_set_request_id">
        <doc xml:space="preserve">A setter for the dialog request id. The id identifies the dialog so that it
can be refreshed or updated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">request id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_test_reply"
              c:identifier="gsignond_signonui_data_set_test_reply">
        <doc xml:space="preserve">A setter for the test reply values. It's used only by the signon ui
implementations to test themselves.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="reply" transfer-ownership="none">
            <doc xml:space="preserve">test reply values</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title" c:identifier="gsignond_signonui_data_set_title">
        <doc xml:space="preserve">A setter for the UI dialog title.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_response"
              c:identifier="gsignond_signonui_data_set_url_response">
        <doc xml:space="preserve">A getter for the response URL. If the final URL was set in the request to the
signon UI, and the signon UI
detects that it has been reached, then the full final URL is returned using
this property. This is used by redirection-based authentication such as OAauth.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve">the response URL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="gsignond_signonui_data_set_username">
        <doc xml:space="preserve">A setter for the username string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">a #GSignondDictionary structure</doc>
            <type name="SignonuiData" c:type="GSignondSignonuiData*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">the username string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Dictionary" c:type="GSignondDictionary"/>
      </field>
    </class>
    <record name="SignonuiDataClass"
            c:type="GSignondSignonuiDataClass"
            glib:is-gtype-struct-for="SignonuiData">
      <field name="parent_class" readable="0" private="1">
        <type name="DictionaryClass" c:type="GSignondDictionaryClass"/>
      </field>
    </record>
    <enumeration name="SignonuiError" c:type="GSignondSignonuiError">
      <doc xml:space="preserve">This enum defines errors that may happen during user interaction.</doc>
      <member name="none" value="0" c:identifier="SIGNONUI_ERROR_NONE">
        <doc xml:space="preserve">No errors</doc>
      </member>
      <member name="general" value="1" c:identifier="SIGNONUI_ERROR_GENERAL">
        <doc xml:space="preserve">Generic error during interaction</doc>
      </member>
      <member name="no_signonui"
              value="2"
              c:identifier="SIGNONUI_ERROR_NO_SIGNONUI">
        <doc xml:space="preserve">Cannot send request to signon-ui</doc>
      </member>
      <member name="bad_parameters"
              value="3"
              c:identifier="SIGNONUI_ERROR_BAD_PARAMETERS">
        <doc xml:space="preserve">Signon-Ui cannot create dialog based on the given UiSessionData</doc>
      </member>
      <member name="canceled" value="4" c:identifier="SIGNONUI_ERROR_CANCELED">
        <doc xml:space="preserve">User canceled action. Plugin should not retry automatically after this</doc>
      </member>
      <member name="not_available"
              value="5"
              c:identifier="SIGNONUI_ERROR_NOT_AVAILABLE">
        <doc xml:space="preserve">Requested ui is not available. For example browser cannot be started</doc>
      </member>
      <member name="bad_url" value="6" c:identifier="SIGNONUI_ERROR_BAD_URL">
        <doc xml:space="preserve">Given url was not valid</doc>
      </member>
      <member name="bad_captcha"
              value="7"
              c:identifier="SIGNONUI_ERROR_BAD_CAPTCHA">
        <doc xml:space="preserve">Given captcha image was not valid</doc>
      </member>
      <member name="bad_captcha_url"
              value="8"
              c:identifier="SIGNONUI_ERROR_BAD_CAPTCHA_URL">
        <doc xml:space="preserve">Given url for capctha loading was not valid</doc>
      </member>
      <member name="refresh_failed"
              value="9"
              c:identifier="SIGNONUI_ERROR_REFRESH_FAILED">
        <doc xml:space="preserve">Refresh failed</doc>
      </member>
      <member name="forbidden"
              value="10"
              c:identifier="SIGNONUI_ERROR_FORBIDDEN">
        <doc xml:space="preserve">Showing ui forbidden by ui policy</doc>
      </member>
      <member name="forgot_password"
              value="11"
              c:identifier="SIGNONUI_ERROR_FORGOT_PASSWORD">
        <doc xml:space="preserve">User pressed forgot password</doc>
      </member>
    </enumeration>
    <class name="StorageManager"
           c:symbol-prefix="storage_manager"
           c:type="GSignondStorageManager"
           parent="GObject.Object"
           glib:type-name="GSignondStorageManager"
           glib:get-type="gsignond_storage_manager_get_type"
           glib:type-struct="StorageManagerClass">
      <doc xml:space="preserve">Opaque #GSignondStorageManager data structure.</doc>
      <virtual-method name="delete_storage" invoker="delete_storage">
        <doc xml:space="preserve">Destroys all the encryption keys and wipes the storage. gsignond_wipe_directory()
is typically used for the latter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been deleted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="filesystem_is_mounted"
                      invoker="filesystem_is_mounted">
        <doc xml:space="preserve">Checks if the encrypted storage filesystem is currently mounted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the filesystem is mounted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initialize_storage" invoker="initialize_storage">
        <doc xml:space="preserve">Initialize encryption storage. This means making sure that the
necessary directories under #GSIGNOND_CONFIG_GENERAL_STORAGE_PATH exist and are accessible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mount_filesystem" invoker="mount_filesystem">
        <doc xml:space="preserve">Mounts an encrypted storage and returns the filesystem path of the storage
mount point. This path will be set in #GSignondConfig as
#GSIGNOND_CONFIG_GENERAL_SECURE_DIR and used to access the secret database via
#GSignondSecretStorage.

The default implemenation does nothing, and immediately returns the path for the
secret database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The path of the storage mount point.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="storage_is_initialized"
                      invoker="storage_is_initialized">
        <doc xml:space="preserve">Checks if the storage has been initialized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unmount_filesystem" invoker="unmount_filesystem">
        <doc xml:space="preserve">Unmounts a previously mounted encrypted storage filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the filesystem has been unmounted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="delete_storage"
              c:identifier="gsignond_storage_manager_delete_storage">
        <doc xml:space="preserve">Destroys all the encryption keys and wipes the storage. gsignond_wipe_directory()
is typically used for the latter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been deleted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="filesystem_is_mounted"
              c:identifier="gsignond_storage_manager_filesystem_is_mounted">
        <doc xml:space="preserve">Checks if the encrypted storage filesystem is currently mounted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the filesystem is mounted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="initialize_storage"
              c:identifier="gsignond_storage_manager_initialize_storage">
        <doc xml:space="preserve">Initialize encryption storage. This means making sure that the
necessary directories under #GSIGNOND_CONFIG_GENERAL_STORAGE_PATH exist and are accessible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mount_filesystem"
              c:identifier="gsignond_storage_manager_mount_filesystem">
        <doc xml:space="preserve">Mounts an encrypted storage and returns the filesystem path of the storage
mount point. This path will be set in #GSignondConfig as
#GSIGNOND_CONFIG_GENERAL_SECURE_DIR and used to access the secret database via
#GSignondSecretStorage.

The default implemenation does nothing, and immediately returns the path for the
secret database.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The path of the storage mount point.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="storage_is_initialized"
              c:identifier="gsignond_storage_manager_storage_is_initialized">
        <doc xml:space="preserve">Checks if the storage has been initialized.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmount_filesystem"
              c:identifier="gsignond_storage_manager_unmount_filesystem">
        <doc xml:space="preserve">Unmounts a previously mounted encrypted storage filesystem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the filesystem has been unmounted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">object instance.</doc>
            <type name="StorageManager" c:type="GSignondStorageManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Config"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="config">
        <type name="Config" c:type="GSignondConfig*"/>
      </field>
      <field name="location">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="priv">
        <type name="StorageManagerPrivate"
              c:type="GSignondStorageManagerPrivate*"/>
      </field>
    </class>
    <record name="StorageManagerClass"
            c:type="GSignondStorageManagerClass"
            glib:is-gtype-struct-for="StorageManager">
      <doc xml:space="preserve">#GSignondStorageManagerClass class containing pointers to class methods.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">parent class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="initialize_storage">
        <callback name="initialize_storage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_storage">
        <callback name="delete_storage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the storage has been deleted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="storage_is_initialized">
        <callback name="storage_is_initialized">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the storage has been initialized, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mount_filesystem">
        <callback name="mount_filesystem">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The path of the storage mount point.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unmount_filesystem">
        <callback name="unmount_filesystem">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the filesystem has been unmounted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="filesystem_is_mounted">
        <callback name="filesystem_is_mounted">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the filesystem is mounted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">object instance.</doc>
              <type name="StorageManager" c:type="GSignondStorageManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="StorageManagerPrivate"
            c:type="GSignondStorageManagerPrivate"
            disguised="1">
    </record>
    <enumeration name="UiPolicy" c:type="GSignondUiPolicy">
      <doc xml:space="preserve">Policy setting to define how plugins should handle interaction with the user.</doc>
      <member name="default"
              value="0"
              c:identifier="GSIGNOND_UI_POLICY_DEFAULT">
        <doc xml:space="preserve">use a default user interaction scenario</doc>
      </member>
      <member name="request_password"
              value="1"
              c:identifier="GSIGNOND_UI_POLICY_REQUEST_PASSWORD">
        <doc xml:space="preserve">force an authorization request from the user;
any cached access tokens should be discarded by the plugin.</doc>
      </member>
      <member name="no_user_interaction"
              value="2"
              c:identifier="GSIGNOND_UI_POLICY_NO_USER_INTERACTION">
        <doc xml:space="preserve">force no interaction with the user</doc>
      </member>
      <member name="validation"
              value="3"
              c:identifier="GSIGNOND_UI_POLICY_VALIDATION">
        <doc xml:space="preserve">interaction with the user is only allowed
for validation captchas and similar security measures</doc>
      </member>
    </enumeration>
    <function name="array_to_sequence"
              c:identifier="gsignond_array_to_sequence"
              introspectable="0">
      <doc xml:space="preserve">Convert null-terminated array of strings to a sequence.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">#GSequence of strings</doc>
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </return-value>
      <parameters>
        <parameter name="items" transfer-ownership="full">
          <doc xml:space="preserve">Null-terminated array of strings to convert</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="copy_array_to_sequence"
              c:identifier="gsignond_copy_array_to_sequence"
              introspectable="0">
      <doc xml:space="preserve">Copy null-terminated array of strings to a sequence.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">#GSequence of strings</doc>
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </return-value>
      <parameters>
        <parameter name="items" transfer-ownership="none">
          <doc xml:space="preserve">Null-terminated array of strings to copy</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_new_from_variant"
              c:identifier="gsignond_error_new_from_variant">
      <doc xml:space="preserve">Converts the GVariant to GError.</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">#GError object if successful,
%NULL otherwise.</doc>
        <type name="GLib.Error" c:type="GError*"/>
      </return-value>
      <parameters>
        <parameter name="var" transfer-ownership="none">
          <doc xml:space="preserve">instance of #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark" c:identifier="gsignond_error_quark">
      <doc xml:space="preserve">Creates and returns a domain for GSignond errors.</doc>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="error_to_variant" c:identifier="gsignond_error_to_variant">
      <doc xml:space="preserve">Converts the GError to GVariant.</doc>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve">#GVariant object if successful,
%NULL otherwise.</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve">instance of #GError</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
      </parameters>
    </function>
    <function name="generate_nonce" c:identifier="gsignond_generate_nonce">
      <doc xml:space="preserve">This function generates a random secure nonce using SHA1 HMAC.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the nonce in lowercase hexadecimal format, 40 bytes long.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="is_host_in_domain"
              c:identifier="gsignond_is_host_in_domain">
      <doc xml:space="preserve">Checks if @host belongs to @domain.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the result</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="host" transfer-ownership="none">
          <doc xml:space="preserve">a host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve">a domain name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="security_context_from_variant"
              c:identifier="gsignond_security_context_from_variant"
              moved-to="SecurityContext.from_variant">
      <doc xml:space="preserve">Builds a #GSignondSecurityContext item from a GVariant of type "(ss)".</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">#GSignondSecurityContext item.</doc>
        <type name="SecurityContext" c:type="GSignondSecurityContext*"/>
      </return-value>
      <parameters>
        <parameter name="variant" transfer-ownership="none">
          <doc xml:space="preserve">GVariant item with a #GSignondSecurityContext construct.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sequence_to_array"
              c:identifier="gsignond_sequence_to_array">
      <doc xml:space="preserve">Convert sequence of strings to null-terminated string array.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">Null-terminated array of strings</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="seq" transfer-ownership="none">
          <doc xml:space="preserve">Sequence of strings to convert</doc>
          <type name="GLib.Sequence" c:type="GSequence*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sequence_to_variant"
              c:identifier="gsignond_sequence_to_variant"
              introspectable="0">
      <doc xml:space="preserve">Convert a string sequence to a variant.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">#GVariant of type "as".</doc>
        <type name="GLib.Variant" c:type="GVariant*"/>
      </return-value>
      <parameters>
        <parameter name="seq" transfer-ownership="none">
          <doc xml:space="preserve">Sequence of strings to convert</doc>
          <type name="GLib.Sequence" c:type="GSequence*"/>
        </parameter>
      </parameters>
    </function>
    <function name="variant_to_sequence"
              c:identifier="gsignond_variant_to_sequence"
              introspectable="0">
      <doc xml:space="preserve">Convert variant containing string array to sequence.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">#GSequence of strings</doc>
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </return-value>
      <parameters>
        <parameter name="var" transfer-ownership="none">
          <doc xml:space="preserve">Variant of "as" to convert</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="wipe_directory" c:identifier="gsignond_wipe_directory">
      <doc xml:space="preserve">This function securely wipes the contents of the directory by calling
gsignond_wipe_file() on each file. It also removes links and empty directories but
does not recursively wipe them.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if wiping and removal was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dirname" transfer-ownership="none">
          <doc xml:space="preserve">directory to wipe</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="wipe_file" c:identifier="gsignond_wipe_file">
      <doc xml:space="preserve">This function securely wipes the contents of the file, by overwriting it with
0's, then 1's, then random data. The file is then removed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">TRUE if wiping and removal was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">filename to wipe</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
