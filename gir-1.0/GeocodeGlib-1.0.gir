<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <include name="SoupGNOME" version="2.4"/>
  <package name="geocode-glib-1.0"/>
  <namespace name="GeocodeGlib"
             version="1.0"
             shared-library="libgeocode-glib.so.0"
             c:identifier-prefixes="Geocode"
             c:symbol-prefixes="geocode">
    <enumeration name="Error"
                 c:type="GeocodeError"
                 glib:error-domain="geocode_error">
      <doc xml:whitespace="preserve">Error codes returned by geocode-glib functions.</doc>
      <member name="parse" value="0" c:identifier="GEOCODE_ERROR_PARSE">
        <doc xml:whitespace="preserve">An error occured parsing the response from the web service.</doc>
      </member>
      <member name="not_supported"
              value="1"
              c:identifier="GEOCODE_ERROR_NOT_SUPPORTED">
        <doc xml:whitespace="preserve">The request made was not supported.</doc>
      </member>
      <member name="no_matches"
              value="2"
              c:identifier="GEOCODE_ERROR_NO_MATCHES">
        <doc xml:whitespace="preserve">The requests made didn't have any matches.</doc>
      </member>
      <member name="invalid_arguments"
              value="3"
              c:identifier="GEOCODE_ERROR_INVALID_ARGUMENTS">
        <doc xml:whitespace="preserve">The request made contained invalid arguments.</doc>
      </member>
    </enumeration>
    <class name="Forward"
           c:symbol-prefix="forward"
           c:type="GeocodeForward"
           parent="GObject.Object"
           glib:type-name="GeocodeForward"
           glib:get-type="geocode_forward_get_type"
           glib:type-struct="ForwardClass">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeForward structure are private and should never be accessed directly.</doc>
      <constructor name="new_for_params"
                   c:identifier="geocode_forward_new_for_params">
        <doc xml:whitespace="preserve">Creates a new #GeocodeForward to perform geocoding with. The
#GHashTable is in the format used by Telepathy, and documented
on &lt;ulink url="http://telepathy.freedesktop.org/spec/Connection_Interface_Location.html#Mapping:Location"&gt;Telepathy's specification site&lt;/ulink&gt;.

See also: &lt;ulink url="http://xmpp.org/extensions/xep-0080.html"&gt;XEP-0080 specification&lt;/ulink&gt;.

Note that you will get exactly one result when doing the search.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeForward. Use g_object_unref() when done.</doc>
          <type name="Forward" c:type="GeocodeForward*"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GHashTable with string keys, and #GValue values.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_string"
                   c:identifier="geocode_forward_new_for_string">
        <doc xml:whitespace="preserve">Creates a new #GeocodeForward to perform forward geocoding with. The
string is in free-form format.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeForward. Use g_object_unref() when done.</doc>
          <type name="Forward" c:type="GeocodeForward*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string containing a free-form description of the location</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="search" c:identifier="geocode_forward_search" throws="1">
        <doc xml:whitespace="preserve">Gets the result of a forward geocoding
query using a web service.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="forward" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeForward representing a query</doc>
            <type name="Forward" c:type="GeocodeForward*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_async" c:identifier="geocode_forward_search_async">
        <doc xml:whitespace="preserve">Asynchronously performs a forward geocoding
query using a web service. Use geocode_forward_search() to do the same
thing synchronously.

When the operation is finished, @callback will be called. You can then call
geocode_forward_search_finish() to get the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="forward" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeForward representing a query</doc>
            <type name="Forward" c:type="GeocodeForward*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable forward, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="geocode_forward_search_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes a forward geocoding operation. See geocode_forward_search_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="forward" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeForward representing a query</doc>
            <type name="Forward" c:type="GeocodeForward*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_answer_count"
              c:identifier="geocode_forward_set_answer_count">
        <doc xml:whitespace="preserve">Sets the number of requested results to @count.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="forward" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeForward representing a query</doc>
            <type name="Forward" c:type="GeocodeForward*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of requested results</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ForwardPrivate" c:type="GeocodeForwardPrivate*"/>
      </field>
    </class>
    <record name="ForwardClass"
            c:type="GeocodeForwardClass"
            glib:is-gtype-struct-for="Forward">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeForwardClass structure are private and should never be accessed directly.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ForwardPrivate" c:type="GeocodeForwardPrivate" disguised="1">
    </record>
    <class name="Ipclient"
           c:symbol-prefix="ipclient"
           c:type="GeocodeIpclient"
           parent="GObject.Object"
           glib:type-name="GeocodeIpclient"
           glib:get-type="geocode_ipclient_get_type"
           glib:type-struct="IpclientClass">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeIpclient structure are private and should never be accessed directly.</doc>
      <constructor name="new" c:identifier="geocode_ipclient_new">
        <doc xml:whitespace="preserve">Creates a new #GeocodeIpclient to fetch the geolocation data.
Here the IP address is not provided the by client, hence the server
will try to get the IP address from various proxy variables.
Use geocode_ipclient_search_async() to query the server</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeIpclient. Use g_object_unref() when done.</doc>
          <type name="Ipclient" c:type="GeocodeIpclient*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_ip"
                   c:identifier="geocode_ipclient_new_for_ip">
        <doc xml:whitespace="preserve">Creates a new #GeocodeIpclient to fetch the geolocation data
Use geocode_ipclient_search_async() to query the server</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeIpclient. Use g_object_unref() when done.</doc>
          <type name="Ipclient" c:type="GeocodeIpclient*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:whitespace="preserve">The IP address</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="search" c:identifier="geocode_ipclient_search" throws="1">
        <doc xml:whitespace="preserve">Gets the geolocation data for an IP address from the server.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a string containing the result of the query in JSON format or %NULL in case of errors. Free the returned string with g_free() when done.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ipclient" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeIpclient representing a query</doc>
            <type name="Ipclient" c:type="GeocodeIpclient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_async" c:identifier="geocode_ipclient_search_async">
        <doc xml:whitespace="preserve">Asynchronously performs a query to get the geolocation information
from the server. Use geocode_ipclient_search() to do the same
thing synchronously.

When the operation is finished, @callback will be called. You can then call
geocode_ipclient_search_finish() to get the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ipclient" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeIpclient representing a query</doc>
            <type name="Ipclient" c:type="GeocodeIpclient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable forward, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="geocode_ipclient_search_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes a geolocation search operation. See geocode_ipclient_search_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a string containing the result of the query in JSON format or %NULL in case of errors. Free the returned string with g_free() when done.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ipclient" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeIpclient representing a query</doc>
            <type name="Ipclient" c:type="GeocodeIpclient*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="server"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="IpclientPrivate" c:type="GeocodeIpclientPrivate*"/>
      </field>
    </class>
    <record name="IpclientClass"
            c:type="GeocodeIpclientClass"
            glib:is-gtype-struct-for="Ipclient">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeIpclientClass structure are private and should never be accessed directly.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="IpclientPrivate"
            c:type="GeocodeIpclientPrivate"
            disguised="1">
    </record>
    <record name="Location"
            c:type="GeocodeLocation"
            glib:type-name="GeocodeLocation"
            glib:get-type="geocode_location_get_type"
            c:symbol-prefix="location">
      <doc xml:whitespace="preserve">The #GeocodeLocation structure represents a location
on earth, with an optional description.</doc>
      <field name="longitude" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="latitude" writable="1">
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="timestamp" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <constructor name="new" c:identifier="geocode_location_new">
        <doc xml:whitespace="preserve">Creates a new #GeocodeLocation object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeLocation object. Use geocode_location_free() when done.</doc>
          <type name="Location" c:type="GeocodeLocation*"/>
        </return-value>
        <parameters>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid latitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid longitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_description"
                   c:identifier="geocode_location_new_with_description">
        <doc xml:whitespace="preserve">Creates a new #GeocodeLocation object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeLocation object. Use geocode_location_free() when done.</doc>
          <type name="Location" c:type="GeocodeLocation*"/>
        </return-value>
        <parameters>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid latitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid longitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">a description for the location</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free" c:identifier="geocode_location_free">
        <doc xml:whitespace="preserve">Frees a #GeocodeLocation object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeLocation object</doc>
            <type name="Location" c:type="GeocodeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance_from"
              c:identifier="geocode_location_get_distance_from">
        <doc xml:whitespace="preserve">Calculates the distance in km, along the curvature of the Earth,
between 2 locations. Note that altitude changes are not
taken into account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a distance in km.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="loca" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeLocation</doc>
            <type name="Location" c:type="GeocodeLocation*"/>
          </instance-parameter>
          <parameter name="locb" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeLocation</doc>
            <type name="Location" c:type="GeocodeLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="geocode_location_set_description">
        <doc xml:whitespace="preserve">Sets the #GeocodeLocation object's @description to
the passed value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <type name="Location" c:type="GeocodeLocation*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">a description for the location</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <constant name="OBJECT_FIELD_AIRPORT"
              value="airport"
              c:type="GEOCODE_OBJECT_FIELD_AIRPORT">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the closest
airport to the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_CITY"
              value="city"
              c:type="GEOCODE_OBJECT_FIELD_CITY">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the city
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTRY"
              value="country"
              c:type="GEOCODE_OBJECT_FIELD_COUNTRY">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the country
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTRYCODE"
              value="countrycode"
              c:type="GEOCODE_OBJECT_FIELD_COUNTRYCODE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the country
code of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTY"
              value="county"
              c:type="GEOCODE_OBJECT_FIELD_COUNTY">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the county
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTYCODE"
              value="countycode"
              c:type="GEOCODE_OBJECT_FIELD_COUNTYCODE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the county code
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_HASH"
              value="hash"
              c:type="GEOCODE_OBJECT_FIELD_HASH">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the hash
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_HOUSE"
              value="house"
              c:type="GEOCODE_OBJECT_FIELD_HOUSE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the house
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LATITUDE"
              value="latitude"
              c:type="GEOCODE_OBJECT_FIELD_LATITUDE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the latitude
at the center of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE1"
              value="line1"
              c:type="GEOCODE_OBJECT_FIELD_LINE1">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the line1
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE2"
              value="line2"
              c:type="GEOCODE_OBJECT_FIELD_LINE2">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the line2
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE3"
              value="line3"
              c:type="GEOCODE_OBJECT_FIELD_LINE3">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the line3
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE4"
              value="line4"
              c:type="GEOCODE_OBJECT_FIELD_LINE4">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the line4
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LONGITUDE"
              value="longitude"
              c:type="GEOCODE_OBJECT_FIELD_LONGITUDE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the longitude
at the center of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_NAME"
              value="name"
              c:type="GEOCODE_OBJECT_FIELD_NAME">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the name
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_NEIGHBORHOOD"
              value="neighborhood"
              c:type="GEOCODE_OBJECT_FIELD_NEIGHBORHOOD">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the neighborhood
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_OFFSETLAT"
              value="offsetlat"
              c:type="GEOCODE_OBJECT_FIELD_OFFSETLAT">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the latitude of
the offset point in degrees, representing building/parcel
setback from road center-line for the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_OFFSETLON"
              value="offsetlon"
              c:type="GEOCODE_OBJECT_FIELD_OFFSETLON">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the longitude
the offset point in degrees, representing building/parcel
setback from road center-line for the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_POSTAL"
              value="postal"
              c:type="GEOCODE_OBJECT_FIELD_POSTAL">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the postal
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_RADIUS"
              value="radius"
              c:type="GEOCODE_OBJECT_FIELD_RADIUS">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the radius of the
matched area in meters.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STATE"
              value="state"
              c:type="GEOCODE_OBJECT_FIELD_STATE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the state
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STATECODE"
              value="statecode"
              c:type="GEOCODE_OBJECT_FIELD_STATECODE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the statecode
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STREET"
              value="street"
              c:type="GEOCODE_OBJECT_FIELD_STREET">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the street
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_TIMEZONE"
              value="timezone"
              c:type="GEOCODE_OBJECT_FIELD_TIMEZONE">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the timezone
of the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_UZIP"
              value="uzip"
              c:type="GEOCODE_OBJECT_FIELD_UZIP">
      <doc xml:whitespace="preserve">Metadata field for a result, representing the unique
zip code (or postal code) for the matched area.</doc>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Reverse"
           c:symbol-prefix="reverse"
           c:type="GeocodeReverse"
           parent="GObject.Object"
           glib:type-name="GeocodeReverse"
           glib:get-type="geocode_reverse_get_type"
           glib:type-struct="ReverseClass">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeReverse structure are private and should never be accessed directly.</doc>
      <constructor name="new_for_location"
                   c:identifier="geocode_reverse_new_for_location">
        <doc xml:whitespace="preserve">Creates a new #GeocodeReverse to perform reverse geocoding with.
Use geocode_reverse_resolve_async() to perform the resolution.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeReverse. Use g_object_unref() when done.</doc>
          <type name="Reverse" c:type="GeocodeReverse*"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeLocation object</doc>
            <type name="Location" c:type="GeocodeLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="resolve" c:identifier="geocode_reverse_resolve" throws="1">
        <doc xml:whitespace="preserve">Gets the result of a reverse geocoding
query using a web service.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeReverse representing a query</doc>
            <type name="Reverse" c:type="GeocodeReverse*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resolve_async"
              c:identifier="geocode_reverse_resolve_async">
        <doc xml:whitespace="preserve">Asynchronously gets the result of a reverse geocoding
query using a web service. Use geocode_reverse_resolve() to do the same
thing synchronously.

When the operation is finished, @callback will be called. You can then call
geocode_reverse_resolve_finish() to get the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeReverse representing a query</doc>
            <type name="Reverse" c:type="GeocodeReverse*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_finish"
              c:identifier="geocode_reverse_resolve_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes a reverse geocoding operation. See geocode_reverse_resolve_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GeocodeReverse representing a query</doc>
            <type name="Reverse" c:type="GeocodeReverse*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ReversePrivate" c:type="GeocodeReversePrivate*"/>
      </field>
    </class>
    <record name="ReverseClass"
            c:type="GeocodeReverseClass"
            glib:is-gtype-struct-for="Reverse">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeReverseClass structure are private and should never be accessed directly.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ReversePrivate" c:type="GeocodeReversePrivate" disguised="1">
    </record>
    <function name="error_quark" c:identifier="geocode_error_quark">
      <doc xml:whitespace="preserve">Gets the geocode-glib error quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
