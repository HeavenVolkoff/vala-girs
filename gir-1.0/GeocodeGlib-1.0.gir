<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Soup" version="2.4"/>
  <include name="SoupGNOME" version="2.4"/>
  <package name="geocode-glib-1.0"/>
  <namespace name="GeocodeGlib"
             version="1.0"
             shared-library="libgeocode-glib.so.0"
             c:identifier-prefixes="Geocode"
             c:symbol-prefixes="geocode_">
    <enumeration name="Error"
                 c:type="GeocodeError"
                 glib:error-domain="geocode_error">
      <doc xml:whitespace="preserve">Error codes returned by geocode-glib functions.</doc>
      <member name="parse" value="0" c:identifier="GEOCODE_ERROR_PARSE"/>
      <member name="not_supported"
              value="1"
              c:identifier="GEOCODE_ERROR_NOT_SUPPORTED"/>
      <member name="no_matches"
              value="2"
              c:identifier="GEOCODE_ERROR_NO_MATCHES"/>
    </enumeration>
    <constant name="OBJECT_FIELD_AIRPORT"
              value="airport"
              c:type="GEOCODE_OBJECT_FIELD_AIRPORT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_CITY"
              value="city"
              c:type="GEOCODE_OBJECT_FIELD_CITY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTRY"
              value="country"
              c:type="GEOCODE_OBJECT_FIELD_COUNTRY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTRYCODE"
              value="countrycode"
              c:type="GEOCODE_OBJECT_FIELD_COUNTRYCODE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTY"
              value="county"
              c:type="GEOCODE_OBJECT_FIELD_COUNTY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_COUNTYCODE"
              value="countycode"
              c:type="GEOCODE_OBJECT_FIELD_COUNTYCODE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_HASH"
              value="hash"
              c:type="GEOCODE_OBJECT_FIELD_HASH">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_HOUSE"
              value="house"
              c:type="GEOCODE_OBJECT_FIELD_HOUSE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LATITUDE"
              value="latitude"
              c:type="GEOCODE_OBJECT_FIELD_LATITUDE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE1"
              value="line1"
              c:type="GEOCODE_OBJECT_FIELD_LINE1">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE2"
              value="line2"
              c:type="GEOCODE_OBJECT_FIELD_LINE2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE3"
              value="line3"
              c:type="GEOCODE_OBJECT_FIELD_LINE3">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LINE4"
              value="line4"
              c:type="GEOCODE_OBJECT_FIELD_LINE4">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_LONGITUDE"
              value="longitude"
              c:type="GEOCODE_OBJECT_FIELD_LONGITUDE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_NAME"
              value="name"
              c:type="GEOCODE_OBJECT_FIELD_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_NEIGHBORHOOD"
              value="neighborhood"
              c:type="GEOCODE_OBJECT_FIELD_NEIGHBORHOOD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_OFFSETLAT"
              value="offsetlat"
              c:type="GEOCODE_OBJECT_FIELD_OFFSETLAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_OFFSETLON"
              value="offsetlon"
              c:type="GEOCODE_OBJECT_FIELD_OFFSETLON">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_POSTAL"
              value="postal"
              c:type="GEOCODE_OBJECT_FIELD_POSTAL">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_RADIUS"
              value="radius"
              c:type="GEOCODE_OBJECT_FIELD_RADIUS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STATE"
              value="state"
              c:type="GEOCODE_OBJECT_FIELD_STATE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STATECODE"
              value="statecode"
              c:type="GEOCODE_OBJECT_FIELD_STATECODE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_STREET"
              value="street"
              c:type="GEOCODE_OBJECT_FIELD_STREET">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_TIMEZONE"
              value="timezone"
              c:type="GEOCODE_OBJECT_FIELD_TIMEZONE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_FIELD_UZIP"
              value="uzip"
              c:type="GEOCODE_OBJECT_FIELD_UZIP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="GeocodeObject"
           parent="GObject.Object"
           glib:type-name="GeocodeObject"
           glib:get-type="geocode_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:whitespace="preserve">All the fields in the #GeocodeObject structure are private and should never be accessed directly.</doc>
      <constructor name="new" c:identifier="geocode_object_new">
        <doc xml:whitespace="preserve">Creates a new #GeocodeObject to perform geocoding with. Use
geocode_object_add() to add new parameters, and
geocode_object_resolve_async() to perform the resolution.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeObject. Use g_object_unref() when done.</doc>
          <type name="Object" c:type="GeocodeObject*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_coords"
                   c:identifier="geocode_object_new_for_coords">
        <doc xml:whitespace="preserve">Creates a new #GeocodeObject to perform reverse geocoding with.
Use geocode_object_resolve_async() to perform the resolution.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeObject. Use g_object_unref() when done.</doc>
          <type name="Object" c:type="GeocodeObject*"/>
        </return-value>
        <parameters>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid latitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a valid longitude</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_params"
                   c:identifier="geocode_object_new_for_params">
        <doc xml:whitespace="preserve">Creates a new #GeocodeObject to perform geocoding with. The
#GHashTable is in the format used by Telepathy, and documented
on &lt;ulink url="http://telepathy.freedesktop.org/spec/Connection_Interface_Location.html#Mapping:Location"&gt;Telepathy's specification site&lt;/ulink&gt;.

See also: &lt;ulink url="http://xmpp.org/extensions/xep-0080.html"&gt;XEP-0080 specification&lt;/ulink&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GeocodeObject. Use g_object_unref() when done.</doc>
          <type name="Object" c:type="GeocodeObject*"/>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GHashTable with string keys, and #GValue values.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_coords" c:identifier="geocode_object_get_coords">
        <doc xml:whitespace="preserve">Parses the results hashtable and exports the longitude and latitude
as #gdoubles.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE when the longitude and latitude have been found and the return parameters set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="results" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GHashTable as generated by geocode_object_resolve() and geocode_object_resolve_async()</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #gdouble</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #gdouble</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="geocode_object_add">
        <doc xml:whitespace="preserve">Adds parameters to pass to the web service. A copy of the key
and value parameters are kept internally.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string representing a parameter to the web service</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">a string representing the value of a parameter</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve" c:identifier="geocode_object_resolve" throws="1">
        <doc xml:whitespace="preserve">Gets the result of a geocoding or reverse geocoding
query using a web service.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="resolve_async" c:identifier="geocode_object_resolve_async">
        <doc xml:whitespace="preserve">Asynchronously gets the result of a geocoding or reverse geocoding
query using a web service. Use geocode_object_resolve() to do the same
thing synchronously.

When the operation is finished, @callback will be called. You can then call
geocode_object_resolve_finish() to get the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_finish"
              c:identifier="geocode_object_resolve_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes a query operation. See geocode_object_resolve_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GHashTable containing the results of the query or %NULL in case of errors. Free the returned string with g_hash_table_destroy() when done.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ObjectPrivate" c:type="GeocodeObjectPrivate*"/>
      </field>
    </class>
    <record name="ObjectClass"
            c:type="GeocodeObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="ObjectPrivate" c:type="GeocodeObjectPrivate" disguised="1">
    </record>
    <function name="error_quark" c:identifier="geocode_error_quark">
      <doc xml:whitespace="preserve">Gets the geocode-glib error quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
