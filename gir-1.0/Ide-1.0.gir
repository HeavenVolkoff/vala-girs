<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Egg" version="1.0"/>
  <include name="Gio" version="2.0"/>
  <include name="GtkSource" version="3.0"/>
  <include name="Peas" version="1.0"/>
  <include name="Pnl" version="1.0"/>
  <include name="Template" version="1.0"/>
  <c:include name="ide.h"/>
  <namespace name="Ide"
             version="1.0"
             shared-library="libide-1.0.so,libegg-private.so.0,libtemplate-glib-1.0.so.0"
             c:identifier-prefixes="Ide"
             c:symbol-prefixes="ide">
    <class name="Application"
           c:symbol-prefix="application"
           c:type="IdeApplication"
           parent="Gtk.Application"
           glib:type-name="IdeApplication"
           glib:get-type="ide_application_get_type"
           glib:type-struct="ApplicationClass">
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <constructor name="new" c:identifier="ide_application_new">
        <return-value transfer-ownership="full">
          <type name="Application" c:type="IdeApplication*"/>
        </return-value>
      </constructor>
      <function name="get_main_thread"
                c:identifier="ide_application_get_main_thread">
        <doc xml:space="preserve">This function returns the thread-id of the main thread for the applicaiton.
This is only really useful to determine if you are in the main UI thread.
This is used by IDE_IS_MAIN_THREAD for assertion checks.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GThread</doc>
          <type name="GLib.Thread" c:type="GThread*"/>
        </return-value>
      </function>
      <method name="get_keybindings_mode"
              c:identifier="ide_application_get_keybindings_mode">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_by_id"
              c:identifier="ide_application_get_menu_by_id">
        <doc xml:space="preserve">Similar to gtk_application_get_menu_by_id() but takes into account merging
the menus provided by, and extended by, plugins.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GMenu.</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The id of the menu to lookup.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="ide_application_get_mode">
        <return-value transfer-ownership="none">
          <type name="ApplicationMode" c:type="IdeApplicationMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recent_projects"
              c:identifier="ide_application_get_recent_projects">
        <doc xml:space="preserve">This method will retreive an #IdeRecentProjects for the application that
represents recent and discover projects on the system. The first time
the #IdeRecentProjects is loaded, discovery of projects will occur. There
is no need to call ide_recent_projects_discover_async().

If you would like to display a spinner while discovery is in process, simply
connect to the #IdeRecentProjects:busy: property notification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeRecentProjects.</doc>
          <type name="RecentProjects" c:type="IdeRecentProjects*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_started_at"
              c:identifier="ide_application_get_started_at">
        <doc xml:space="preserve">Gets the startup time of the application.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_worker_async"
              c:identifier="ide_application_get_worker_async">
        <doc xml:space="preserve">Asynchronously requests a #GDBusProxy to a service provided in a worker
process. The worker should be an #IdeWorker implemented by the plugin named
@plugin_name. The #IdeWorker is responsible for created both the service
registered on the bus and the proxy to it.

The #IdeApplication is responsible for spawning a subprocess for the worker.

@callback should call ide_application_get_worker_finish() with the result
provided to retrieve the result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="plugin_name" transfer-ownership="none">
            <doc xml:space="preserve">The name of the plugin.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_worker_finish"
              c:identifier="ide_application_get_worker_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to get a proxy to a worker process.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GDBusProxy or %NULL.</doc>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_project" c:identifier="ide_application_open_project">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_projects_window"
              c:identifier="ide_application_show_projects_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <interface name="ApplicationAddin"
               c:symbol-prefix="application_addin"
               c:type="IdeApplicationAddin"
               glib:type-name="IdeApplicationAddin"
               glib:get-type="ide_application_addin_get_type"
               glib:type-struct="ApplicationAddinInterface">
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve">This interface method is called when the application is started or
the plugin has just been activated.

Use this to setup code in your plugin that needs to be loaded once
per application process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve">This inteface method is called when the application is shutting down
or the plugin has been unloaded.

Use this function to cleanup after anything setup in ide_application_addin_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_application_addin_load">
        <doc xml:space="preserve">This interface method is called when the application is started or
the plugin has just been activated.

Use this to setup code in your plugin that needs to be loaded once
per application process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_application_addin_unload">
        <doc xml:space="preserve">This inteface method is called when the application is shutting down
or the plugin has been unloaded.

Use this function to cleanup after anything setup in ide_application_addin_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ApplicationAddinInterface"
            c:type="IdeApplicationAddinInterface"
            glib:is-gtype-struct-for="ApplicationAddin">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeApplication.</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeApplicationAddin.</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeApplication.</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ApplicationClass"
            c:type="IdeApplicationClass"
            glib:is-gtype-struct-for="Application">
      <field name="parent_class">
        <type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
      </field>
    </record>
    <enumeration name="ApplicationMode" c:type="IdeApplicationMode">
      <member name="primary"
              value="0"
              c:identifier="IDE_APPLICATION_MODE_PRIMARY">
      </member>
      <member name="worker"
              value="1"
              c:identifier="IDE_APPLICATION_MODE_WORKER">
      </member>
      <member name="tool" value="2" c:identifier="IDE_APPLICATION_MODE_TOOL">
      </member>
      <member name="tests" value="3" c:identifier="IDE_APPLICATION_MODE_TESTS">
      </member>
    </enumeration>
    <interface name="ApplicationTool"
               c:symbol-prefix="application_tool"
               c:type="IdeApplicationTool"
               glib:type-name="IdeApplicationTool"
               glib:get-type="ide_application_tool_get_type"
               glib:type-struct="ApplicationToolInterface">
      <virtual-method name="run_async" invoker="run_async">
        <doc xml:space="preserve">Asynchronously runs an application tool. This is typically done on the
command line using the `ide` command.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationTool</doc>
            <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
          </instance-parameter>
          <parameter name="arguments" transfer-ownership="none">
            <doc xml:space="preserve">argv for the command</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_finish" invoker="run_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="run_async" c:identifier="ide_application_tool_run_async">
        <doc xml:space="preserve">Asynchronously runs an application tool. This is typically done on the
command line using the `ide` command.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeApplicationTool</doc>
            <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
          </instance-parameter>
          <parameter name="arguments" transfer-ownership="none">
            <doc xml:space="preserve">argv for the command</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_application_tool_run_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ApplicationToolInterface"
            c:type="IdeApplicationToolInterface"
            glib:is-gtype-struct-for="ApplicationTool">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="run_async">
        <callback name="run_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeApplicationTool</doc>
              <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
            </parameter>
            <parameter name="arguments" transfer-ownership="none">
              <doc xml:space="preserve">argv for the command</doc>
              <array c:type="gchar**">
                <type name="utf8"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">A #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve">A callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve">User data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_finish">
        <callback name="run_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ApplicationTool" c:type="IdeApplicationTool*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="BUFFER_LINE_FLAGS_DIAGNOSTICS_MASK"
              value="0"
              c:type="IDE_BUFFER_LINE_FLAGS_DIAGNOSTICS_MASK">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="BackForwardItem"
           c:symbol-prefix="back_forward_item"
           c:type="IdeBackForwardItem"
           parent="Object"
           glib:type-name="IdeBackForwardItem"
           glib:get-type="ide_back_forward_item_get_type"
           glib:type-struct="BackForwardItemClass">
      <constructor name="new" c:identifier="ide_back_forward_item_new">
        <return-value transfer-ownership="full">
          <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="chain" c:identifier="ide_back_forward_item_chain">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="ide_back_forward_item_get_uri">
        <return-value transfer-ownership="full">
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="uri"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #IdeBackForwardItem:uri property contains the location for the
back/forward item.

This might be a uri to a file, including a line number.

#IdeWorkbenchAddin can hook how these are loaded, by implementing the
IdeWorkbenchAddin::can_open() vfunc and associated functions.</doc>
        <type name="Uri"/>
      </property>
    </class>
    <record name="BackForwardItemClass"
            c:type="IdeBackForwardItemClass"
            glib:is-gtype-struct-for="BackForwardItem">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="BackForwardList"
           c:symbol-prefix="back_forward_list"
           c:type="IdeBackForwardList"
           parent="Object"
           glib:type-name="IdeBackForwardList"
           glib:get-type="ide_back_forward_list_get_type"
           glib:type-struct="BackForwardListClass">
      <method name="branch" c:identifier="ide_back_forward_list_branch">
        <doc xml:space="preserve">Branches @self into a newly created #IdeBackForwardList.

This can be used independently and then merged back into a global
#IdeBackForwardList. This can be useful in situations where you have
multiple sets of editors.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBackForwardList</doc>
          <type name="BackForwardList" c:type="IdeBackForwardList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_go_backward"
              c:identifier="ide_back_forward_list_get_can_go_backward">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_go_forward"
              c:identifier="ide_back_forward_list_get_can_go_forward">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_item"
              c:identifier="ide_back_forward_list_get_current_item">
        <doc xml:space="preserve">Retrieves the current #IdeBackForwardItem or %NULL if no items have been
added to the #IdeBackForwardList.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeBackForwardItem or %NULL.</doc>
          <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_backward"
              c:identifier="ide_back_forward_list_go_backward">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_forward"
              c:identifier="ide_back_forward_list_go_forward">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="ide_back_forward_list_merge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="ide_back_forward_list_push">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="BackForwardItem" c:type="IdeBackForwardItem*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-go-backward" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-go-forward" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="current-item" transfer-ownership="none">
        <type name="BackForwardItem"/>
      </property>
      <glib:signal name="navigate-to" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BackForwardItem"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BackForwardListClass"
            c:type="IdeBackForwardListClass"
            glib:is-gtype-struct-for="BackForwardList">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Buffer"
           c:symbol-prefix="buffer"
           c:type="IdeBuffer"
           parent="GtkSource.Buffer"
           glib:type-name="IdeBuffer"
           glib:get-type="ide_buffer_get_type"
           glib:type-struct="BufferClass">
      <virtual-method name="cursor_moved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_for_volume_change"
              c:identifier="ide_buffer_check_for_volume_change">
        <doc xml:space="preserve">Update the #IdeBuffer:read-only property and the corresponding
modification time (mtime).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_busy" c:identifier="ide_buffer_get_busy">
        <doc xml:space="preserve">Gets the #IdeBuffer:busy property.
Return whether the buffer is performing background work or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #IdeBuffer is performing background work. Otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change_count"
              c:identifier="ide_buffer_get_change_count">
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_changed_on_volume"
              c:identifier="ide_buffer_get_changed_on_volume">
        <doc xml:space="preserve">Gets if the file backing the buffer has changed on the underlying storage.

Use ide_buffer_manager_load_file_async() to reload the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the file has changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content" c:identifier="ide_buffer_get_content">
        <doc xml:space="preserve">Gets the contents of the buffer as GBytes.

By using this function to get the bytes, you allow #IdeBuffer to avoid calculating the buffer
text unnecessarily, potentially saving on allocations.

Additionally, this allows the buffer to update the state in #IdeUnsavedFiles if the content
is out of sync.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GBytes containing the buffer content.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="ide_buffer_get_context">
        <doc xml:space="preserve">Gets the #IdeBuffer:context property. This is the #IdeContext that owns the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeContext.</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_diagnostic_at_iter"
              c:identifier="ide_buffer_get_diagnostic_at_iter">
        <doc xml:space="preserve">Gets the first diagnostic that overlaps the position</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeDiagnostic or %NULL.</doc>
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_buffer_get_file">
        <doc xml:space="preserve">Gets the underlying file behind the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeFile.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlight_diagnostics"
              c:identifier="ide_buffer_get_highlight_diagnostics">
        <doc xml:space="preserve">Gets the #IdeBuffer:highlight-diagnostics property.
Return whether the diagnostic warnings and errors should be highlighted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if diagnostics are highlighted. Otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter_at_source_location"
              c:identifier="ide_buffer_get_iter_at_source_location">
        <doc xml:space="preserve">Fill @iter with the position designated by @location.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeSourceLocation.</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_flags" c:identifier="ide_buffer_get_line_flags">
        <doc xml:space="preserve">Return the flags set for the #IdeBuffer @line number.
(diagnostics and errors messages, line changed or added, notes)</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBufferLineFlags struct.</doc>
          <type name="BufferLineFlags" c:type="IdeBufferLineFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve">a buffer line number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_read_only" c:identifier="ide_buffer_get_read_only">
        <doc xml:space="preserve">Gets the #IdeBuffer:read-only property. This property indicate if the underlying file is read only or not.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #IdeBuffer is read only. Otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selection_bounds"
              c:identifier="ide_buffer_get_selection_bounds">
        <doc xml:space="preserve">This function acts like gtk_text_buffer_get_selection_bounds() except that it always
places the location of the insert mark at @insert and the location of the selection
mark at @selection.

Calling gtk_text_iter_order() with the results of this function would be equivalent
to calling gtk_text_buffer_get_selection_bounds().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="insert"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter to get the insert position.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="selection"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter to get the selection position.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_style_scheme_name"
              c:identifier="ide_buffer_get_style_scheme_name">
        <doc xml:space="preserve">Gets the #IdeBuffer:style-scheme-name property.
This property contains the current style scheme used by the buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the name of the currently used style scheme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbol_at_location_async"
              c:identifier="ide_buffer_get_symbol_at_location_async">
        <doc xml:space="preserve">Asynchronously get a possible symbol at @location.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkTextIter indicating a position to search for a symbol.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #gpointer to hold user data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_at_location_finish"
              c:identifier="ide_buffer_get_symbol_at_location_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to locate a symbol at a location.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSymbol or %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_resolver"
              c:identifier="ide_buffer_get_symbol_resolver">
        <doc xml:space="preserve">Gets the symbol resolver for the buffer based on the current language.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSymbolResolver or %NULL.</doc>
          <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_buffer_get_title">
        <doc xml:space="preserve">Gets the #IdeBuffer:title property. This property contains a title for the buffer suitable
for display.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the buffer title.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_word_at_iter"
              c:identifier="ide_buffer_get_word_at_iter">
        <doc xml:space="preserve">Gets the word found under the position denoted by @iter.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hold" c:identifier="ide_buffer_hold">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rehighlight" c:identifier="ide_buffer_rehighlight">
        <doc xml:space="preserve">Force the #IdeBuffer to rebuild the highlight.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="ide_buffer_release">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_file" c:identifier="ide_buffer_set_file">
        <doc xml:space="preserve">Sets the underlying file to use when saving and loading @self to and from storage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeFile.</doc>
            <type name="File" c:type="IdeFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_highlight_diagnostics"
              c:identifier="ide_buffer_set_highlight_diagnostics">
        <doc xml:space="preserve">Sets the #IdeBuffer:highlight-diagnostics property.
Sets whether the diagnostic warnings and errors should be highlighted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="highlight_diagnostics" transfer-ownership="none">
            <doc xml:space="preserve">Whether to highlight the diagnostics or not.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style_scheme_name"
              c:identifier="ide_buffer_set_style_scheme_name">
        <doc xml:space="preserve">Sets the #IdeBuffer:style-scheme-name property.
Sets the style scheme to be used by this buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="style_scheme_name" transfer-ownership="none">
            <doc xml:space="preserve">A string containing the name of the style scheme to use.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync_to_unsaved_files"
              c:identifier="ide_buffer_sync_to_unsaved_files">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="trim_trailing_whitespace"
              c:identifier="ide_buffer_trim_trailing_whitespace">
        <doc xml:space="preserve">Trim trailing whitespaces from the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="busy" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="changed-on-volume" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="file" writable="1" transfer-ownership="none">
        <type name="File"/>
      </property>
      <property name="has-diagnostics" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="highlight-diagnostics"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-only" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="style-scheme-name"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GtkSource.Buffer" c:type="GtkSourceBuffer"/>
      </field>
      <glib:signal name="cursor-moved" when="last">
        <doc xml:space="preserve">This signal is emitted when the insertion location has moved. You might
want to attach to this signal to update the location of the insert mark in
the display.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter.</doc>
            <type name="Gtk.TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="destroy" when="last">
        <doc xml:space="preserve">This signal is emitted when the buffer should be destroyed, as the
#IdeBufferManager has reclaimed the buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="line-flags-changed" when="last">
        <doc xml:space="preserve">This signal is emitted when the calculated line flags have changed. This occurs when
diagnostics and line changes have been recalculated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="loaded" when="last">
        <doc xml:space="preserve">This signal is emitted when the buffer manager has completed loading the file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="saved" when="last">
        <doc xml:space="preserve">This signal is emitted when the buffer manager has completed saving the file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="BufferChangeMonitor"
           c:symbol-prefix="buffer_change_monitor"
           c:type="IdeBufferChangeMonitor"
           parent="Object"
           glib:type-name="IdeBufferChangeMonitor"
           glib:get-type="ide_buffer_change_monitor_get_type"
           glib:type-struct="BufferChangeMonitorClass">
      <virtual-method name="get_change" invoker="get_change">
        <return-value transfer-ownership="none">
          <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reload" invoker="reload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_changed"
              c:identifier="ide_buffer_change_monitor_emit_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change"
              c:identifier="ide_buffer_change_monitor_get_change">
        <return-value transfer-ownership="none">
          <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="ide_buffer_change_monitor_reload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Buffer"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BufferChangeMonitorClass"
            c:type="IdeBufferChangeMonitorClass"
            glib:is-gtype-struct-for="BufferChangeMonitor">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="set_buffer">
        <callback name="set_buffer">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_change">
        <callback name="get_change">
          <return-value transfer-ownership="none">
            <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
            <parameter name="iter" transfer-ownership="none">
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reload">
        <callback name="reload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="BufferClass"
            c:type="IdeBufferClass"
            glib:is-gtype-struct-for="Buffer">
      <field name="parent_class">
        <type name="GtkSource.BufferClass" c:type="GtkSourceBufferClass"/>
      </field>
      <field name="cursor_moved">
        <callback name="cursor_moved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="BufferLineChange" c:type="IdeBufferLineChange">
      <member name="none" value="0" c:identifier="IDE_BUFFER_LINE_CHANGE_NONE">
      </member>
      <member name="added"
              value="1"
              c:identifier="IDE_BUFFER_LINE_CHANGE_ADDED">
      </member>
      <member name="changed"
              value="2"
              c:identifier="IDE_BUFFER_LINE_CHANGE_CHANGED">
      </member>
      <member name="deleted"
              value="3"
              c:identifier="IDE_BUFFER_LINE_CHANGE_DELETED">
      </member>
    </enumeration>
    <bitfield name="BufferLineFlags"
              glib:type-name="IdeBufferLineFlags"
              glib:get-type="ide_buffer_line_flags_get_type"
              c:type="IdeBufferLineFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_BUFFER_LINE_FLAGS_NONE"
              glib:nick="none">
      </member>
      <member name="added"
              value="1"
              c:identifier="IDE_BUFFER_LINE_FLAGS_ADDED"
              glib:nick="added">
      </member>
      <member name="changed"
              value="2"
              c:identifier="IDE_BUFFER_LINE_FLAGS_CHANGED"
              glib:nick="changed">
      </member>
      <member name="deleted"
              value="4"
              c:identifier="IDE_BUFFER_LINE_FLAGS_DELETED"
              glib:nick="deleted">
      </member>
      <member name="error"
              value="8"
              c:identifier="IDE_BUFFER_LINE_FLAGS_ERROR"
              glib:nick="error">
      </member>
      <member name="warning"
              value="16"
              c:identifier="IDE_BUFFER_LINE_FLAGS_WARNING"
              glib:nick="warning">
      </member>
      <member name="note"
              value="32"
              c:identifier="IDE_BUFFER_LINE_FLAGS_NOTE"
              glib:nick="note">
      </member>
    </bitfield>
    <class name="BufferManager"
           c:symbol-prefix="buffer_manager"
           c:type="IdeBufferManager"
           parent="Object"
           glib:type-name="IdeBufferManager"
           glib:get-type="ide_buffer_manager_get_type"
           glib:type-struct="BufferManagerClass">
      <implements name="Gio.ListModel"/>
      <method name="create_temporary_buffer"
              c:identifier="ide_buffer_manager_create_temporary_buffer">
        <doc xml:space="preserve">Creates a new #IdeBuffer that does not yet have a backing file attached to it. Interfaces
should perform a save-as operation to save the file to a real file.

ide_file_get_file() will return %NULL to denote this type of buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #IdeBuffer</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_buffer" c:identifier="ide_buffer_manager_find_buffer">
        <doc xml:space="preserve">Gets the buffer for a given file. If it has not yet been loaded, %NULL is
returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeBuffer or %NULL.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBufferManager.</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffers" c:identifier="ide_buffer_manager_get_buffers">
        <doc xml:space="preserve">Returns a newly allocated #GPtrArray of all the buffers managed by the #IdeBufferManager
instance.

Buffers are generally not added to the buffer list until they have been loaded.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GPtrArray of buffers.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Buffer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_focus_buffer"
              c:identifier="ide_buffer_manager_get_focus_buffer">
        <doc xml:space="preserve">Gets the #IdeBufferManager:focus-buffer property. This is the buffer behind
the current selected view.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuffer or %NULL.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_file_size"
              c:identifier="ide_buffer_manager_get_max_file_size">
        <doc xml:space="preserve">Gets the #IdeBufferManager:max-file-size property. This contains the maximum file size in bytes
that a file may be to be loaded by the #IdeBufferManager.

If zero, no size limits will be enforced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #gsize in bytes or zero.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBufferManager.</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_buffers"
              c:identifier="ide_buffer_manager_get_n_buffers">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_word_completion"
              c:identifier="ide_buffer_manager_get_word_completion">
        <doc xml:space="preserve">Gets the #GtkSourceCompletionWords completion provider that will complete
words using the loaded documents.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkSourceCompletionWords</doc>
          <type name="GtkSource.CompletionWords"
                c:type="GtkSourceCompletionWords*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeBufferManager.</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_file" c:identifier="ide_buffer_manager_has_file">
        <doc xml:space="preserve">Checks to see if the buffer manager has the file loaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @file is loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBufferManager.</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_async"
              c:identifier="ide_buffer_manager_load_file_async">
        <doc xml:space="preserve">Asynchronously requests that the file represented by @file is loaded. If the file is already
loaded, the previously loaded version of the file will be returned, asynchronously.

Before loading the file, #IdeBufferManager will check the file size to help protect itself
from the user accidentally loading very large files. You can change the maximum size of file
that will be loaded with the #IdeBufferManager:max-file-size property.

See ide_buffer_manager_load_file_finish() for how to complete this asynchronous request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="force_reload" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
          </parameter>
          <parameter name="progress"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">A location for an #IdeProgress or %NULL.</doc>
            <type name="Progress" c:type="IdeProgress**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_finish"
              c:identifier="ide_buffer_manager_load_file_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to load a file via ide_buffer_manager_load_file_async().
If the buffer was already loaded, this function will return a reference to the previous buffer
with its reference count incremented by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuffer if successful; otherwise %NULL and @error is set.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_async"
              c:identifier="ide_buffer_manager_save_all_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_finish"
              c:identifier="ide_buffer_manager_save_all_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_async"
              c:identifier="ide_buffer_manager_save_file_async">
        <doc xml:space="preserve">This function asynchronously requests that a buffer be saved to the storage represented by
@file. @buffer should be a previously loaded buffer owned by @self, such as one loaded with
ide_buffer_manager_load_file_async().

Call ide_buffer_manager_save_file_finish() to complete this asynchronous request.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="Progress" c:type="IdeProgress**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_finish"
              c:identifier="ide_buffer_manager_save_file_finish"
              throws="1">
        <doc xml:space="preserve">This function completes an asynchronous request to save a buffer to storage using
ide_buffer_manager_save_file_async(). Upon failure, %FALSE is returned and @error is set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful %FALSE upon failure and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus_buffer"
              c:identifier="ide_buffer_manager_set_focus_buffer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_file_size"
              c:identifier="ide_buffer_manager_set_max_file_size">
        <doc xml:space="preserve">Sets the maximum file size in bytes, that will be loaded by the #IdeBufferManager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBufferManager.</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="max_file_size" transfer-ownership="none">
            <doc xml:space="preserve">The maximum file size in bytes, or zero for no limit.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-save" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="auto-save-timeout"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="focus-buffer" writable="1" transfer-ownership="none">
        <type name="Buffer"/>
      </property>
      <glib:signal name="buffer-focus-enter" when="last">
        <doc xml:space="preserve">This signal is emitted when a view for @buffer has received focus. You might connect to this
signal when you want to perform an operation while a buffer is in focus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="buffer-focus-leave" when="last">
        <doc xml:space="preserve">This signal is emitted when the focus has left the view containing @buffer. You might connect
to this signal to stop any work you were performing while the buffer was focused.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="buffer-loaded" when="last">
        <doc xml:space="preserve">This signal is emitted when a buffer has been successfully loaded. You might connect to this
signal to be notified when a buffer has completed loading.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="buffer-saved" when="last">
        <doc xml:space="preserve">This signal is emitted when a buffer has finished saving to storage. You might connect to
this signal if you want to know when the modifications have successfully been written to
storage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="create-buffer" when="last">
        <doc xml:space="preserve">This signal is emitted when there is a request to create a new buffer
object. This allows subclasses of #IdeBuffer to be instantiated by the
buffer manager.

The first handler of this signal is responsible for returning an
#IdeBuffer or %NULL, for which one will be created.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeBuffer or %NULL.</doc>
          <type name="Buffer"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeFile</doc>
            <type name="File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-buffer" when="last">
        <doc xml:space="preserve">This signal is emitted when a request has been made to load a buffer from storage. You might
connect to this signal to be notified when loading of a buffer has begun.

If @create_new_view is %FALSE, then the buffer is probably being force-reloaded due to
changes from the host file-system.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
          <parameter name="create_new_view" transfer-ownership="none">
            <doc xml:space="preserve">Whether to create a new #IdeEditorView for the buffer.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="save-buffer" when="last">
        <doc xml:space="preserve">This signal is emitted when a request has been made to save a buffer. Connect to this signal
if you'd like to perform mutation of the buffer before it is persisted to storage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeBuffer.</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BufferManagerClass"
            c:type="IdeBufferManagerClass"
            glib:is-gtype-struct-for="BufferManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="BuildCommand"
           c:symbol-prefix="build_command"
           c:type="IdeBuildCommand"
           parent="GObject.Object"
           glib:type-name="IdeBuildCommand"
           glib:get-type="ide_build_command_get_type"
           glib:type-struct="BuildCommandClass">
      <constructor name="new" c:identifier="ide_build_command_new">
        <return-value transfer-ownership="full">
          <type name="BuildCommand" c:type="IdeBuildCommand*"/>
        </return-value>
      </constructor>
      <virtual-method name="copy" invoker="copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildCommand</doc>
          <type name="BuildCommand" c:type="IdeBuildCommand*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run" invoker="run" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_async" invoker="run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="5">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_finish" invoker="run_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy" c:identifier="ide_build_command_copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildCommand</doc>
          <type name="BuildCommand" c:type="IdeBuildCommand*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command_text"
              c:identifier="ide_build_command_get_command_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run" c:identifier="ide_build_command_run" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_build_command_run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_build_command_run_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_command_text"
              c:identifier="ide_build_command_set_command_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </instance-parameter>
          <parameter name="command_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="command-text"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="BuildCommandClass"
            c:type="IdeBuildCommandClass"
            glib:is-gtype-struct-for="BuildCommand">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="run">
        <callback name="run" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildCommand" c:type="IdeBuildCommand*"/>
            </parameter>
            <parameter name="runtime" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="environment" transfer-ownership="none">
              <type name="Environment" c:type="IdeEnvironment*"/>
            </parameter>
            <parameter name="build_result" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_async">
        <callback name="run_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildCommand" c:type="IdeBuildCommand*"/>
            </parameter>
            <parameter name="runtime" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="environment" transfer-ownership="none">
              <type name="Environment" c:type="IdeEnvironment*"/>
            </parameter>
            <parameter name="build_result" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="6">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="6">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_finish">
        <callback name="run_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildCommand" c:type="IdeBuildCommand*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy">
        <callback name="copy">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">An #IdeBuildCommand</doc>
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildCommand" c:type="IdeBuildCommand*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="BuildCommandQueue"
           c:symbol-prefix="build_command_queue"
           c:type="IdeBuildCommandQueue"
           parent="GObject.Object"
           glib:type-name="IdeBuildCommandQueue"
           glib:get-type="ide_build_command_queue_get_type"
           glib:type-struct="BuildCommandQueueClass">
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_build_command_queue_new">
        <return-value transfer-ownership="full">
          <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ide_build_command_queue_append">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="BuildCommand" c:type="IdeBuildCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ide_build_command_queue_copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildCommandQueue</doc>
          <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="ide_build_command_queue_execute"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="ide_build_command_queue_execute_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="build_result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_build_command_queue_execute_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="BuildCommandQueueClass"
            c:type="IdeBuildCommandQueueClass"
            glib:is-gtype-struct-for="BuildCommandQueue">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="BuildManager"
           c:symbol-prefix="build_manager"
           c:type="IdeBuildManager"
           parent="Object"
           glib:type-name="IdeBuildManager"
           glib:get-type="ide_build_manager_get_type"
           glib:type-struct="BuildManagerClass">
      <implements name="Gio.ActionGroup"/>
      <method name="build_async" c:identifier="ide_build_manager_build_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="build_target" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </parameter>
          <parameter name="build_flags" transfer-ownership="none">
            <type name="BuilderBuildFlags" c:type="IdeBuilderBuildFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_build_manager_build_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="ide_build_manager_cancel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_busy" c:identifier="ide_build_manager_get_busy">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_build_time"
              c:identifier="ide_build_manager_get_last_build_time">
        <doc xml:space="preserve">Gets the time the last build was started. This is %NULL until a build
has been executed in the context.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message" c:identifier="ide_build_manager_get_message">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running_time"
              c:identifier="ide_build_manager_get_running_time">
        <return-value transfer-ownership="none">
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="install_async"
              c:identifier="ide_build_manager_install_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_finish"
              c:identifier="ide_build_manager_install_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-diagnostics" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="last-build-time" transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="message" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="running-time" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <glib:signal name="build-failed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BuildResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-finished" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BuildResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-started" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BuildResult"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BuildManagerClass"
            c:type="IdeBuildManagerClass"
            glib:is-gtype-struct-for="BuildManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="BuildResult"
           c:symbol-prefix="build_result"
           c:type="IdeBuildResult"
           parent="Object"
           glib:type-name="IdeBuildResult"
           glib:get-type="ide_build_result_get_type"
           glib:type-struct="BuildResultClass">
      <virtual-method name="diagnostic">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="diagnostic" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="log">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="log" transfer-ownership="none">
            <type name="BuildResultLog" c:type="IdeBuildResultLog"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_diagnostic"
              c:identifier="ide_build_result_emit_diagnostic">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="diagnostic" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_failed" c:identifier="ide_build_result_get_failed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="ide_build_result_get_mode">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running" c:identifier="ide_build_result_get_running">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running_time"
              c:identifier="ide_build_result_get_running_time">
        <return-value transfer-ownership="none">
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stderr_stream"
              c:identifier="ide_build_result_get_stderr_stream">
        <doc xml:space="preserve">Fetches a merged stdedrr stream for all child processes of this build result.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GInputStream.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdout_stream"
              c:identifier="ide_build_result_get_stdout_stream">
        <doc xml:space="preserve">Fetches a merged stdout stream for all child processes of this build result.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log_stderr"
              c:identifier="ide_build_result_log_stderr"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="log_stdout"
              c:identifier="ide_build_result_log_stdout"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="log_subprocess"
              c:identifier="ide_build_result_log_subprocess">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="subprocess" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_failed" c:identifier="ide_build_result_set_failed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="failed" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode" c:identifier="ide_build_result_set_mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_running" c:identifier="ide_build_result_set_running">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </instance-parameter>
          <parameter name="running" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="failed" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="running" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="running-time" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="diagnostic" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Diagnostic"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="log" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="BuildResultLog"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="BuildResultAddin"
               c:symbol-prefix="build_result_addin"
               c:type="IdeBuildResultAddin"
               glib:type-name="IdeBuildResultAddin"
               glib:get-type="ide_build_result_addin_get_type"
               glib:type-struct="BuildResultAddinInterface">
      <virtual-method name="load" invoker="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_build_result_addin_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_build_result_addin_unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildResultAddinInterface"
            c:type="IdeBuildResultAddinInterface"
            glib:is-gtype-struct-for="BuildResultAddin">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildResultAddin" c:type="IdeBuildResultAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BuildResultClass"
            c:type="IdeBuildResultClass"
            glib:is-gtype-struct-for="BuildResult">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="diagnostic">
        <callback name="diagnostic">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
            <parameter name="diagnostic" transfer-ownership="none">
              <type name="Diagnostic" c:type="IdeDiagnostic*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="log">
        <callback name="log">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult*"/>
            </parameter>
            <parameter name="log" transfer-ownership="none">
              <type name="BuildResultLog" c:type="IdeBuildResultLog"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="BuildResultLog"
                 glib:type-name="IdeBuildResultLog"
                 glib:get-type="ide_build_result_log_get_type"
                 c:type="IdeBuildResultLog">
      <member name="stdout"
              value="0"
              c:identifier="IDE_BUILD_RESULT_LOG_STDOUT"
              glib:nick="stdout">
      </member>
      <member name="stderr"
              value="1"
              c:identifier="IDE_BUILD_RESULT_LOG_STDERR"
              glib:nick="stderr">
      </member>
    </enumeration>
    <interface name="BuildSystem"
               c:symbol-prefix="build_system"
               c:type="IdeBuildSystem"
               glib:type-name="IdeBuildSystem"
               glib:get-type="ide_build_system_get_type"
               glib:type-struct="BuildSystemInterface">
      <prerequisite name="Object"/>
      <function name="new_async" c:identifier="ide_build_system_new_async">
        <doc xml:space="preserve">Asynchronously creates a new #IdeBuildSystem instance using the registered
#GIOExtensionPoint system. Each extension point will be tried asynchronously
by priority until one has been found that supports @project_file.

If no build system could be found, then ide_build_system_new_finish() will
return %NULL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">#IdeBuildSystem</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="project_file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile containing the directory or project file.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">A callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_finish"
                c:identifier="ide_build_system_new_finish"
                throws="1">
        <doc xml:space="preserve">Complete an asynchronous call to ide_build_system_new_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildSystem if successful; otherwise
  %NULL and @error is set.</doc>
          <type name="BuildSystem" c:type="IdeBuildSystem*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_build_flags_async"
                      invoker="get_build_flags_async">
        <doc xml:space="preserve">Asynchronously requests the build flags for a file. For autotools and C based projects, this
would be similar to the $CFLAGS variable and is suitable for generating warnings and errors
with clang.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_flags_finish"
                      invoker="get_build_flags_finish"
                      throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to get the build flags for a file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of strings
  containing the build flags, or %NULL upon failure and @error is set.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_targets_async"
                      invoker="get_build_targets_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_targets_finish"
                      invoker="get_build_targets_finish"
                      throws="1">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">An array of build targets
  or %NULL upon failure and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="BuildTarget"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_builder" invoker="get_builder" throws="1">
        <doc xml:space="preserve">This function returns an #IdeBuilder that can be used to perform a
build of the project using the configuration specified.

See ide_builder_build_async() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuilder or %NULL and @error is set.</doc>
          <type name="Builder" c:type="IdeBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <doc xml:space="preserve">The #IdeBuildSystem to perform the build.</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration.</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_build_flags_async"
              c:identifier="ide_build_system_get_build_flags_async">
        <doc xml:space="preserve">Asynchronously requests the build flags for a file. For autotools and C based projects, this
would be similar to the $CFLAGS variable and is suitable for generating warnings and errors
with clang.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_finish"
              c:identifier="ide_build_system_get_build_flags_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to get the build flags for a file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of strings
  containing the build flags, or %NULL upon failure and @error is set.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_targets_async"
              c:identifier="ide_build_system_get_build_targets_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_targets_finish"
              c:identifier="ide_build_system_get_build_targets_finish"
              throws="1">
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">An array of build targets
  or %NULL upon failure and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="BuildTarget"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_builder"
              c:identifier="ide_build_system_get_builder"
              throws="1">
        <doc xml:space="preserve">This function returns an #IdeBuilder that can be used to perform a
build of the project using the configuration specified.

See ide_builder_build_async() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuilder or %NULL and @error is set.</doc>
          <type name="Builder" c:type="IdeBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system" transfer-ownership="none">
            <doc xml:space="preserve">The #IdeBuildSystem to perform the build.</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration.</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_build_system_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="project-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
    </interface>
    <record name="BuildSystemInterface"
            c:type="IdeBuildSystemInterface"
            glib:is-gtype-struct-for="BuildSystem">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="system" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_builder">
        <callback name="get_builder" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">An #IdeBuilder or %NULL and @error is set.</doc>
            <type name="Builder" c:type="IdeBuilder*"/>
          </return-value>
          <parameters>
            <parameter name="system" transfer-ownership="none">
              <doc xml:space="preserve">The #IdeBuildSystem to perform the build.</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="configuration" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeConfiguration.</doc>
              <type name="Configuration" c:type="IdeConfiguration*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_async">
        <callback name="get_build_flags_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="File" c:type="IdeFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_finish">
        <callback name="get_build_flags_finish" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">An array of strings
  containing the build flags, or %NULL upon failure and @error is set.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_targets_async">
        <callback name="get_build_targets_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_targets_finish">
        <callback name="get_build_targets_finish" throws="1">
          <return-value transfer-ownership="container">
            <doc xml:space="preserve">An array of build targets
  or %NULL upon failure and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BuildTarget"
               c:symbol-prefix="build_target"
               c:type="IdeBuildTarget"
               glib:type-name="IdeBuildTarget"
               glib:get-type="ide_build_target_get_type"
               glib:type-struct="BuildTargetInterface">
      <prerequisite name="Object"/>
      <virtual-method name="get_install_directory"
                      invoker="get_install_directory">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_install_directory"
              c:identifier="ide_build_target_get_install_directory">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildTargetInterface"
            c:type="IdeBuildTargetInterface"
            glib:is-gtype-struct-for="BuildTarget">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_install_directory">
        <callback name="get_install_directory">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A #GFile or %NULL.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="Builder"
           c:symbol-prefix="builder"
           c:type="IdeBuilder"
           parent="Object"
           abstract="1"
           glib:type-name="IdeBuilder"
           glib:get-type="ide_builder_get_type"
           glib:type-struct="BuilderClass">
      <virtual-method name="build_async" invoker="build_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="BuilderBuildFlags" c:type="IdeBuilderBuildFlags"/>
          </parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">A location for an #IdeBuildResult.</doc>
            <type name="BuildResult" c:type="IdeBuildResult**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_finish" invoker="build_finish" throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to build the project.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildResult or %NULL upon failure.</doc>
          <type name="BuildResult" c:type="IdeBuildResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="install_async" invoker="install_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="install_finish"
                      invoker="install_finish"
                      throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to ide_builder_install_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildResult.</doc>
          <type name="BuildResult" c:type="IdeBuildResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="build_async" c:identifier="ide_builder_build_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="BuilderBuildFlags" c:type="IdeBuilderBuildFlags"/>
          </parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">A location for an #IdeBuildResult.</doc>
            <type name="BuildResult" c:type="IdeBuildResult**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_builder_build_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to build the project.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildResult or %NULL upon failure.</doc>
          <type name="BuildResult" c:type="IdeBuildResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="ide_builder_get_configuration">
        <doc xml:space="preserve">Gets the configuration to use for the builder.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeConfiguration.</doc>
          <type name="Configuration" c:type="IdeConfiguration*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBuilder.</doc>
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="install_async" c:identifier="ide_builder_install_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="BuildResult" c:type="IdeBuildResult**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_finish"
              c:identifier="ide_builder_install_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to ide_builder_install_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildResult.</doc>
          <type name="BuildResult" c:type="IdeBuildResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Builder" c:type="IdeBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="configuration"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Configuration"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <bitfield name="BuilderBuildFlags" c:type="IdeBuilderBuildFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_BUILDER_BUILD_FLAGS_NONE">
      </member>
      <member name="force_bootstrap"
              value="1"
              c:identifier="IDE_BUILDER_BUILD_FLAGS_FORCE_BOOTSTRAP">
      </member>
      <member name="force_clean"
              value="2"
              c:identifier="IDE_BUILDER_BUILD_FLAGS_FORCE_CLEAN">
      </member>
      <member name="no_build"
              value="4"
              c:identifier="IDE_BUILDER_BUILD_FLAGS_NO_BUILD">
      </member>
      <member name="no_configure"
              value="8"
              c:identifier="IDE_BUILDER_BUILD_FLAGS_NO_CONFIGURE">
      </member>
    </bitfield>
    <record name="BuilderClass"
            c:type="IdeBuilderClass"
            glib:is-gtype-struct-for="Builder">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="build_async">
        <callback name="build_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Builder" c:type="IdeBuilder*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="BuilderBuildFlags" c:type="IdeBuilderBuildFlags"/>
            </parameter>
            <parameter name="result"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="none">
              <doc xml:space="preserve">A location for an #IdeBuildResult.</doc>
              <type name="BuildResult" c:type="IdeBuildResult**"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_finish">
        <callback name="build_finish" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">An #IdeBuildResult or %NULL upon failure.</doc>
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Builder" c:type="IdeBuilder*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="install_async">
        <callback name="install_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Builder" c:type="IdeBuilder*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="BuildResult" c:type="IdeBuildResult**"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="install_finish">
        <callback name="install_finish" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">An #IdeBuildResult.</doc>
            <type name="BuildResult" c:type="IdeBuildResult*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Builder" c:type="IdeBuilder*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved9">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved10">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved11">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved12">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="CompletionItem"
           c:symbol-prefix="completion_item"
           c:type="IdeCompletionItem"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeCompletionItem"
           glib:get-type="ide_completion_item_get_type"
           glib:type-struct="CompletionItemClass">
      <constructor name="new" c:identifier="ide_completion_item_new">
        <return-value transfer-ownership="full">
          <type name="CompletionItem" c:type="IdeCompletionItem*"/>
        </return-value>
      </constructor>
      <function name="fuzzy_highlight"
                c:identifier="ide_completion_item_fuzzy_highlight">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="haystack" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="casefold_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="fuzzy_match"
                c:identifier="ide_completion_item_fuzzy_match">
        <doc xml:space="preserve">This helper function can do a fuzzy match for you giving a haystack and
casefolded needle. Casefold your needle using g_utf8_casefold() before
running the query against a batch of #IdeCompletionItem for the best performance.

score will be set with the score of the match upon success. Otherwise,
it will be set to zero.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @haystack matched @casefold_needle, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="haystack" transfer-ownership="none">
            <doc xml:space="preserve">the string to be searched.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="casefold_needle" transfer-ownership="none">
            <doc xml:space="preserve">A g_utf8_casefold() version of the needle.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional location for the score of the match</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="match" invoker="match">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="casefold" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="match" c:identifier="ide_completion_item_match">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="casefold" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_completion_item_set_priority">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="link" readable="0" private="1">
        <type name="GLib.List" c:type="GList">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="priority" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="CompletionItemClass"
            c:type="IdeCompletionItemClass"
            glib:is-gtype-struct-for="CompletionItem">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="match">
        <callback name="match">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CompletionItem" c:type="IdeCompletionItem*"/>
            </parameter>
            <parameter name="query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="casefold" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="CompletionProvider"
               c:symbol-prefix="completion_provider"
               c:type="IdeCompletionProvider"
               glib:type-name="IdeCompletionProvider"
               glib:get-type="ide_completion_provider_get_type"
               glib:type-struct="CompletionProviderInterface">
      <prerequisite name="GtkSource.CompletionProvider"/>
      <function name="context_current_word"
                c:identifier="ide_completion_provider_context_current_word">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="GtkSource.CompletionContext"
                  c:type="GtkSourceCompletionContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="context_in_comment"
                c:identifier="ide_completion_provider_context_in_comment">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="GtkSource.CompletionContext"
                  c:type="GtkSourceCompletionContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="context_in_comment_or_string"
                c:identifier="ide_completion_provider_context_in_comment_or_string">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="GtkSource.CompletionContext"
                  c:type="GtkSourceCompletionContext*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionProvider" c:type="IdeCompletionProvider*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="CompletionProviderInterface"
            c:type="IdeCompletionProviderInterface"
            glib:is-gtype-struct-for="CompletionProvider">
      <field name="parent_interface">
        <type name="GtkSource.CompletionProviderIface"
              c:type="GtkSourceCompletionProviderIface"/>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CompletionProvider" c:type="IdeCompletionProvider*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CompletionResults"
           c:symbol-prefix="completion_results"
           c:type="IdeCompletionResults"
           parent="GObject.Object"
           glib:type-name="IdeCompletionResults"
           glib:get-type="ide_completion_results_get_type"
           glib:type-struct="CompletionResultsClass">
      <constructor name="new" c:identifier="ide_completion_results_new">
        <return-value transfer-ownership="full">
          <type name="CompletionResults" c:type="IdeCompletionResults*"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_query" c:identifier="ide_completion_results_get_query">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_sort"
              c:identifier="ide_completion_results_invalidate_sort">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="present" c:identifier="ide_completion_results_present">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="GtkSource.CompletionProvider"
                  c:type="GtkSourceCompletionProvider*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="GtkSource.CompletionContext"
                  c:type="GtkSourceCompletionContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replay" c:identifier="ide_completion_results_replay">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_proposal"
              c:identifier="ide_completion_results_take_proposal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CompletionResults" c:type="IdeCompletionResults*"/>
          </instance-parameter>
          <parameter name="proposal" transfer-ownership="full">
            <doc xml:space="preserve">The completion item</doc>
            <type name="CompletionItem" c:type="IdeCompletionItem*"/>
          </parameter>
        </parameters>
      </method>
      <property name="query"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="CompletionResultsClass"
            c:type="IdeCompletionResultsClass"
            glib:is-gtype-struct-for="CompletionResults">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="compare">
        <callback name="compare">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CompletionResults" c:type="IdeCompletionResults*"/>
            </parameter>
            <parameter name="left" transfer-ownership="none">
              <type name="CompletionItem" c:type="IdeCompletionItem*"/>
            </parameter>
            <parameter name="right" transfer-ownership="none">
              <type name="CompletionItem" c:type="IdeCompletionItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Configuration"
           c:symbol-prefix="configuration"
           c:type="IdeConfiguration"
           parent="Object"
           glib:type-name="IdeConfiguration"
           glib:get-type="ide_configuration_get_type"
           glib:type-struct="ConfigurationClass">
      <constructor name="new" c:identifier="ide_configuration_new">
        <return-value transfer-ownership="full">
          <type name="Configuration" c:type="IdeConfiguration*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="device_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="runtime_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="duplicate" c:identifier="ide_configuration_duplicate">
        <doc xml:space="preserve">Copies the configuration into a new configuration.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeConfiguration.</doc>
          <type name="Configuration" c:type="IdeConfiguration*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config_opts"
              c:identifier="ide_configuration_get_config_opts">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_debug" c:identifier="ide_configuration_get_debug">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="ide_configuration_get_device">
        <doc xml:space="preserve">Gets the device for the configuration.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeDevice.</doc>
          <type name="Device" c:type="IdeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_id"
              c:identifier="ide_configuration_get_device_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dirty" c:identifier="ide_configuration_get_dirty">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_configuration_get_display_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ" c:identifier="ide_configuration_get_environ">
        <doc xml:space="preserve">Gets the environment to use when spawning processes.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An array of key=value environment variables.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environment"
              c:identifier="ide_configuration_get_environment">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeEnvironment.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_configuration_get_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parallelism"
              c:identifier="ide_configuration_get_parallelism">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_postbuild"
              c:identifier="ide_configuration_get_postbuild">
        <doc xml:space="preserve">Gets a queue of commands to be run after the standard build process of
the configured build system. This can be useful for situations where the
user wants to modify something after the build completes.

Constrast this with ide_configuration_get_prebuild() which gets commands
to be executed before the build system has started.

This function will always return a command queue. The command
queue may contain zero or more commands to be executed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildCommandQueue.</doc>
          <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prebuild"
              c:identifier="ide_configuration_get_prebuild">
        <doc xml:space="preserve">Gets a queue of commands to be run before the standard build process of
the configured build system. This can be useful for situations where the
user wants to setup some custom commands to prepare their environment.

Constrast this with ide_configuration_get_postbuild() which gets commands
to be executed after the build system has completed.

This function will always return a command queue. The command
queue may contain zero or more commands to be executed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeBuildCommandQueue.</doc>
          <type name="BuildCommandQueue" c:type="IdeBuildCommandQueue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix" c:identifier="ide_configuration_get_prefix">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime" c:identifier="ide_configuration_get_runtime">
        <doc xml:space="preserve">Gets the runtime for the configuration.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeRuntime</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime_id"
              c:identifier="ide_configuration_get_runtime_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sequence"
              c:identifier="ide_configuration_get_sequence">
        <doc xml:space="preserve">This returns a sequence number for the configuration. This is useful
for build systems that want to clear the "dirty" bit on the configuration
so that they need not bootstrap a second time. This should be done by
checking the sequence number before executing the bootstrap, and only
cleared if the sequence number matches after performing the bootstrap.
This indicates no changes have been made to the configuration in the
mean time.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A monotonic sequence number.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfiguration</doc>
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_configuration_getenv">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config_opts"
              c:identifier="ide_configuration_set_config_opts">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="config_opts" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_debug" c:identifier="ide_configuration_set_debug">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="debug" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device" c:identifier="ide_configuration_set_device">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_id"
              c:identifier="ide_configuration_set_device_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="device_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty" c:identifier="ide_configuration_set_dirty">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="dirty" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_configuration_set_display_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parallelism"
              c:identifier="ide_configuration_set_parallelism">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="parallelism" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix" c:identifier="ide_configuration_set_prefix">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runtime" c:identifier="ide_configuration_set_runtime">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runtime_id"
              c:identifier="ide_configuration_set_runtime_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="runtime_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_configuration_setenv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="config-opts" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="debug" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="device" writable="1" transfer-ownership="none">
        <type name="Device"/>
      </property>
      <property name="device-id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dirty" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="environ" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parallelism" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="prefix" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runtime" writable="1" transfer-ownership="none">
        <type name="Runtime"/>
      </property>
      <property name="runtime-id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ConfigurationClass"
            c:type="IdeConfigurationClass"
            glib:is-gtype-struct-for="Configuration">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="ConfigurationManager"
           c:symbol-prefix="configuration_manager"
           c:type="IdeConfigurationManager"
           parent="Object"
           glib:type-name="IdeConfigurationManager"
           glib:get-type="ide_configuration_manager_get_type"
           glib:type-struct="ConfigurationManagerClass">
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <method name="add" c:identifier="ide_configuration_manager_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="ide_configuration_manager_get_configuration">
        <doc xml:space="preserve">Gets the #IdeConfiguration by id. See ide_configuration_get_id().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeConfiguration or %NULL if
  the configuration could not be found.</doc>
          <type name="Configuration" c:type="IdeConfiguration*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfigurationManager</doc>
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">The string identifier of the configuration</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current"
              c:identifier="ide_configuration_manager_get_current">
        <doc xml:space="preserve">Gets the current configuration to use for building.

Many systems allow you to pass a configuration in instead of relying on the
default configuration. This sets the default configuration that various
background items might use, such as tags builders which need to discover
settings.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeConfiguration</doc>
          <type name="Configuration" c:type="IdeConfiguration*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeConfigurationManager</doc>
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_configuration_manager_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async"
              c:identifier="ide_configuration_manager_save_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_configuration_manager_save_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current"
              c:identifier="ide_configuration_manager_set_current">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigurationManager"
                  c:type="IdeConfigurationManager*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <property name="current" writable="1" transfer-ownership="none">
        <type name="Configuration"/>
      </property>
      <property name="current-display-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ConfigurationManagerClass"
            c:type="IdeConfigurationManagerClass"
            glib:is-gtype-struct-for="ConfigurationManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="IdeContext"
           parent="GObject.Object"
           glib:type-name="IdeContext"
           glib:get-type="ide_context_get_type"
           glib:type-struct="ContextClass">
      <implements name="Gio.AsyncInitable"/>
      <constructor name="new_finish"
                   c:identifier="ide_context_new_finish"
                   throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeContext or %NULL upon failure and
  @error is set.</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async" c:identifier="ide_context_new_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_back_forward_list"
              c:identifier="ide_context_get_back_forward_list">
        <doc xml:space="preserve">Retrieves the global back forward list for the #IdeContext.

Consumers of this should branch the #IdeBackForwardList and merge them
when their document stack is closed.

See ide_back_forward_list_branch() and ide_back_forward_list_merge() for
more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBackForwardList.</doc>
          <type name="BackForwardList" c:type="IdeBackForwardList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffer_manager"
              c:identifier="ide_context_get_buffer_manager">
        <doc xml:space="preserve">Gets the #IdeContext:buffer-manager property. The buffer manager is responsible for loading
and saving buffers (files) within the #IdeContext. It provides a convenient place for scripts
to hook into the load and save process.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBufferManager.</doc>
          <type name="BufferManager" c:type="IdeBufferManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_manager"
              c:identifier="ide_context_get_build_manager">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildManager.</doc>
          <type name="BuildManager" c:type="IdeBuildManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_system"
              c:identifier="ide_context_get_build_system">
        <doc xml:space="preserve">Fetches the "build-system" property of @context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildSystem.</doc>
          <type name="BuildSystem" c:type="IdeBuildSystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration_manager"
              c:identifier="ide_context_get_configuration_manager">
        <doc xml:space="preserve">Gets the #IdeConfigurationManager for the context.

The configuration manager is responsible for loading and saving
configurations. Configurations consist of information about how to
perform a particular build. Such information includes the target
#IdeDevice, the #IdeRuntime to use, and various other build options.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeConfigurationManager.</doc>
          <type name="ConfigurationManager" c:type="IdeConfigurationManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_manager"
              c:identifier="ide_context_get_device_manager">
        <doc xml:space="preserve">Retrieves the "device-manager" property. The device manager is responsible
for connecting and disconnecting to physical or virtual devices within
LibIDE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeDeviceManager.</doc>
          <type name="DeviceManager" c:type="IdeDeviceManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project" c:identifier="ide_context_get_project">
        <doc xml:space="preserve">Retrieves the #IdeProject for the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeContext.</doc>
          <type name="Project" c:type="IdeProject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project_file"
              c:identifier="ide_context_get_project_file">
        <doc xml:space="preserve">Retrieves a #GFile containing the project file that was used to load
the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recent_manager"
              c:identifier="ide_context_get_recent_manager">
        <doc xml:space="preserve">Gets the IdeContext:recent-manager property. The recent manager is a GtkRecentManager instance
that should be used for the workbench.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkRecentManager.</doc>
          <type name="Gtk.RecentManager" c:type="GtkRecentManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root_build_dir"
              c:identifier="ide_context_get_root_build_dir">
        <doc xml:space="preserve">Retrieves the "root-build-dir" for the context. This is the root directory
that will contain builds made for various devices.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the "root-build-dir" property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_manager"
              c:identifier="ide_context_get_run_manager">
        <doc xml:space="preserve">Gets the #IdeRunManager for the context. This manager object simplifies
the process of running an #IdeBuildTarget from the build system. Primarily,
it enforces that only a single target may be run at a time, since that is
what the UI will expect.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeRunManager.</doc>
          <type name="RunManager" c:type="IdeRunManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime_manager"
              c:identifier="ide_context_get_runtime_manager">
        <doc xml:space="preserve">Gets the #IdeRuntimeManager for the LibIDE context.

The runtime manager provies access to #IdeRuntime instances via the
#GListModel interface. These can provide support for building projects
in various runtimes such as xdg-app.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeRuntimeManager.</doc>
          <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_script_manager"
              c:identifier="ide_context_get_script_manager">
        <doc xml:space="preserve">Retrieves the script manager for the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeScriptManager.</doc>
          <type name="ScriptManager" c:type="IdeScriptManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_engine"
              c:identifier="ide_context_get_search_engine">
        <doc xml:space="preserve">Retrieves the search engine for the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSearchEngine.</doc>
          <type name="SearchEngine" c:type="IdeSearchEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_typed"
              c:identifier="ide_context_get_service_typed">
        <doc xml:space="preserve">Retrieves a service matching @service_type. If no match was found, a type
implementing the requested service type will be returned. If no matching
service type could be found, then an instance of the service will be
created, started, and returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeService or %NULL.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="service_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GType of the service desired.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_settings" c:identifier="ide_context_get_settings">
        <doc xml:space="preserve">Gets an #IdeSettings representing the given #GSettingsSchema.

relative_path will be used to apply multiple layers of settings. Project settings will be
applied to first, followed by global settings.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSettings.</doc>
          <type name="Settings" c:type="IdeSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="relative_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snippets_manager"
              c:identifier="ide_context_get_snippets_manager">
        <doc xml:space="preserve">Gets the #IdeContext:snippets-manager property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceSnippetsManager.</doc>
          <type name="SourceSnippetsManager"
                c:type="IdeSourceSnippetsManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transfer_manager"
              c:identifier="ide_context_get_transfer_manager">
        <doc xml:space="preserve">Gets the #IdeTransferManager for the context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeTransferManager.</doc>
          <type name="TransferManager" c:type="IdeTransferManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unsaved_files"
              c:identifier="ide_context_get_unsaved_files">
        <doc xml:space="preserve">Returns the unsaved files for the #IdeContext. These are the contents of
open buffers in the IDE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeUnsavedFiles.</doc>
          <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vcs" c:identifier="ide_context_get_vcs">
        <doc xml:space="preserve">Retrieves the #IdeVcs used to load the project. If no version control system
could be found, this will return an #IdeDirectoryVcs.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeVcs.</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hold" c:identifier="ide_context_hold">
        <doc xml:space="preserve">Puts a hold on the #IdeContext, preventing the context from being unloaded
until a call to ide_context_release().

If ide_context_unload_async() is called while a hold is in progress, the
unload will be delayed until ide_context_release() has been called the
same number of times as ide_context_hold().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hold_for_object"
              c:identifier="ide_context_hold_for_object">
        <doc xml:space="preserve">Adds a hold on @self for the lifetime of @instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve">A #GObject instance</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="ide_context_release">
        <doc xml:space="preserve">Releases a hold on the context previously created with ide_context_hold().

If a pending unload of the context has been requested, it will be dispatched
once the hold count reaches zero.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restore_async" c:identifier="ide_context_restore_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_finish"
              c:identifier="ide_context_restore_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root_build_dir"
              c:identifier="ide_context_set_root_build_dir">
        <doc xml:space="preserve">Sets the "root-build-dir" property. This is the root directory that will
be used when building projects for projects that support building out of
tree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="root_build_dir" transfer-ownership="none">
            <doc xml:space="preserve">the path to the root build directory.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_async" c:identifier="ide_context_unload_async">
        <doc xml:space="preserve">This function attempts to unload various components in the #IdeContext. This
should be called before you dispose the context. Unsaved buffers will be
persisted to the drafts directory.  More operations may be added in the
future.

If there is a hold on the #IdeContext, created by ide_context_hold(), then
the unload request will be delayed until the appropriate number of calls to
ide_context_release() have been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_finish"
              c:identifier="ide_context_unload_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="warning"
              c:identifier="ide_context_warning"
              introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <property name="back-forward-list" transfer-ownership="none">
        <type name="BackForwardList"/>
      </property>
      <property name="buffer-manager" transfer-ownership="none">
        <type name="BufferManager"/>
      </property>
      <property name="build-system" transfer-ownership="none">
        <type name="BuildSystem"/>
      </property>
      <property name="configuration-manager" transfer-ownership="none">
        <type name="ConfigurationManager"/>
      </property>
      <property name="device-manager" transfer-ownership="none">
        <type name="DeviceManager"/>
      </property>
      <property name="project" transfer-ownership="none">
        <type name="Project"/>
      </property>
      <property name="project-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="root-build-dir" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runtime-manager" transfer-ownership="none">
        <type name="RuntimeManager"/>
      </property>
      <property name="script-manager" transfer-ownership="none">
        <type name="ScriptManager"/>
      </property>
      <property name="search-engine" transfer-ownership="none">
        <type name="SearchEngine"/>
      </property>
      <property name="snippets-manager" writable="1" transfer-ownership="none">
        <type name="SourceSnippetsManager"/>
      </property>
      <property name="unsaved-files" transfer-ownership="none">
        <type name="UnsavedFiles"/>
      </property>
      <property name="vcs" transfer-ownership="none">
        <type name="Vcs"/>
      </property>
      <glib:signal name="loaded" when="last">
        <doc xml:space="preserve">This signal is emitted when loading of the context has completed.
Plugins and services might want to get notified of this to perform
work that requires subsystems that may not be loaded during context
startup.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ContextClass"
            c:type="IdeContextClass"
            glib:is-gtype-struct-for="Context">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="IdeDevice"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDevice"
           glib:get-type="ide_device_get_type"
           glib:type-struct="DeviceClass">
      <virtual-method name="get_system_type" invoker="get_system_type">
        <doc xml:space="preserve">This is the description of the system we are building for. Commonly, this
is referred to as a "system_type". A combination of the machine architecture
such as x86_64, the operating system, and the libc.

"x86_64-linux-gnu" might be one such system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the system type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_configuration"
                      invoker="prepare_configuration">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_display_name"
              c:identifier="ide_device_get_display_name">
        <doc xml:space="preserve">This function returns the name of the device. If no name has been set, then
%NULL is returned.

In some cases, this value wont be available until additional information
has been probed from the device.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A string containing the display name for the device.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_device_get_id">
        <doc xml:space="preserve">Retrieves the "id" property of the #IdeDevice. This is generally not a
user friendly name as it is often a guid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A unique identifier for the device.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_type" c:identifier="ide_device_get_system_type">
        <doc xml:space="preserve">This is the description of the system we are building for. Commonly, this
is referred to as a "system_type". A combination of the machine architecture
such as x86_64, the operating system, and the libc.

"x86_64-linux-gnu" might be one such system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string containing the system type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_configuration"
              c:identifier="ide_device_prepare_configuration">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_device_set_display_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="ide_device_set_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system-type" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="IdeDeviceClass"
            glib:is-gtype-struct-for="Device">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="get_system_type">
        <callback name="get_system_type">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A string containing the system type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_configuration">
        <callback name="prepare_configuration">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
            <parameter name="configuration" transfer-ownership="none">
              <type name="Configuration" c:type="IdeConfiguration*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceError"
                 glib:type-name="IdeDeviceError"
                 glib:get-type="ide_device_error_get_type"
                 c:type="IdeDeviceError"
                 glib:error-domain="ide_device_error_quark">
      <member name="device"
              value="1"
              c:identifier="IDE_DEVICE_ERROR_NO_SUCH_DEVICE"
              glib:nick="device">
      </member>
      <function name="quark" c:identifier="ide_device_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceManager"
           c:symbol-prefix="device_manager"
           c:type="IdeDeviceManager"
           parent="Object"
           glib:type-name="IdeDeviceManager"
           glib:get-type="ide_device_manager_get_type"
           glib:type-struct="DeviceManagerClass">
      <implements name="Gio.ListModel"/>
      <method name="add_provider"
              c:identifier="ide_device_manager_add_provider">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="ide_device_manager_get_device">
        <doc xml:space="preserve">Fetches the first device that matches the device identifier @device_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeDevice or %NULL.</doc>
          <type name="Device" c:type="IdeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve">The device identifier string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="ide_device_manager_get_devices">
        <doc xml:space="preserve">Retrieves all of the devices that are registered with the #IdeDeviceManager.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">An array of devices
  registered with the #IdeManager.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settled" c:identifier="ide_device_manager_get_settled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_provider"
              c:identifier="ide_device_manager_remove_provider">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </parameter>
        </parameters>
      </method>
      <property name="settled" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="device-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DeviceProvider"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="DeviceProvider"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceManagerClass"
            c:type="IdeDeviceManagerClass"
            glib:is-gtype-struct-for="DeviceManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="DeviceProvider"
               c:symbol-prefix="device_provider"
               c:type="IdeDeviceProvider"
               glib:type-name="IdeDeviceProvider"
               glib:get-type="ide_device_provider_get_type"
               glib:type-struct="DeviceProviderInterface">
      <prerequisite name="Object"/>
      <virtual-method name="get_devices" invoker="get_devices">
        <doc xml:space="preserve">Retrieves a list of devices currently managed by @provider.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GPtrArray of
 #IdeDevice instances.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_settled" invoker="get_settled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="emit_device_added"
              c:identifier="ide_device_provider_emit_device_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_device_removed"
              c:identifier="ide_device_provider_emit_device_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="ide_device_provider_get_devices">
        <doc xml:space="preserve">Retrieves a list of devices currently managed by @provider.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GPtrArray of
 #IdeDevice instances.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settled"
              c:identifier="ide_device_provider_get_settled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="settled" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="device-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DeviceProviderInterface"
            c:type="IdeDeviceProviderInterface"
            glib:is-gtype-struct-for="DeviceProvider">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_settled">
        <callback name="get_settled">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_devices">
        <callback name="get_devices">
          <return-value transfer-ownership="container">
            <doc xml:space="preserve">A #GPtrArray of
 #IdeDevice instances.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Device"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="Diagnostic"
            c:type="IdeDiagnostic"
            glib:type-name="IdeDiagnostic"
            glib:get-type="ide_diagnostic_get_type"
            c:symbol-prefix="diagnostic">
      <constructor name="new" c:identifier="ide_diagnostic_new">
        <doc xml:space="preserve">Creates a new diagnostic.

If you want to set a range for the diagnostic, see
ide_diagnostic_add_range() or ide_diagnostic_take_range().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeDiagnostic.</doc>
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <doc xml:space="preserve">the severity of the diagnostic</doc>
            <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve">the diagnostic message text</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">the location of the diagnostic</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_range" c:identifier="ide_diagnostic_add_range">
        <doc xml:space="preserve">Adds the range to the diagnostic. This allows diagnostic tools to highlight
the errored text appropriately.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceRange.</doc>
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="ide_diagnostic_compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Diagnostic" c:type="const IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Diagnostic" c:type="const IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fixit" c:identifier="ide_diagnostic_get_fixit">
        <doc xml:space="preserve">Gets the fixit denoted by @index. This value should be less than the value
returned from ide_diagnostic_get_num_fixits().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeFixit.</doc>
          <type name="Fixit" c:type="IdeFixit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve">The index of the fixit.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="ide_diagnostic_get_location">
        <doc xml:space="preserve">Gets the location of a diagnostic.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Gets the location of a diagnostic.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_fixits"
              c:identifier="ide_diagnostic_get_num_fixits">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_ranges"
              c:identifier="ide_diagnostic_get_num_ranges">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range" c:identifier="ide_diagnostic_get_range">
        <doc xml:space="preserve">Retrieves the range found at @index. It is a programming error to call this
function with a value greater or equal to ide_diagnostic_get_num_ranges().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceRange</doc>
          <type name="SourceRange" c:type="IdeSourceRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_severity" c:identifier="ide_diagnostic_get_severity">
        <return-value transfer-ownership="none">
          <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="ide_diagnostic_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text_for_display"
              c:identifier="ide_diagnostic_get_text_for_display">
        <doc xml:space="preserve">This creates a new string that is formatted using the diagnostics line number, column, severity,
and message text in the format "line:column: severity: message".

This can be convenient when wanting to quickly display a diagnostic such as in a tooltip.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the text formatted for display.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_diagnostic_ref">
        <return-value transfer-ownership="full">
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take_fixit" c:identifier="ide_diagnostic_take_fixit">
        <doc xml:space="preserve">Adds the suggested fixit to the diagnostic while transfering ownership
of @fixit to @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="fixit" transfer-ownership="full">
            <doc xml:space="preserve">An #IdeFixit.</doc>
            <type name="Fixit" c:type="IdeFixit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_range" c:identifier="ide_diagnostic_take_range">
        <doc xml:space="preserve">Steals the ownership of @range and adds to the diagnostic.

This saves multiple atomic references of @range which could be expensive
if you are doing lots of diagnostics.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="full">
            <doc xml:space="preserve">An #IdeSourceRange.</doc>
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_diagnostic_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <interface name="DiagnosticProvider"
               c:symbol-prefix="diagnostic_provider"
               c:type="IdeDiagnosticProvider"
               glib:type-name="IdeDiagnosticProvider"
               glib:get-type="ide_diagnostic_provider_get_type"
               glib:type-struct="DiagnosticProviderInterface">
      <prerequisite name="Object"/>
      <virtual-method name="diagnose_async" invoker="diagnose_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="diagnose_finish"
                      invoker="diagnose_finish"
                      throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to ide_diagnostic_provider_diagnose_async().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#IdeDiagnostics or %NULL and @error is set.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="diagnose_async"
              c:identifier="ide_diagnostic_provider_diagnose_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="diagnose_finish"
              c:identifier="ide_diagnostic_provider_diagnose_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to ide_diagnostic_provider_diagnose_async().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">#IdeDiagnostics or %NULL and @error is set.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="DiagnosticProviderInterface"
            c:type="IdeDiagnosticProviderInterface"
            glib:is-gtype-struct-for="DiagnosticProvider">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="diagnose_async">
        <callback name="diagnose_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="File" c:type="IdeFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="diagnose_finish">
        <callback name="diagnose_finish" throws="1">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">#IdeDiagnostics or %NULL and @error is set.</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DiagnosticSeverity"
                 glib:type-name="IdeDiagnosticSeverity"
                 glib:get-type="ide_diagnostic_severity_get_type"
                 c:type="IdeDiagnosticSeverity">
      <member name="ignored"
              value="0"
              c:identifier="IDE_DIAGNOSTIC_IGNORED"
              glib:nick="ignored">
      </member>
      <member name="note"
              value="1"
              c:identifier="IDE_DIAGNOSTIC_NOTE"
              glib:nick="note">
      </member>
      <member name="deprecated"
              value="2"
              c:identifier="IDE_DIAGNOSTIC_DEPRECATED"
              glib:nick="deprecated">
      </member>
      <member name="warning"
              value="3"
              c:identifier="IDE_DIAGNOSTIC_WARNING"
              glib:nick="warning">
      </member>
      <member name="error"
              value="4"
              c:identifier="IDE_DIAGNOSTIC_ERROR"
              glib:nick="error">
      </member>
      <member name="fatal"
              value="5"
              c:identifier="IDE_DIAGNOSTIC_FATAL"
              glib:nick="fatal">
      </member>
      <function name="to_string"
                c:identifier="ide_diagnostic_severity_to_string">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Diagnostician"
           c:symbol-prefix="diagnostician"
           c:type="IdeDiagnostician"
           parent="Object"
           glib:type-name="IdeDiagnostician"
           glib:get-type="ide_diagnostician_get_type"
           glib:type-struct="DiagnosticianClass">
      <method name="diagnose_async"
              c:identifier="ide_diagnostician_diagnose_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="diagnostician" transfer-ownership="none">
            <type name="Diagnostician" c:type="IdeDiagnostician*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="diagnose_finish"
              c:identifier="ide_diagnostician_diagnose_finish"
              throws="1">
        <return-value transfer-ownership="full">
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="diagnostician" transfer-ownership="none">
            <type name="Diagnostician" c:type="IdeDiagnostician*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="ide_diagnostician_get_language">
        <doc xml:space="preserve">Gets the #IdeDiagnostician:language property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkSourceLanguage.</doc>
          <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostician" c:type="IdeDiagnostician*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="ide_diagnostician_set_language">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostician" c:type="IdeDiagnostician*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <property name="language" writable="1" transfer-ownership="none">
        <type name="GtkSource.Language"/>
      </property>
    </class>
    <record name="DiagnosticianClass"
            c:type="IdeDiagnosticianClass"
            glib:is-gtype-struct-for="Diagnostician">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="Diagnostics"
            c:type="IdeDiagnostics"
            glib:type-name="IdeDiagnostics"
            glib:get-type="ide_diagnostics_get_type"
            c:symbol-prefix="diagnostics">
      <constructor name="new" c:identifier="ide_diagnostics_new">
        <doc xml:space="preserve">Creates a new #IdeDiagnostics container structure for @ar.
Ownership of @ar is transfered to the resulting structure.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #IdeDiagnostics.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <parameter name="ar"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an array of #IdeDiagnostic.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Diagnostic"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_size" c:identifier="ide_diagnostics_get_size">
        <doc xml:space="preserve">Retrieves the number of diagnostics that can be accessed via
ide_diagnostics_index().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The number of diagnostics in @self.</doc>
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="index" c:identifier="ide_diagnostics_index">
        <doc xml:space="preserve">Retrieves the diagnostic at @index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeDiagnostic.</doc>
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="ide_diagnostics_merge">
        <doc xml:space="preserve">Copies the contents of @other into @self.

This is performed by taking a reference to the immutable #IdeDiagnostic
instances.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_diagnostics_ref">
        <return-value transfer-ownership="full">
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_diagnostics_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="DirectoryBuildSystem"
           c:symbol-prefix="directory_build_system"
           c:type="IdeDirectoryBuildSystem"
           parent="Object"
           glib:type-name="IdeDirectoryBuildSystem"
           glib:get-type="ide_directory_build_system_get_type"
           glib:type-struct="DirectoryBuildSystemClass">
      <implements name="Gio.AsyncInitable"/>
      <implements name="BuildSystem"/>
      <property name="project-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="DirectoryBuildSystemClass"
            c:type="IdeDirectoryBuildSystemClass"
            glib:is-gtype-struct-for="DirectoryBuildSystem">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="DirectoryVcs"
           c:symbol-prefix="directory_vcs"
           c:type="IdeDirectoryVcs"
           parent="Object"
           glib:type-name="IdeDirectoryVcs"
           glib:get-type="ide_directory_vcs_get_type"
           glib:type-struct="DirectoryVcsClass">
      <implements name="Gio.AsyncInitable"/>
      <implements name="Vcs"/>
    </class>
    <record name="DirectoryVcsClass"
            c:type="IdeDirectoryVcsClass"
            glib:is-gtype-struct-for="DirectoryVcs">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Doap"
           c:symbol-prefix="doap"
           c:type="IdeDoap"
           parent="GObject.Object"
           glib:type-name="IdeDoap"
           glib:get-type="ide_doap_get_type"
           glib:type-struct="DoapClass">
      <constructor name="new" c:identifier="ide_doap_new">
        <return-value transfer-ownership="full">
          <type name="Doap" c:type="IdeDoap*"/>
        </return-value>
      </constructor>
      <method name="get_bug_database" c:identifier="ide_doap_get_bug_database">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category" c:identifier="ide_doap_get_category">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description" c:identifier="ide_doap_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_page"
              c:identifier="ide_doap_get_download_page">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homepage" c:identifier="ide_doap_get_homepage">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages" c:identifier="ide_doap_get_languages">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GStrv.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maintainers" c:identifier="ide_doap_get_maintainers">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GList of #IdeDoapPerson.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DoapPerson"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_doap_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortdesc" c:identifier="ide_doap_get_shortdesc">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="ide_doap_load_from_data"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="ide_doap_load_from_file"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bug-database" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="download-page" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="homepage" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="languages" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="shortdesc" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DoapClass"
            c:type="IdeDoapClass"
            glib:is-gtype-struct-for="Doap">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DoapError"
                 glib:type-name="IdeDoapError"
                 glib:get-type="ide_doap_error_get_type"
                 c:type="IdeDoapError"
                 glib:error-domain="ide_doap_error">
      <member name="format"
              value="1"
              c:identifier="IDE_DOAP_ERROR_INVALID_FORMAT"
              glib:nick="format">
      </member>
      <function name="quark" c:identifier="ide_doap_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DoapPerson"
           c:symbol-prefix="doap_person"
           c:type="IdeDoapPerson"
           parent="GObject.Object"
           glib:type-name="IdeDoapPerson"
           glib:get-type="ide_doap_person_get_type"
           glib:type-struct="DoapPersonClass">
      <constructor name="new" c:identifier="ide_doap_person_new">
        <return-value transfer-ownership="full">
          <type name="DoapPerson" c:type="IdeDoapPerson*"/>
        </return-value>
      </constructor>
      <method name="get_email" c:identifier="ide_doap_person_get_email">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_doap_person_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_email" c:identifier="ide_doap_person_set_email">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ide_doap_person_set_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="email" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DoapPersonClass"
            c:type="IdeDoapPersonClass"
            glib:is-gtype-struct-for="DoapPerson">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="ENABLE_TRACE" value="0" c:type="IDE_ENABLE_TRACE">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="EditorPerspective"
           c:symbol-prefix="editor_perspective"
           c:type="IdeEditorPerspective"
           parent="Layout"
           glib:type-name="IdeEditorPerspective"
           glib:get-type="ide_editor_perspective_get_type"
           glib:type-struct="EditorPerspectiveClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Perspective"/>
      <implements name="Pnl.Dock"/>
      <implements name="Pnl.DockItem"/>
      <method name="focus_buffer_in_current_stack"
              c:identifier="ide_editor_perspective_focus_buffer_in_current_stack">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPerspective" c:type="IdeEditorPerspective*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="focus_location"
              c:identifier="ide_editor_perspective_focus_location">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPerspective" c:type="IdeEditorPerspective*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="view-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="view-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EditorPerspectiveClass"
            c:type="IdeEditorPerspectiveClass"
            glib:is-gtype-struct-for="EditorPerspective">
      <field name="parent_class">
        <type name="LayoutClass" c:type="IdeLayoutClass"/>
      </field>
    </record>
    <class name="EditorView"
           c:symbol-prefix="editor_view"
           c:type="IdeEditorView"
           parent="LayoutView"
           glib:type-name="IdeEditorView"
           glib:get-type="ide_editor_view_get_type"
           glib:type-struct="EditorViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <method name="get_active_source_view"
              c:identifier="ide_editor_view_get_active_source_view">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceView.</doc>
          <type name="SourceView" c:type="IdeSourceView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorView" c:type="IdeEditorView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document" c:identifier="ide_editor_view_get_document">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuffer.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorView" c:type="IdeEditorView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="document"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Buffer"/>
      </property>
      <glib:signal name="request-documentation" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="EditorViewAddin"
               c:symbol-prefix="editor_view_addin"
               c:type="IdeEditorViewAddin"
               glib:type-name="IdeEditorViewAddin"
               glib:get-type="ide_editor_view_addin_get_type"
               glib:type-struct="EditorViewAddinInterface">
      <virtual-method name="language_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <type name="EditorView" c:type="IdeEditorView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_source_view">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
          </instance-parameter>
          <parameter name="source_view" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <type name="EditorView" c:type="IdeEditorView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload_source_view">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
          </instance-parameter>
          <parameter name="source_view" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </parameter>
        </parameters>
      </virtual-method>
    </interface>
    <record name="EditorViewAddinInterface"
            c:type="IdeEditorViewAddinInterface"
            glib:is-gtype-struct-for="EditorViewAddin">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
            </parameter>
            <parameter name="view" transfer-ownership="none">
              <type name="EditorView" c:type="IdeEditorView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
            </parameter>
            <parameter name="view" transfer-ownership="none">
              <type name="EditorView" c:type="IdeEditorView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="language_changed">
        <callback name="language_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_source_view">
        <callback name="load_source_view">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
            </parameter>
            <parameter name="source_view" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_source_view">
        <callback name="unload_source_view">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorViewAddin" c:type="IdeEditorViewAddin*"/>
            </parameter>
            <parameter name="source_view" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EditorViewClass"
            c:type="IdeEditorViewClass"
            glib:is-gtype-struct-for="EditorView">
      <field name="parent_class">
        <type name="LayoutViewClass" c:type="IdeLayoutViewClass"/>
      </field>
    </record>
    <class name="Environment"
           c:symbol-prefix="environment"
           c:type="IdeEnvironment"
           parent="GObject.Object"
           glib:type-name="IdeEnvironment"
           glib:get-type="ide_environment_get_type"
           glib:type-struct="EnvironmentClass">
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_environment_new">
        <return-value transfer-ownership="full">
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ide_environment_append">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ide_environment_copy">
        <doc xml:space="preserve">Copies the contents of #IdeEnvironment into a newly allocated #IdeEnvironment.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeEnvironment.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeEnvironment</doc>
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ" c:identifier="ide_environment_get_environ">
        <doc xml:space="preserve">Gets the environment as a set of key=value pairs, suitable for use
in various GLib process functions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated string array.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeEnvironment</doc>
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_environment_getenv">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_environment_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_environment_setenv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="EnvironmentClass"
            c:type="IdeEnvironmentClass"
            glib:is-gtype-struct-for="Environment">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="EnvironmentVariable"
           c:symbol-prefix="environment_variable"
           c:type="IdeEnvironmentVariable"
           parent="GObject.Object"
           glib:type-name="IdeEnvironmentVariable"
           glib:get-type="ide_environment_variable_get_type"
           glib:type-struct="EnvironmentVariableClass">
      <constructor name="new" c:identifier="ide_environment_variable_new">
        <return-value transfer-ownership="full">
          <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_key" c:identifier="ide_environment_variable_get_key">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_environment_variable_get_value">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="ide_environment_variable_set_key">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_environment_variable_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="key" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="EnvironmentVariableClass"
            c:type="IdeEnvironmentVariableClass"
            glib:is-gtype-struct-for="EnvironmentVariable">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ExtensionAdapter"
           c:symbol-prefix="extension_adapter"
           c:type="IdeExtensionAdapter"
           parent="Object"
           glib:type-name="IdeExtensionAdapter"
           glib:get-type="ide_extension_adapter_get_type"
           glib:type-struct="ExtensionAdapterClass">
      <constructor name="new" c:identifier="ide_extension_adapter_new">
        <doc xml:space="preserve">Creates a new #IdeExtensionAdapter.

The #IdeExtensionAdapter object can be used to wrap an extension that might need to change
at runtime based on various changing parameters. For example, it can watch the loading and
unloading of plugins and reload the #IdeExtensionAdapter:extension property.

Additionally, it can match a specific plugin based on the @value provided.

This uses #IdeExtensionPoint to create the extension implementation, which means that
extension points that are disabled (such as from the plugins GSettings) will be ignored.
As such, if one plugin that is higher priority than another, but is disabled, will be
ignored and the secondary plugin will be used.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly created #IdeExtensionAdapter.</doc>
          <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeContext.</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="engine"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #PeasEngine or %NULL.</doc>
            <type name="Peas.Engine" c:type="PeasEngine*"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve">The #GType of the interface to be implemented.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The key for matching extensions from plugin info external data.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The value to use when matching keys.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_engine"
              c:identifier="ide_extension_adapter_get_engine">
        <doc xml:space="preserve">Gets the #IdeExtensionAdapter:engine property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #PeasEngine.</doc>
          <type name="Peas.Engine" c:type="PeasEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension"
              c:identifier="ide_extension_adapter_get_extension">
        <doc xml:space="preserve">Gets the extension object managed by the adapter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GObject or %NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_type"
              c:identifier="ide_extension_adapter_get_interface_type">
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="ide_extension_adapter_get_key">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="ide_extension_adapter_get_value">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="ide_extension_adapter_set_key">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="ide_extension_adapter_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="engine"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Peas.Engine"/>
      </property>
      <property name="extension" transfer-ownership="none">
        <type name="GObject.Object"/>
      </property>
      <property name="interface-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="key" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ExtensionAdapterClass"
            c:type="IdeExtensionAdapterClass"
            glib:is-gtype-struct-for="ExtensionAdapter">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="ExtensionSetAdapter"
           c:symbol-prefix="extension_set_adapter"
           c:type="IdeExtensionSetAdapter"
           parent="Object"
           glib:type-name="IdeExtensionSetAdapter"
           glib:get-type="ide_extension_set_adapter_get_type"
           glib:type-struct="ExtensionSetAdapterClass">
      <constructor name="new" c:identifier="ide_extension_set_adapter_new">
        <return-value transfer-ownership="full">
          <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="engine" transfer-ownership="none">
            <type name="Peas.Engine" c:type="PeasEngine*"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="foreach" c:identifier="ide_extension_set_adapter_foreach">
        <doc xml:space="preserve">Calls @foreach_func for every extension loaded by the extension set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeExtensionSetAdapter</doc>
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A callback</doc>
            <type name="ExtensionSetAdapterForeachFunc"
                  c:type="IdeExtensionSetAdapterForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_engine"
              c:identifier="ide_extension_set_adapter_get_engine">
        <doc xml:space="preserve">Gets the #IdeExtensionSetAdapter:engine property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #PeasEngine.</doc>
          <type name="Peas.Engine" c:type="PeasEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_type"
              c:identifier="ide_extension_set_adapter_get_interface_type">
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="ide_extension_set_adapter_get_key">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_extensions"
              c:identifier="ide_extension_set_adapter_get_n_extensions">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_extension_set_adapter_get_value">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key" c:identifier="ide_extension_set_adapter_set_key">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_extension_set_adapter_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="engine"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Peas.Engine"/>
      </property>
      <property name="interface-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="key" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="extension-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Peas.PluginInfo"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="extension-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Peas.PluginInfo"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ExtensionSetAdapterClass"
            c:type="IdeExtensionSetAdapterClass"
            glib:is-gtype-struct-for="ExtensionSetAdapter">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <callback name="ExtensionSetAdapterForeachFunc"
              c:type="IdeExtensionSetAdapterForeachFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="set" transfer-ownership="none">
          <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
        </parameter>
        <parameter name="plugin_info" transfer-ownership="none">
          <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
        </parameter>
        <parameter name="extension" transfer-ownership="none">
          <type name="Peas.Extension" c:type="PeasExtension*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="FILE_SETTINGS_EXTENSION_POINT"
              value="org.gnome.libide.extensions.file-settings"
              c:type="IDE_FILE_SETTINGS_EXTENSION_POINT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="File"
           c:symbol-prefix="file"
           c:type="IdeFile"
           parent="Object"
           glib:type-name="IdeFile"
           glib:get-type="ide_file_get_type"
           glib:type-struct="FileClass">
      <constructor name="new" c:identifier="ide_file_new">
        <doc xml:space="preserve">Creates a new file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeFile.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <parameter name="context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An #IdeContext or %NULL.</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_path" c:identifier="ide_file_new_for_path">
        <return-value transfer-ownership="full">
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="manager_show"
                c:identifier="ide_file_manager_show"
                throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </function>
      <method name="compare" c:identifier="ide_file_compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="File" c:type="const IdeFile*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="File" c:type="const IdeFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="ide_file_equal">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_other_async" c:identifier="ide_file_find_other_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_other_finish"
              c:identifier="ide_file_find_other_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to ide_file_find_other_async(). This function
will try to find a matching file for languages where this exists. Such cases
include C and C++ where a .c or .cpp file may have a .h or .hh header. Additional
suffixes are implemented including (.c, .cc, .cpp, .cxx, .h, .hh, .hpp, and .hxx).

Returns an #IdeFile if successful, otherwise %NULL and @error is set.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeFIle or %NULL.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_file_get_file">
        <doc xml:space="preserve">Retrieves the underlying #GFile represented by @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_temporary" c:identifier="ide_file_get_is_temporary">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="ide_file_get_language">
        <doc xml:space="preserve">Retrieves the #GtkSourceLanguage that was discovered for the file.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkSourceLanguage or %NULL.</doc>
          <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_file_get_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temporary_id" c:identifier="ide_file_get_temporary_id">
        <doc xml:space="preserve">Gets the #IdeFile:temporary-id property for the file.

Temporary files have unique identifiers associated with them so that we can
display names such as "unsaved file 1" and know that it will not collide with
another temporary file.

Files that are not temporary, will return zero.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A positive integer greater than zero if the file is a temporary file.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeFile.</doc>
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="ide_file_hash">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_settings_async"
              c:identifier="ide_file_load_settings_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_settings_finish"
              c:identifier="ide_file_load_settings_finish"
              throws="1">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeFileSettings or %NULL upon failure and
  @error is set.</doc>
          <type name="FileSettings" c:type="IdeFileSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="is-temporary" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="language" transfer-ownership="none">
        <type name="GtkSource.Language"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="temporary-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="FileClass"
            c:type="IdeFileClass"
            glib:is-gtype-struct-for="File">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="FileSettings"
           c:symbol-prefix="file_settings"
           c:type="IdeFileSettings"
           parent="Object"
           glib:type-name="IdeFileSettings"
           glib:get-type="ide_file_settings_get_type"
           glib:type-struct="FileSettingsClass">
      <constructor name="new" c:identifier="ide_file_settings_new">
        <return-value transfer-ownership="full">
          <type name="FileSettings" c:type="IdeFileSettings*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="File" c:type="IdeFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_file" c:identifier="ide_file_settings_get_file">
        <doc xml:space="preserve">Retrieves the underlying file that @self refers to.

This may be used by #IdeFileSettings implementations to discover additional
information about the settings. For example, a modeline parser might load
some portion of the file looking for modelines. An editorconfig
implementation might look for ".editorconfig" files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeFile.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeFileSettings.</doc>
            <type name="FileSettings" c:type="IdeFileSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settled" c:identifier="ide_file_settings_get_settled">
        <doc xml:space="preserve">Gets the #IdeFileSettings:settled property.

This property is %TRUE when all of the children file settings have completed loading.

Some file setting implementations require that various I/O be performed on disk in
the background. This property will change to %TRUE when all of the settings have
been loaded.

Normally, this is not a problem, since the editor will respond to changes and update them
accordingly. However, if you are writing a tool that prints the file settings
(such as ide-list-file-settings), you probably want to wait until the values have
settled.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if all the settings have loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeFileSettings.</doc>
            <type name="FileSettings" c:type="IdeFileSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="encoding" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="encoding-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="File"/>
      </property>
      <property name="indent-style" writable="1" transfer-ownership="none">
        <type name="IndentStyle"/>
      </property>
      <property name="indent-style-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="indent-width" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="indent-width-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-trailing-newline"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-trailing-newline-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="newline-type" writable="1" transfer-ownership="none">
        <type name="GtkSource.NewlineType"/>
      </property>
      <property name="newline-type-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="overwrite-braces" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="overwrite-braces-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="right-margin-position"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="right-margin-position-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="settled" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-right-margin"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-right-margin-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tab-width" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tab-width-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="trim-trailing-whitespace"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="trim-trailing-whitespace-set"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="FileSettingsClass"
            c:type="IdeFileSettingsClass"
            glib:is-gtype-struct-for="FileSettings">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="Fixit"
            c:type="IdeFixit"
            glib:type-name="IdeFixit"
            glib:get-type="ide_fixit_get_type"
            c:symbol-prefix="fixit">
      <method name="apply" c:identifier="ide_fixit_apply">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Fixit" c:type="IdeFixit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range" c:identifier="ide_fixit_get_range">
        <doc xml:space="preserve">Gets the range for the replacement text. The range is non inclusive of the
end location. [a,b)</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceRange.</doc>
          <type name="SourceRange" c:type="IdeSourceRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeFixit.</doc>
            <type name="Fixit" c:type="IdeFixit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="ide_fixit_get_text">
        <doc xml:space="preserve">Gets the text to replace the source range with.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A string with the replacement text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeFixit.</doc>
            <type name="Fixit" c:type="IdeFixit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_fixit_ref">
        <return-value transfer-ownership="full">
          <type name="Fixit" c:type="IdeFixit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Fixit" c:type="IdeFixit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_fixit_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Fixit" c:type="IdeFixit*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <interface name="GenesisAddin"
               c:symbol-prefix="genesis_addin"
               c:type="IdeGenesisAddin"
               glib:type-name="IdeGenesisAddin"
               glib:get-type="ide_genesis_addin_get_type"
               glib:type-struct="GenesisAddinInterface">
      <virtual-method name="get_icon_name" invoker="get_icon_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_label" invoker="get_label">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_next_label" invoker="get_next_label">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_async" invoker="run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_finish" invoker="run_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_icon_name"
              c:identifier="ide_genesis_addin_get_icon_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label" c:identifier="ide_genesis_addin_get_label">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_label"
              c:identifier="ide_genesis_addin_get_next_label">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_genesis_addin_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_genesis_addin_get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget" c:identifier="ide_genesis_addin_get_widget">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_genesis_addin_run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_genesis_addin_run_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-ready" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </interface>
    <record name="GenesisAddinInterface"
            c:type="IdeGenesisAddinInterface"
            glib:is-gtype-struct-for="GenesisAddin">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GtkWidget.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_async">
        <callback name="run_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_finish">
        <callback name="run_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_next_label">
        <callback name="get_next_label">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GenesisAddin" c:type="IdeGenesisAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="HighlightCallback" c:type="IdeHighlightCallback">
      <return-value transfer-ownership="none">
        <type name="HighlightResult" c:type="IdeHighlightResult"/>
      </return-value>
      <parameters>
        <parameter name="begin" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="style_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HighlightEngine"
           c:symbol-prefix="highlight_engine"
           c:type="IdeHighlightEngine"
           parent="Object"
           glib:type-name="IdeHighlightEngine"
           glib:get-type="ide_highlight_engine_get_type"
           glib:type-struct="HighlightEngineClass">
      <constructor name="new" c:identifier="ide_highlight_engine_new">
        <return-value transfer-ownership="full">
          <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="clear" c:identifier="ide_highlight_engine_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffer" c:identifier="ide_highlight_engine_get_buffer">
        <doc xml:space="preserve">Gets the IdeHighlightEngine:buffer property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuffer.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlighter"
              c:identifier="ide_highlight_engine_get_highlighter">
        <doc xml:space="preserve">Gets the IdeHighlightEngine:highlighter property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeHighlighter.</doc>
          <type name="Highlighter" c:type="IdeHighlighter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="ide_highlight_engine_get_style">
        <doc xml:space="preserve">A #GtkTextTag for @style_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkTextTag.</doc>
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeHighlightEngine</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
          <parameter name="style_name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the style to retrieve</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_highlight_engine_invalidate">
        <doc xml:space="preserve">This function will extend the invalidated range of the buffer to include
the range of @begin to @end.

The highlighter will be queued to interactively update the invalidated
region.

Updating the invalidated region of the buffer may take some time, as it is
important that the highlighter does not block for more than 1-2 milliseconds
to avoid dropping frames.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
          <parameter name="begin" transfer-ownership="none">
            <doc xml:space="preserve">the beginning of the range to invalidate</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">the end of the range to invalidate</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild" c:identifier="ide_highlight_engine_rebuild">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Buffer"/>
      </property>
      <property name="highlighter" transfer-ownership="none">
        <type name="Highlighter"/>
      </property>
    </class>
    <record name="HighlightEngineClass"
            c:type="IdeHighlightEngineClass"
            glib:is-gtype-struct-for="HighlightEngine">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="HighlightIndex"
            c:type="IdeHighlightIndex"
            glib:type-name="IdeHighlightIndex"
            glib:get-type="ide_highlight_index_get_type"
            c:symbol-prefix="highlight_index">
      <constructor name="new" c:identifier="ide_highlight_index_new">
        <return-value transfer-ownership="full">
          <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
        </return-value>
      </constructor>
      <method name="dump" c:identifier="ide_highlight_index_dump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_highlight_index_insert">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="ide_highlight_index_lookup">
        <doc xml:space="preserve">Gets the pointer tag that was registered for @word, or %NULL.  This can be
any arbitrary value. Some highlight engines might use it to point at
internal structures or strings they know about to optimize later work.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">Highlighter specific tag.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeHighlightIndex.</doc>
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_highlight_index_ref">
        <return-value transfer-ownership="full">
          <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_highlight_index_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="HighlightResult"
                 glib:type-name="IdeHighlightResult"
                 glib:get-type="ide_highlight_result_get_type"
                 c:type="IdeHighlightResult">
      <member name="stop"
              value="0"
              c:identifier="IDE_HIGHLIGHT_STOP"
              glib:nick="stop">
      </member>
      <member name="continue"
              value="1"
              c:identifier="IDE_HIGHLIGHT_CONTINUE"
              glib:nick="continue">
      </member>
    </enumeration>
    <interface name="Highlighter"
               c:symbol-prefix="highlighter"
               c:type="IdeHighlighter"
               glib:type-name="IdeHighlighter"
               glib:get-type="ide_highlighter_get_type"
               glib:type-struct="HighlighterInterface">
      <prerequisite name="Object"/>
      <virtual-method name="set_engine">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="engine" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update">
        <doc xml:space="preserve">Incrementally processes more of the buffer for highlighting.  If @callback
returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
return, having set @location to the current position of processing.

If processing the entire range was successful, then @location should be set
to @range_end.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeHighlighter.</doc>
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback to apply a given style.</doc>
            <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
          </parameter>
          <parameter name="range_begin" transfer-ownership="none">
            <doc xml:space="preserve">The beginning of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="range_end" transfer-ownership="none">
            <doc xml:space="preserve">The end of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">How far the highlighter got in the update.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="update" c:identifier="ide_highlighter_update">
        <doc xml:space="preserve">Incrementally processes more of the buffer for highlighting.  If @callback
returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
return, having set @location to the current position of processing.

If processing the entire range was successful, then @location should be set
to @range_end.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeHighlighter.</doc>
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A callback to apply a given style.</doc>
            <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
          </parameter>
          <parameter name="range_begin" transfer-ownership="none">
            <doc xml:space="preserve">The beginning of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="range_end" transfer-ownership="none">
            <doc xml:space="preserve">The end of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">How far the highlighter got in the update.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="HighlighterInterface"
            c:type="IdeHighlighterInterface"
            glib:is-gtype-struct-for="Highlighter">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="update">
        <callback name="update">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeHighlighter.</doc>
              <type name="Highlighter" c:type="IdeHighlighter*"/>
            </parameter>
            <parameter name="callback" transfer-ownership="none" scope="call">
              <doc xml:space="preserve">A callback to apply a given style.</doc>
              <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
            </parameter>
            <parameter name="range_begin" transfer-ownership="none">
              <doc xml:space="preserve">The beginning of the range to update.</doc>
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="range_end" transfer-ownership="none">
              <doc xml:space="preserve">The end of the range to update.</doc>
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="location"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve">How far the highlighter got in the update.</doc>
              <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_engine">
        <callback name="set_engine">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Highlighter" c:type="IdeHighlighter*"/>
            </parameter>
            <parameter name="engine" transfer-ownership="none">
              <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="IndentStyle"
                 glib:type-name="IdeIndentStyle"
                 glib:get-type="ide_indent_style_get_type"
                 c:type="IdeIndentStyle">
      <member name="spaces"
              value="1"
              c:identifier="IDE_INDENT_STYLE_SPACES"
              glib:nick="spaces">
      </member>
      <member name="tabs"
              value="2"
              c:identifier="IDE_INDENT_STYLE_TABS"
              glib:nick="tabs">
      </member>
    </enumeration>
    <interface name="Indenter"
               c:symbol-prefix="indenter"
               c:type="IdeIndenter"
               glib:type-name="IdeIndenter"
               glib:get-type="ide_indenter_get_type"
               glib:type-struct="IndenterInterface">
      <virtual-method name="format" invoker="format">
        <doc xml:space="preserve">This function performs an indentation for the key press activated by @event.
The implementation is free to move the @begin and @end iters to swallow
adjacent content. The result, a string, is the contents that will replace
the content inbetween @begin and @end.

@cursor_offset may be set to jump the cursor starting from @end. Negative
values are allowed.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A string containing the replacement text, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Indenter" c:type="IdeIndenter*"/>
          </instance-parameter>
          <parameter name="text_view" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextView</doc>
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
          <parameter name="begin" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter for the beginning region of text to replace.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter for the end region of text to replace.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="cursor_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The offset in characters from @end to place the
  cursor. Negative values are okay.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The #GdkEventKey that triggered the event.</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_trigger" invoker="is_trigger">
        <doc xml:space="preserve">Determines if @event should trigger an indentation request. If %TRUE is
returned then ide_indenter_format() will be called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @event should trigger an indentation request.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeIndenter</doc>
            <type name="Indenter" c:type="IdeIndenter*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEventKey</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Indenter" c:type="IdeIndenter*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="format" c:identifier="ide_indenter_format">
        <doc xml:space="preserve">This function performs an indentation for the key press activated by @event.
The implementation is free to move the @begin and @end iters to swallow
adjacent content. The result, a string, is the contents that will replace
the content inbetween @begin and @end.

@cursor_offset may be set to jump the cursor starting from @end. Negative
values are allowed.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A string containing the replacement text, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Indenter" c:type="IdeIndenter*"/>
          </instance-parameter>
          <parameter name="text_view" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextView</doc>
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
          <parameter name="begin" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter for the beginning region of text to replace.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve">A #GtkTextIter for the end region of text to replace.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="cursor_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">The offset in characters from @end to place the
  cursor. Negative values are okay.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">The #GdkEventKey that triggered the event.</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_trigger" c:identifier="ide_indenter_is_trigger">
        <doc xml:space="preserve">Determines if @event should trigger an indentation request. If %TRUE is
returned then ide_indenter_format() will be called.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @event should trigger an indentation request.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeIndenter</doc>
            <type name="Indenter" c:type="IdeIndenter*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkEventKey</doc>
            <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="IndenterInterface"
            c:type="IdeIndenterInterface"
            glib:is-gtype-struct-for="Indenter">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="format">
        <callback name="format">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A string containing the replacement text, or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Indenter" c:type="IdeIndenter*"/>
            </parameter>
            <parameter name="text_view" transfer-ownership="none">
              <doc xml:space="preserve">A #GtkTextView</doc>
              <type name="Gtk.TextView" c:type="GtkTextView*"/>
            </parameter>
            <parameter name="begin" transfer-ownership="none">
              <doc xml:space="preserve">A #GtkTextIter for the beginning region of text to replace.</doc>
              <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="end" transfer-ownership="none">
              <doc xml:space="preserve">A #GtkTextIter for the end region of text to replace.</doc>
              <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
            </parameter>
            <parameter name="cursor_offset"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">The offset in characters from @end to place the
  cursor. Negative values are okay.</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve">The #GdkEventKey that triggered the event.</doc>
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_trigger">
        <callback name="is_trigger">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @event should trigger an indentation request.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">an #IdeIndenter</doc>
              <type name="Indenter" c:type="IdeIndenter*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <doc xml:space="preserve">a #GdkEventKey</doc>
              <type name="Gdk.EventKey" c:type="GdkEventKey*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Indenter" c:type="IdeIndenter*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="LOG_LEVEL_TRACE"
              value="1"
              c:type="IDE_LOG_LEVEL_TRACE"
              introspectable="0">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Layout"
           c:symbol-prefix="layout"
           c:type="IdeLayout"
           parent="Pnl.DockBin"
           glib:type-name="IdeLayout"
           glib:get-type="ide_layout_get_type"
           glib:type-struct="LayoutClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Pnl.Dock"/>
      <implements name="Pnl.DockItem"/>
      <method name="get_active_view" c:identifier="ide_layout_get_active_view">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeLayoutView or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Layout" c:type="IdeLayout*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-view" transfer-ownership="none">
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Pnl.DockBin" c:type="PnlDockBin"/>
      </field>
    </class>
    <record name="LayoutClass"
            c:type="IdeLayoutClass"
            glib:is-gtype-struct-for="Layout">
      <field name="parent_class">
        <type name="Pnl.DockBinClass" c:type="PnlDockBinClass"/>
      </field>
    </record>
    <class name="LayoutGrid"
           c:symbol-prefix="layout_grid"
           c:type="IdeLayoutGrid"
           parent="Gtk.Bin"
           glib:type-name="IdeLayoutGrid"
           glib:get-type="ide_layout_grid_get_type"
           glib:type-struct="LayoutGridClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_layout_grid_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_stack_after"
              c:identifier="ide_layout_grid_add_stack_after">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The new view stack.</doc>
          <type name="LayoutStack" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_stack_before"
              c:identifier="ide_layout_grid_add_stack_before">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The new view stack.</doc>
          <type name="LayoutStack" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_view" c:identifier="ide_layout_grid_foreach_view">
        <doc xml:space="preserve">Calls @callback for every view found in the #IdeLayoutGrid.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutGrid.</doc>
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A #GtkCallback</doc>
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_focus"
              c:identifier="ide_layout_grid_get_last_focus">
        <doc xml:space="preserve">Gets the last focused #IdeLayoutStack.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeLayoutStack or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutGrid.</doc>
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack_after"
              c:identifier="ide_layout_grid_get_stack_after">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The view stack.</doc>
          <type name="LayoutStack" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stack_before"
              c:identifier="ide_layout_grid_get_stack_before">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The view stack.</doc>
          <type name="LayoutStack" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_stacks" c:identifier="ide_layout_grid_get_stacks">
        <doc xml:space="preserve">Fetches all of the stacks in the grid. The resulting #GList should be
freed with g_list_free().</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GList.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="LayoutStack"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="grid" transfer-ownership="none">
            <type name="LayoutGrid" c:type="IdeLayoutGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="empty" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="LayoutGridClass"
            c:type="IdeLayoutGridClass"
            glib:is-gtype-struct-for="LayoutGrid">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <enumeration name="LayoutGridSplit"
                 glib:type-name="IdeLayoutGridSplit"
                 glib:get-type="ide_layout_grid_split_get_type"
                 c:type="IdeLayoutGridSplit">
      <doc xml:space="preserve">%IDE_LAYOUT_GRID_SPLIT_LEFT:
%IDE_LAYOUT_GRID_SPLIT_RIGHT:
%IDE_LAYOUT_GRID_SPLIT_MOVE_LEFT:
%IDE_LAYOUT_GRID_SPLIT_MOVE_RIGHT:</doc>
      <member name="left"
              value="1"
              c:identifier="IDE_LAYOUT_GRID_SPLIT_LEFT"
              glib:nick="left">
      </member>
      <member name="right"
              value="2"
              c:identifier="IDE_LAYOUT_GRID_SPLIT_RIGHT"
              glib:nick="right">
      </member>
      <member name="move_left"
              value="3"
              c:identifier="IDE_LAYOUT_GRID_SPLIT_MOVE_LEFT"
              glib:nick="move-left">
      </member>
      <member name="move_right"
              value="4"
              c:identifier="IDE_LAYOUT_GRID_SPLIT_MOVE_RIGHT"
              glib:nick="move-right">
      </member>
    </enumeration>
    <class name="LayoutPane"
           c:symbol-prefix="layout_pane"
           c:type="IdeLayoutPane"
           parent="Pnl.DockBinEdge"
           glib:type-name="IdeLayoutPane"
           glib:get-type="ide_layout_pane_get_type"
           glib:type-struct="LayoutPaneClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Pnl.DockItem"/>
    </class>
    <record name="LayoutPaneClass"
            c:type="IdeLayoutPaneClass"
            glib:is-gtype-struct-for="LayoutPane">
      <field name="parent_class">
        <type name="Pnl.DockBinEdgeClass" c:type="PnlDockBinEdgeClass"/>
      </field>
    </record>
    <class name="LayoutStack"
           c:symbol-prefix="layout_stack"
           c:type="IdeLayoutStack"
           parent="Gtk.Bin"
           glib:type-name="IdeLayoutStack"
           glib:get-type="ide_layout_stack_get_type"
           glib:type-struct="LayoutStackClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_layout_stack_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_control" c:identifier="ide_layout_stack_add_control">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </instance-parameter>
          <parameter name="control" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_view" c:identifier="ide_layout_stack_foreach_view">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A callback to invoke for each view.</doc>
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_view"
              c:identifier="ide_layout_stack_get_active_view">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_layout_stack_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </instance-parameter>
          <parameter name="view" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_view"
              c:identifier="ide_layout_stack_set_active_view">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </instance-parameter>
          <parameter name="active_view" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-view" writable="1" transfer-ownership="none">
        <type name="LayoutView"/>
      </property>
      <glib:signal name="empty" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="split" when="last">
        <doc xml:space="preserve">Requests a split to be performed on the view.

This should only be used by #IdeLayoutGrid.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">The #IdeLayoutView to split.</doc>
            <type name="LayoutView"/>
          </parameter>
          <parameter name="split_type" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutGridSplit.</doc>
            <type name="gint"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile to be opened in the split, or %NULL to use the existing file. If given,
the @file should have already been loaded by the buffer manager.</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="LayoutStackAddin"
               c:symbol-prefix="layout_stack_addin"
               c:type="IdeLayoutStackAddin"
               glib:type-name="IdeLayoutStackAddin"
               glib:get-type="ide_layout_stack_addin_get_type"
               glib:type-struct="LayoutStackAddinInterface">
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve">This function should be implemented by #IdeLayoutStackAddin plugins
in #IdeLayoutStackAddinInterface.

This virtual method is called when the plugin should load itself.
A new instance of the plugin is created for every #IdeLayoutStack
that is created in Builder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStack</doc>
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_view" invoker="set_view">
        <doc xml:space="preserve">This virtual method is called whenever the active view changes
in the #IdeLayoutView. Plugins may want to alter what controls
are displayed on the stack based on the current view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An #IdeLayoutView or %NULL.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve">This function should be implemented by #IdeLayoutStackAddin plugins
in #IdeLayoutStackAddinInterface.

This virtual method is called when the plugin should unload itself.
It should revert anything performed via ide_layout_stack_addin_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStack</doc>
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_layout_stack_addin_load">
        <doc xml:space="preserve">This function should be implemented by #IdeLayoutStackAddin plugins
in #IdeLayoutStackAddinInterface.

This virtual method is called when the plugin should load itself.
A new instance of the plugin is created for every #IdeLayoutStack
that is created in Builder.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStack</doc>
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_view" c:identifier="ide_layout_stack_addin_set_view">
        <doc xml:space="preserve">This virtual method is called whenever the active view changes
in the #IdeLayoutView. Plugins may want to alter what controls
are displayed on the stack based on the current view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="view"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An #IdeLayoutView or %NULL.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_layout_stack_addin_unload">
        <doc xml:space="preserve">This function should be implemented by #IdeLayoutStackAddin plugins
in #IdeLayoutStackAddinInterface.

This virtual method is called when the plugin should unload itself.
It should revert anything performed via ide_layout_stack_addin_load().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
            <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
          </instance-parameter>
          <parameter name="stack" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeLayoutStack</doc>
            <type name="LayoutStack" c:type="IdeLayoutStack*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="LayoutStackAddinInterface"
            c:type="IdeLayoutStackAddinInterface"
            glib:is-gtype-struct-for="LayoutStackAddin">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
              <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
            </parameter>
            <parameter name="stack" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeLayoutStack</doc>
              <type name="LayoutStack" c:type="IdeLayoutStack*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeLayoutStackAddin</doc>
              <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
            </parameter>
            <parameter name="stack" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeLayoutStack</doc>
              <type name="LayoutStack" c:type="IdeLayoutStack*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_view">
        <callback name="set_view">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeLayoutStackAddin</doc>
              <type name="LayoutStackAddin" c:type="IdeLayoutStackAddin*"/>
            </parameter>
            <parameter name="view"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An #IdeLayoutView or %NULL.</doc>
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="LayoutStackClass"
            c:type="IdeLayoutStackClass"
            glib:is-gtype-struct-for="LayoutStack">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="LayoutView"
           c:symbol-prefix="layout_view"
           c:type="IdeLayoutView"
           parent="Gtk.Box"
           glib:type-name="IdeLayoutView"
           glib:get-type="ide_layout_view_get_type"
           glib:type-struct="LayoutViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <virtual-method name="agree_to_close" invoker="agree_to_close">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_split" invoker="create_split">
        <doc xml:space="preserve">Creates a new view that can be displayed in a split, potentially with a different
buffer. If the view does not support splits, %NULL will be returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeLayoutView.</doc>
          <type name="LayoutView" c:type="IdeLayoutView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile already loaded by the #IdeBufferManager, or %NULL to use the
existing buffer.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_preview" invoker="get_can_preview">
        <doc xml:space="preserve">Checks if @self can create a preview view (such as html, markdown, etc).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self can create a preview view.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_split" invoker="get_can_split">
        <doc xml:space="preserve">Checks if @self can create a split view. If so, %TRUE is returned. Otherwise, %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self can create a split.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_modified" invoker="get_modified">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_special_title" invoker="get_special_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="navigate_to" invoker="navigate_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_back_forward_list"
                      invoker="set_back_forward_list">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="back_forward_list" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_split_view" invoker="set_split_view">
        <doc xml:space="preserve">Set a split view using GtkPaned style split with %GTK_ORIENTATION_VERTICAL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="split_view" transfer-ownership="none">
            <doc xml:space="preserve">if the split should be enabled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="agree_to_close"
              c:identifier="ide_layout_view_agree_to_close">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_split" c:identifier="ide_layout_view_create_split">
        <doc xml:space="preserve">Creates a new view that can be displayed in a split, potentially with a different
buffer. If the view does not support splits, %NULL will be returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeLayoutView.</doc>
          <type name="LayoutView" c:type="IdeLayoutView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile already loaded by the #IdeBufferManager, or %NULL to use the
existing buffer.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_can_preview"
              c:identifier="ide_layout_view_get_can_preview">
        <doc xml:space="preserve">Checks if @self can create a preview view (such as html, markdown, etc).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self can create a preview view.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_split"
              c:identifier="ide_layout_view_get_can_split">
        <doc xml:space="preserve">Checks if @self can create a split view. If so, %TRUE is returned. Otherwise, %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self can create a split.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modified" c:identifier="ide_layout_view_get_modified">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_special_title"
              c:identifier="ide_layout_view_get_special_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_layout_view_get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="navigate_to" c:identifier="ide_layout_view_navigate_to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_back_forward_list"
              c:identifier="ide_layout_view_set_back_forward_list">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="back_forward_list" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_split_view"
              c:identifier="ide_layout_view_set_split_view">
        <doc xml:space="preserve">Set a split view using GtkPaned style split with %GTK_ORIENTATION_VERTICAL.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </instance-parameter>
          <parameter name="split_view" transfer-ownership="none">
            <doc xml:space="preserve">if the split should be enabled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-split" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="modified" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="special-title" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="LayoutViewClass"
            c:type="IdeLayoutViewClass"
            glib:is-gtype-struct-for="LayoutView">
      <field name="parent">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="get_can_preview">
        <callback name="get_can_preview">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @self can create a preview view.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeLayoutView.</doc>
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_split">
        <callback name="get_can_split">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @self can create a split.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeLayoutView.</doc>
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_modified">
        <callback name="get_modified">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_special_title">
        <callback name="get_special_title">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_split">
        <callback name="create_split">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #IdeLayoutView.</doc>
            <type name="LayoutView" c:type="IdeLayoutView*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeLayoutView.</doc>
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve">A #GFile already loaded by the #IdeBufferManager, or %NULL to use the
existing buffer.</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_split_view">
        <callback name="set_split_view">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeLayoutView.</doc>
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
            <parameter name="split_view" transfer-ownership="none">
              <doc xml:space="preserve">if the split should be enabled.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_back_forward_list">
        <callback name="set_back_forward_list">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
            <parameter name="back_forward_list" transfer-ownership="none">
              <type name="BackForwardList" c:type="IdeBackForwardList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="navigate_to">
        <callback name="navigate_to">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <type name="SourceLocation" c:type="IdeSourceLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="agree_to_close">
        <callback name="agree_to_close">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LayoutView" c:type="IdeLayoutView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="LineReader" c:type="IdeLineReader">
      <field name="contents" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="length" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pos" writable="1">
        <type name="gssize" c:type="gssize"/>
      </field>
      <method name="init" c:identifier="ide_line_reader_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reader" transfer-ownership="none">
            <type name="LineReader" c:type="IdeLineReader*"/>
          </instance-parameter>
          <parameter name="contents" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="ide_line_reader_next">
        <doc xml:space="preserve">Moves forward to the beginning of the next line in the buffer. No changes to the buffer
are made, and the result is a pointer within the string passed as @contents in
ide_line_reader_init(). Since the line most likely will not be terminated with a NULL byte,
you must provide @length to determine the length of the line.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The beginning of the line within the buffer.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reader" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeLineReader</doc>
            <type name="LineReader" c:type="IdeLineReader*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">a location for the length of the line in bytes.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="LocalDevice"
           c:symbol-prefix="local_device"
           c:type="IdeLocalDevice"
           parent="Device"
           glib:type-name="IdeLocalDevice"
           glib:get-type="ide_local_device_get_type"
           glib:type-struct="LocalDeviceClass">
      <field name="parent_instance">
        <type name="Device" c:type="IdeDevice"/>
      </field>
    </class>
    <record name="LocalDeviceClass"
            c:type="IdeLocalDeviceClass"
            glib:is-gtype-struct-for="LocalDevice">
      <field name="parent">
        <type name="DeviceClass" c:type="IdeDeviceClass"/>
      </field>
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="IdeObject"
           parent="GObject.Object"
           glib:type-name="IdeObject"
           glib:get-type="ide_object_get_type"
           glib:type-struct="ObjectClass">
      <constructor name="new_finish"
                   c:identifier="ide_object_new_finish"
                   throws="1">
        <return-value transfer-ownership="full">
          <type name="Object" c:type="IdeObject*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async"
                c:identifier="ide_object_new_async"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="extension_point" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_extension_async"
                c:identifier="ide_object_new_for_extension_async"
                introspectable="0">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="interface_gtype" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="sort_priority_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A #GCompareDataFunc or %NULL.</doc>
            <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="sort_proirity_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="notify_in_main" c:identifier="ide_object_notify_in_main">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_context" invoker="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_context" c:identifier="ide_object_get_context">
        <doc xml:space="preserve">Fetches the #IdeObject:context property.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeContext.</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hold" c:identifier="ide_object_hold">
        <doc xml:space="preserve">This function will acquire a reference to the IdeContext that the object
is a part of. This is useful if you are going to be doing a long running
task (such as something in a thread) and want to ensure the context cannot
be unloaded during your operation.

You should call ide_object_release() an equivalent number of times to
ensure the context may be freed afterwards.

You should check the return value of this function to ensure that the
context is not already in shutdown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if a hold was successfully created.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="ide_object_release">
        <doc xml:space="preserve">Releases a successful hold on the context previously created with ide_object_hold().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">the #IdeObject.</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_context" c:identifier="ide_object_set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="destroy" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ObjectClass"
            c:type="IdeObjectClass"
            glib:is-gtype-struct-for="Object">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="OmniBar"
           c:symbol-prefix="omni_bar"
           c:type="IdeOmniBar"
           parent="Gtk.Box"
           glib:type-name="IdeOmniBar"
           glib:get-type="ide_omni_bar_get_type"
           glib:type-struct="OmniBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="ide_omni_bar_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="OmniBarClass"
            c:type="IdeOmniBarClass"
            glib:is-gtype-struct-for="OmniBar">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="OmniSearchDisplay"
           c:symbol-prefix="omni_search_display"
           c:type="IdeOmniSearchDisplay"
           parent="Gtk.Box"
           glib:type-name="IdeOmniSearchDisplay"
           glib:get-type="ide_omni_search_display_get_type"
           glib:type-struct="OmniSearchDisplayClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <method name="get_context"
              c:identifier="ide_omni_search_display_get_context">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An IdeSearchContext.</doc>
          <type name="SearchContext" c:type="IdeSearchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchDisplay" c:type="IdeOmniSearchDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count"
              c:identifier="ide_omni_search_display_get_count">
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchDisplay" c:type="IdeOmniSearchDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_next_result"
              c:identifier="ide_omni_search_display_move_next_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchDisplay" c:type="IdeOmniSearchDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_previous_result"
              c:identifier="ide_omni_search_display_move_previous_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchDisplay" c:type="IdeOmniSearchDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_context"
              c:identifier="ide_omni_search_display_set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchDisplay" c:type="IdeOmniSearchDisplay*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context" writable="1" transfer-ownership="none">
        <type name="SearchContext"/>
      </property>
      <glib:signal name="activate" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="result-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SearchResult"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="OmniSearchDisplayClass"
            c:type="IdeOmniSearchDisplayClass"
            glib:is-gtype-struct-for="OmniSearchDisplay">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="OmniSearchEntry"
           c:symbol-prefix="omni_search_entry"
           c:type="IdeOmniSearchEntry"
           parent="Gtk.Entry"
           glib:type-name="IdeOmniSearchEntry"
           glib:get-type="ide_omni_search_entry_get_type"
           glib:type-struct="OmniSearchEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="ide_omni_search_entry_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_search_engine"
              c:identifier="ide_omni_search_entry_get_search_engine">
        <doc xml:space="preserve">Gets the search engine to use with the current workbench.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSearchEngine.</doc>
          <type name="SearchEngine" c:type="IdeSearchEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeOmniSearchEntry.</doc>
            <type name="OmniSearchEntry" c:type="IdeOmniSearchEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_search_engine"
              c:identifier="ide_omni_search_entry_set_search_engine">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchEntry" c:type="IdeOmniSearchEntry*"/>
          </instance-parameter>
          <parameter name="search_engine" transfer-ownership="none">
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="clear-search" when="first" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-next-result" when="first" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-previous-result" when="first" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="OmniSearchEntryClass"
            c:type="IdeOmniSearchEntryClass"
            glib:is-gtype-struct-for="OmniSearchEntry">
      <field name="parent_class">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
    </record>
    <class name="OmniSearchGroup"
           c:symbol-prefix="omni_search_group"
           c:type="IdeOmniSearchGroup"
           parent="Gtk.Box"
           glib:type-name="IdeOmniSearchGroup"
           glib:get-type="ide_omni_search_group_get_type"
           glib:type-struct="OmniSearchGroupClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <method name="activate" c:identifier="ide_omni_search_group_activate">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_result"
              c:identifier="ide_omni_search_group_add_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ide_omni_search_group_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="ide_omni_search_group_get_count">
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first" c:identifier="ide_omni_search_group_get_first">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSearchResult or %NULL.</doc>
          <type name="SearchResult" c:type="IdeSearchResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_provider"
              c:identifier="ide_omni_search_group_get_provider">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSearchProvider</doc>
          <type name="SearchProvider" c:type="IdeSearchProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_selection"
              c:identifier="ide_omni_search_group_has_selection">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_next" c:identifier="ide_omni_search_group_move_next">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_previous"
              c:identifier="ide_omni_search_group_move_previous">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_result"
              c:identifier="ide_omni_search_group_remove_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_first"
              c:identifier="ide_omni_search_group_select_first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_last"
              c:identifier="ide_omni_search_group_select_last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unselect" c:identifier="ide_omni_search_group_unselect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniSearchGroup" c:type="IdeOmniSearchGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="provider"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SearchProvider"/>
      </property>
      <glib:signal name="result-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="SearchResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="result-selected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SearchResult"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="OmniSearchGroupClass"
            c:type="IdeOmniSearchGroupClass"
            glib:is-gtype-struct-for="OmniSearchGroup">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="OmniSearchRow"
           c:symbol-prefix="omni_search_row"
           c:type="IdeOmniSearchRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="IdeOmniSearchRow"
           glib:get-type="ide_omni_search_row_get_type"
           glib:type-struct="OmniSearchRowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_result" c:identifier="ide_omni_search_row_get_result">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSearchResult.</doc>
          <type name="SearchResult" c:type="IdeSearchResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="row" transfer-ownership="none">
            <type name="OmniSearchRow" c:type="IdeOmniSearchRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_result" c:identifier="ide_omni_search_row_set_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="row" transfer-ownership="none">
            <type name="OmniSearchRow" c:type="IdeOmniSearchRow*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="result" writable="1" transfer-ownership="none">
        <type name="SearchResult"/>
      </property>
    </class>
    <record name="OmniSearchRowClass"
            c:type="IdeOmniSearchRowClass"
            glib:is-gtype-struct-for="OmniSearchRow">
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <record name="PatternSpec"
            c:type="IdePatternSpec"
            glib:type-name="IdePatternSpec"
            glib:get-type="ide_pattern_spec_get_type"
            c:symbol-prefix="pattern_spec">
      <constructor name="new" c:identifier="ide_pattern_spec_new">
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="IdePatternSpec*"/>
        </return-value>
        <parameters>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_text" c:identifier="ide_pattern_spec_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="ide_pattern_spec_match">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
          <parameter name="haystack" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_pattern_spec_ref">
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="IdePatternSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_pattern_spec_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <interface name="Perspective"
               c:symbol-prefix="perspective"
               c:type="IdePerspective"
               glib:type-name="IdePerspective"
               glib:get-type="ide_perspective_get_type"
               glib:type-struct="PerspectiveInterface">
      <virtual-method name="agree_to_shutdown" invoker="agree_to_shutdown">
        <doc xml:space="preserve">This interface method is called when the workbench would like to shutdown.
If the perspective needs to focus and ask the user a question, this is the place
to do so. You may run a #GtkDialog using gtk_dialog_run() or simply focus your
perspective and return %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE to allow the workbench to continue shutting down.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_accelerator" invoker="get_accelerator">
        <doc xml:space="preserve">Gets the accelerator to use to jump to the perspective. The workbench will
register this accelerator on behalf of the perspective.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_actions" invoker="get_actions">
        <doc xml:space="preserve">This interface method should retrieve a #GActionGroup associated with the
perspective, if necessary. The #GActionGroup will automatically be
registered with the "perspective" action prefix while the perspective is
active. A perspective is "active" when it is currently displayed in the
workbench.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GActionGroup or %NULL.</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_name" invoker="get_icon_name">
        <doc xml:space="preserve">This interface methods retrieves the icon name to use when displaying the
perspective selection sidebar.

If you implement an "icon-name" property, the icon may change at runtime.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allcoated string that contains the icon-name
  to use for the perspective.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id">
        <doc xml:space="preserve">This interface method is used to identify the perspective. It should be a short
internal name, such as "editor" which should not be translated. Internally, the
default implementation of this method will return the name of the instances #GType.

The identifier must be alpha-numeric only (a-z A-Z 0-9).

This value should be unique per workspace.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A string identifier for the perspective.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_needs_attention" invoker="get_needs_attention">
        <doc xml:space="preserve">This interface method returns %TRUE if the interface needs attention.

One such use of this would be to indicate that contents within a perspective have
changed since the user last focused the perspective. This should also be implemented
with a boolean property named "needs-attention". If you call g_object_notify() (or one
of its variants), the notifcation visual will be rendered with your icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the perspective needs attention.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <doc xml:space="preserve">This interface method gets the title of the perspective. This is used for tooltips
in the perspective selector and potentially other UI components.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string which will not be modified or freed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_titlebar" invoker="get_titlebar">
        <doc xml:space="preserve">This interface method should return a #GtkWidget suitable for being embedded as the
titlebar for the application. If you return %NULL from this method, a suitable titlebar
will be created for you.

You may use #IdeHeaderBar for a base implementation to save you the trouble of
creating a titlebar similar to other perspectives in Builder.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_early" invoker="is_early">
        <doc xml:space="preserve">If %TRUE, the perspective can be used before loading a project.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_fullscreen" invoker="set_fullscreen">
        <doc xml:space="preserve">This interface method is used to notify the perspective that it is going into
fullscreen mode. The #IdeWorkbench will notify the perspective before it is displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
          <parameter name="fullscreen" transfer-ownership="none">
            <doc xml:space="preserve">If fullscreen mode should be activated.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="views_foreach" invoker="views_foreach">
        <doc xml:space="preserve">This interface method is used to iterate all #IdeLayoutView's that are descendents of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A #GtkCallback.</doc>
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="agree_to_shutdown"
              c:identifier="ide_perspective_agree_to_shutdown">
        <doc xml:space="preserve">This interface method is called when the workbench would like to shutdown.
If the perspective needs to focus and ask the user a question, this is the place
to do so. You may run a #GtkDialog using gtk_dialog_run() or simply focus your
perspective and return %FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE to allow the workbench to continue shutting down.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_accelerator"
              c:identifier="ide_perspective_get_accelerator">
        <doc xml:space="preserve">Gets the accelerator to use to jump to the perspective. The workbench will
register this accelerator on behalf of the perspective.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allocated string or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_actions" c:identifier="ide_perspective_get_actions">
        <doc xml:space="preserve">This interface method should retrieve a #GActionGroup associated with the
perspective, if necessary. The #GActionGroup will automatically be
registered with the "perspective" action prefix while the perspective is
active. A perspective is "active" when it is currently displayed in the
workbench.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GActionGroup or %NULL.</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_perspective_get_icon_name">
        <doc xml:space="preserve">This interface methods retrieves the icon name to use when displaying the
perspective selection sidebar.

If you implement an "icon-name" property, the icon may change at runtime.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A newly allcoated string that contains the icon-name
  to use for the perspective.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_perspective_get_id">
        <doc xml:space="preserve">This interface method is used to identify the perspective. It should be a short
internal name, such as "editor" which should not be translated. Internally, the
default implementation of this method will return the name of the instances #GType.

The identifier must be alpha-numeric only (a-z A-Z 0-9).

This value should be unique per workspace.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A string identifier for the perspective.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_attention"
              c:identifier="ide_perspective_get_needs_attention">
        <doc xml:space="preserve">This interface method returns %TRUE if the interface needs attention.

One such use of this would be to indicate that contents within a perspective have
changed since the user last focused the perspective. This should also be implemented
with a boolean property named "needs-attention". If you call g_object_notify() (or one
of its variants), the notifcation visual will be rendered with your icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the perspective needs attention.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_perspective_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_perspective_get_title">
        <doc xml:space="preserve">This interface method gets the title of the perspective. This is used for tooltips
in the perspective selector and potentially other UI components.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string which will not be modified or freed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_titlebar" c:identifier="ide_perspective_get_titlebar">
        <doc xml:space="preserve">This interface method should return a #GtkWidget suitable for being embedded as the
titlebar for the application. If you return %NULL from this method, a suitable titlebar
will be created for you.

You may use #IdeHeaderBar for a base implementation to save you the trouble of
creating a titlebar similar to other perspectives in Builder.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_early" c:identifier="ide_perspective_is_early">
        <doc xml:space="preserve">If %TRUE, the perspective can be used before loading a project.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fullscreen"
              c:identifier="ide_perspective_set_fullscreen">
        <doc xml:space="preserve">This interface method is used to notify the perspective that it is going into
fullscreen mode. The #IdeWorkbench will notify the perspective before it is displayed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
          <parameter name="fullscreen" transfer-ownership="none">
            <doc xml:space="preserve">If fullscreen mode should be activated.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="views_foreach"
              c:identifier="ide_perspective_views_foreach">
        <doc xml:space="preserve">This interface method is used to iterate all #IdeLayoutView's that are descendents of @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective.</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">A #GtkCallback.</doc>
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PerspectiveInterface"
            c:type="IdePerspectiveInterface"
            glib:is-gtype-struct-for="Perspective">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="agree_to_shutdown">
        <callback name="agree_to_shutdown">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to allow the workbench to continue shutting down.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_actions">
        <callback name="get_actions">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A #GActionGroup or %NULL.</doc>
            <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A newly allcoated string that contains the icon-name
  to use for the perspective.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A string identifier for the perspective.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_needs_attention">
        <callback name="get_needs_attention">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if the perspective needs attention.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A string which will not be modified or freed.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_titlebar">
        <callback name="get_titlebar">
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_early">
        <callback name="is_early">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_fullscreen">
        <callback name="set_fullscreen">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
            <parameter name="fullscreen" transfer-ownership="none">
              <doc xml:space="preserve">If fullscreen mode should be activated.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="views_foreach">
        <callback name="views_foreach">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective.</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="call"
                       closure="2">
              <doc xml:space="preserve">A #GtkCallback.</doc>
              <type name="Gtk.Callback" c:type="GtkCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="2">
              <doc xml:space="preserve">user data for @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_accelerator">
        <callback name="get_accelerator">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A newly allocated string or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="Preferences"
               c:symbol-prefix="preferences"
               c:type="IdePreferences"
               glib:type-name="IdePreferences"
               glib:get-type="ide_preferences_get_type"
               glib:type-struct="PreferencesInterface">
      <virtual-method name="add_custom" invoker="add_custom">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_file_chooser" invoker="add_file_chooser">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_font_button" invoker="add_font_button">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_group" invoker="add_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_list_group" invoker="add_list_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_page" invoker="add_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_radio" invoker="add_radio">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_spin_button" invoker="add_spin_button">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_switch" invoker="add_switch">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_id" invoker="remove_id">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_page" invoker="set_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_custom" c:identifier="ide_preferences_add_custom">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file_chooser"
              c:identifier="ide_preferences_add_file_chooser">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_font_button"
              c:identifier="ide_preferences_add_font_button">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_group" c:identifier="ide_preferences_add_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_list_group"
              c:identifier="ide_preferences_add_list_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="ide_preferences_add_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_radio" c:identifier="ide_preferences_add_radio">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_spin_button"
              c:identifier="ide_preferences_add_spin_button">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_switch" c:identifier="ide_preferences_add_switch">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="variant_string"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional gvariant string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An optional subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keywords"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Optional keywords for search</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_widget" c:identifier="ide_preferences_get_widget">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_id" c:identifier="ide_preferences_remove_id">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="widget_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page" c:identifier="ide_preferences_set_page">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Preferences" c:type="IdePreferences*"/>
          </instance-parameter>
          <parameter name="page_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="map" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </interface>
    <interface name="PreferencesAddin"
               c:symbol-prefix="preferences_addin"
               c:type="IdePreferencesAddin"
               glib:type-name="IdePreferencesAddin"
               glib:get-type="ide_preferences_addin_get_type"
               glib:type-struct="PreferencesAddinInterface">
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve">This interface method is called when a preferences addin is initialized. It could be
initialized from multiple preferences implementations, so consumers should use the
#IdePreferences interface to add their preferences controls to the container.

Such implementations might include a preferences dialog window, or a preferences
widget which could be rendered as a perspective.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
            <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
          </instance-parameter>
          <parameter name="preferences" transfer-ownership="none">
            <doc xml:space="preserve">The preferences container implementation.</doc>
            <type name="Preferences" c:type="IdePreferences*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve">This interface method is called when the preferences addin should remove all controls
added to @preferences. This could happen during desctruction of @preferences, or when
the plugin is unloaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
            <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
          </instance-parameter>
          <parameter name="preferences" transfer-ownership="none">
            <doc xml:space="preserve">The preferences container implementation.</doc>
            <type name="Preferences" c:type="IdePreferences*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_preferences_addin_load">
        <doc xml:space="preserve">This interface method is called when a preferences addin is initialized. It could be
initialized from multiple preferences implementations, so consumers should use the
#IdePreferences interface to add their preferences controls to the container.

Such implementations might include a preferences dialog window, or a preferences
widget which could be rendered as a perspective.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
            <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
          </instance-parameter>
          <parameter name="preferences" transfer-ownership="none">
            <doc xml:space="preserve">The preferences container implementation.</doc>
            <type name="Preferences" c:type="IdePreferences*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_preferences_addin_unload">
        <doc xml:space="preserve">This interface method is called when the preferences addin should remove all controls
added to @preferences. This could happen during desctruction of @preferences, or when
the plugin is unloaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
            <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
          </instance-parameter>
          <parameter name="preferences" transfer-ownership="none">
            <doc xml:space="preserve">The preferences container implementation.</doc>
            <type name="Preferences" c:type="IdePreferences*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PreferencesAddinInterface"
            c:type="IdePreferencesAddinInterface"
            glib:is-gtype-struct-for="PreferencesAddin">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
              <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
            </parameter>
            <parameter name="preferences" transfer-ownership="none">
              <doc xml:space="preserve">The preferences container implementation.</doc>
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePreferencesAddin.</doc>
              <type name="PreferencesAddin" c:type="IdePreferencesAddin*"/>
            </parameter>
            <parameter name="preferences" transfer-ownership="none">
              <doc xml:space="preserve">The preferences container implementation.</doc>
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PreferencesBin"
           c:symbol-prefix="preferences_bin"
           c:type="IdePreferencesBin"
           parent="Gtk.Bin"
           glib:type-name="IdePreferencesBin"
           glib:get-type="ide_preferences_bin_get_type"
           glib:type-struct="PreferencesBinClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="connect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
          </instance-parameter>
          <parameter name="settings" transfer-ownership="none">
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="matches">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="keywords"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="PreferencesBinClass"
            c:type="IdePreferencesBinClass"
            glib:is-gtype-struct-for="PreferencesBin">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="connect">
        <callback name="connect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="Gio.Settings" c:type="GSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect">
        <callback name="disconnect">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
            </parameter>
            <parameter name="settings" transfer-ownership="none">
              <type name="Gio.Settings" c:type="GSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="matches">
        <callback name="matches">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PreferencesBin" c:type="IdePreferencesBin*"/>
            </parameter>
            <parameter name="spec" transfer-ownership="none">
              <type name="PatternSpec" c:type="IdePatternSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <class name="PreferencesEntry"
           c:symbol-prefix="preferences_entry"
           c:type="IdePreferencesEntry"
           parent="PreferencesBin"
           glib:type-name="IdePreferencesEntry"
           glib:get-type="ide_preferences_entry_get_type"
           glib:type-struct="PreferencesEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_title_widget"
              c:identifier="ide_preferences_entry_get_title_widget">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesEntry" c:type="IdePreferencesEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesBin" c:type="IdePreferencesBin"/>
      </field>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PreferencesEntryClass"
            c:type="IdePreferencesEntryClass"
            glib:is-gtype-struct-for="PreferencesEntry">
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="IdePreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesFileChooserButton"
           c:symbol-prefix="preferences_file_chooser_button"
           c:type="IdePreferencesFileChooserButton"
           parent="PreferencesBin"
           glib:type-name="IdePreferencesFileChooserButton"
           glib:get-type="ide_preferences_file_chooser_button_get_type"
           glib:type-struct="PreferencesFileChooserButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="action"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gtk.FileChooserAction"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PreferencesFileChooserButtonClass"
            c:type="IdePreferencesFileChooserButtonClass"
            glib:is-gtype-struct-for="PreferencesFileChooserButton">
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="IdePreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesFlowBox"
           c:symbol-prefix="preferences_flow_box"
           c:type="IdePreferencesFlowBox"
           parent="Egg.ColumnLayout"
           glib:type-name="IdePreferencesFlowBox"
           glib:get-type="ide_preferences_flow_box_get_type"
           glib:type-struct="PreferencesFlowBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_preferences_flow_box_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="PreferencesFlowBoxClass"
            c:type="IdePreferencesFlowBoxClass"
            glib:is-gtype-struct-for="PreferencesFlowBox">
      <field name="parent_class">
        <type name="Egg.ColumnLayoutClass" c:type="EggColumnLayoutClass"/>
      </field>
    </record>
    <class name="PreferencesFontButton"
           c:symbol-prefix="preferences_font_button"
           c:type="IdePreferencesFontButton"
           parent="PreferencesBin"
           glib:type-name="IdePreferencesFontButton"
           glib:get-type="ide_preferences_font_button_get_type"
           glib:type-struct="PreferencesFontButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesFontButtonClass"
            c:type="IdePreferencesFontButtonClass"
            glib:is-gtype-struct-for="PreferencesFontButton">
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="IdePreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesGroup"
           c:symbol-prefix="preferences_group"
           c:type="IdePreferencesGroup"
           parent="Gtk.Bin"
           glib:type-name="IdePreferencesGroup"
           glib:get-type="ide_preferences_group_get_type"
           glib:type-struct="PreferencesGroupClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="add" c:identifier="ide_preferences_group_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="IdePreferencesGroup*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_preferences_group_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="IdePreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_preferences_group_get_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="IdePreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="is-list"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode" writable="1" transfer-ownership="none">
        <type name="Gtk.SelectionMode"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PreferencesGroupClass"
            c:type="IdePreferencesGroupClass"
            glib:is-gtype-struct-for="PreferencesGroup">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <record name="PreferencesInterface"
            c:type="IdePreferencesInterface"
            glib:is-gtype-struct-for="Preferences">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_page">
        <callback name="set_page">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="map" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_page">
        <callback name="add_page">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_group">
        <callback name="add_group">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_list_group">
        <callback name="add_list_group">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="Gtk.SelectionMode" c:type="GtkSelectionMode"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_radio">
        <callback name="add_radio">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="variant_string" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_font_button">
        <callback name="add_font_button">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_switch">
        <callback name="add_switch">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An optional path</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="variant_string"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An optional gvariant string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An optional title</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An optional subtitle</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">Optional keywords for search</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_spin_button">
        <callback name="add_spin_button">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_file_chooser">
        <callback name="add_file_chooser">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="schema_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="key" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="subtitle" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="Gtk.FileChooserAction"
                    c:type="GtkFileChooserAction"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_custom">
        <callback name="add_custom">
          <return-value transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="page_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="group_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="keywords" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_id">
        <callback name="remove_id">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="widget_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve">A #GtkWidget or %NULL.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Preferences" c:type="IdePreferences*"/>
            </parameter>
            <parameter name="widget_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PreferencesPage"
           c:symbol-prefix="preferences_page"
           c:type="IdePreferencesPage"
           parent="Gtk.Bin"
           glib:type-name="IdePreferencesPage"
           glib:get-type="ide_preferences_page_get_type"
           glib:type-struct="PreferencesPageClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="add_group" c:identifier="ide_preferences_page_add_group">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="IdePreferencesPage*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <type name="PreferencesGroup" c:type="IdePreferencesGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="ide_preferences_page_get_group">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdePreferencesGroup or %NULL.</doc>
          <type name="PreferencesGroup" c:type="IdePreferencesGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesPage" c:type="IdePreferencesPage*"/>
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="priority" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="PreferencesPageClass"
            c:type="IdePreferencesPageClass"
            glib:is-gtype-struct-for="PreferencesPage">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="PreferencesSpinButton"
           c:symbol-prefix="preferences_spin_button"
           c:type="IdePreferencesSpinButton"
           parent="PreferencesBin"
           glib:type-name="IdePreferencesSpinButton"
           glib:get-type="ide_preferences_spin_button_get_type"
           glib:type-struct="PreferencesSpinButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_spin_button"
              c:identifier="ide_preferences_spin_button_get_spin_button">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The actual spin button widget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PreferencesSpinButton"
                  c:type="IdePreferencesSpinButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activate" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesSpinButtonClass"
            c:type="IdePreferencesSpinButtonClass"
            glib:is-gtype-struct-for="PreferencesSpinButton">
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="IdePreferencesBinClass"/>
      </field>
    </record>
    <class name="PreferencesSwitch"
           c:symbol-prefix="preferences_switch"
           c:type="IdePreferencesSwitch"
           parent="PreferencesBin"
           glib:type-name="IdePreferencesSwitch"
           glib:get-type="ide_preferences_switch_get_type"
           glib:type-struct="PreferencesSwitchClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <property name="is-radio"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="title" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="activated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="PreferencesSwitchClass"
            c:type="IdePreferencesSwitchClass"
            glib:is-gtype-struct-for="PreferencesSwitch">
      <field name="parent_class">
        <type name="PreferencesBinClass" c:type="IdePreferencesBinClass"/>
      </field>
    </record>
    <class name="Progress"
           c:symbol-prefix="progress"
           c:type="IdeProgress"
           parent="GObject.Object"
           glib:type-name="IdeProgress"
           glib:get-type="ide_progress_get_type"
           glib:type-struct="ProgressClass">
      <constructor name="new" c:identifier="ide_progress_new">
        <return-value transfer-ownership="full">
          <type name="Progress" c:type="IdeProgress*"/>
        </return-value>
      </constructor>
      <function name="file_progress_callback"
                c:identifier="ide_progress_file_progress_callback">
        <doc xml:space="preserve">This function is a #GFileProgressCallback helper that will update the
#IdeProgress:fraction property. @user_data must be an #IdeProgress.

Remember to make sure to unref the #IdeProgress instance with
g_object_unref() during the #GDestroyNotify.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="current_num_bytes" transfer-ownership="none">
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="total_num_bytes" transfer-ownership="none">
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_fraction" c:identifier="ide_progress_get_fraction">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Progress" c:type="IdeProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message" c:identifier="ide_progress_get_message">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Progress" c:type="IdeProgress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fraction" c:identifier="ide_progress_set_fraction">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Progress" c:type="IdeProgress*"/>
          </instance-parameter>
          <parameter name="fraction" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message" c:identifier="ide_progress_set_message">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Progress" c:type="IdeProgress*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="completed" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="fraction" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="message" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ProgressClass"
            c:type="IdeProgressClass"
            glib:is-gtype-struct-for="Progress">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Project"
           c:symbol-prefix="project"
           c:type="IdeProject"
           parent="Object"
           glib:type-name="IdeProject"
           glib:get-type="ide_project_get_type"
           glib:type-struct="ProjectClass">
      <method name="add_file" c:identifier="ide_project_add_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file_for_path"
              c:identifier="ide_project_get_file_for_path">
        <doc xml:space="preserve">Retrieves an #IdeFile for the path specified. #IdeFile provides access to
language specific features via ide_file_get_language().

You must hold the reader lock while calling this function. See
ide_project_reader_lock() and ide_project_reader_unlock() for more
information.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeFile or %NULL if no matching
  file could be found.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">A relative path from the project root.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_files" c:identifier="ide_project_get_files">
        <doc xml:space="preserve">Gets the #IdeProjectFiles instance within the project tree.
If it has not yet been loaded, %NULL is returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeProjectFiles or %NULL.</doc>
          <type name="ProjectFiles" c:type="IdeProjectFiles*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeProject.</doc>
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_project_get_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_project_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project_file"
              c:identifier="ide_project_get_project_file">
        <doc xml:space="preserve">Gets a new #IdeFile representing @gfile.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeFile.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeProject.</doc>
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="gfile" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="ide_project_get_root">
        <doc xml:space="preserve">Retrieves the root item of the project tree.

You must be holding the reader lock while calling and using the result of
this function. Other thread may be accessing or modifying the tree without
your knowledge. See ide_project_reader_lock() and ide_project_reader_unlock()
for more information.

If you need to modify the tree, you must hold a writer lock that has been
acquired with ide_project_writer_lock() and released with
ide_project_writer_unlock() when you are no longer modifiying the tree.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeProjectItem.</doc>
          <type name="ProjectItem" c:type="IdeProjectItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reader_lock" c:identifier="ide_project_reader_lock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reader_unlock" c:identifier="ide_project_reader_unlock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rename_file_async"
              c:identifier="ide_project_rename_file_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="orig_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="new_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_file_finish"
              c:identifier="ide_project_rename_file_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file_async"
              c:identifier="ide_project_trash_file_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file_finish"
              c:identifier="ide_project_trash_file_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="writer_lock" c:identifier="ide_project_writer_lock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="writer_unlock" c:identifier="ide_project_writer_unlock">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="root"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ProjectItem"/>
      </property>
      <glib:signal name="file-renamed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="file-trashed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProjectClass"
            c:type="IdeProjectClass"
            glib:is-gtype-struct-for="Project">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="ProjectFile"
           c:symbol-prefix="project_file"
           c:type="IdeProjectFile"
           parent="ProjectItem"
           glib:type-name="IdeProjectFile"
           glib:get-type="ide_project_file_get_type"
           glib:type-struct="ProjectFileClass">
      <method name="get_file" c:identifier="ide_project_file_get_file">
        <doc xml:space="preserve">Retrieves the underlying #GFile represented by @file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">Retrieves the #GFile represented by @file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_info"
              c:identifier="ide_project_file_get_file_info">
        <doc xml:space="preserve">Retrieves a #GFileInfo containing the basic information about @file. This
includes the name, display name, and file type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFileInfo</doc>
          <type name="Gio.FileInfo" c:type="GFileInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_directory"
              c:identifier="ide_project_file_get_is_directory">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_project_file_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_project_file_get_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="file" writable="1" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="file-info" writable="1" transfer-ownership="none">
        <type name="Gio.FileInfo"/>
      </property>
      <property name="is-directory" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="ProjectItem" c:type="IdeProjectItem"/>
      </field>
    </class>
    <record name="ProjectFileClass"
            c:type="IdeProjectFileClass"
            glib:is-gtype-struct-for="ProjectFile">
      <field name="parent">
        <type name="ProjectItemClass" c:type="IdeProjectItemClass"/>
      </field>
    </record>
    <class name="ProjectFiles"
           c:symbol-prefix="project_files"
           c:type="IdeProjectFiles"
           parent="ProjectItem"
           glib:type-name="IdeProjectFiles"
           glib:get-type="ide_project_files_get_type"
           glib:type-struct="ProjectFilesClass">
      <method name="add_file" c:identifier="ide_project_files_add_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFiles" c:type="IdeProjectFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_file" c:identifier="ide_project_files_find_file">
        <doc xml:space="preserve">Tries to locate an #IdeProjectFile matching the given file.
If @file is the working directory, @self is returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeProjectItem or %NULL.</doc>
          <type name="ProjectItem" c:type="IdeProjectItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeProjectFiles.</doc>
            <type name="ProjectFiles" c:type="IdeProjectFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file_for_path"
              c:identifier="ide_project_files_get_file_for_path">
        <doc xml:space="preserve">Retrieves an #IdeFile for the path. If no such path exists within the
project, %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeFile or %NULL.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFiles" c:type="IdeProjectFiles*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="ProjectItem" c:type="IdeProjectItem"/>
      </field>
    </class>
    <record name="ProjectFilesClass"
            c:type="IdeProjectFilesClass"
            glib:is-gtype-struct-for="ProjectFiles">
      <field name="parent_class">
        <type name="ProjectItemClass" c:type="IdeProjectItemClass"/>
      </field>
    </record>
    <class name="ProjectInfo"
           c:symbol-prefix="project_info"
           c:type="IdeProjectInfo"
           parent="GObject.Object"
           glib:type-name="IdeProjectInfo"
           glib:get-type="ide_project_info_get_type"
           glib:type-struct="ProjectInfoClass">
      <method name="compare" c:identifier="ide_project_info_compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="info1" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="info2" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_project_info_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="ide_project_info_get_directory">
        <doc xml:space="preserve">Gets the #IdeProjectInfo:directory property.
This is the directory containing the project (if known).</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeProjectInfo.</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_doap" c:identifier="ide_project_info_get_doap">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeDoap or %NULL.</doc>
          <type name="Doap" c:type="IdeDoap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_project_info_get_file">
        <doc xml:space="preserve">Gets the #IdeProjectInfo:file property.
This is the project file (such as configure.ac) of the project.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeProjectInfo.</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_recent"
              c:identifier="ide_project_info_get_is_recent">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_project_info_get_languages">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An array of language names.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_modified_at"
              c:identifier="ide_project_info_get_last_modified_at">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_project_info_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_project_info_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="ide_project_info_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_directory"
              c:identifier="ide_project_info_set_directory">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file" c:identifier="ide_project_info_set_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_recent"
              c:identifier="ide_project_info_set_is_recent">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="is_recent" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_languages"
              c:identifier="ide_project_info_set_languages">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="languages" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ide_project_info_set_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority" c:identifier="ide_project_info_set_priority">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="directory" writable="1" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="doap" writable="1" transfer-ownership="none">
        <type name="Doap"/>
      </property>
      <property name="file" writable="1" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="is-recent" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="languages" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="last-modified-at" writable="1" transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ProjectInfoClass"
            c:type="IdeProjectInfoClass"
            glib:is-gtype-struct-for="ProjectInfo">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ProjectItem"
           c:symbol-prefix="project_item"
           c:type="IdeProjectItem"
           parent="Object"
           glib:type-name="IdeProjectItem"
           glib:get-type="ide_project_item_get_type"
           glib:type-struct="ProjectItemClass">
      <method name="append" c:identifier="ide_project_item_append">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children" c:identifier="ide_project_item_get_children">
        <doc xml:space="preserve">A scalable list containing the children of the item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GSequence.</doc>
          <type name="GLib.Sequence" c:type="GSequence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="ide_project_item_get_parent">
        <doc xml:space="preserve">Retrieves the parent #IdeProjectItem of @item, or %NULL if @item is the root
of the project tree.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeProjectItem or %NULL if the item
  is the root of the tree.</doc>
          <type name="ProjectItem" c:type="IdeProjectItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_project_item_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="ProjectItem" c:type="IdeProjectItem*"/>
          </parameter>
        </parameters>
      </method>
      <property name="parent" writable="1" transfer-ownership="none">
        <type name="ProjectItem"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="ProjectItemClass"
            c:type="IdeProjectItemClass"
            glib:is-gtype-struct-for="ProjectItem">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="ProjectMiner"
               c:symbol-prefix="project_miner"
               c:type="IdeProjectMiner"
               glib:type-name="IdeProjectMiner"
               glib:get-type="ide_project_miner_get_type"
               glib:type-struct="ProjectMinerInterface">
      <virtual-method name="discovered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mine_async" invoker="mine_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mine_finish" invoker="mine_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_discovered"
              c:identifier="ide_project_miner_emit_discovered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mine_async" c:identifier="ide_project_miner_mine_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="mine_finish"
              c:identifier="ide_project_miner_mine_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="discovered" when="last">
        <doc xml:space="preserve">This signal is emitted when a new project has been discovered by the miner.
The signal will always be emitted from the primary thread (Gtk+) as long as
ide_project_miner_emit_discovered() was used to emit the signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeProjectInfo</doc>
            <type name="ProjectInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ProjectMinerInterface"
            c:type="IdeProjectMinerInterface"
            glib:is-gtype-struct-for="ProjectMiner">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="discovered">
        <callback name="discovered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
            </parameter>
            <parameter name="project_info" transfer-ownership="none">
              <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mine_async">
        <callback name="mine_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mine_finish">
        <callback name="mine_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectMiner" c:type="IdeProjectMiner*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ProjectTemplate"
               c:symbol-prefix="project_template"
               c:type="IdeProjectTemplate"
               glib:type-name="IdeProjectTemplate"
               glib:get-type="ide_project_template_get_type"
               glib:type-struct="ProjectTemplateInterface">
      <virtual-method name="expand_async" invoker="expand_async">
        <doc xml:space="preserve">Asynchronously requests expansion of the template.

This may involve creating files and directories on disk as well as
expanding files based on the contents of @params.

It is expected that this method is only called once on an #IdeProjectTemplate.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">A hashtable of template parameters.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">the callback for the asynchronous operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="expand_finish" invoker="expand_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_description" invoker="get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_name" invoker="get_icon_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_languages" invoker="get_languages">
        <doc xml:space="preserve">Gets the list of languages that this template can support when generating
the project.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated, NULL terminated list of
  supported languages.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_widget" invoker="get_widget">
        <doc xml:space="preserve">Get's the configuration widget for the template if there is one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="expand_async"
              c:identifier="ide_project_template_expand_async">
        <doc xml:space="preserve">Asynchronously requests expansion of the template.

This may involve creating files and directories on disk as well as
expanding files based on the contents of @params.

It is expected that this method is only called once on an #IdeProjectTemplate.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">A hashtable of template parameters.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">the callback for the asynchronous operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_finish"
              c:identifier="ide_project_template_expand_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_project_template_get_description">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_project_template_get_icon_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_project_template_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_project_template_get_languages">
        <doc xml:space="preserve">Gets the list of languages that this template can support when generating
the project.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated, NULL terminated list of
  supported languages.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_project_template_get_name">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_widget" c:identifier="ide_project_template_get_widget">
        <doc xml:space="preserve">Get's the configuration widget for the template if there is one.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ProjectTemplateInterface"
            c:type="IdeProjectTemplateInterface"
            glib:is-gtype-struct-for="ProjectTemplate">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_description">
        <callback name="get_description">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_widget">
        <callback name="get_widget">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GtkWidget.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeProjectTemplate</doc>
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_languages">
        <callback name="get_languages">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A newly allocated, NULL terminated list of
  supported languages.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">an #IdeProjectTemplate</doc>
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expand_async">
        <callback name="expand_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">an #IdeProjectTemplate</doc>
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <doc xml:space="preserve">A hashtable of template parameters.</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="utf8"/>
                <type name="GLib.Variant"/>
              </type>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve">the callback for the asynchronous operation.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve">user data for @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expand_finish">
        <callback name="expand_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="RECENT_PROJECTS_BOOKMARK_FILENAME"
              value="recent-projects.xbel"
              c:type="IDE_RECENT_PROJECTS_BOOKMARK_FILENAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_GROUP"
              value="X-GNOME-Builder-Project"
              c:type="IDE_RECENT_PROJECTS_GROUP">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX"
              value="X-GNOME-Builder-Language:"
              c:type="IDE_RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="RecentProjects"
           c:symbol-prefix="recent_projects"
           c:type="IdeRecentProjects"
           parent="GObject.Object"
           glib:type-name="IdeRecentProjects"
           glib:get-type="ide_recent_projects_get_type"
           glib:type-struct="RecentProjectsClass">
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_recent_projects_new">
        <return-value transfer-ownership="full">
          <type name="RecentProjects" c:type="IdeRecentProjects*"/>
        </return-value>
      </constructor>
      <method name="discover_async"
              c:identifier="ide_recent_projects_discover_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
          <parameter name="recent_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="discover_finish"
              c:identifier="ide_recent_projects_discover_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_busy" c:identifier="ide_recent_projects_get_busy">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_projects"
              c:identifier="ide_recent_projects_get_projects">
        <doc xml:space="preserve">Gets a #GPtrArray containing the #IdeProjectInfo that have been discovered.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GPtrArray of #IdeProjectInfo.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ProjectInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_recent_projects_remove">
        <doc xml:space="preserve">Removes the provided projects from the recent projects file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeRecentProjects</doc>
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
          <parameter name="project_infos" transfer-ownership="none">
            <doc xml:space="preserve">A #GList of #IdeProjectInfo.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ProjectInfo"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RecentProjectsClass"
            c:type="IdeRecentProjectsClass"
            glib:is-gtype-struct-for="RecentProjects">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="RunButton"
           c:symbol-prefix="run_button"
           c:type="IdeRunButton"
           parent="Gtk.Box"
           glib:type-name="IdeRunButton"
           glib:get-type="ide_run_button_get_type"
           glib:type-struct="RunButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="ide_run_button_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="RunButtonClass"
            c:type="IdeRunButtonClass"
            glib:is-gtype-struct-for="RunButton">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <callback name="RunHandler" c:type="IdeRunHandler">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <type name="RunManager" c:type="IdeRunManager*"/>
        </parameter>
        <parameter name="runner" transfer-ownership="none">
          <type name="Runner" c:type="IdeRunner*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RunManager"
           c:symbol-prefix="run_manager"
           c:type="IdeRunManager"
           parent="Object"
           glib:type-name="IdeRunManager"
           glib:get-type="ide_run_manager_get_type"
           glib:type-struct="RunManagerClass">
      <implements name="Gio.ActionGroup"/>
      <method name="add_handler" c:identifier="ide_run_manager_add_handler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="accel" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="run_handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <type name="RunHandler" c:type="IdeRunHandler"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="ide_run_manager_cancel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="discover_default_target_async"
              c:identifier="ide_run_manager_discover_default_target_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="discover_default_target_finish"
              c:identifier="ide_run_manager_discover_default_target_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildTarget if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="BuildTarget" c:type="IdeBuildTarget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_target"
              c:identifier="ide_run_manager_get_build_target">
        <doc xml:space="preserve">Gets the build target that will be executed by the run manager if a
specific build target has not been specified to ide_run_manager_run_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeBuildTarget or %NULL if no build target
  has been set.</doc>
          <type name="BuildTarget" c:type="IdeBuildTarget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_busy" c:identifier="ide_run_manager_get_busy">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handler" c:identifier="ide_run_manager_get_handler">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_handler"
              c:identifier="ide_run_manager_remove_handler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_run_manager_run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="build_target" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_run_manager_run_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handler" c:identifier="ide_run_manager_set_handler">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="handler" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="stopped" when="last">
        <doc xml:space="preserve">This signal is emitted when the run manager has stopped the currently
executing inferior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RunManagerClass"
            c:type="IdeRunManagerClass"
            glib:is-gtype-struct-for="RunManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Runner"
           c:symbol-prefix="runner"
           c:type="IdeRunner"
           parent="Object"
           glib:type-name="IdeRunner"
           glib:get-type="ide_runner_get_type"
           glib:type-struct="RunnerClass">
      <constructor name="new" c:identifier="ide_runner_new">
        <return-value transfer-ownership="full">
          <type name="Runner" c:type="IdeRunner*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="force_quit" invoker="force_quit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stderr" invoker="get_stderr">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdin" invoker="get_stdin">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdout" invoker="get_stdout">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_async" invoker="run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_finish" invoker="run_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_argv" c:identifier="ide_runner_append_argv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_quit" c:identifier="ide_runner_force_quit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_argv" c:identifier="ide_runner_get_argv">
        <doc xml:space="preserve">Gets the argument list as a newly allocated string array.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated string array that should
  be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clear_env" c:identifier="ide_runner_get_clear_env">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environment" c:identifier="ide_runner_get_environment">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #IdeEnvironment the process launched uses.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_on_host" c:identifier="ide_runner_get_run_on_host">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stderr" c:identifier="ide_runner_get_stderr">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdin" c:identifier="ide_runner_get_stdin">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdout" c:identifier="ide_runner_get_stdout">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_argv" c:identifier="ide_runner_prepend_argv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_runner_run_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_runner_run_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_argv" c:identifier="ide_runner_set_argv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_clear_env" c:identifier="ide_runner_set_clear_env">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="clear_env" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="ide_runner_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_on_host" c:identifier="ide_runner_set_run_on_host">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </instance-parameter>
          <parameter name="run_on_host" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="argv" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="clear-env" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="environment" transfer-ownership="none">
        <type name="Environment"/>
      </property>
      <property name="run-on-host" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="exited" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="spawned" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="RunnerAddin"
               c:symbol-prefix="runner_addin"
               c:type="IdeRunnerAddin"
               glib:type-name="IdeRunnerAddin"
               glib:get-type="ide_runner_addin_get_type"
               glib:type-struct="RunnerAddinInterface">
      <virtual-method name="load" invoker="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="runner" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="posthook_async" invoker="posthook_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="posthook_finish"
                      invoker="posthook_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prehook_async" invoker="prehook_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prehook_finish"
                      invoker="prehook_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="runner" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_runner_addin_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="runner" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </parameter>
        </parameters>
      </method>
      <method name="posthook_async"
              c:identifier="ide_runner_addin_posthook_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="posthook_finish"
              c:identifier="ide_runner_addin_posthook_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prehook_async"
              c:identifier="ide_runner_addin_prehook_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prehook_finish"
              c:identifier="ide_runner_addin_prehook_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_runner_addin_unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
          </instance-parameter>
          <parameter name="runner" transfer-ownership="none">
            <type name="Runner" c:type="IdeRunner*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="RunnerAddinInterface"
            c:type="IdeRunnerAddinInterface"
            glib:is-gtype-struct-for="RunnerAddin">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="runner" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="runner" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prehook_async">
        <callback name="prehook_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prehook_finish">
        <callback name="prehook_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="posthook_async">
        <callback name="posthook_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="posthook_finish">
        <callback name="posthook_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunnerAddin" c:type="IdeRunnerAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RunnerClass"
            c:type="IdeRunnerClass"
            glib:is-gtype-struct-for="Runner">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="force_quit">
        <callback name="force_quit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdin">
        <callback name="get_stdin">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdout">
        <callback name="get_stdout">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stderr">
        <callback name="get_stderr">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #GOutputStream or %NULL.</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_async">
        <callback name="run_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_finish">
        <callback name="run_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runner" c:type="IdeRunner*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Runtime"
           c:symbol-prefix="runtime"
           c:type="IdeRuntime"
           parent="Object"
           glib:type-name="IdeRuntime"
           glib:get-type="ide_runtime_get_type"
           glib:type-struct="RuntimeClass">
      <constructor name="new" c:identifier="ide_runtime_new">
        <return-value transfer-ownership="full">
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="contains_program_in_path"
                      invoker="contains_program_in_path">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_launcher"
                      invoker="create_launcher"
                      throws="1">
        <doc xml:space="preserve">Creates a launcher for the runtime.

This can be used to execute a command within a runtime.
If you are doing a build, you probably want to ensure you call
ide_runtime_prebuild_async() before using the launcher.

It is important that this function can be run from a thread without
side effects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSubprocessLauncher or %NULL upon failure.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_runner" invoker="create_runner">
        <doc xml:space="preserve">Creates a new runner that can be used to execute the build target within
the runtime. This should be used to implement such features as "run target"
or "run unit test" inside the target runtime.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeRunner if successful, otherwise
  %NULL and @error is set.</doc>
          <type name="Runner" c:type="IdeRunner*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="build_target" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="postbuild_async" invoker="postbuild_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="postbuild_finish"
                      invoker="postbuild_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prebuild_async" invoker="prebuild_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prebuild_finish"
                      invoker="prebuild_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_configuration"
                      invoker="prepare_configuration">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="contains_program_in_path"
              c:identifier="ide_runtime_contains_program_in_path">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_launcher"
              c:identifier="ide_runtime_create_launcher"
              throws="1">
        <doc xml:space="preserve">Creates a launcher for the runtime.

This can be used to execute a command within a runtime.
If you are doing a build, you probably want to ensure you call
ide_runtime_prebuild_async() before using the launcher.

It is important that this function can be run from a thread without
side effects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSubprocessLauncher or %NULL upon failure.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_runner" c:identifier="ide_runtime_create_runner">
        <doc xml:space="preserve">Creates a new runner that can be used to execute the build target within
the runtime. This should be used to implement such features as "run target"
or "run unit test" inside the target runtime.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeRunner if successful, otherwise
  %NULL and @error is set.</doc>
          <type name="Runner" c:type="IdeRunner*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="build_target" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_runtime_get_display_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_runtime_get_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="postbuild_async"
              c:identifier="ide_runtime_postbuild_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="postbuild_finish"
              c:identifier="ide_runtime_postbuild_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prebuild_async" c:identifier="ide_runtime_prebuild_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prebuild_finish"
              c:identifier="ide_runtime_prebuild_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_configuration"
              c:identifier="ide_runtime_prepare_configuration">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Configuration" c:type="IdeConfiguration*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_runtime_set_display_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="ide_runtime_set_id">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" writable="1" construct="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="RuntimeClass"
            c:type="IdeRuntimeClass"
            glib:is-gtype-struct-for="Runtime">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="prebuild_async">
        <callback name="prebuild_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prebuild_finish">
        <callback name="prebuild_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="postbuild_async">
        <callback name="postbuild_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="postbuild_finish">
        <callback name="postbuild_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="contains_program_in_path">
        <callback name="contains_program_in_path">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="program" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_launcher">
        <callback name="create_launcher" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">An #IdeSubprocessLauncher or %NULL upon failure.</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_configuration">
        <callback name="prepare_configuration">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="configuration" transfer-ownership="none">
              <type name="Configuration" c:type="IdeConfiguration*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_runner">
        <callback name="create_runner">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeRunner if successful, otherwise
  %NULL and @error is set.</doc>
            <type name="Runner" c:type="IdeRunner*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="build_target" transfer-ownership="none">
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved9">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved10">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved11">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved12">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved13">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved14">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved15">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved16">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <enumeration name="RuntimeError"
                 glib:type-name="IdeRuntimeError"
                 glib:get-type="ide_runtime_error_get_type"
                 c:type="IdeRuntimeError"
                 glib:error-domain="ide_runtime_error_quark">
      <member name="runtime"
              value="1"
              c:identifier="IDE_RUNTIME_ERROR_NO_SUCH_RUNTIME"
              glib:nick="runtime">
      </member>
      <function name="quark" c:identifier="ide_runtime_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="RuntimeManager"
           c:symbol-prefix="runtime_manager"
           c:type="IdeRuntimeManager"
           parent="Object"
           glib:type-name="IdeRuntimeManager"
           glib:get-type="ide_runtime_manager_get_type"
           glib:type-struct="RuntimeManagerClass">
      <implements name="Gio.ListModel"/>
      <method name="add" c:identifier="ide_runtime_manager_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_runtime"
              c:identifier="ide_runtime_manager_get_runtime">
        <doc xml:space="preserve">Gets the runtime by it's internal identifier.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeRuntime.</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeRuntimeManager</doc>
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the identifier of the runtime</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_runtime_manager_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RuntimeManagerClass"
            c:type="IdeRuntimeManagerClass"
            glib:is-gtype-struct-for="RuntimeManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="RuntimeProvider"
               c:symbol-prefix="runtime_provider"
               c:type="IdeRuntimeProvider"
               glib:type-name="IdeRuntimeProvider"
               glib:get-type="ide_runtime_provider_get_type"
               glib:type-struct="RuntimeProviderInterface">
      <virtual-method name="load" invoker="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_runtime_provider_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_runtime_provider_unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="RuntimeProviderInterface"
            c:type="IdeRuntimeProviderInterface"
            glib:is-gtype-struct-for="RuntimeProvider">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
            <parameter name="manager" transfer-ownership="none">
              <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
            <parameter name="manager" transfer-ownership="none">
              <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <constant name="SCRIPT_EXTENSION_POINT"
              value="org.gnome.libide.extensions.script"
              c:type="IDE_SCRIPT_EXTENSION_POINT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Script"
           c:symbol-prefix="script"
           c:type="IdeScript"
           parent="Object"
           abstract="1"
           glib:type-name="IdeScript"
           glib:get-type="ide_script_get_type"
           glib:type-struct="ScriptClass">
      <implements name="Gio.AsyncInitable"/>
      <virtual-method name="load" invoker="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Script" c:type="IdeScript*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Script" c:type="IdeScript*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_file" c:identifier="ide_script_get_file">
        <doc xml:space="preserve">Returns a #GFile pointing to the location of the script on disk.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Script" c:type="IdeScript*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_script_load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Script" c:type="IdeScript*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_script_unload">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Script" c:type="IdeScript*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="load" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unload" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ScriptClass"
            c:type="IdeScriptClass"
            glib:is-gtype-struct-for="Script">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Script" c:type="IdeScript*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Script" c:type="IdeScript*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ScriptManager"
           c:symbol-prefix="script_manager"
           c:type="IdeScriptManager"
           parent="Object"
           glib:type-name="IdeScriptManager"
           glib:get-type="ide_script_manager_get_type"
           glib:type-struct="ScriptManagerClass">
      <method name="get_scripts_directory"
              c:identifier="ide_script_manager_get_scripts_directory">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScriptManager" c:type="IdeScriptManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_async" c:identifier="ide_script_manager_load_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScriptManager" c:type="IdeScriptManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_script_manager_load_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScriptManager" c:type="IdeScriptManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="scripts-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ScriptManagerClass"
            c:type="IdeScriptManagerClass"
            glib:is-gtype-struct-for="ScriptManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="SearchContext"
           c:symbol-prefix="search_context"
           c:type="IdeSearchContext"
           parent="Object"
           glib:type-name="IdeSearchContext"
           glib:get-type="ide_search_context_get_type"
           glib:type-struct="SearchContextClass">
      <method name="add_result" c:identifier="ide_search_context_add_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="ide_search_context_cancel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute" c:identifier="ide_search_context_execute">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
          <parameter name="search_terms" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_results"
              c:identifier="ide_search_context_get_max_results">
        <return-value transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_providers"
              c:identifier="ide_search_context_get_providers">
        <doc xml:space="preserve">Retrieve the list of providers for the search context.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GList of
  #IdeSearchProvider.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="SearchProvider"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="provider_completed"
              c:identifier="ide_search_context_provider_completed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_result"
              c:identifier="ide_search_context_remove_result">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_provider_count"
              c:identifier="ide_search_context_set_provider_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="completed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="count-set" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SearchProvider"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="result-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SearchProvider"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="SearchResult"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="result-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SearchProvider"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="SearchResult"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SearchContextClass"
            c:type="IdeSearchContextClass"
            glib:is-gtype-struct-for="SearchContext">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="SearchEngine"
           c:symbol-prefix="search_engine"
           c:type="IdeSearchEngine"
           parent="Object"
           glib:type-name="IdeSearchEngine"
           glib:get-type="ide_search_engine_get_type"
           glib:type-struct="SearchEngineClass">
      <method name="search" c:identifier="ide_search_engine_search">
        <doc xml:space="preserve">Begins a query against the requested search providers.

If @providers is %NULL, all registered providers will be used.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSearchContext or %NULL if no
  providers could be loaded.</doc>
          <type name="SearchContext" c:type="IdeSearchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
          <parameter name="search_terms" transfer-ownership="none">
            <doc xml:space="preserve">The search terms.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SearchEngineClass"
            c:type="IdeSearchEngineClass"
            glib:is-gtype-struct-for="SearchEngine">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="SearchProvider"
               c:symbol-prefix="search_provider"
               c:type="IdeSearchProvider"
               glib:type-name="IdeSearchProvider"
               glib:get-type="ide_search_provider_get_type"
               glib:type-struct="SearchProviderInterface">
      <prerequisite name="Object"/>
      <virtual-method name="activate" invoker="activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_row" invoker="create_row">
        <doc xml:space="preserve">Create a row to display the search result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSearchProvider.</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSearchResult.</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_prefix" invoker="get_prefix">
        <return-value transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_verb" invoker="get_verb">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate" invoker="populate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </parameter>
          <parameter name="search_terms" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="ide_search_provider_activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_row" c:identifier="ide_search_provider_create_row">
        <doc xml:space="preserve">Create a row to display the search result.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GtkWidget.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSearchProvider.</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSearchResult.</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_prefix" c:identifier="ide_search_provider_get_prefix">
        <return-value transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_search_provider_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_verb" c:identifier="ide_search_provider_get_verb">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="populate" c:identifier="ide_search_provider_populate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </parameter>
          <parameter name="search_terms" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="SearchProviderInterface"
            c:type="IdeSearchProviderInterface"
            glib:is-gtype-struct-for="SearchProvider">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_prefix">
        <callback name="get_prefix">
          <return-value transfer-ownership="none">
            <type name="gunichar" c:type="gunichar"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_verb">
        <callback name="get_verb">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate">
        <callback name="populate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="SearchContext" c:type="IdeSearchContext*"/>
            </parameter>
            <parameter name="search_terms" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="max_results" transfer-ownership="none">
              <type name="gsize" c:type="gsize"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_row">
        <callback name="create_row">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #GtkWidget.</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeSearchProvider.</doc>
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve">A #IdeSearchResult.</doc>
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
            <parameter name="row" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SearchReducer" c:type="IdeSearchReducer">
      <field name="context" writable="1">
        <type name="SearchContext" c:type="IdeSearchContext*"/>
      </field>
      <field name="provider" writable="1">
        <type name="SearchProvider" c:type="IdeSearchProvider*"/>
      </field>
      <field name="sequence" writable="1">
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </field>
      <field name="max_results" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="count" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <method name="accepts" c:identifier="ide_search_reducer_accepts">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="score" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="ide_search_reducer_destroy">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="ide_search_reducer_init">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="SearchContext" c:type="IdeSearchContext*"/>
          </parameter>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="ide_search_reducer_push">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="SearchResult"
           c:symbol-prefix="search_result"
           c:type="IdeSearchResult"
           parent="Object"
           glib:type-name="IdeSearchResult"
           glib:get-type="ide_search_result_get_type"
           glib:type-struct="SearchResultClass">
      <constructor name="new" c:identifier="ide_search_result_new">
        <return-value transfer-ownership="full">
          <type name="SearchResult" c:type="IdeSearchResult*"/>
        </return-value>
        <parameters>
          <parameter name="provider" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="score" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="activate" invoker="activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="ide_search_result_activate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="ide_search_result_compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="SearchResult" c:type="const IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="SearchResult" c:type="const IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_provider"
              c:identifier="ide_search_result_get_provider">
        <doc xml:space="preserve">Gets the provider that created the search result.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSearchProvider.</doc>
          <type name="SearchProvider" c:type="IdeSearchProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSearchResult.</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_score" c:identifier="ide_search_result_get_score">
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_search_result_get_subtitle">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_search_result_get_title">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="result" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="provider" writable="1" transfer-ownership="none">
        <type name="SearchProvider"/>
      </property>
      <property name="score"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="subtitle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="SearchResultClass"
            c:type="IdeSearchResultClass"
            glib:is-gtype-struct-for="SearchResult">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="result" transfer-ownership="none">
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="Service"
               c:symbol-prefix="service"
               c:type="IdeService"
               glib:type-name="IdeService"
               glib:get-type="ide_service_get_type"
               glib:type-struct="ServiceInterface">
      <virtual-method name="context_loaded">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start" invoker="start">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stop" invoker="stop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_name" c:identifier="ide_service_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ide_service_start">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ide_service_stop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Service" c:type="IdeService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <glib:signal name="context-loaded" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="ServiceInterface"
            c:type="IdeServiceInterface"
            glib:is-gtype-struct-for="Service">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="context_loaded">
        <callback name="context_loaded">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IdeService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IdeService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start">
        <callback name="start">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IdeService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop">
        <callback name="stop">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IdeService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="IdeService*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Settings"
           c:symbol-prefix="settings"
           c:type="IdeSettings"
           parent="Object"
           glib:type-name="IdeSettings"
           glib:get-type="ide_settings_get_type"
           glib:type-struct="SettingsClass">
      <method name="bind" c:identifier="ide_settings_bind">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_mapping"
              c:identifier="ide_settings_bind_with_mapping">
        <doc xml:space="preserve">Like ide_settings_bind() but allows transforming to and from settings storage using
@get_mapping and @set_mapping transformation functions.

Call ide_settings_unbind() to unbind the mapping.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSettings</doc>
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">The settings key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the object to bind to</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve">the property of @object to bind to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">flags for the binding</doc>
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
          <parameter name="get_mapping"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve">variant to value mapping</doc>
            <type name="Gio.SettingsBindGetMapping"
                  c:type="GSettingsBindGetMapping"/>
          </parameter>
          <parameter name="set_mapping"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve">value to variant mapping</doc>
            <type name="Gio.SettingsBindSetMapping"
                  c:type="GSettingsBindSetMapping"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @get_mapping and @set_mapping</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">destroy function to cleanup @user_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="ide_settings_get_boolean">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="ide_settings_get_default_value">
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double" c:identifier="ide_settings_get_double">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ignore_project_settings"
              c:identifier="ide_settings_get_ignore_project_settings">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="ide_settings_get_int">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_relative_path"
              c:identifier="ide_settings_get_relative_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schema_id" c:identifier="ide_settings_get_schema_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="ide_settings_get_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uint" c:identifier="ide_settings_get_uint">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_value" c:identifier="ide_settings_get_user_value">
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="ide_settings_get_value">
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="ide_settings_set_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double" c:identifier="ide_settings_set_double">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="ide_settings_set_int">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="ide_settings_set_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint" c:identifier="ide_settings_set_uint">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="ide_settings_set_value">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="ide_settings_unbind">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="ignore-project-settings"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="relative-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="changed" when="last" detailed="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SettingsClass"
            c:type="IdeSettingsClass"
            glib:is-gtype-struct-for="Settings">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="SourceLocation"
            c:type="IdeSourceLocation"
            glib:type-name="IdeSourceLocation"
            glib:get-type="ide_source_location_get_type"
            c:symbol-prefix="source_location">
      <constructor name="new" c:identifier="ide_source_location_new">
        <doc xml:space="preserve">Creates a new #IdeSourceLocation, using the file, line, column, and character
offset provided.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #IdeSourceLocation.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeFile</doc>
            <type name="File" c:type="IdeFile*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve">the line number starting from zero</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <doc xml:space="preserve">the character offset within the line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">the character offset in the file</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_source_location_compare">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="SourceLocation" c:type="const IdeSourceLocation*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="SourceLocation" c:type="const IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_source_location_get_file">
        <doc xml:space="preserve">The file represented by this source location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeFile.</doc>
          <type name="File" c:type="IdeFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="ide_source_location_get_line">
        <doc xml:space="preserve">Retrieves the target line number starting from 0.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the target line.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_offset"
              c:identifier="ide_source_location_get_line_offset">
        <doc xml:space="preserve">Retrieves the character offset within the line.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the offset within the line.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset" c:identifier="ide_source_location_get_offset">
        <doc xml:space="preserve">Retrieves the character offset within the file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #guint containing the character offset within the file.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="ide_source_location_get_uri">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allocated #IdeUri.</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSourceLocation.</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_source_location_ref">
        <doc xml:space="preserve">Increments the reference count of @self by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">self</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_source_location_unref">
        <doc xml:space="preserve">Decrements the reference count of @self by one. If the reference count
reaches zero, then the structure is freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="SourceMap"
           c:symbol-prefix="source_map"
           c:type="IdeSourceMap"
           parent="GtkSource.Map"
           glib:type-name="IdeSourceMap"
           glib:get-type="ide_source_map_get_type"
           glib:type-struct="SourceMapClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <glib:signal name="hide-map" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="show-map" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SourceMapClass"
            c:type="IdeSourceMapClass"
            glib:is-gtype-struct-for="SourceMap">
      <field name="parent_class">
        <type name="GtkSource.MapClass" c:type="GtkSourceMapClass"/>
      </field>
    </record>
    <record name="SourceRange"
            c:type="IdeSourceRange"
            glib:type-name="IdeSourceRange"
            glib:get-type="ide_source_range_get_type"
            c:symbol-prefix="source_range">
      <constructor name="new" c:identifier="ide_source_range_new">
        <return-value transfer-ownership="full">
          <type name="SourceRange" c:type="IdeSourceRange*"/>
        </return-value>
        <parameters>
          <parameter name="begin" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_begin" c:identifier="ide_source_range_get_begin">
        <doc xml:space="preserve">Gets the beginning of the source range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceLocation.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end" c:identifier="ide_source_range_get_end">
        <doc xml:space="preserve">Gets the end of the source range.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceLocation.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_source_range_ref">
        <doc xml:space="preserve">Increments the reference count of @self by one. When you are done with
@self, release it by calling ide_source_range_unref().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@self</doc>
          <type name="SourceRange" c:type="IdeSourceRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceRange</doc>
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_source_range_unref">
        <doc xml:space="preserve">Decrements the reference count of @self by one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="full">
            <doc xml:space="preserve">An #IdeSourceRange</doc>
            <type name="SourceRange" c:type="IdeSourceRange*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="SourceSnippet"
           c:symbol-prefix="source_snippet"
           c:type="IdeSourceSnippet"
           parent="GObject.Object"
           glib:type-name="IdeSourceSnippet"
           glib:get-type="ide_source_snippet_get_type"
           glib:type-struct="SourceSnippetClass">
      <constructor name="new" c:identifier="ide_source_snippet_new">
        <return-value transfer-ownership="full">
          <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
        </return-value>
        <parameters>
          <parameter name="trigger" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_chunk" c:identifier="ide_source_snippet_add_chunk">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ide_source_snippet_copy">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSourceSnippet.</doc>
          <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_range"
              c:identifier="ide_source_snippet_get_chunk_range">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </parameter>
          <parameter name="begin" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="ide_source_snippet_get_context">
        <return-value transfer-ownership="none">
          <type name="SourceSnippetContext" c:type="IdeSourceSnippetContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_source_snippet_get_description">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="ide_source_snippet_get_language">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_begin"
              c:identifier="ide_source_snippet_get_mark_begin">
        <return-value transfer-ownership="none">
          <type name="Gtk.TextMark" c:type="GtkTextMark*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_end"
              c:identifier="ide_source_snippet_get_mark_end">
        <return-value transfer-ownership="none">
          <type name="Gtk.TextMark" c:type="GtkTextMark*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_chunks"
              c:identifier="ide_source_snippet_get_n_chunks">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_chunk"
              c:identifier="ide_source_snippet_get_nth_chunk">
        <return-value transfer-ownership="none">
          <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snippet_text"
              c:identifier="ide_source_snippet_get_snippet_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_stop"
              c:identifier="ide_source_snippet_get_tab_stop">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trigger" c:identifier="ide_source_snippet_get_trigger">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="ide_source_snippet_set_description">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="ide_source_snippet_set_language">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snippet_text"
              c:identifier="ide_source_snippet_set_snippet_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="snippet_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_trigger" c:identifier="ide_source_snippet_set_trigger">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </instance-parameter>
          <parameter name="trigger" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer" transfer-ownership="none">
        <type name="Gtk.TextBuffer"/>
      </property>
      <property name="description" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="language" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mark-begin" transfer-ownership="none">
        <type name="Gtk.TextMark"/>
      </property>
      <property name="mark-end" transfer-ownership="none">
        <type name="Gtk.TextMark"/>
      </property>
      <property name="snippet-text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tab-stop" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="trigger" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="SourceSnippetChunk"
           c:symbol-prefix="source_snippet_chunk"
           c:type="IdeSourceSnippetChunk"
           parent="GObject.Object"
           glib:type-name="IdeSourceSnippetChunk"
           glib:get-type="ide_source_snippet_chunk_get_type"
           glib:type-struct="SourceSnippetChunkClass">
      <constructor name="new" c:identifier="ide_source_snippet_chunk_new">
        <return-value transfer-ownership="full">
          <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
        </return-value>
      </constructor>
      <method name="copy" c:identifier="ide_source_snippet_chunk_copy">
        <doc xml:space="preserve">Copies the source snippet.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeSourceSnippetChunk.</doc>
          <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="ide_source_snippet_chunk_get_context">
        <doc xml:space="preserve">Gets the context for the snippet insertion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeSourceSnippetContext.</doc>
          <type name="SourceSnippetContext" c:type="IdeSourceSnippetContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spec" c:identifier="ide_source_snippet_chunk_get_spec">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_stop"
              c:identifier="ide_source_snippet_chunk_get_tab_stop">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="ide_source_snippet_chunk_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text_set"
              c:identifier="ide_source_snippet_chunk_get_text_set">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_context"
              c:identifier="ide_source_snippet_chunk_set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spec" c:identifier="ide_source_snippet_chunk_set_spec">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_stop"
              c:identifier="ide_source_snippet_chunk_set_tab_stop">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
          <parameter name="tab_stop" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="ide_source_snippet_chunk_set_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text_set"
              c:identifier="ide_source_snippet_chunk_set_text_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="chunk" transfer-ownership="none">
            <type name="SourceSnippetChunk" c:type="IdeSourceSnippetChunk*"/>
          </instance-parameter>
          <parameter name="text_set" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="context" writable="1" transfer-ownership="none">
        <type name="SourceSnippetContext"/>
      </property>
      <property name="spec" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tab-stop" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="text-set" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SourceSnippetChunkClass"
            c:type="IdeSourceSnippetChunkClass"
            glib:is-gtype-struct-for="SourceSnippetChunk">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SourceSnippetClass"
            c:type="IdeSourceSnippetClass"
            glib:is-gtype-struct-for="SourceSnippet">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SourceSnippetContext"
           c:symbol-prefix="source_snippet_context"
           c:type="IdeSourceSnippetContext"
           parent="GObject.Object"
           glib:type-name="IdeSourceSnippetContext"
           glib:get-type="ide_source_snippet_context_get_type"
           glib:type-struct="SourceSnippetContextClass">
      <constructor name="new" c:identifier="ide_source_snippet_context_new">
        <return-value transfer-ownership="full">
          <type name="SourceSnippetContext" c:type="IdeSourceSnippetContext*"/>
        </return-value>
      </constructor>
      <method name="add_shared_variable"
              c:identifier="ide_source_snippet_context_add_shared_variable">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_variable"
              c:identifier="ide_source_snippet_context_add_variable">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_variables"
              c:identifier="ide_source_snippet_context_clear_variables">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="ide_source_snippet_context_dump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_changed"
              c:identifier="ide_source_snippet_context_emit_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="expand" c:identifier="ide_source_snippet_context_expand">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_variable"
              c:identifier="ide_source_snippet_context_get_variable">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line_prefix"
              c:identifier="ide_source_snippet_context_set_line_prefix">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="line_prefix" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_width"
              c:identifier="ide_source_snippet_context_set_tab_width">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="tab_size" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_spaces"
              c:identifier="ide_source_snippet_context_set_use_spaces">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <type name="SourceSnippetContext"
                  c:type="IdeSourceSnippetContext*"/>
          </instance-parameter>
          <parameter name="use_spaces" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SourceSnippetContextClass"
            c:type="IdeSourceSnippetContextClass"
            glib:is-gtype-struct-for="SourceSnippetContext">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SourceSnippets"
           c:symbol-prefix="source_snippets"
           c:type="IdeSourceSnippets"
           parent="GObject.Object"
           glib:type-name="IdeSourceSnippets"
           glib:get-type="ide_source_snippets_get_type"
           glib:type-struct="SourceSnippetsClass">
      <constructor name="new" c:identifier="ide_source_snippets_new">
        <return-value transfer-ownership="full">
          <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="ide_source_snippets_add">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippets" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </instance-parameter>
          <parameter name="snippet" transfer-ownership="none">
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ide_source_snippets_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippets" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="count" c:identifier="ide_source_snippets_count">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="ide_source_snippets_foreach">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippets" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A callback to execute for each snippet.</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="ide_source_snippets_merge">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snippets" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SourceSnippetsClass"
            c:type="IdeSourceSnippetsClass"
            glib:is-gtype-struct-for="SourceSnippets">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SourceSnippetsManager"
           c:symbol-prefix="source_snippets_manager"
           c:type="IdeSourceSnippetsManager"
           parent="GObject.Object"
           glib:type-name="IdeSourceSnippetsManager"
           glib:get-type="ide_source_snippets_manager_get_type"
           glib:type-struct="SourceSnippetsManagerClass">
      <method name="get_for_language"
              c:identifier="ide_source_snippets_manager_get_for_language">
        <doc xml:space="preserve">Gets the snippets for a given source language.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceSnippets or %NULL.</doc>
          <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="SourceSnippetsManager"
                  c:type="IdeSourceSnippetsManager*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_for_language_id"
              c:identifier="ide_source_snippets_manager_get_for_language_id">
        <doc xml:space="preserve">Gets the snippets for a given source language.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceSnippets or %NULL.</doc>
          <type name="SourceSnippets" c:type="IdeSourceSnippets*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <type name="SourceSnippetsManager"
                  c:type="IdeSourceSnippetsManager*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="ide_source_snippets_manager_load_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceSnippetsManager"
                  c:type="IdeSourceSnippetsManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_source_snippets_manager_load_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceSnippetsManager"
                  c:type="IdeSourceSnippetsManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SourceSnippetsManagerClass"
            c:type="IdeSourceSnippetsManagerClass"
            glib:is-gtype-struct-for="SourceSnippetsManager">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SourceView"
           c:symbol-prefix="source_view"
           c:type="IdeSourceView"
           parent="GtkSource.View"
           glib:type-name="IdeSourceView"
           glib:get-type="ide_source_view_get_type"
           glib:type-struct="SourceViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <virtual-method name="append_to_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="digit" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="auto_indent">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="begin_macro">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="capture_modifier">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_modifier">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_search" invoker="clear_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_selection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clear_snippets" invoker="clear_snippets">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cycle_completion">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="decrease_font_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_selection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end_macro">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="focus_location">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="goto_definition">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide_completion">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="increase_font_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="indent_selection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_at_cursor_and_indent">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_modifier">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="use_count" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="jump" invoker="jump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_error">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
          <parameter name="extend_selection" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="select_match" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="apply_count" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="at_word_boundaries" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="movement">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="movement" transfer-ownership="none">
            <type name="SourceViewMovement" c:type="IdeSourceViewMovement"/>
          </parameter>
          <parameter name="extend_selection" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="apply_count" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="paste_clipboard_extended">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="smart_lines" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="after_cursor" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="place_cursor_at_original" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pop_selection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="push_selection">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rebuild_highlight">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="replay_macro">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="use_count" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request_documentation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset_font_size">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_insert_mark">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_command">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_insert_mark">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_search_char">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_inner">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="inner_left" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="inner_right" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="string_mode" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="select_tag">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="exclusive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selection_theatric">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="theatric" transfer-ownership="none">
            <type name="SourceViewTheatric" c:type="IdeSourceViewTheatric"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_mode">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="SourceViewModeType" c:type="IdeSourceViewModeType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_overwrite">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_search_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="search_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="from_selection" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sort">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="ignore_case" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reverse" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="swap_selection_bounds">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="clear_search" c:identifier="ide_source_view_clear_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_snippets"
              c:identifier="ide_source_view_clear_snippets">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_back_forward_list"
              c:identifier="ide_source_view_get_back_forward_list">
        <doc xml:space="preserve">Gets the #IdeSourceView:back-forward-list property. This is the list that is used to manage
navigation history between multiple #IdeSourceView.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeBackForwardList or %NULL.</doc>
          <type name="BackForwardList" c:type="IdeBackForwardList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="ide_source_view_get_count">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_snippet"
              c:identifier="ide_source_view_get_current_snippet">
        <doc xml:space="preserve">Gets the current snippet if there is one, otherwise %NULL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceSnippet or %NULL.</doc>
          <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_word_completion"
              c:identifier="ide_source_view_get_enable_word_completion">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_settings"
              c:identifier="ide_source_view_get_file_settings">
        <doc xml:space="preserve">Gets the #IdeSourceView:file-settings property. This contains various
settings for how the file should be rendered in the view, and preferences
such as spaces vs tabs.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeFileSettings or %NULL.</doc>
          <type name="FileSettings" c:type="IdeFileSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_desc"
              c:identifier="ide_source_view_get_font_desc">
        <return-value transfer-ownership="none">
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlight_current_line"
              c:identifier="ide_source_view_get_highlight_current_line">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_insert_matching_brace"
              c:identifier="ide_source_view_get_insert_matching_brace">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_display_name"
              c:identifier="ide_source_view_get_mode_display_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_name"
              c:identifier="ide_source_view_get_mode_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_overwrite"
              c:identifier="ide_source_view_get_overwrite">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_overwrite_braces"
              c:identifier="ide_source_view_get_overwrite_braces">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rubberband_search"
              c:identifier="ide_source_view_get_rubberband_search">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scroll_offset"
              c:identifier="ide_source_view_get_scroll_offset">
        <doc xml:space="preserve">Gets the #IdeSourceView:scroll-offset property. This property contains the number of lines
that should be kept above or below the line containing the insertion cursor relative to the
top and bottom of the visible text window.</doc>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_context"
              c:identifier="ide_source_view_get_search_context">
        <doc xml:space="preserve">Returns the #GtkSourceSearchContext for the source view if there is one.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GtkSourceSearchContext or %NULL.</doc>
          <type name="GtkSource.SearchContext"
                c:type="GtkSourceSearchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_direction"
              c:identifier="ide_source_view_get_search_direction">
        <doc xml:space="preserve">Gets the current search direction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GtkDirectionType</doc>
          <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_grid_lines"
              c:identifier="ide_source_view_get_show_grid_lines">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_line_changes"
              c:identifier="ide_source_view_get_show_line_changes">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_line_diagnostics"
              c:identifier="ide_source_view_get_show_line_diagnostics">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_search_bubbles"
              c:identifier="ide_source_view_get_show_search_bubbles">
        <doc xml:space="preserve">Gets the #IdeSourceView:show-search-bubbles property.

If this is set to %TRUE, a bubble will be drawn around search results to
make them stand out.

The default is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_search_shadow"
              c:identifier="ide_source_view_get_show_search_shadow">
        <doc xml:space="preserve">Gets the #IdeSourceView:show-search-shadow property.

If this property is %TRUE, then when searching, a shadow will be drawn over
the portion of the visible region that does not contain a match. This can
be used to help bring focus to the matches.

The default is %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snippet_completion"
              c:identifier="ide_source_view_get_snippet_completion">
        <doc xml:space="preserve">Gets the #IdeSourceView:snippet-completion property.

If enabled, snippet expansion can be performed via the auto completion drop down.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_rect"
              c:identifier="ide_source_view_get_visible_rect">
        <doc xml:space="preserve">Gets the visible region in buffer coordinates that is the visible area of the buffer. This
is similar to gtk_text_view_get_visible_area() except that it takes into account the
#IdeSourceView:scroll-offset property to ensure there is space above and below the
visible_rect.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="visible_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">A #GdkRectangle.</doc>
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visual_position"
              c:identifier="ide_source_view_get_visual_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="jump" c:identifier="ide_source_view_jump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_mark_onscreen"
              c:identifier="ide_source_view_move_mark_onscreen">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="mark" transfer-ownership="none">
            <type name="Gtk.TextMark" c:type="GtkTextMark*"/>
          </parameter>
        </parameters>
      </method>
      <method name="place_cursor_onscreen"
              c:identifier="ide_source_view_place_cursor_onscreen">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pop_snippet" c:identifier="ide_source_view_pop_snippet">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_snippet" c:identifier="ide_source_view_push_snippet">
        <doc xml:space="preserve">Pushes a new snippet onto the source view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="snippet" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceSnippet.</doc>
            <type name="SourceSnippet" c:type="IdeSourceSnippet*"/>
          </parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A location for the snippet or %NULL.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rollback_search"
              c:identifier="ide_source_view_rollback_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scroll_mark_onscreen"
              c:identifier="ide_source_view_scroll_mark_onscreen">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="mark" transfer-ownership="none">
            <type name="Gtk.TextMark" c:type="GtkTextMark*"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="alignx" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="aligny" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_iter"
              c:identifier="ide_source_view_scroll_to_iter">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="within_margin" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="animate_scroll" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_mark"
              c:identifier="ide_source_view_scroll_to_mark">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="mark" transfer-ownership="none">
            <type name="Gtk.TextMark" c:type="GtkTextMark*"/>
          </parameter>
          <parameter name="within_margin" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="animate_scroll" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_back_forward_list"
              c:identifier="ide_source_view_set_back_forward_list">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="back_forward_list" transfer-ownership="none">
            <type name="BackForwardList" c:type="IdeBackForwardList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_count" c:identifier="ide_source_view_set_count">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_word_completion"
              c:identifier="ide_source_view_set_enable_word_completion">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="enable_word_copletion" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_desc"
              c:identifier="ide_source_view_set_font_desc">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="font_desc" transfer-ownership="none">
            <type name="Pango.FontDescription"
                  c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_name"
              c:identifier="ide_source_view_set_font_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="font_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_highlight_current_line"
              c:identifier="ide_source_view_set_highlight_current_line">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="highlight_current_line" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_insert_matching_brace"
              c:identifier="ide_source_view_set_insert_matching_brace">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="insert_matching_brace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite_braces"
              c:identifier="ide_source_view_set_overwrite_braces">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="overwrite_braces" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rubberband_search"
              c:identifier="ide_source_view_set_rubberband_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="rubberband_search" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scroll_offset"
              c:identifier="ide_source_view_set_scroll_offset">
        <doc xml:space="preserve">Sets the #IdeSourceView:scroll-offset property. See ide_source_view_get_scroll_offset() for
more information. Set to 0 to unset this property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="scroll_offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_direction"
              c:identifier="ide_source_view_set_search_direction">
        <doc xml:space="preserve">Sets the search direction.

This can be used to invert the normal search direction so that a forward
movement is towards the beginning of the document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceView.</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve">the direction</doc>
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_grid_lines"
              c:identifier="ide_source_view_set_show_grid_lines">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="show_grid_lines" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_line_changes"
              c:identifier="ide_source_view_set_show_line_changes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="show_line_changes" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_line_diagnostics"
              c:identifier="ide_source_view_set_show_line_diagnostics">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="show_line_changes" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_search_bubbles"
              c:identifier="ide_source_view_set_show_search_bubbles">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="show_search_bubbles" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_search_shadow"
              c:identifier="ide_source_view_set_show_search_shadow">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="show_search_bubbles" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snippet_completion"
              c:identifier="ide_source_view_set_snippet_completion">
        <doc xml:space="preserve">Sets the #IdeSourceView:snippet-completion property. By setting this property to %TRUE,
snippets will be loaded for the currently activated source code language. See #IdeSourceSnippet
for more information on what can be provided via a snippet.

See also: ide_source_view_get_snippet_completion()</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="snippet_completion" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="back-forward-list"
                writable="1"
                transfer-ownership="none">
        <type name="BackForwardList"/>
      </property>
      <property name="count" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="enable-word-completion"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file-settings" transfer-ownership="none">
        <type name="FileSettings"/>
      </property>
      <property name="font-desc" writable="1" transfer-ownership="none">
        <type name="Pango.FontDescription"/>
      </property>
      <property name="font-name"
                readable="0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="indent-style"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="IndentStyle"/>
      </property>
      <property name="indenter" transfer-ownership="none">
        <type name="Indenter"/>
      </property>
      <property name="insert-matching-brace"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode-display-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="overscroll" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="overwrite-braces" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rubberband-search"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scroll-offset" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="search-context" transfer-ownership="none">
        <type name="GtkSource.SearchContext"/>
      </property>
      <property name="search-direction" writable="1" transfer-ownership="none">
        <type name="Gtk.DirectionType"/>
      </property>
      <property name="show-grid-lines" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-line-changes"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-line-diagnostics"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the diagnostics gutter should be visible.

This also requires that IdeBuffer:highlight-diagnostics is set to %TRUE
to generate diagnostics.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-search-bubbles"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-search-shadow"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="snippet-completion"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GtkSource.View" c:type="GtkSourceView"/>
      </field>
      <glib:signal name="action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="append-to-count" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="begin-macro" when="last" action="1">
        <doc xml:space="preserve">This signal will begin recording input to the #IdeSourceView. This includes the current
#IdeSourceViewMode, #IdeSourceView:count and #IdeSourceView:modifier which will be used
to replay the sequence starting from the correct state.

Pair this with an emission of #IdeSourceView::end-macro to complete the sequence.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="begin-user-action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="capture-modifier" when="last" action="1">
        <doc xml:space="preserve">This signal will block the main loop in a similar fashion to how
gtk_dialog_run() performs until a key-press has occurred that can be
captured for use in movements.

Pressing Escape or unfocusing the widget will break from this loop.

Use of this signal is not recommended except in very specific cases.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-count" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-modifier" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-search" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-snippets" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cycle-completion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="decrease-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="duplicate-entire-line" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-macro" when="last" action="1">
        <doc xml:space="preserve">You should call #IdeSourceView::begin-macro before emitting this signal.

Complete a macro recording sequence. This may be called more times than is necessary,
since #IdeSourceView will only keep the most recent macro recording. This can be
helpful when implementing recording sequences such as in Vim.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-user-action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="focus-location" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SourceLocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="goto-definition" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-completion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="increase-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="indent-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-modifier" when="last" action="1">
        <doc xml:space="preserve">Inserts the current modifier character at the insert mark in the buffer.
If @use_count is %TRUE, then the character will be inserted
#IdeSourceView:count times.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_count" transfer-ownership="none">
            <doc xml:space="preserve">If the count property should be used to repeat.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="jump" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-error" when="last" action="1">
        <doc xml:space="preserve">Moves to the next search result either forwards or backwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="dir" transfer-ownership="none">
            <doc xml:space="preserve">The direction to move.</doc>
            <type name="Gtk.DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-search" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DirectionType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p4" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="movement" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SourceViewMovement"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paste-clipboard-extended" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pop-selection" when="last" action="1">
        <doc xml:space="preserve">Reselects a previousl selected range of text that was saved using
IdeSourceView::push-selection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="pop-snippet" when="last">
        <doc xml:space="preserve">Pops the current snippet from the sourceview if there is one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="push-selection" when="last" action="1">
        <doc xml:space="preserve">Saves the current selection away to be restored by a call to
IdeSourceView::pop-selection. You must pop the selection to keep
the selection stack in consistent order.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="push-snippet" when="last">
        <doc xml:space="preserve">Pushes @snippet onto the snippet stack at either @iter or the insertion
mark if @iter is not provided.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="snippet" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceSnippet.</doc>
            <type name="SourceSnippet"/>
          </parameter>
          <parameter name="iter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The location for the snippet, or %NULL.</doc>
            <type name="Gtk.TextIter"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="rebuild-highlight" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="reindent" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="replay-macro" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-documentation" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="reset-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="restore-insert-mark" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-command" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-insert-mark" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-search-char" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select-inner" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-tag" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-theatric" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SourceViewTheatric"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-mode" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="SourceViewModeType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-overwrite" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-search-text" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="sort" when="last" action="1">
        <doc xml:space="preserve">This signal is meant to be activated from keybindings to sort the currently selected lines.
The lines are sorted using qsort() and either strcmp() or strcasecmp().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ignore_case" transfer-ownership="none">
            <doc xml:space="preserve">If character case should be ignored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="reverse" transfer-ownership="none">
            <doc xml:space="preserve">If the lines should be sorted in reverse order</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="swap-selection-bounds" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SourceViewClass"
            c:type="IdeSourceViewClass"
            glib:is-gtype-struct-for="SourceView">
      <field name="parent_class">
        <type name="GtkSource.ViewClass" c:type="GtkSourceViewClass"/>
      </field>
      <field name="append_to_count">
        <callback name="append_to_count">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="digit" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="auto_indent">
        <callback name="auto_indent">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_macro">
        <callback name="begin_macro">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="capture_modifier">
        <callback name="capture_modifier">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_count">
        <callback name="clear_count">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_modifier">
        <callback name="clear_modifier">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_search">
        <callback name="clear_search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_selection">
        <callback name="clear_selection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clear_snippets">
        <callback name="clear_snippets">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cycle_completion">
        <callback name="cycle_completion">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_selection">
        <callback name="delete_selection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_macro">
        <callback name="end_macro">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_location">
        <callback name="focus_location">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <type name="SourceLocation" c:type="IdeSourceLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="goto_definition">
        <callback name="goto_definition">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide_completion">
        <callback name="hide_completion">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="indent_selection">
        <callback name="indent_selection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="level" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_at_cursor_and_indent">
        <callback name="insert_at_cursor_and_indent">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="str" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_modifier">
        <callback name="insert_modifier">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="use_count" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="jump">
        <callback name="jump">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="movement">
        <callback name="movement">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="movement" transfer-ownership="none">
              <type name="SourceViewMovement" c:type="IdeSourceViewMovement"/>
            </parameter>
            <parameter name="extend_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="exclusive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="apply_count" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_error">
        <callback name="move_error">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="dir" transfer-ownership="none">
              <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_search">
        <callback name="move_search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="dir" transfer-ownership="none">
              <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
            </parameter>
            <parameter name="extend_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="select_match" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="exclusive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="apply_count" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="at_word_boundaries" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paste_clipboard_extended">
        <callback name="paste_clipboard_extended">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="smart_lines" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="after_cursor" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="place_cursor_at_original"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push_selection">
        <callback name="push_selection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pop_selection">
        <callback name="pop_selection">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rebuild_highlight">
        <callback name="rebuild_highlight">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="replay_macro">
        <callback name="replay_macro">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="use_count" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request_documentation">
        <callback name="request_documentation">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_insert_mark">
        <callback name="restore_insert_mark">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_command">
        <callback name="save_command">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_search_char">
        <callback name="save_search_char">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_insert_mark">
        <callback name="save_insert_mark">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_inner">
        <callback name="select_inner">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="inner_left" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="inner_right" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="exclusive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="string_mode" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="select_tag">
        <callback name="select_tag">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="exclusive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_theatric">
        <callback name="selection_theatric">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="theatric" transfer-ownership="none">
              <type name="SourceViewTheatric" c:type="IdeSourceViewTheatric"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_mode">
        <callback name="set_mode">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="SourceViewModeType" c:type="IdeSourceViewModeType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_overwrite">
        <callback name="set_overwrite">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="overwrite" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_search_text">
        <callback name="set_search_text">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="search_text" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="from_selection" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sort">
        <callback name="sort">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
            <parameter name="ignore_case" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="reverse" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="swap_selection_bounds">
        <callback name="swap_selection_bounds">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="increase_font_size">
        <callback name="increase_font_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="decrease_font_size">
        <callback name="decrease_font_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset_font_size">
        <callback name="reset_font_size">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SourceView" c:type="IdeSourceView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SourceViewMode"
           c:symbol-prefix="source_view_mode"
           c:type="IdeSourceViewMode"
           parent="Gtk.Widget"
           glib:type-name="IdeSourceViewMode"
           glib:get-type="ide_source_view_mode_get_type"
           glib:type-struct="SourceViewModeClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_block_cursor"
              c:identifier="ide_source_view_mode_get_block_cursor">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_mode"
              c:identifier="ide_source_view_mode_get_default_mode">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_source_view_mode_get_display_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keep_mark_on_char"
              c:identifier="ide_source_view_mode_get_keep_mark_on_char">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_type"
              c:identifier="ide_source_view_mode_get_mode_type">
        <return-value transfer-ownership="none">
          <type name="SourceViewModeType" c:type="IdeSourceViewModeType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_source_view_mode_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_repeat_insert_with_count"
              c:identifier="ide_source_view_mode_get_repeat_insert_with_count">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suppress_unbound"
              c:identifier="ide_source_view_mode_get_suppress_unbound">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_has_indenter"
              c:identifier="ide_source_view_mode_set_has_indenter">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceViewMode" c:type="IdeSourceViewMode*"/>
          </instance-parameter>
          <parameter name="has_indenter" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="append-to-count" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="backspace" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="begin-macro" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="begin-user-action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="capture-modifier" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="change-case" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GtkSource.ChangeCaseType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="change-number" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="clear-count" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-modifier" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-search" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="clear-snippets" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="copy-clipboard" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cut-clipboard" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cycle-completion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="decrease-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="delete-from-cursor" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DeleteType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="delete-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="duplicate-entire-line" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-macro" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-user-action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="goto-definition" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="hide-completion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="increase-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="indent-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-at-cursor" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="insert-modifier" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="join-lines" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="move-cursor" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.MovementStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-error" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DirectionType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-lines" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-search" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.DirectionType"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p3" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p4" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-to-matching-bracket" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-viewport" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.ScrollStep"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-words" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="movement" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SourceViewMovement"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="paste-clipboard" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="paste-clipboard-extended" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pop-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="preedit-changed" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="push-selection" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="rebuild-highlight" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="redo" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="reindent" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="replay-macro" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-documentation" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="reset-font-size" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="restore-insert-mark" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-command" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-insert-mark" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save-search-char" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="select-all" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-inner" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="select-tag" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selection-theatric" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SourceViewTheatric"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-anchor" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="set-mode" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="SourceViewModeType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-overwrite" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-search-text" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show-completion" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="sort" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="swap-selection-bounds" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toggle-cursor-visible" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="toggle-overwrite" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="undo" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SourceViewModeClass"
            c:type="IdeSourceViewModeClass"
            glib:is-gtype-struct-for="SourceViewMode">
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="SourceViewModeType"
                 glib:type-name="IdeSourceViewModeType"
                 glib:get-type="ide_source_view_mode_type_get_type"
                 c:type="IdeSourceViewModeType">
      <doc xml:space="preserve">The type of keyboard mode.</doc>
      <member name="transient"
              value="0"
              c:identifier="IDE_SOURCE_VIEW_MODE_TYPE_TRANSIENT"
              glib:nick="transient">
      </member>
      <member name="permanent"
              value="1"
              c:identifier="IDE_SOURCE_VIEW_MODE_TYPE_PERMANENT"
              glib:nick="permanent">
      </member>
      <member name="modal"
              value="2"
              c:identifier="IDE_SOURCE_VIEW_MODE_TYPE_MODAL"
              glib:nick="modal">
      </member>
    </enumeration>
    <enumeration name="SourceViewMovement"
                 glib:type-name="IdeSourceViewMovement"
                 glib:get-type="ide_source_view_movement_get_type"
                 c:type="IdeSourceViewMovement">
      <doc xml:space="preserve">The type of movement.

Some of these movements may be modified by using the modify-repeat action.
First adjust the repeat and then perform the "movement" action.</doc>
      <member name="previous_offset"
              value="0"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_OFFSET"
              glib:nick="previous-offset">
        <doc xml:space="preserve">move to previous character in the file.
  This includes line breaks.</doc>
      </member>
      <member name="next_offset"
              value="1"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_OFFSET"
              glib:nick="next-offset">
        <doc xml:space="preserve">move to next character in the file.
  This includes line breaks.</doc>
      </member>
      <member name="nth_char"
              value="2"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NTH_CHAR"
              glib:nick="nth-char">
        <doc xml:space="preserve">move to nth character in line. Use a repeat to
  specify the target character within the line.</doc>
      </member>
      <member name="previous_char"
              value="3"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_CHAR"
              glib:nick="previous-char">
        <doc xml:space="preserve">move to previous character in line.</doc>
      </member>
      <member name="next_char"
              value="4"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_CHAR"
              glib:nick="next-char">
        <doc xml:space="preserve">move to next character in line.</doc>
      </member>
      <member name="first_char"
              value="5"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_FIRST_CHAR"
              glib:nick="first-char">
        <doc xml:space="preserve">move to line offset of zero.</doc>
      </member>
      <member name="first_nonspace_char"
              value="6"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_FIRST_NONSPACE_CHAR"
              glib:nick="first-nonspace-char">
        <doc xml:space="preserve">move to first non-whitespace character in line.</doc>
      </member>
      <member name="middle_char"
              value="7"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_MIDDLE_CHAR"
              glib:nick="middle-char">
        <doc xml:space="preserve">move to the middle character in the line.</doc>
      </member>
      <member name="last_char"
              value="8"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_LAST_CHAR"
              glib:nick="last-char">
        <doc xml:space="preserve">move to the last character in the line. this can be
  inclusve or exclusive. inclusive is equivalent to %IDE_SOURCE_VIEW_MOVEMENT_LINE_END.</doc>
      </member>
      <member name="next_word_start"
              value="9"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_WORD_START"
              glib:nick="next-word-start">
        <doc xml:space="preserve">move to beginning of next word.</doc>
      </member>
      <member name="next_full_word_start"
              value="10"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_FULL_WORD_START"
              glib:nick="next-full-word-start">
      </member>
      <member name="next_sub_word_start"
              value="11"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_SUB_WORD_START"
              glib:nick="next-sub-word-start">
        <doc xml:space="preserve">move to the next sub-word start, similar
  to the default in GtkTextView. This includes the underline character as a word break,
  as is common in Emacs.</doc>
      </member>
      <member name="previous_sub_word_start"
              value="12"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_SUB_WORD_START"
              glib:nick="previous-sub-word-start">
        <doc xml:space="preserve">move to the previous sub-wird start,
  similar to the default in GtkTextView. This includes the underline character as a
  word break, as is common in Emacs.</doc>
      </member>
      <member name="previous_word_start"
              value="13"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_WORD_START"
              glib:nick="previous-word-start">
        <doc xml:space="preserve">move to beginning of previous word.</doc>
      </member>
      <member name="previous_full_word_start"
              value="14"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_FULL_WORD_START"
              glib:nick="previous-full-word-start">
      </member>
      <member name="previous_word_end"
              value="15"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_WORD_END"
              glib:nick="previous-word-end">
        <doc xml:space="preserve">move to end of previous word.</doc>
      </member>
      <member name="previous_full_word_end"
              value="16"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_FULL_WORD_END"
              glib:nick="previous-full-word-end">
      </member>
      <member name="next_word_end"
              value="17"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_WORD_END"
              glib:nick="next-word-end">
        <doc xml:space="preserve">move to end of next word.</doc>
      </member>
      <member name="next_full_word_end"
              value="18"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_FULL_WORD_END"
              glib:nick="next-full-word-end">
      </member>
      <member name="sentence_start"
              value="19"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SENTENCE_START"
              glib:nick="sentence-start">
        <doc xml:space="preserve">move to beginning of sentance.</doc>
      </member>
      <member name="sentence_end"
              value="20"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SENTENCE_END"
              glib:nick="sentence-end">
        <doc xml:space="preserve">move to end of sentance.</doc>
      </member>
      <member name="paragraph_start"
              value="21"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PARAGRAPH_START"
              glib:nick="paragraph-start">
        <doc xml:space="preserve">move to start of paragraph.</doc>
      </member>
      <member name="paragraph_end"
              value="22"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PARAGRAPH_END"
              glib:nick="paragraph-end">
        <doc xml:space="preserve">move to end of paragraph.</doc>
      </member>
      <member name="previous_line"
              value="23"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_LINE"
              glib:nick="previous-line">
        <doc xml:space="preserve">move to previous line, keeping line offset if possible.</doc>
      </member>
      <member name="next_line"
              value="24"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_LINE"
              glib:nick="next-line">
        <doc xml:space="preserve">move to next line, keeping line offset if possible.</doc>
      </member>
      <member name="first_line"
              value="25"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_FIRST_LINE"
              glib:nick="first-line">
        <doc xml:space="preserve">move to first line in file, line offset of zero.</doc>
      </member>
      <member name="nth_line"
              value="26"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NTH_LINE"
              glib:nick="nth-line">
        <doc xml:space="preserve">move to nth line, line offset of zero. use repeat to
  select the given line number.</doc>
      </member>
      <member name="last_line"
              value="27"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_LAST_LINE"
              glib:nick="last-line">
        <doc xml:space="preserve">move to last line in file, with line offset of zero.</doc>
      </member>
      <member name="line_percentage"
              value="28"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_LINE_PERCENTAGE"
              glib:nick="line-percentage">
        <doc xml:space="preserve">move to line based on percentage. Use repeat to
  specify the percentage, 0 to 100.</doc>
      </member>
      <member name="line_chars"
              value="29"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_LINE_CHARS"
              glib:nick="line-chars">
        <doc xml:space="preserve">special selection to select all line characters up to the
  cursor position. special care will be taken if the line is blank to select only the blank
  space if any. otherwise, the line break will be selected.</doc>
      </member>
      <member name="line_end"
              value="30"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_LINE_END"
              glib:nick="line-end">
        <doc xml:space="preserve">This will move you to the location of the newline at the
  end of the current line. It does not support exclusive will not select the newline, while
  inclusive will select the newline.</doc>
      </member>
      <member name="half_page_up"
              value="31"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_HALF_PAGE_UP"
              glib:nick="half-page-up">
        <doc xml:space="preserve">move half a page up.</doc>
      </member>
      <member name="half_page_down"
              value="32"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_HALF_PAGE_DOWN"
              glib:nick="half-page-down">
        <doc xml:space="preserve">move half a page down.</doc>
      </member>
      <member name="half_page_left"
              value="33"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_HALF_PAGE_LEFT"
              glib:nick="half-page-left">
        <doc xml:space="preserve">move half a page left.</doc>
      </member>
      <member name="half_page_right"
              value="34"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_HALF_PAGE_RIGHT"
              glib:nick="half-page-right">
        <doc xml:space="preserve">move half a page right.</doc>
      </member>
      <member name="page_up"
              value="35"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PAGE_UP"
              glib:nick="page-up">
        <doc xml:space="preserve">move a full page up.</doc>
      </member>
      <member name="page_up_lines"
              value="36"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PAGE_UP_LINES"
              glib:nick="page-up-lines">
        <doc xml:space="preserve">move a full page up, but extend to whole line.</doc>
      </member>
      <member name="page_down"
              value="37"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PAGE_DOWN"
              glib:nick="page-down">
        <doc xml:space="preserve">move a full page down.</doc>
      </member>
      <member name="page_down_lines"
              value="38"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PAGE_DOWN_LINES"
              glib:nick="page-down-lines">
        <doc xml:space="preserve">move a full page down, but extend to whole line.</doc>
      </member>
      <member name="screen_up"
              value="39"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_UP"
              glib:nick="screen-up">
        <doc xml:space="preserve">move to viewport up by visible line, adjusting cursor
  to stay on screen if necessary.</doc>
      </member>
      <member name="screen_down"
              value="40"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_DOWN"
              glib:nick="screen-down">
        <doc xml:space="preserve">move to viewport down by visible line, adjusting cursor
  to stay on screen if necessary.</doc>
      </member>
      <member name="screen_left"
              value="41"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_LEFT"
              glib:nick="screen-left">
        <doc xml:space="preserve">move to viewport left by visible char, adjusting cursor
  to stay on screen if necessary.</doc>
      </member>
      <member name="screen_right"
              value="42"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_RIGHT"
              glib:nick="screen-right">
        <doc xml:space="preserve">move to viewport right by visible char, adjusting cursor
  to stay on screen if necessary.</doc>
      </member>
      <member name="screen_top"
              value="43"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_TOP"
              glib:nick="screen-top">
        <doc xml:space="preserve">move to the top of the screen.</doc>
      </member>
      <member name="screen_middle"
              value="44"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_MIDDLE"
              glib:nick="screen-middle">
        <doc xml:space="preserve">move to the middle of the screen.</doc>
      </member>
      <member name="screen_bottom"
              value="45"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCREEN_BOTTOM"
              glib:nick="screen-bottom">
        <doc xml:space="preserve">move to the bottom of the screen.</doc>
      </member>
      <member name="match_special"
              value="46"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_MATCH_SPECIAL"
              glib:nick="match-special">
        <doc xml:space="preserve">move to match of brace, bracket, comment.</doc>
      </member>
      <member name="scroll_screen_top"
              value="47"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCROLL_SCREEN_TOP"
              glib:nick="scroll-screen-top">
        <doc xml:space="preserve">scroll until insert cursor or [count]th line is at screen top.</doc>
      </member>
      <member name="scroll_screen_center"
              value="48"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCROLL_SCREEN_CENTER"
              glib:nick="scroll-screen-center">
        <doc xml:space="preserve">scroll until insert cursor or [count]th line is at screen center.</doc>
      </member>
      <member name="scroll_screen_bottom"
              value="49"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCROLL_SCREEN_BOTTOM"
              glib:nick="scroll-screen-bottom">
        <doc xml:space="preserve">scroll until insert cursor or [count]th line is at screen bottom.</doc>
      </member>
      <member name="scroll_screen_left"
              value="50"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCROLL_SCREEN_LEFT"
              glib:nick="scroll-screen-left">
        <doc xml:space="preserve">scroll until insert cursor or [count]th char is at screen left.</doc>
      </member>
      <member name="scroll_screen_right"
              value="51"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_SCROLL_SCREEN_RIGHT"
              glib:nick="scroll-screen-right">
        <doc xml:space="preserve">scroll until insert cursor or [count]th char is at screen right.</doc>
      </member>
      <member name="previous_unmatched_brace"
              value="52"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_UNMATCHED_BRACE"
              glib:nick="previous-unmatched-brace">
      </member>
      <member name="next_unmatched_brace"
              value="53"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_UNMATCHED_BRACE"
              glib:nick="next-unmatched-brace">
      </member>
      <member name="previous_unmatched_paren"
              value="54"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_UNMATCHED_PAREN"
              glib:nick="previous-unmatched-paren">
      </member>
      <member name="next_unmatched_paren"
              value="55"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_UNMATCHED_PAREN"
              glib:nick="next-unmatched-paren">
      </member>
      <member name="next_match_modifier"
              value="56"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_MATCH_MODIFIER"
              glib:nick="next-match-modifier">
      </member>
      <member name="previous_match_modifier"
              value="57"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_MATCH_MODIFIER"
              glib:nick="previous-match-modifier">
      </member>
      <member name="next_match_search_char"
              value="58"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_NEXT_MATCH_SEARCH_CHAR"
              glib:nick="next-match-search-char">
        <doc xml:space="preserve">move to the next matching char according to f and t in vim.</doc>
      </member>
      <member name="previous_match_search_char"
              value="59"
              c:identifier="IDE_SOURCE_VIEW_MOVEMENT_PREVIOUS_MATCH_SEARCH_CHAR"
              glib:nick="previous-match-search-char">
        <doc xml:space="preserve">move to the previous matching char according to F and T in vim.</doc>
      </member>
    </enumeration>
    <enumeration name="SourceViewTheatric"
                 glib:type-name="IdeSourceViewTheatric"
                 glib:get-type="ide_source_view_theatric_get_type"
                 c:type="IdeSourceViewTheatric">
      <doc xml:space="preserve">The style of theatric.</doc>
      <member name="expand"
              value="0"
              c:identifier="IDE_SOURCE_VIEW_THEATRIC_EXPAND"
              glib:nick="expand">
        <doc xml:space="preserve">expand from selection location.</doc>
      </member>
      <member name="shrink"
              value="1"
              c:identifier="IDE_SOURCE_VIEW_THEATRIC_SHRINK"
              glib:nick="shrink">
        <doc xml:space="preserve">shrink from selection location.</doc>
      </member>
    </enumeration>
    <interface name="Subprocess"
               c:symbol-prefix="subprocess"
               c:type="IdeSubprocess"
               glib:type-name="IdeSubprocess"
               glib:get-type="ide_subprocess_get_type"
               glib:type-struct="SubprocessInterface">
      <virtual-method name="communicate" invoker="communicate" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_async" invoker="communicate_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_finish"
                      invoker="communicate_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_utf8"
                      invoker="communicate_utf8"
                      throws="1">
        <doc xml:space="preserve">This process acts identical to g_subprocess_communicate_utf8().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">input to deliver to the subprocesses stdin stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">an optional location for the stdout contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">an optional location for the stderr contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="force_exit" invoker="force_exit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_exit_status" invoker="get_exit_status">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_identifier" invoker="get_identifier">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_if_exited" invoker="get_if_exited">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_if_signaled" invoker="get_if_signaled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_status" invoker="get_status">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stderr_pipe" invoker="get_stderr_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdin_pipe" invoker="get_stdin_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdout_pipe" invoker="get_stdout_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_successful" invoker="get_successful">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_term_sig" invoker="get_term_sig">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_signal" invoker="send_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="signal_num" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait" invoker="wait" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait_async" invoker="wait_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait_finish" invoker="wait_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_exit_status"
              c:identifier="ide_subprocess_check_exit_status"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="communicate"
              c:identifier="ide_subprocess_communicate"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_async"
              c:identifier="ide_subprocess_communicate_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_finish"
              c:identifier="ide_subprocess_communicate_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_utf8"
              c:identifier="ide_subprocess_communicate_utf8"
              throws="1">
        <doc xml:space="preserve">This process acts identical to g_subprocess_communicate_utf8().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">input to deliver to the subprocesses stdin stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">an optional location for the stdout contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">an optional location for the stderr contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_exit" c:identifier="ide_subprocess_force_exit">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_exit_status"
              c:identifier="ide_subprocess_get_exit_status">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="ide_subprocess_get_identifier">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_if_exited" c:identifier="ide_subprocess_get_if_exited">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_if_signaled"
              c:identifier="ide_subprocess_get_if_signaled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="ide_subprocess_get_status">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stderr_pipe"
              c:identifier="ide_subprocess_get_stderr_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdin_pipe"
              c:identifier="ide_subprocess_get_stdin_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdout_pipe"
              c:identifier="ide_subprocess_get_stdout_pipe">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_successful"
              c:identifier="ide_subprocess_get_successful">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_term_sig" c:identifier="ide_subprocess_get_term_sig">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_signal" c:identifier="ide_subprocess_send_signal">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="signal_num" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait" c:identifier="ide_subprocess_wait" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_async" c:identifier="ide_subprocess_wait_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check"
              c:identifier="ide_subprocess_wait_check"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check_async"
              c:identifier="ide_subprocess_wait_check_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check_finish"
              c:identifier="ide_subprocess_wait_check_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_finish"
              c:identifier="ide_subprocess_wait_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SubprocessInterface"
            c:type="IdeSubprocessInterface"
            glib:is-gtype-struct-for="Subprocess">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_identifier">
        <callback name="get_identifier">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdout_pipe">
        <callback name="get_stdout_pipe">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stderr_pipe">
        <callback name="get_stderr_pipe">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GInputStream or %NULL.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdin_pipe">
        <callback name="get_stdin_pipe">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GOutputStream or %NULL.</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait">
        <callback name="wait" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait_async">
        <callback name="wait_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait_finish">
        <callback name="wait_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_successful">
        <callback name="get_successful">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_if_exited">
        <callback name="get_if_exited">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_exit_status">
        <callback name="get_exit_status">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_if_signaled">
        <callback name="get_if_signaled">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_term_sig">
        <callback name="get_term_sig">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_status">
        <callback name="get_status">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_signal">
        <callback name="send_signal">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="signal_num" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="force_exit">
        <callback name="force_exit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate">
        <callback name="communicate" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="stdout_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
            <parameter name="stderr_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_utf8">
        <callback name="communicate_utf8" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">an #IdeSubprocess</doc>
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">input to deliver to the subprocesses stdin stream</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">an optional #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="stdout_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve">an optional location for the stdout contents</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="stderr_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve">an optional location for the stderr contents</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_async">
        <callback name="communicate_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_finish">
        <callback name="communicate_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="stdout_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
            <parameter name="stderr_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SubprocessLauncher"
           c:symbol-prefix="subprocess_launcher"
           c:type="IdeSubprocessLauncher"
           parent="GObject.Object"
           glib:type-name="IdeSubprocessLauncher"
           glib:get-type="ide_subprocess_launcher_get_type"
           glib:type-struct="SubprocessLauncherClass">
      <constructor name="new" c:identifier="ide_subprocess_launcher_new">
        <return-value transfer-ownership="full">
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="spawn_async" invoker="spawn_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="spawn_finish" invoker="spawn_finish" throws="1">
        <doc xml:space="preserve">Complete a request to asynchronously spawn a process.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="spawn_sync" invoker="spawn_sync" throws="1">
        <doc xml:space="preserve">Synchronously spawn a process using the internal state.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_clear_env"
              c:identifier="ide_subprocess_launcher_get_clear_env">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cwd" c:identifier="ide_subprocess_launcher_get_cwd">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ"
              c:identifier="ide_subprocess_launcher_get_environ">
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="ide_subprocess_launcher_get_flags">
        <return-value transfer-ownership="none">
          <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_on_host"
              c:identifier="ide_subprocess_launcher_get_run_on_host">
        <doc xml:space="preserve">Gets if the process should be executed on the host system. This might be
useful for situations where running in a contained environment is not
sufficient to perform the given task.

Currently, only flatpak is supported for breaking out of the containment
zone and requires the application was built with --allow=devel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the process should be executed outside the containment zone.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="overlay_environment"
              c:identifier="ide_subprocess_launcher_overlay_environment">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pop_argv" c:identifier="ide_subprocess_launcher_pop_argv">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_args"
              c:identifier="ide_subprocess_launcher_push_args">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve">the arguments</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="push_argv"
              c:identifier="ide_subprocess_launcher_push_argv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_clear_env"
              c:identifier="ide_subprocess_launcher_set_clear_env">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="clear_env" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cwd" c:identifier="ide_subprocess_launcher_set_cwd">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environ"
              c:identifier="ide_subprocess_launcher_set_environ">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="environ_" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="ide_subprocess_launcher_set_flags">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_on_host"
              c:identifier="ide_subprocess_launcher_set_run_on_host">
        <doc xml:space="preserve">Sets the #IdeSubprocessLauncher:run-on-host property. See
ide_subprocess_launcher_get_run_on_host() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="run_on_host" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_subprocess_launcher_setenv">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="replace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_async"
              c:identifier="ide_subprocess_launcher_spawn_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_finish"
              c:identifier="ide_subprocess_launcher_spawn_finish"
              throws="1">
        <doc xml:space="preserve">Complete a request to asynchronously spawn a process.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_sync"
              c:identifier="ide_subprocess_launcher_spawn_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously spawn a process using the internal state.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stderr_fd"
              c:identifier="ide_subprocess_launcher_take_stderr_fd">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stderr_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stdin_fd"
              c:identifier="ide_subprocess_launcher_take_stdin_fd">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stdin_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stdout_fd"
              c:identifier="ide_subprocess_launcher_take_stdout_fd">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stdout_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="clean-env" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cwd" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="environ" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="flags"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Gio.SubprocessFlags"/>
      </property>
      <property name="run-on-host" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SubprocessLauncherClass"
            c:type="IdeSubprocessLauncherClass"
            glib:is-gtype-struct-for="SubprocessLauncher">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="spawn_sync">
        <callback name="spawn_sync" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="spawn_async">
        <callback name="spawn_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="spawn_finish">
        <callback name="spawn_finish" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #IdeSubprocess or %NULL upon error.</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="Symbol"
            c:type="IdeSymbol"
            glib:type-name="IdeSymbol"
            glib:get-type="ide_symbol_get_type"
            c:symbol-prefix="symbol">
      <constructor name="new" c:identifier="ide_symbol_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #IdeSymbol.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the symbol name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve">the symbol kind</doc>
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">the symbol flags</doc>
            <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
          </parameter>
          <parameter name="declaration_location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the declaration location</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
          <parameter name="definition_location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the definition location</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
          <parameter name="canonical_location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the canonical location</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_canonical_location"
              c:identifier="ide_symbol_get_canonical_location">
        <doc xml:space="preserve">Gets the location of the symbols "implementation". In C/C++ languages, you can have multiple
declarations by only a single implementation.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_declaration_location"
              c:identifier="ide_symbol_get_declaration_location">
        <doc xml:space="preserve">The location of a symbol equates to the declaration of the symbol. In C and C++, this would
mean the header location (or forward declaration in a C file before the implementation).

If the symbol provider did not register this information, %NULL will be returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_definition_location"
              c:identifier="ide_symbol_get_definition_location">
        <doc xml:space="preserve">Like ide_symbol_get_declaration_location() but gets the first declaration (only one can be
the definition).</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="ide_symbol_get_flags">
        <return-value transfer-ownership="none">
          <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_symbol_get_kind">
        <return-value transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_symbol_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_symbol_ref">
        <return-value transfer-ownership="full">
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_symbol_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="SymbolFlags"
              glib:type-name="IdeSymbolFlags"
              glib:get-type="ide_symbol_flags_get_type"
              c:type="IdeSymbolFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_SYMBOL_FLAGS_NONE"
              glib:nick="none">
      </member>
      <member name="is_static"
              value="1"
              c:identifier="IDE_SYMBOL_FLAGS_IS_STATIC"
              glib:nick="is-static">
      </member>
      <member name="is_member"
              value="2"
              c:identifier="IDE_SYMBOL_FLAGS_IS_MEMBER"
              glib:nick="is-member">
      </member>
      <member name="is_deprecated"
              value="4"
              c:identifier="IDE_SYMBOL_FLAGS_IS_DEPRECATED"
              glib:nick="is-deprecated">
      </member>
    </bitfield>
    <enumeration name="SymbolKind"
                 glib:type-name="IdeSymbolKind"
                 glib:get-type="ide_symbol_kind_get_type"
                 c:type="IdeSymbolKind">
      <member name="none"
              value="0"
              c:identifier="IDE_SYMBOL_NONE"
              glib:nick="none">
      </member>
      <member name="scalar"
              value="1"
              c:identifier="IDE_SYMBOL_SCALAR"
              glib:nick="scalar">
      </member>
      <member name="class"
              value="2"
              c:identifier="IDE_SYMBOL_CLASS"
              glib:nick="class">
      </member>
      <member name="function"
              value="3"
              c:identifier="IDE_SYMBOL_FUNCTION"
              glib:nick="function">
      </member>
      <member name="method"
              value="4"
              c:identifier="IDE_SYMBOL_METHOD"
              glib:nick="method">
      </member>
      <member name="struct"
              value="5"
              c:identifier="IDE_SYMBOL_STRUCT"
              glib:nick="struct">
      </member>
      <member name="union"
              value="6"
              c:identifier="IDE_SYMBOL_UNION"
              glib:nick="union">
      </member>
      <member name="field"
              value="7"
              c:identifier="IDE_SYMBOL_FIELD"
              glib:nick="field">
      </member>
      <member name="enum"
              value="8"
              c:identifier="IDE_SYMBOL_ENUM"
              glib:nick="enum">
      </member>
      <member name="enum_value"
              value="9"
              c:identifier="IDE_SYMBOL_ENUM_VALUE"
              glib:nick="enum-value">
      </member>
      <member name="variable"
              value="10"
              c:identifier="IDE_SYMBOL_VARIABLE"
              glib:nick="variable">
      </member>
      <member name="header"
              value="11"
              c:identifier="IDE_SYMBOL_HEADER"
              glib:nick="header">
      </member>
    </enumeration>
    <class name="SymbolNode"
           c:symbol-prefix="symbol_node"
           c:type="IdeSymbolNode"
           parent="Object"
           glib:type-name="IdeSymbolNode"
           glib:get-type="ide_symbol_node_get_type"
           glib:type-struct="SymbolNodeClass">
      <virtual-method name="get_location" invoker="get_location">
        <doc xml:space="preserve">Gets the location for the symbol node.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_flags" c:identifier="ide_symbol_node_get_flags">
        <return-value transfer-ownership="none">
          <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_symbol_node_get_kind">
        <return-value transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="ide_symbol_node_get_location">
        <doc xml:space="preserve">Gets the location for the symbol node.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
          <type name="SourceLocation" c:type="IdeSourceLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_symbol_node_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags" writable="1" transfer-ownership="none">
        <type name="SymbolFlags"/>
      </property>
      <property name="kind" writable="1" transfer-ownership="none">
        <type name="SymbolKind"/>
      </property>
      <property name="name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="SymbolNodeClass"
            c:type="IdeSymbolNodeClass"
            glib:is-gtype-struct-for="SymbolNode">
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="get_location">
        <callback name="get_location">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeSourceLocation or %NULL.</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="SymbolResolver"
               c:symbol-prefix="symbol_resolver"
               c:type="IdeSymbolResolver"
               glib:type-name="IdeSymbolResolver"
               glib:get-type="ide_symbol_resolver_get_type"
               glib:type-struct="SymbolResolverInterface">
      <prerequisite name="Object"/>
      <virtual-method name="get_symbol_tree_async"
                      invoker="get_symbol_tree_async">
        <doc xml:space="preserve">Asynchronously fetch an up to date symbol tree for @file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symbol_tree_finish"
                      invoker="get_symbol_tree_finish"
                      throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to get the symbol tree for the requested file.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSymbolTree; otherwise %NULL and @error is set.</doc>
          <type name="SymbolTree" c:type="IdeSymbolTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_symbol_async" invoker="lookup_symbol_async">
        <doc xml:space="preserve">Asynchronously requests that @self determine the symbol existing at the source location
denoted by @self. @callback should call ide_symbol_resolver_lookup_symbol_finish() to
retrieve the result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceLocation.</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_symbol_finish"
                      invoker="lookup_symbol_finish"
                      throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to lookup a symbol using
ide_symbol_resolver_lookup_symbol_async().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSymbol if successful; otherwise %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult provided to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_context">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_symbol_tree_async"
              c:identifier="ide_symbol_resolver_get_symbol_tree_async">
        <doc xml:space="preserve">Asynchronously fetch an up to date symbol tree for @file.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_tree_finish"
              c:identifier="ide_symbol_resolver_get_symbol_tree_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous request to get the symbol tree for the requested file.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSymbolTree; otherwise %NULL and @error is set.</doc>
          <type name="SymbolTree" c:type="IdeSymbolTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_symbol_async"
              c:identifier="ide_symbol_resolver_lookup_symbol_async">
        <doc xml:space="preserve">Asynchronously requests that @self determine the symbol existing at the source location
denoted by @self. @callback should call ide_symbol_resolver_lookup_symbol_finish() to
retrieve the result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSourceLocation.</doc>
            <type name="SourceLocation" c:type="IdeSourceLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_symbol_finish"
              c:identifier="ide_symbol_resolver_lookup_symbol_finish"
              throws="1">
        <doc xml:space="preserve">Completes an asynchronous call to lookup a symbol using
ide_symbol_resolver_lookup_symbol_async().</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeSymbol if successful; otherwise %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">A #GAsyncResult provided to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
    </interface>
    <record name="SymbolResolverInterface"
            c:type="IdeSymbolResolverInterface"
            glib:is-gtype-struct-for="SymbolResolver">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_context">
        <callback name="set_context">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_symbol_async">
        <callback name="lookup_symbol_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeSourceLocation.</doc>
              <type name="SourceLocation" c:type="IdeSourceLocation*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve">A callback to execute upon completion.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve">user data for @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_symbol_finish">
        <callback name="lookup_symbol_finish" throws="1">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeSymbol if successful; otherwise %NULL.</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeSymbolResolver.</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve">A #GAsyncResult provided to the callback.</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symbol_tree_async">
        <callback name="get_symbol_tree_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve">A #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symbol_tree_finish">
        <callback name="get_symbol_tree_finish" throws="1">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeSymbolTree; otherwise %NULL and @error is set.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="SymbolTree"
               c:symbol-prefix="symbol_tree"
               c:type="IdeSymbolTree"
               glib:type-name="IdeSymbolTree"
               glib:get-type="ide_symbol_tree_get_type"
               glib:type-struct="SymbolTreeInterface">
      <virtual-method name="get_n_children" invoker="get_n_children">
        <doc xml:space="preserve">Get the number of children of @node. If @node is NULL, the root node
is assumed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An unsigned integer containing the number of children.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An @IdeSymbolTree</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nth_child" invoker="get_nth_child">
        <doc xml:space="preserve">Gets the @nth child node of @node.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #IdeSymbolNode or %NULL.</doc>
          <type name="SymbolNode" c:type="IdeSymbolNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolTree.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an #IdeSymboNode</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve">the nth child to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_n_children"
              c:identifier="ide_symbol_tree_get_n_children">
        <doc xml:space="preserve">Get the number of children of @node. If @node is NULL, the root node
is assumed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An unsigned integer containing the number of children.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An @IdeSymbolTree</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">An #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nth_child"
              c:identifier="ide_symbol_tree_get_nth_child">
        <doc xml:space="preserve">Gets the @nth child node of @node.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #IdeSymbolNode or %NULL.</doc>
          <type name="SymbolNode" c:type="IdeSymbolNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeSymbolTree.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">an #IdeSymboNode</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve">the nth child to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SymbolTreeInterface"
            c:type="IdeSymbolTreeInterface"
            glib:is-gtype-struct-for="SymbolTree">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_n_children">
        <callback name="get_n_children">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">An unsigned integer containing the number of children.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An @IdeSymbolTree</doc>
              <type name="SymbolTree" c:type="IdeSymbolTree*"/>
            </parameter>
            <parameter name="node"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">An #IdeSymbolNode or %NULL.</doc>
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nth_child">
        <callback name="get_nth_child">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">A #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeSymbolTree.</doc>
              <type name="SymbolTree" c:type="IdeSymbolTree*"/>
            </parameter>
            <parameter name="node"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">an #IdeSymboNode</doc>
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
            <parameter name="nth" transfer-ownership="none">
              <doc xml:space="preserve">the nth child to retrieve.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="TagsBuilder"
               c:symbol-prefix="tags_builder"
               c:type="IdeTagsBuilder"
               glib:type-name="IdeTagsBuilder"
               glib:get-type="ide_tags_builder_get_type"
               glib:type-struct="TagsBuilderInterface">
      <virtual-method name="build_async" invoker="build_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
          </instance-parameter>
          <parameter name="directory_or_flie" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="asynchronous" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_finish" invoker="build_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="build_async" c:identifier="ide_tags_builder_build_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
          </instance-parameter>
          <parameter name="directory_or_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_tags_builder_build_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="TagsBuilderInterface"
            c:type="IdeTagsBuilderInterface"
            glib:is-gtype-struct-for="TagsBuilder">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="build_async">
        <callback name="build_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
            </parameter>
            <parameter name="directory_or_flie" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="asynchronous" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_finish">
        <callback name="build_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TagsBuilder" c:type="IdeTagsBuilder*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TemplateBase"
           c:symbol-prefix="template_base"
           c:type="IdeTemplateBase"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeTemplateBase"
           glib:get-type="ide_template_base_get_type"
           glib:type-struct="TemplateBaseClass">
      <method name="add_path" c:identifier="ide_template_base_add_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource"
              c:identifier="ide_template_base_add_resource">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_all_async"
              c:identifier="ide_template_base_expand_all_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_all_finish"
              c:identifier="ide_template_base_expand_all_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locator" c:identifier="ide_template_base_get_locator">
        <doc xml:space="preserve">Fetches the #TmplTemplateLocator used for resolving templates.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #TmplTemplateLocator or %NULL.</doc>
          <type name="Template.TemplateLocator" c:type="TmplTemplateLocator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeTemplateBase</doc>
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ide_template_base_reset">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_locator" c:identifier="ide_template_base_set_locator">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="locator" transfer-ownership="none">
            <type name="Template.TemplateLocator"
                  c:type="TmplTemplateLocator*"/>
          </parameter>
        </parameters>
      </method>
      <property name="locator" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
that should be used to resolve template includes. If %NULL, templates
will not be allowed to include other templates.
directive.</doc>
        <type name="Template.TemplateLocator"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TemplateBaseClass"
            c:type="IdeTemplateBaseClass"
            glib:is-gtype-struct-for="TemplateBase">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="TemplateProvider"
               c:symbol-prefix="template_provider"
               c:type="IdeTemplateProvider"
               glib:type-name="IdeTemplateProvider"
               glib:get-type="ide_template_provider_get_type"
               glib:type-struct="TemplateProviderInterface">
      <virtual-method name="get_project_templates"
                      invoker="get_project_templates">
        <doc xml:space="preserve">Gets a list of templates for this provider.

Plugins should implement this interface to feed #IdeProjectTemplate's into
the project creation workflow.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GList of
  #IdeProjectTemplate instances.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ProjectTemplate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeTemplateProvider</doc>
            <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_project_templates"
              c:identifier="ide_template_provider_get_project_templates">
        <doc xml:space="preserve">Gets a list of templates for this provider.

Plugins should implement this interface to feed #IdeProjectTemplate's into
the project creation workflow.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GList of
  #IdeProjectTemplate instances.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ProjectTemplate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeTemplateProvider</doc>
            <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="TemplateProviderInterface"
            c:type="IdeTemplateProviderInterface"
            glib:is-gtype-struct-for="TemplateProvider">
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_project_templates">
        <callback name="get_project_templates">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #GList of
  #IdeProjectTemplate instances.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ProjectTemplate"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeTemplateProvider</doc>
              <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="ThreadFunc" c:type="IdeThreadFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve">The closure for the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ThreadPool" c:type="IdeThreadPool" disguised="1">
      <function name="push" c:identifier="ide_thread_pool_push">
        <doc xml:space="preserve">Runs the callback on the thread pool thread.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve">the threadpool kind to use.</doc>
            <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A function to call in the worker thread.</doc>
            <type name="ThreadFunc" c:type="IdeThreadFunc"/>
          </parameter>
          <parameter name="func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_task" c:identifier="ide_thread_pool_push_task">
        <doc xml:space="preserve">This pushes a task to be executed on a worker thread based on the task kind as denoted by
@kind. Some tasks will be placed on special work queues or throttled based on proirity.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve">The task kind.</doc>
            <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
          </parameter>
          <parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">A #GTask to execute.</doc>
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve">The thread worker to execute for @task.</doc>
            <type name="Gio.TaskThreadFunc" c:type="GTaskThreadFunc"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="ThreadPoolKind"
                 glib:type-name="IdeThreadPoolKind"
                 glib:get-type="ide_thread_pool_kind_get_type"
                 c:type="IdeThreadPoolKind">
      <member name="compiler"
              value="0"
              c:identifier="IDE_THREAD_POOL_COMPILER"
              glib:nick="compiler">
      </member>
      <member name="indexer"
              value="1"
              c:identifier="IDE_THREAD_POOL_INDEXER"
              glib:nick="indexer">
      </member>
      <member name="last"
              value="2"
              c:identifier="IDE_THREAD_POOL_LAST"
              glib:nick="last">
      </member>
    </enumeration>
    <interface name="Transfer"
               c:symbol-prefix="transfer"
               c:type="IdeTransfer"
               glib:type-name="IdeTransfer"
               glib:get-type="ide_transfer_get_type"
               glib:type-struct="TransferInterface">
      <virtual-method name="execute_async" invoker="execute_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute_finish"
                      invoker="execute_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="execute_async" c:identifier="ide_transfer_execute_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_transfer_execute_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress" c:identifier="ide_transfer_get_progress">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_completed" c:identifier="ide_transfer_has_completed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="icon-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="status" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="TransferInterface"
            c:type="IdeTransferInterface"
            glib:is-gtype-struct-for="Transfer">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="execute_async">
        <callback name="execute_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Transfer" c:type="IdeTransfer*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute_finish">
        <callback name="execute_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Transfer" c:type="IdeTransfer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TransferManager"
           c:symbol-prefix="transfer_manager"
           c:type="IdeTransferManager"
           parent="Object"
           glib:type-name="IdeTransferManager"
           glib:get-type="ide_transfer_manager_get_type"
           glib:type-struct="TransferManagerClass">
      <implements name="Gio.ListModel"/>
      <method name="cancel" c:identifier="ide_transfer_manager_cancel">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
          <parameter name="transfer" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_all" c:identifier="ide_transfer_manager_cancel_all">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ide_transfer_manager_clear">
        <doc xml:space="preserve">Removes all transfers from the manager that are completed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_active"
              c:identifier="ide_transfer_manager_get_has_active">
        <doc xml:space="preserve">Gets if there are active transfers.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if there are active transfers.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_active"
              c:identifier="ide_transfer_manager_get_max_active">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_transfer_manager_get_progress">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="queue" c:identifier="ide_transfer_manager_queue">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
          <parameter name="transfer" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_active"
              c:identifier="ide_transfer_manager_set_max_active">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
          <parameter name="max_active" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-active" transfer-ownership="none">
        <doc xml:space="preserve">If there are transfers active, this will be set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="max-active" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Sets the max number of transfers to have active at one time.
Set to zero for a sensible default.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="progress" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="transfer-completed" when="last">
        <doc xml:space="preserve">This signal is emitted when a transfer has completed successfully.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transfer" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeTransfer</doc>
            <type name="Transfer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TransferManagerClass"
            c:type="IdeTransferManagerClass"
            glib:is-gtype-struct-for="TransferManager">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="TransferRow"
           c:symbol-prefix="transfer_row"
           c:type="IdeTransferRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="IdeTransferRow"
           glib:get-type="ide_transfer_row_get_type"
           glib:type-struct="TransferRowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <method name="get_transfer" c:identifier="ide_transfer_row_get_transfer">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeTransfer or %NULL.</doc>
          <type name="Transfer" c:type="IdeTransfer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferRow" c:type="IdeTransferRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pump" c:identifier="ide_transfer_row_pump">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferRow" c:type="IdeTransferRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_transfer" c:identifier="ide_transfer_row_set_transfer">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferRow" c:type="IdeTransferRow*"/>
          </instance-parameter>
          <parameter name="transfer" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </parameter>
        </parameters>
      </method>
      <property name="transfer" writable="1" transfer-ownership="none">
        <type name="Transfer"/>
      </property>
      <glib:signal name="cancelled" when="last">
        <doc xml:space="preserve">This signal is emitted when the cancel button is clicked.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TransferRowClass"
            c:type="IdeTransferRowClass"
            glib:is-gtype-struct-for="TransferRow">
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <class name="TransfersButton"
           c:symbol-prefix="transfers_button"
           c:type="IdeTransfersButton"
           parent="Gtk.MenuButton"
           glib:type-name="IdeTransfersButton"
           glib:get-type="ide_transfers_button_get_type"
           glib:type-struct="TransfersButtonClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_transfers_button_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="TransfersButtonClass"
            c:type="IdeTransfersButtonClass"
            glib:is-gtype-struct-for="TransfersButton">
      <field name="parent_class">
        <type name="Gtk.MenuButtonClass" c:type="GtkMenuButtonClass"/>
      </field>
    </record>
    <class name="TransfersProgressIcon"
           c:symbol-prefix="transfers_progress_icon"
           c:type="IdeTransfersProgressIcon"
           parent="Gtk.DrawingArea"
           glib:type-name="IdeTransfersProgressIcon"
           glib:get-type="ide_transfers_progress_icon_get_type"
           glib:type-struct="TransfersProgressIconClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_transfers_progress_icon_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="ide_transfers_progress_icon_get_progress">
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransfersProgressIcon"
                  c:type="IdeTransfersProgressIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="ide_transfers_progress_icon_set_progress">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransfersProgressIcon"
                  c:type="IdeTransfersProgressIcon*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress" writable="1" transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="TransfersProgressIconClass"
            c:type="IdeTransfersProgressIconClass"
            glib:is-gtype-struct-for="TransfersProgressIcon">
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <class name="Tree"
           c:symbol-prefix="tree"
           c:type="IdeTree"
           parent="Gtk.TreeView"
           glib:type-name="IdeTree"
           glib:get-type="ide_tree_get_type"
           glib:type-struct="TreeClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <virtual-method name="action">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="action_group" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate_popup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_builder" c:identifier="ide_tree_add_builder">
        <doc xml:space="preserve">Add a builder to the tree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree.</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeBuilder to add.</doc>
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_to_node" c:identifier="ide_tree_expand_to_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_child_node" c:identifier="ide_tree_find_child_node">
        <doc xml:space="preserve">Searches through the direct children of @node for a matching child.
@find_func should return %TRUE if the child matches, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="find_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A callback to locate the child</doc>
            <type name="TreeFindFunc" c:type="IdeTreeFindFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @find_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_custom" c:identifier="ide_tree_find_custom">
        <doc xml:space="preserve">Walks the entire tree looking for the first item that matches given
@equal_func and @key.

The first parameter to @equal_func will always be @key.
The second parameter will be the nodes #IdeTreeNode:item property.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="equal_func" transfer-ownership="none" scope="call">
            <doc xml:space="preserve">A #GEqualFunc</doc>
            <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
          </parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the key for @equal_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_item" c:identifier="ide_tree_find_item">
        <doc xml:space="preserve">Finds a #IdeTreeNode with an item property matching @item.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree.</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GObject or %NULL.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context_menu" c:identifier="ide_tree_get_context_menu">
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #GMenuModel or %NULL.</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="ide_tree_get_root">
        <doc xml:space="preserve">Retrieves the root node of the tree. The root node is not a visible node
in the self, but a placeholder for all other builders to build upon.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeTreeNode or %NULL.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected" c:identifier="ide_tree_get_selected">
        <doc xml:space="preserve">Gets the currently selected node in the tree.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #IdeTreeNode.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree.</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_icons" c:identifier="ide_tree_get_show_icons">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rebuild" c:identifier="ide_tree_rebuild">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_builder" c:identifier="ide_tree_remove_builder">
        <doc xml:space="preserve">Removes a builder from the tree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree.</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeBuilder to remove.</doc>
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_node" c:identifier="ide_tree_scroll_to_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_context_menu" c:identifier="ide_tree_set_context_menu">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="context_menu" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter" c:identifier="ide_tree_set_filter">
        <doc xml:space="preserve">Sets the filter function to be used to determine visability of a tree node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="filter_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve">A callback to determien visibility.</doc>
            <type name="TreeFilterFunc" c:type="IdeTreeFilterFunc"/>
          </parameter>
          <parameter name="filter_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data for @filter_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="filter_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve">Destroy notify for @filter_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root" c:identifier="ide_tree_set_root">
        <doc xml:space="preserve">Sets the root node of the #IdeTree widget. This is used to build
the items within the treeview. The item itself will not be added
to the self, but the direct children will be.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTree.</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_icons" c:identifier="ide_tree_set_show_icons">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="show_icons" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="context-menu" writable="1" transfer-ownership="none">
        <type name="Gio.MenuModel"/>
      </property>
      <property name="root" writable="1" transfer-ownership="none">
        <type name="TreeNode"/>
      </property>
      <property name="selection" writable="1" transfer-ownership="none">
        <type name="TreeNode"/>
      </property>
      <property name="show-icons" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.TreeView" c:type="GtkTreeView"/>
      </field>
      <glib:signal name="action" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="populate-popup" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="TreeBuilder"
           c:symbol-prefix="tree_builder"
           c:type="IdeTreeBuilder"
           parent="GObject.InitiallyUnowned"
           glib:type-name="IdeTreeBuilder"
           glib:get-type="ide_tree_builder_get_type"
           glib:type-struct="TreeBuilderClass">
      <virtual-method name="added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_activated">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_popup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="menu" transfer-ownership="none">
            <type name="Gio.Menu" c:type="GMenu*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_selected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_unselected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_tree" c:identifier="ide_tree_builder_get_tree">
        <doc xml:space="preserve">Gets the tree that owns the builder.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">A #IdeTree or %NULL.</doc>
          <type name="Tree" c:type="IdeTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeBuilder.</doc>
            <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="tree" transfer-ownership="none">
        <type name="Tree"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.InitiallyUnowned" c:type="GInitiallyUnowned"/>
      </field>
      <glib:signal name="added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tree"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-node" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-activated" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-popup" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gio.Menu"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-selected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="node-unselected" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TreeNode"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tree"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TreeBuilderClass"
            c:type="IdeTreeBuilderClass"
            glib:is-gtype-struct-for="TreeBuilder">
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
      <field name="added">
        <callback name="added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_node">
        <callback name="build_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_activated">
        <callback name="node_activated">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_selected">
        <callback name="node_selected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_unselected">
        <callback name="node_unselected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_popup">
        <callback name="node_popup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="TreeBuilder" c:type="IdeTreeBuilder*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
            <parameter name="menu" transfer-ownership="none">
              <type name="Gio.Menu" c:type="GMenu*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TreeClass"
            c:type="IdeTreeClass"
            glib:is-gtype-struct-for="Tree">
      <field name="parent_class">
        <type name="Gtk.TreeViewClass" c:type="GtkTreeViewClass"/>
      </field>
      <field name="action">
        <callback name="action">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
            <parameter name="action_group" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="action_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="param" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_popup">
        <callback name="populate_popup">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
            <parameter name="widget" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="TreeFilterFunc" c:type="IdeTreeFilterFunc">
      <doc xml:space="preserve">Callback to check if @node should be visible.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @node should be visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <type name="Tree" c:type="IdeTree*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="TreeFindFunc" c:type="IdeTreeFindFunc">
      <doc xml:space="preserve">Callback to check @child, a child of @node, matches a lookup
request. Returns %TRUE if @child matches, %FALSE if not.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @child matched</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="tree" transfer-ownership="none">
          <type name="Tree" c:type="IdeTree*"/>
        </parameter>
        <parameter name="node" transfer-ownership="none">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TreeNode"
           c:symbol-prefix="tree_node"
           c:type="IdeTreeNode"
           parent="GObject.InitiallyUnowned"
           glib:type-name="IdeTreeNode"
           glib:get-type="ide_tree_node_get_type"
           glib:type-struct="TreeNodeClass">
      <constructor name="new" c:identifier="ide_tree_node_new">
        <doc xml:space="preserve">Creates a new #IdeTreeNode instance. This is handy for situations where you
do not want to subclass #IdeTreeNode.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #IdeTreeNode</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ide_tree_node_append">
        <doc xml:space="preserve">Appends @child to the list of children owned by @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="collapse" c:identifier="ide_tree_node_collapse">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="expand" c:identifier="ide_tree_node_expand">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="expand_ancestors" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_area" c:identifier="ide_tree_node_get_area">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="area" transfer-ownership="none">
            <type name="Gdk.Rectangle" c:type="GdkRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children_possible"
              c:identifier="ide_tree_node_get_children_possible">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded" c:identifier="ide_tree_node_get_expanded">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="ide_tree_node_get_icon_name">
        <doc xml:space="preserve">Fetches the icon-name of the icon to display, or NULL for no icon.</doc>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item" c:identifier="ide_tree_node_get_item">
        <doc xml:space="preserve">Gets a #GObject for the node, if one was set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GObject or %NULL.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter" c:identifier="ide_tree_node_get_iter">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="ide_tree_node_get_parent">
        <doc xml:space="preserve">Retrieves the parent #IdeTreeNode for @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #IdeTreeNode.</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_tree_node_get_path">
        <doc xml:space="preserve">Gets a #GtkTreePath for @node.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GtkTreePath if successful; otherwise %NULL.</doc>
          <type name="Gtk.TreePath" c:type="GtkTreePath*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="ide_tree_node_get_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="ide_tree_node_get_tree">
        <doc xml:space="preserve">Fetches the #IdeTree instance that owns the node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #IdeTree.</doc>
          <type name="Tree" c:type="IdeTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_dim_label"
              c:identifier="ide_tree_node_get_use_dim_label">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="ide_tree_node_get_use_markup">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_sorted" c:identifier="ide_tree_node_insert_sorted">
        <doc xml:space="preserve">Inserts a @child as a child of @node, sorting it among the other children.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">A compare func to compare nodes.</doc>
            <type name="TreeNodeCompareFunc" c:type="IdeTreeNodeCompareFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @compare_func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_tree_node_invalidate">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_root" c:identifier="ide_tree_node_is_root">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="ide_tree_node_prepend">
        <doc xml:space="preserve">Prepends @child to the list of children owned by @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_tree_node_remove">
        <doc xml:space="preserve">Removes @child from the list of children owned by @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select" c:identifier="ide_tree_node_select">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_children_possible"
              c:identifier="ide_tree_node_set_children_possible">
        <doc xml:space="preserve">If the node has not yet been built, setting this to %TRUE will add a
dummy child node. This dummy node will be removed when when the node
is built by the registered #IdeTreeBuilder instances.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="children_possible" transfer-ownership="none">
            <doc xml:space="preserve">If the node has children.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="ide_tree_node_set_icon_name">
        <doc xml:space="preserve">Sets the icon name of the node. This is displayed in the pixbuf
cell of the IdeTree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The icon name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item" c:identifier="ide_tree_node_set_item">
        <doc xml:space="preserve">An optional object to associate with the node. This is handy to save needing
to subclass the #IdeTreeNode class.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">A #GObject.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="ide_tree_node_set_text">
        <doc xml:space="preserve">Sets the text of the node. This is displayed in the text
cell of the IdeTree.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeTreeNode.</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">The node text.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_dim_label"
              c:identifier="ide_tree_node_set_use_dim_label">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="use_dim_label" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="ide_tree_node_set_use_markup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_popover" c:identifier="ide_tree_node_show_popover">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="popover" transfer-ownership="none">
            <type name="Gtk.Popover" c:type="GtkPopover*"/>
          </parameter>
        </parameters>
      </method>
      <property name="children-possible"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property allows for more lazy loading of nodes.

When a node becomes visible, we normally build it's children nodes
so that we know if we need an expansion arrow. However, that can
be expensive when rendering directories with lots of subdirectories.

Using this, you can always show an arrow without building the children
and simply hide the arrow if there were in fact no children (upon
expansion).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">An icon-name to display on the row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="item" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">An optional #GObject to associate with the node.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="parent" transfer-ownership="none">
        <doc xml:space="preserve">The parent of the node.</doc>
        <type name="TreeNode"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Text to display on the tree node.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tree" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The tree the node belongs to.</doc>
        <type name="Tree"/>
      </property>
      <property name="use-dim-label" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-markup" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">If the "text" property includes #GMarkup.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TreeNodeClass"
            c:type="IdeTreeNodeClass"
            glib:is-gtype-struct-for="TreeNode">
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
    </record>
    <callback name="TreeNodeCompareFunc" c:type="IdeTreeNodeCompareFunc">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="a" transfer-ownership="none">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="b" transfer-ownership="none">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="UnsavedFile"
            c:type="IdeUnsavedFile"
            glib:type-name="IdeUnsavedFile"
            glib:get-type="ide_unsaved_file_get_type"
            c:symbol-prefix="unsaved_file">
      <method name="get_content" c:identifier="ide_unsaved_file_get_content">
        <doc xml:space="preserve">Gets the contents of the unsaved file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GBytes containing the unsaved file content.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeUnsavedFile.</doc>
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_unsaved_file_get_file">
        <doc xml:space="preserve">Retrieves the underlying file represented by @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sequence" c:identifier="ide_unsaved_file_get_sequence">
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_path"
              c:identifier="ide_unsaved_file_get_temp_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="persist"
              c:identifier="ide_unsaved_file_persist"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_unsaved_file_ref">
        <return-value transfer-ownership="full">
          <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_unsaved_file_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="UnsavedFiles"
           c:symbol-prefix="unsaved_files"
           c:type="IdeUnsavedFiles"
           parent="Object"
           glib:type-name="IdeUnsavedFiles"
           glib:get-type="ide_unsaved_files_get_type"
           glib:type-struct="UnsavedFilesClass">
      <method name="clear" c:identifier="ide_unsaved_files_clear">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="ide_unsaved_files_contains">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sequence"
              c:identifier="ide_unsaved_files_get_sequence">
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unsaved_file"
              c:identifier="ide_unsaved_files_get_unsaved_file">
        <doc xml:space="preserve">Retrieves the unsaved file content for a particular file. If no unsaved
file content is registered, %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeUnsavedFile or %NULL.</doc>
          <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_unsaved_files_remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_async"
              c:identifier="ide_unsaved_files_restore_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_finish"
              c:identifier="ide_unsaved_files_restore_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="ide_unsaved_files_save_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_unsaved_files_save_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_array" c:identifier="ide_unsaved_files_to_array">
        <doc xml:space="preserve">This retrieves all of the unsaved file buffers known to the context.
These are handy if you need to pass modified state to parsers such as
clang.

Call g_ptr_array_unref() on the resulting #GPtrArray when no longer in use.

If you would like to hold onto an unsaved file instance, call
ide_unsaved_file_ref() to increment it's reference count.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">A #GPtrArray
  containing #IdeUnsavedFile elements.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UnsavedFile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ide_unsaved_files_update">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="UnsavedFilesClass"
            c:type="IdeUnsavedFilesClass"
            glib:is-gtype-struct-for="UnsavedFiles">
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="Uri"
            c:type="IdeUri"
            glib:type-name="IdeUri"
            glib:get-type="ide_uri_get_type"
            c:symbol-prefix="uri">
      <doc xml:space="preserve">A parsed URI. The exact manner in which a URI string is broken down
into a #IdeUri depends on the #IdeUriParseFlags that were used when
creating it.

@scheme is always set, and always lowercase, even if @uri_string
contains uppercase letters in the scheme.

@host will be set if @uri_string has an "authority" component (that
is, if the scheme is followed by "://" rather than just ":"). If
the URI was not parsed with %IDE_URI_PARSE_NON_DNS, @host will be
assumed to be an internet hostname (or IP address) and will be
decoded accordingly.

The generic URI syntax allows a "userinfo" component before the
hostname. Some URI schemes further break the userinfo down into a
username, a password (separated from the username by a colon),
and/or additional parameters (separated by a semicolon). If you
parse the URI with %IDE_URI_PARSE_PASSWORD and/or
%IDE_URI_PARSE_AUTH_PARAMS, then the @password and @auth_params
fields will be filled in (assuming they were present). Otherwise,
the entire userinfo component will be put into the @user field.

By default, @path, @query, and @fragment are stored undecoded,
because with some schemes (such as "http"), it is possible that the
encoded and unencoded forms of a character (eg,
"&lt;literal&gt;/&lt;/literal&gt;" and "&lt;literal&gt;%&lt;!-- --&gt;2F&lt;/literal&gt;") may
have different meanings. On the other hand, with schemes that do
not use URIs as protocol elements (such as "ftp"), that sort of
confusion is not possible, and it is always safe (and useful) to
decode the URI fully. You can parse the URI with
%IDE_URI_PARSE_DECODED if you want @path, @query, and @fragment to be
decoded.

Note however that all of the (string) fields in a #IdeUri are
guaranteed to be valid UTF-8 strings, so if @uri_string contained
encoded non-UTF-8 data, it will normally be left %&lt;!-- --&gt;-encoded
in the corresponding #IdeUri fields, even if the #IdeUriParseFlags
would otherwise call for decoding it. You can use the flag
%IDE_URI_PARSE_UTF8_ONLY to cause this case to be an error instead.</doc>
      <constructor name="new" c:identifier="ide_uri_new" throws="1">
        <doc xml:space="preserve">Parses @uri_string according to @flags. If the result is not a
valid absolute URI, it will be discarded, and an error returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #IdeUri.</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve">a string representing an absolute URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">flags describing how to parse @uri_string</doc>
            <type name="UriParseFlags" c:type="IdeUriParseFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file" c:identifier="ide_uri_new_from_file">
        <doc xml:space="preserve">Creates a new #IdeUri from the uri provided by @file.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly allcoated #IdeUri.</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">A #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="ide_uri_copy">
        <doc xml:space="preserve">Copies @uri</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a copy of @uri</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auth_params" c:identifier="ide_uri_get_auth_params">
        <doc xml:space="preserve">Gets @uri's authentication parameters. Depending on the URI scheme,
ide_uri_parse_params() may be useful for further parsing this
information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's authentication parameters.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fragment" c:identifier="ide_uri_get_fragment">
        <doc xml:space="preserve">Gets @uri's fragment, which may contain %&lt;!-- --&gt;-encoding,
depending on the flags with which @uri was parsed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's fragment.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="ide_uri_get_host">
        <doc xml:space="preserve">Gets @uri's host. If @uri contained an IPv6 address literal, this
value will not include the brackets that are required by the URI
syntax.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's host.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password" c:identifier="ide_uri_get_password">
        <doc xml:space="preserve">Gets @uri's password. If @uri was not parsed with
%IDE_URI_PARSE_PASSWORD, this will always be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's password.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_uri_get_path">
        <doc xml:space="preserve">Gets @uri's path, which may contain %&lt;!-- --&gt;-encoding, depending
on the flags with which @uri was parsed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="ide_uri_get_port">
        <doc xml:space="preserve">Gets @uri's port.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's port, or %0 if it was unset</doc>
          <type name="gushort" c:type="gushort"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_query" c:identifier="ide_uri_get_query">
        <doc xml:space="preserve">Gets @uri's query, which may contain %&lt;!-- --&gt;-encoding, depending
on the flags with which @uri was parsed.

For queries consisting of a series of "name=value" parameters,
ide_uri_parse_params() may be useful.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's query.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scheme" c:identifier="ide_uri_get_scheme">
        <doc xml:space="preserve">Gets @uri's scheme.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's scheme.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="ide_uri_get_user">
        <doc xml:space="preserve">Gets @uri's user. If @uri was parsed with %IDE_URI_PARSE_PASSWORD or
%IDE_URI_PARSE_AUTH_PARAMS, this is the string that appears before the
password and parameters in the userinfo. If not, then the entire
userinfo is considered the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">@uri's user.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_file" c:identifier="ide_uri_is_file">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_relative"
              c:identifier="ide_uri_new_relative"
              throws="1">
        <doc xml:space="preserve">Parses @uri_string according to @flags and, if it is a relative
URI, merges it with @base_uri. If the result is not a valid
absolute URI, it will be discarded, and an error returned.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #IdeUri.</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="base_uri"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve">a base URI</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve">a string representing a relative or absolute URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">flags describing how to parse @uri_string</doc>
            <type name="UriParseFlags" c:type="IdeUriParseFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_uri_ref">
        <doc xml:space="preserve">Increments the reference count of @uri by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">uri</doc>
          <type name="Uri" c:type="IdeUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_auth_params" c:identifier="ide_uri_set_auth_params">
        <doc xml:space="preserve">Sets @uri's authentication parameters to @auth_params.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="auth_params" transfer-ownership="none">
            <doc xml:space="preserve">the authentication parameters, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fragment" c:identifier="ide_uri_set_fragment">
        <doc xml:space="preserve">Sets @uri's fragment to @fragment, which is assumed to have been
%&lt;!-- --&gt;-encoded by the caller. See ide_uri_set_path() for more
details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="fragment" transfer-ownership="none">
            <doc xml:space="preserve">the (%&lt;!-- --&gt;-encoded) fragment</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="ide_uri_set_host">
        <doc xml:space="preserve">Sets @uri's host to @host.

If @host is an IPv6 IP address, it should not include the brackets
required by the URI syntax; they will be added automatically when
converting @uri to a string.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve">the hostname or IP address, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password" c:identifier="ide_uri_set_password">
        <doc xml:space="preserve">Sets @uri's password to @password.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">the password, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="ide_uri_set_path">
        <doc xml:space="preserve">Sets @uri's path to @path, which is assumed to have been
appropriately %&lt;!-- --&gt;-encoded. In particular, this means that if
you want to include a literal percent sign the path, you must write
it as "%&lt;!-- --&gt;25". That being said, if @path contains an
unencoded '?' or '#' character, it will get encoded, since
otherwise converting @uri to a string and then back to a #IdeUri
again would give a different result.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">the (%&lt;!-- --&gt;-encoded) path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="ide_uri_set_port">
        <doc xml:space="preserve">Sets @uri's port to @port. If @port is 0, it will not be output
when calling ide_uri_to_string().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve">the port, or %0</doc>
            <type name="gushort" c:type="gushort"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_query" c:identifier="ide_uri_set_query">
        <doc xml:space="preserve">Sets @uri's query to @query, which is assumed to have been
%&lt;!-- --&gt;-encoded by the caller. See ide_uri_set_path() for more
details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">the (%&lt;!-- --&gt;-encoded) query</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scheme" c:identifier="ide_uri_set_scheme">
        <doc xml:space="preserve">Sets @uri's scheme to @scheme.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve">the URI scheme</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="ide_uri_set_user">
        <doc xml:space="preserve">Sets @uri's user to @user. See ide_uri_get_user() for a description
of how this interacts with various parsing flags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve">the username, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_file" c:identifier="ide_uri_to_file">
        <doc xml:space="preserve">Creates a #GFile that represents the resource @uri.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">A #GFile or %NULL upon failure.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="ide_uri_to_string">
        <doc xml:space="preserve">Returns a string representing @uri.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string representing @uri, which the caller must free.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">flags describing how to convert @uri</doc>
            <type name="UriToStringFlags" c:type="IdeUriToStringFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_uri_unref">
        <doc xml:space="preserve">Decrements the reference count of @uri by 1. If the reference count
reaches zero, the structure will be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">a #IdeUri</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="build" c:identifier="ide_uri_build">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="scheme" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="userinfo" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fragment" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="ide_uri_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="parse_host" c:identifier="ide_uri_parse_host" throws="1">
        <doc xml:space="preserve">Utility function for parsing "network" URIs. This extracts just the
scheme, host, and port from @uri_string. All three out parameters
are mandatory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE on failure.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve">a string containing a network URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">flags for parsing @uri_string</doc>
            <type name="UriParseFlags" c:type="IdeUriParseFlags"/>
          </parameter>
          <parameter name="scheme"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">on return, will contain @uri_string's URI scheme</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="host"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">on return, will contain @uri_string's decoded hostname</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="port"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">on return, will contain @uri_string's port, or %0</doc>
            <type name="gushort" c:type="gushort*"/>
          </parameter>
        </parameters>
      </function>
      <function name="parse_params" c:identifier="ide_uri_parse_params">
        <doc xml:space="preserve">Many URI schemes include one or more attribute/value pairs
as part of the URI value. This method can be used to parse them
into a hash table.

The @params string is assumed to still be %&lt;!-- --&gt;-encoded, but
the returned values will be fully decoded. (Thus it is possible
that the returned values may contain '=' or @separator, if the
value was encoded in the input.) Invalid %&lt;!-- --&gt;-encoding is
treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
(However, if @params is the path or query string from a #IdeUri that
was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
does not contain any invalid encoding.)</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a hash table
of attribute/value pairs. Both names and values will be fully-decoded. If
@params cannot be parsed (eg, it contains two @separator characters in a
row), then %NULL is returned.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve">a string containing "attribute=value" parameters</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve">the length of @params, or -1 if it is NUL-terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="separator" transfer-ownership="none">
            <doc xml:space="preserve">the separator character between parameters.
  (usually ';', but sometimes '&amp;')</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
          <parameter name="case_insensitive" transfer-ownership="none">
            <doc xml:space="preserve">whether to match parameter names case-insensitively</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="split" c:identifier="ide_uri_split">
        <doc xml:space="preserve">Parses @uri_string more-or-less according to the generic grammar of
RFC 3986 ("more" if @strict is %TRUE, "less" if %FALSE), and
outputs the pieces into the provided variables. This is a low-level
method that does not do any pre- or post-processing of @uri_string,
and is "garbage in, garbage out"; it just splits @uri_string into
pieces at the appropriate punctuation characters (consuming
delimiters as appropriate), and returns the pieces. Components that
are not present in @uri_string will be set to %NULL (but note that
the path is always present, though it may be an empty string).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve">a string containing a relative or absolute URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="strict" transfer-ownership="none">
            <doc xml:space="preserve">whether to parse @uri_string strictly</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="scheme"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the scheme, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="userinfo"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the userinfo, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="host"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the host, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="port"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the port, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the path, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="query"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the query, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="fragment"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve">on return, contains the fragment, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="UriError"
                 c:type="IdeUriError"
                 glib:error-domain="ide-uri-error-quark">
      <doc xml:space="preserve">Error codes returned by #IdeUri methods.</doc>
      <member name="misc" value="0" c:identifier="IDE_URI_ERROR_MISC">
      </member>
      <member name="bad_scheme"
              value="1"
              c:identifier="IDE_URI_ERROR_BAD_SCHEME">
      </member>
      <member name="bad_user" value="2" c:identifier="IDE_URI_ERROR_BAD_USER">
      </member>
      <member name="bad_password"
              value="3"
              c:identifier="IDE_URI_ERROR_BAD_PASSWORD">
      </member>
      <member name="bad_auth_params"
              value="4"
              c:identifier="IDE_URI_ERROR_BAD_AUTH_PARAMS">
      </member>
      <member name="bad_host" value="5" c:identifier="IDE_URI_ERROR_BAD_HOST">
      </member>
      <member name="bad_port" value="6" c:identifier="IDE_URI_ERROR_BAD_PORT">
      </member>
      <member name="bad_path" value="7" c:identifier="IDE_URI_ERROR_BAD_PATH">
      </member>
      <member name="bad_query"
              value="8"
              c:identifier="IDE_URI_ERROR_BAD_QUERY">
      </member>
      <member name="bad_fragment"
              value="9"
              c:identifier="IDE_URI_ERROR_BAD_FRAGMENT">
      </member>
    </enumeration>
    <bitfield name="UriParseFlags" c:type="IdeUriParseFlags">
      <doc xml:space="preserve">Flags that control how a URI string is parsed (or re-parsed).</doc>
      <member name="strict" value="1" c:identifier="IDE_URI_PARSE_STRICT">
        <doc xml:space="preserve">Parse the URI strictly according to the RFC
    3986 grammar.</doc>
      </member>
      <member name="html5" value="2" c:identifier="IDE_URI_PARSE_HTML5">
        <doc xml:space="preserve">Parse the URI according to the HTML5 web
    address parsing rules.</doc>
      </member>
      <member name="no_iri" value="4" c:identifier="IDE_URI_PARSE_NO_IRI">
        <doc xml:space="preserve">Disallow Internationalized URIs; return an
    error if the URI contains non-ASCII characters</doc>
      </member>
      <member name="password" value="8" c:identifier="IDE_URI_PARSE_PASSWORD">
        <doc xml:space="preserve">Split the userinfo into user and password,
    separated by ':'.</doc>
      </member>
      <member name="auth_params"
              value="16"
              c:identifier="IDE_URI_PARSE_AUTH_PARAMS">
        <doc xml:space="preserve">Split the userinfo into user/password and
    parameters, separated by ';'.</doc>
      </member>
      <member name="non_dns" value="32" c:identifier="IDE_URI_PARSE_NON_DNS">
        <doc xml:space="preserve">Do not parse the host as a DNS host/IP address.
    (Eg, for smb URIs with NetBIOS hostnames).</doc>
      </member>
      <member name="decoded" value="64" c:identifier="IDE_URI_PARSE_DECODED">
        <doc xml:space="preserve">Decode even reserved %&lt;!-- --&gt;encoded
    characters in the URI (unless this would result in non-UTF8
    strings). Using this flag means that you cannot reliably
    convert the parsed URI back to string form with
    ide_uri_to_string().</doc>
      </member>
      <member name="utf8_only"
              value="128"
              c:identifier="IDE_URI_PARSE_UTF8_ONLY">
        <doc xml:space="preserve">Return an error if non-UTF8 characters are
    encountered in the URI.</doc>
      </member>
    </bitfield>
    <bitfield name="UriToStringFlags" c:type="IdeUriToStringFlags">
      <member name="auth_params"
              value="1"
              c:identifier="IDE_URI_HIDE_AUTH_PARAMS">
      </member>
      <member name="fragment" value="2" c:identifier="IDE_URI_HIDE_FRAGMENT">
      </member>
    </bitfield>
    <interface name="Vcs"
               c:symbol-prefix="vcs"
               c:type="IdeVcs"
               glib:type-name="IdeVcs"
               glib:get-type="ide_vcs_get_type"
               glib:type-struct="VcsInterface">
      <prerequisite name="Object"/>
      <function name="new_async" c:identifier="ide_vcs_new_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_finish" c:identifier="ide_vcs_new_finish" throws="1">
        <doc xml:space="preserve">Completes a call to ide_vcs_new_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An #IdeVcs.</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_branch_name" invoker="get_branch_name">
        <doc xml:space="preserve">Retrieves the name of the branch in the current working directory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the branch name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_buffer_change_monitor"
                      invoker="get_buffer_change_monitor">
        <doc xml:space="preserve">Gets an #IdeBufferChangeMonitor for the buffer provided. If the #IdeVcs implementation does not
support change monitoring, or cannot for the current file, then %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeBufferChangeMonitor or %NULL.</doc>
          <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_config" invoker="get_config">
        <doc xml:space="preserve">Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
support access to configuration, then %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeVcsConfig or %NULL.</doc>
          <type name="VcsConfig" c:type="IdeVcsConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_working_directory"
                      invoker="get_working_directory">
        <doc xml:space="preserve">Retrieves the working directory for the context. This is the root of where
the project files exist.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeVcs.</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_ignored" invoker="is_ignored" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_changed" c:identifier="ide_vcs_emit_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_branch_name" c:identifier="ide_vcs_get_branch_name">
        <doc xml:space="preserve">Retrieves the name of the branch in the current working directory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string containing the branch name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffer_change_monitor"
              c:identifier="ide_vcs_get_buffer_change_monitor">
        <doc xml:space="preserve">Gets an #IdeBufferChangeMonitor for the buffer provided. If the #IdeVcs implementation does not
support change monitoring, or cannot for the current file, then %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeBufferChangeMonitor or %NULL.</doc>
          <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="ide_vcs_get_config">
        <doc xml:space="preserve">Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
support access to configuration, then %NULL is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">An #IdeVcsConfig or %NULL.</doc>
          <type name="VcsConfig" c:type="IdeVcsConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_vcs_get_priority">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_working_directory"
              c:identifier="ide_vcs_get_working_directory">
        <doc xml:space="preserve">Retrieves the working directory for the context. This is the root of where
the project files exist.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeVcs.</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ignored" c:identifier="ide_vcs_is_ignored" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="branch-name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="context"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="working-directory" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve">The "changed" signal should be emitted when the VCS has detected a change
to the underlying VCS storage. This can be used by consumers to reload
their respective data structures.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <interface name="VcsConfig"
               c:symbol-prefix="vcs_config"
               c:type="IdeVcsConfig"
               glib:type-name="IdeVcsConfig"
               glib:get-type="ide_vcs_config_get_type"
               glib:type-struct="VcsConfigInterface">
      <virtual-method name="get_config" invoker="get_config">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_config" invoker="set_config">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_config" c:identifier="ide_vcs_config_get_config">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config" c:identifier="ide_vcs_config_set_config">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VcsConfigInterface"
            c:type="IdeVcsConfigInterface"
            glib:is-gtype-struct-for="VcsConfig">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_config">
        <callback name="get_config">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsConfig" c:type="IdeVcsConfig*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_config">
        <callback name="set_config">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsConfig" c:type="IdeVcsConfig*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="VcsConfigType"
                 glib:type-name="IdeVcsConfigType"
                 glib:get-type="ide_vcs_config_type_get_type"
                 c:type="IdeVcsConfigType">
      <member name="full_name"
              value="0"
              c:identifier="IDE_VCS_CONFIG_FULL_NAME"
              glib:nick="full-name">
      </member>
      <member name="email"
              value="1"
              c:identifier="IDE_VCS_CONFIG_EMAIL"
              glib:nick="email">
      </member>
    </enumeration>
    <interface name="VcsInitializer"
               c:symbol-prefix="vcs_initializer"
               c:type="IdeVcsInitializer"
               glib:type-name="IdeVcsInitializer"
               glib:get-type="ide_vcs_initializer_get_type"
               glib:type-struct="VcsInitializerInterface">
      <virtual-method name="get_title" invoker="get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initialize_async" invoker="initialize_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initialize_finish"
                      invoker="initialize_finish"
                      throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_title" c:identifier="ide_vcs_initializer_get_title">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="initialize_async"
              c:identifier="ide_vcs_initializer_initialize_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="initialize_finish"
              c:identifier="ide_vcs_initializer_initialize_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VcsInitializerInterface"
            c:type="IdeVcsInitializerInterface"
            glib:is-gtype-struct-for="VcsInitializer">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initialize_async">
        <callback name="initialize_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initialize_finish">
        <callback name="initialize_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VcsInterface"
            c:type="IdeVcsInterface"
            glib:is-gtype-struct-for="Vcs">
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_working_directory">
        <callback name="get_working_directory">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">A #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeVcs.</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_buffer_change_monitor">
        <callback name="get_buffer_change_monitor">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeBufferChangeMonitor or %NULL.</doc>
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_ignored">
        <callback name="is_ignored" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_config">
        <callback name="get_config">
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve">An #IdeVcsConfig or %NULL.</doc>
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_branch_name">
        <callback name="get_branch_name">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A string containing the branch name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VcsUri"
            c:type="IdeVcsUri"
            glib:type-name="IdeVcsUri"
            glib:get-type="ide_vcs_uri_get_type"
            c:symbol-prefix="vcs_uri">
      <constructor name="new" c:identifier="ide_vcs_uri_new">
        <return-value transfer-ownership="full">
          <type name="VcsUri" c:type="IdeVcsUri*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_host" c:identifier="ide_vcs_uri_get_host">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_vcs_uri_get_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="ide_vcs_uri_get_port">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scheme" c:identifier="ide_vcs_uri_get_scheme">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="ide_vcs_uri_get_user">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_vcs_uri_ref">
        <return-value transfer-ownership="full">
          <type name="VcsUri" c:type="IdeVcsUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="ide_vcs_uri_set_host">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="ide_vcs_uri_set_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="ide_vcs_uri_set_port">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scheme" c:identifier="ide_vcs_uri_set_scheme">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="ide_vcs_uri_set_user">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="ide_vcs_uri_to_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_vcs_uri_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="is_valid" c:identifier="ide_vcs_uri_is_valid">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="WidgetContextHandler" c:type="IdeWidgetContextHandler">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Workbench"
           c:symbol-prefix="workbench"
           c:type="IdeWorkbench"
           parent="Gtk.ApplicationWindow"
           glib:type-name="IdeWorkbench"
           glib:get-type="ide_workbench_get_type"
           glib:type-struct="WorkbenchClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Buildable"/>
      <method name="add_perspective"
              c:identifier="ide_workbench_add_perspective">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="perspective" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="ide_workbench_close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="focus" c:identifier="ide_workbench_focus">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="ide_workbench_get_context">
        <doc xml:space="preserve">Gets the context associated with the workbench, or %NULL.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdeContext or %NULL.</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench.</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fullscreen"
              c:identifier="ide_workbench_get_fullscreen">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_headerbar" c:identifier="ide_workbench_get_headerbar">
        <doc xml:space="preserve">Helper that is equivalent to calling gtk_window_get_titlebar() and casting
to an #IdeWorkbenchHeaderBar. This is convenience for plugins.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeWorkbenchHeaderBar.</doc>
          <type name="WorkbenchHeaderBar" c:type="IdeWorkbenchHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_perspective_by_name"
              c:identifier="ide_workbench_get_perspective_by_name">
        <doc xml:space="preserve">Gets the perspective by it's registered name as defined in
ide_perspective_get_id().</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">An #IdePerspective or %NULL.</doc>
          <type name="Perspective" c:type="IdePerspective*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visible_perspective"
              c:identifier="ide_workbench_get_visible_perspective">
        <doc xml:space="preserve">Gets the current perspective.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdePerspective.</doc>
          <type name="Perspective" c:type="IdePerspective*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench.</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_perspective_name"
              c:identifier="ide_workbench_get_visible_perspective_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_files_async"
              c:identifier="ide_workbench_open_files_async">
        <doc xml:space="preserve">Starts the process of loading the buffers for the given @files, possibly
creating an #IdeEditorView for each depending on @flags.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench.</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve">An array of #GFile objects to be opened.</doc>
            <type name="Gio.File" c:type="GFile**"/>
          </parameter>
          <parameter name="n_files" transfer-ownership="none">
            <doc xml:space="preserve">The number of files given.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve">The id of an #IdeWorkbenchAddin that should be preferred as a loader.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">A #IdeWorkbenchOpenFlags (if WORKBENCH_OPEN_FLAGS_BG is set, the buffer is loaded
but not made visible in the UI).</doc>
            <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GASyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #gpointer to hold user data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_files_finish"
              c:identifier="ide_workbench_open_files_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_project_async"
              c:identifier="ide_workbench_open_project_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="file_or_directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_project_finish"
              c:identifier="ide_workbench_open_project_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_uri_async"
              c:identifier="ide_workbench_open_uri_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_uri_finish"
              c:identifier="ide_workbench_open_uri_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_perspective"
              c:identifier="ide_workbench_remove_perspective">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="perspective" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_async"
              c:identifier="ide_workbench_save_all_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_finish"
              c:identifier="ide_workbench_save_all_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fullscreen"
              c:identifier="ide_workbench_set_fullscreen">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="fullscreen" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_perspective"
              c:identifier="ide_workbench_set_visible_perspective">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="perspective" transfer-ownership="none">
            <type name="Perspective" c:type="IdePerspective*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_perspective_name"
              c:identifier="ide_workbench_set_visible_perspective_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="views_foreach" c:identifier="ide_workbench_views_foreach">
        <doc xml:space="preserve">Executes @callback for every #IdeLayoutView across all perspectives.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench.</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">The callback to execute</doc>
            <type name="Gtk.Callback" c:type="GtkCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="context" transfer-ownership="none">
        <doc xml:space="preserve">The #IdeWorkbench:context property contains the #IdeContext for the loaded
project. Loading a project consists of creating an #IdeContext, so there
is a 1:1 mapping between "loaded project" and an #IdeContext.

The #IdeContext contains many of the important components of a project.
For example, it contains the #IdeVcs representing the active version
control system and an #IdeBuildSystem representing the current build
system.

The creation of #IdeWorkbenchAddin addins are deferred until this property
has been set.</doc>
        <type name="Context"/>
      </property>
      <property name="disable-greeter"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property is used internall by Builder to avoid creating the
greeter when opening a new workspace that is only for loading a
project.

This should not be used by application plugins.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-perspective"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property contains the #IdePerspective that is currently selected.
Connect to the "notify::visible-perspective" signal to be notified when
the perspective has been changed.</doc>
        <type name="Perspective"/>
      </property>
      <property name="visible-perspective-name"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">This property is just like #IdeWorkbench:visible-perspective except that
it contains the name of the perspective as a string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="action" when="first" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-perspective" when="first" action="1">
        <doc xml:space="preserve">This signal is meant for keybindings to change the current perspective.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the perspective</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unload" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Context"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="WorkbenchAddin"
               c:symbol-prefix="workbench_addin"
               c:type="IdeWorkbenchAddin"
               glib:type-name="IdeWorkbenchAddin"
               glib:get-type="ide_workbench_addin_get_type"
               glib:type-struct="WorkbenchAddinInterface">
      <virtual-method name="can_open" invoker="can_open">
        <doc xml:space="preserve">This interface method indicates if the workbench addin can load the content
found at @uri. If so, @priority should be set to an integer priority
indicating how important it is for this addin to load @uri.

The lowest integer value wins. However, a load fails, the next addin which
returned %TRUE from this method will be consulted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self and open @uri.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeUri.</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A content-type or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the priority at which this loader should be used.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id">
        <doc xml:space="preserve">Gets the identifier for this workbench addin. By default this is the
name of the classes GType (such as "MyObject").

This can be used as the hint to various open operations in IdeWorkbench
to prefer a given loader.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve">This interface method is called to load @self. Addin implementations should add any
required UI or actions to @workbench here. You should remove anything you've added
in ide_workbench_addin_unload(), as that will be called when your plugin is deactivated
or the workbench is in the destruction process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_async" invoker="open_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="5">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_finish" invoker="open_finish" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="perspective_set" invoker="perspective_set">
        <doc xml:space="preserve">This function is called when the workbench changes the perspective.

Addins that wish to add buttons to the header bar may want to show or
hide the widgets in this vfunc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="perspective" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve">This interface method should cleanup after anything added to @workbench in
ide_workbench_addin_load().

This might be called when a plugin is deactivated, or the workbench is in the
destruction process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_open" c:identifier="ide_workbench_addin_can_open">
        <doc xml:space="preserve">This interface method indicates if the workbench addin can load the content
found at @uri. If so, @priority should be set to an integer priority
indicating how important it is for this addin to load @uri.

The lowest integer value wins. However, a load fails, the next addin which
returned %TRUE from this method will be consulted.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @self and open @uri.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeUri.</doc>
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A content-type or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">the priority at which this loader should be used.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_workbench_addin_get_id">
        <doc xml:space="preserve">Gets the identifier for this workbench addin. By default this is the
name of the classes GType (such as "MyObject").

This can be used as the hint to various open operations in IdeWorkbench
to prefer a given loader.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_workbench_addin_load">
        <doc xml:space="preserve">This interface method is called to load @self. Addin implementations should add any
required UI or actions to @workbench here. You should remove anything you've added
in ide_workbench_addin_unload(), as that will be called when your plugin is deactivated
or the workbench is in the destruction process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_async" c:identifier="ide_workbench_addin_open_async">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="Uri" c:type="IdeUri*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_finish"
              c:identifier="ide_workbench_addin_open_finish"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="perspective_set"
              c:identifier="ide_workbench_addin_perspective_set">
        <doc xml:space="preserve">This function is called when the workbench changes the perspective.

Addins that wish to add buttons to the header bar may want to show or
hide the widgets in this vfunc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="perspective" transfer-ownership="none">
            <doc xml:space="preserve">An #IdePerspective</doc>
            <type name="Perspective" c:type="IdePerspective*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_workbench_addin_unload">
        <doc xml:space="preserve">This interface method should cleanup after anything added to @workbench in
ide_workbench_addin_load().

This might be called when a plugin is deactivated, or the workbench is in the
destruction process.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="WorkbenchAddinInterface"
            c:type="IdeWorkbenchAddinInterface"
            glib:is-gtype-struct-for="WorkbenchAddin">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">a newly allocated string.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbench</doc>
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbench</doc>
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_open">
        <callback name="can_open">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">%TRUE if @self and open @uri.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorkbenchAddin.</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeUri.</doc>
              <type name="Uri" c:type="IdeUri*"/>
            </parameter>
            <parameter name="content_type"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve">A content-type or %NULL.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve">the priority at which this loader should be used.</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_async">
        <callback name="open_async">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="Uri" c:type="IdeUri*"/>
            </parameter>
            <parameter name="content_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="6">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="6">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_finish">
        <callback name="open_finish" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="perspective_set">
        <callback name="perspective_set">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">an #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="perspective" transfer-ownership="none">
              <doc xml:space="preserve">An #IdePerspective</doc>
              <type name="Perspective" c:type="IdePerspective*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WorkbenchClass"
            c:type="IdeWorkbenchClass"
            glib:is-gtype-struct-for="Workbench">
      <field name="parent_class">
        <type name="Gtk.ApplicationWindowClass"
              c:type="GtkApplicationWindowClass"/>
      </field>
    </record>
    <class name="WorkbenchHeaderBar"
           c:symbol-prefix="workbench_header_bar"
           c:type="IdeWorkbenchHeaderBar"
           parent="Gtk.HeaderBar"
           glib:type-name="IdeWorkbenchHeaderBar"
           glib:get-type="ide_workbench_header_bar_get_type"
           glib:type-struct="WorkbenchHeaderBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_workbench_header_bar_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="focus_search"
              c:identifier="ide_workbench_header_bar_focus_search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchHeaderBar" c:type="IdeWorkbenchHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_omni_bar"
              c:identifier="ide_workbench_header_bar_get_omni_bar">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">An #IdeOmniBar.</doc>
          <type name="OmniBar" c:type="IdeOmniBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchHeaderBar" c:type="IdeWorkbenchHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_left"
              c:identifier="ide_workbench_header_bar_insert_left">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchHeaderBar" c:type="IdeWorkbenchHeaderBar*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_right"
              c:identifier="ide_workbench_header_bar_insert_right">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchHeaderBar" c:type="IdeWorkbenchHeaderBar*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="pack_type" transfer-ownership="none">
            <type name="Gtk.PackType" c:type="GtkPackType"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.HeaderBar" c:type="GtkHeaderBar"/>
      </field>
    </class>
    <record name="WorkbenchHeaderBarClass"
            c:type="IdeWorkbenchHeaderBarClass"
            glib:is-gtype-struct-for="WorkbenchHeaderBar">
      <field name="parent">
        <type name="Gtk.HeaderBarClass" c:type="GtkHeaderBarClass"/>
      </field>
      <field name="_reserved1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved2">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved3">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved4">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved5">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved6">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved7">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_reserved8">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <bitfield name="WorkbenchOpenFlags" c:type="IdeWorkbenchOpenFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_WORKBENCH_OPEN_FLAGS_NONE">
      </member>
      <member name="background"
              value="1"
              c:identifier="IDE_WORKBENCH_OPEN_FLAGS_BACKGROUND">
      </member>
    </bitfield>
    <interface name="Worker"
               c:symbol-prefix="worker"
               c:type="IdeWorker"
               glib:type-name="IdeWorker"
               glib:get-type="ide_worker_get_type"
               glib:type-struct="WorkerInterface">
      <virtual-method name="create_proxy" invoker="create_proxy" throws="1">
        <doc xml:space="preserve">Creates a new proxy to be connected to the subprocess peer on the other
end of @connection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GDBusProxy or %NULL.</doc>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorker.</doc>
            <type name="Worker" c:type="IdeWorker*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection connected to the worker process.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="register_service" invoker="register_service">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Worker" c:type="IdeWorker*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_proxy"
              c:identifier="ide_worker_create_proxy"
              throws="1">
        <doc xml:space="preserve">Creates a new proxy to be connected to the subprocess peer on the other
end of @connection.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A #GDBusProxy or %NULL.</doc>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve">An #IdeWorker.</doc>
            <type name="Worker" c:type="IdeWorker*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection connected to the worker process.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_service"
              c:identifier="ide_worker_register_service">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Worker" c:type="IdeWorker*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="WorkerInterface"
            c:type="IdeWorkerInterface"
            glib:is-gtype-struct-for="Worker">
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_proxy">
        <callback name="create_proxy" throws="1">
          <return-value transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusProxy or %NULL.</doc>
            <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve">An #IdeWorker.</doc>
              <type name="Worker" c:type="IdeWorker*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve">A #GDBusConnection connected to the worker process.</doc>
              <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="register_service">
        <callback name="register_service">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Worker" c:type="IdeWorker*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function name="build_system_new_async"
              c:identifier="ide_build_system_new_async"
              moved-to="BuildSystem.new_async">
      <doc xml:space="preserve">Asynchronously creates a new #IdeBuildSystem instance using the registered
#GIOExtensionPoint system. Each extension point will be tried asynchronously
by priority until one has been found that supports @project_file.

If no build system could be found, then ide_build_system_new_finish() will
return %NULL.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve">#IdeBuildSystem</doc>
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
        <parameter name="project_file" transfer-ownership="none">
          <doc xml:space="preserve">A #GFile containing the directory or project file.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A #GCancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve">A callback to execute upon completion</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">User data for @callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="build_system_new_finish"
              c:identifier="ide_build_system_new_finish"
              moved-to="BuildSystem.new_finish"
              throws="1">
      <doc xml:space="preserve">Complete an asynchronous call to ide_build_system_new_async().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">An #IdeBuildSystem if successful; otherwise
  %NULL and @error is set.</doc>
        <type name="BuildSystem" c:type="IdeBuildSystem*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_region_create_from_clip_extents"
              c:identifier="ide_cairo_region_create_from_clip_extents">
      <return-value transfer-ownership="full">
        <type name="cairo.Region" c:type="cairo_region_t*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cairo_rounded_rectangle"
              c:identifier="ide_cairo_rounded_rectangle">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="rect" transfer-ownership="none">
          <type name="Gdk.Rectangle" c:type="const GdkRectangle*"/>
        </parameter>
        <parameter name="x_radius" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y_radius" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="completion_provider_context_current_word"
              c:identifier="ide_completion_provider_context_current_word"
              moved-to="CompletionProvider.context_current_word">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="GtkSource.CompletionContext"
                c:type="GtkSourceCompletionContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="completion_provider_context_in_comment"
              c:identifier="ide_completion_provider_context_in_comment"
              moved-to="CompletionProvider.context_in_comment">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="GtkSource.CompletionContext"
                c:type="GtkSourceCompletionContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="completion_provider_context_in_comment_or_string"
              c:identifier="ide_completion_provider_context_in_comment_or_string"
              moved-to="CompletionProvider.context_in_comment_or_string">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="GtkSource.CompletionContext"
                c:type="GtkSourceCompletionContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_error_quark"
              c:identifier="ide_device_error_quark"
              moved-to="DeviceError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="diagnostic_severity_to_string"
              c:identifier="ide_diagnostic_severity_to_string"
              moved-to="DiagnosticSeverity.to_string">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="severity" transfer-ownership="none">
          <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
        </parameter>
      </parameters>
    </function>
    <function name="dnd_get_uri_list" c:identifier="ide_dnd_get_uri_list">
      <doc xml:space="preserve">Create a list of valid uri's from a uri-list drop.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a string array which will hold the uris or
  %NULL if there were no valid uris. g_strfreev should be used when
  the string array is no longer used</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="selection_data" transfer-ownership="none">
          <doc xml:space="preserve">the #GtkSelectionData from drag_data_received</doc>
          <type name="Gtk.SelectionData" c:type="GtkSelectionData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="doap_error_quark"
              c:identifier="ide_doap_error_quark"
              moved-to="DoapError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="g_task_return_boolean_from_main"
              c:identifier="ide_g_task_return_boolean_from_main">
      <doc xml:space="preserve">This is just like g_task_return_boolean() except that it enforces
that the current stack return to the main context before dispatching
the callback.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_task_return_error_from_main"
              c:identifier="ide_g_task_return_error_from_main">
      <doc xml:space="preserve">Like g_task_return_error() but ensures we return to the main loop before
dispatching the result.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <doc xml:space="preserve">A #GTask</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="error" transfer-ownership="full">
          <doc xml:space="preserve">A #GError.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_task_return_int_from_main"
              c:identifier="ide_g_task_return_int_from_main">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_task_return_pointer_from_main"
              c:identifier="ide_g_task_return_pointer_from_main">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_program_name" c:identifier="ide_get_program_name">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_system_arch" c:identifier="ide_get_system_arch">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_system_page_size"
              c:identifier="ide_get_system_page_size">
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
    </function>
    <function name="gtk_text_buffer_remove_tag"
              c:identifier="ide_gtk_text_buffer_remove_tag">
      <doc xml:space="preserve">Like gtk_text_buffer_remove_tag() but allows specifying that the tags
should be removed one at a time to avoid over-damaging the views
displaying @buffer.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </parameter>
        <parameter name="start" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="minimal_damage" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="language_format_header"
              c:identifier="ide_language_format_header">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="language" transfer-ownership="none">
          <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
        </parameter>
        <parameter name="header" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_get_verbosity" c:identifier="ide_log_get_verbosity">
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="log_increase_verbosity"
              c:identifier="ide_log_increase_verbosity">
      <doc xml:space="preserve">Increases the amount of logging that will occur. By default, only
warning and above will be displayed.

Calling this once will cause G_LOG_LEVEL_MESSAGE to be displayed.
Calling this twice will cause G_LOG_LEVEL_INFO to be displayed.
Calling this thrice will cause G_LOG_LEVEL_DEBUG to be displayed.
Calling this four times will cause IDE_LOG_LEVEL_TRACE to be displayed.

Note that many DEBUG and TRACE level log messages are only compiled into
debug builds, and therefore will not be available in release builds.

This method is meant to be called for every -v provided on the command
line.

Calling this method more than four times is acceptable.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="log_init" c:identifier="ide_log_init">
      <doc xml:space="preserve">Initializes the logging subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="stdout_" transfer-ownership="none">
          <doc xml:space="preserve">Indicates logging should be written to stdout.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve">An optional file in which to store logs.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_set_verbosity" c:identifier="ide_log_set_verbosity">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_shutdown" c:identifier="ide_log_shutdown">
      <doc xml:space="preserve">Cleans up after the logging subsystem.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pango_font_description_to_css"
              c:identifier="ide_pango_font_description_to_css">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="font_desc" transfer-ownership="none">
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_collapse" c:identifier="ide_path_collapse">
      <doc xml:space="preserve">This function will collapse a path that starts with the users home
directory into a shorthand notation using ~/ for the home directory.

If the path does not have the home directory as a prefix, it will
simply return a copy of @path.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A new path, possibly collapsed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_expand" c:identifier="ide_path_expand">
      <doc xml:space="preserve">This function will expand various "shell-like" features of the provided
path using the POSIX wordexp(3) function. Command substitution will
not be enabled, but path features such as ~user will be expanded.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">A newly allocated string containing the
  expansion. A copy of the input string upon failure to expand.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rgba_shade" c:identifier="ide_rgba_shade">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="rgba" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="const GdkRGBA*"/>
        </parameter>
        <parameter name="dst" transfer-ownership="none">
          <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
        </parameter>
        <parameter name="k" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="runtime_error_quark"
              c:identifier="ide_runtime_error_quark"
              moved-to="RuntimeError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="set_program_name" c:identifier="ide_set_program_name">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="program_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_style_scheme_apply_style"
              c:identifier="ide_source_style_scheme_apply_style">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="style_scheme" transfer-ownership="none">
          <type name="GtkSource.StyleScheme" c:type="GtkSourceStyleScheme*"/>
        </parameter>
        <parameter name="style" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </parameter>
      </parameters>
    </function>
    <function name="thread_pool_push"
              c:identifier="ide_thread_pool_push"
              moved-to="ThreadPool.push">
      <doc xml:space="preserve">Runs the callback on the thread pool thread.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve">the threadpool kind to use.</doc>
          <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve">A function to call in the worker thread.</doc>
          <type name="ThreadFunc" c:type="IdeThreadFunc"/>
        </parameter>
        <parameter name="func_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">user data for @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="thread_pool_push_task"
              c:identifier="ide_thread_pool_push_task"
              moved-to="ThreadPool.push_task">
      <doc xml:space="preserve">This pushes a task to be executed on a worker thread based on the task kind as denoted by
@kind. Some tasks will be placed on special work queues or throttled based on proirity.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve">The task kind.</doc>
          <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
        </parameter>
        <parameter name="task" transfer-ownership="none">
          <doc xml:space="preserve">A #GTask to execute.</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">The thread worker to execute for @task.</doc>
          <type name="Gio.TaskThreadFunc" c:type="GTaskThreadFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_build"
              c:identifier="ide_uri_build"
              moved-to="Uri.build">
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="scheme" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="userinfo" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="host" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="port" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="query" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fragment" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_error_quark"
              c:identifier="ide_uri_error_quark"
              moved-to="Uri.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="uri_parse_host"
              c:identifier="ide_uri_parse_host"
              moved-to="Uri.parse_host"
              throws="1">
      <doc xml:space="preserve">Utility function for parsing "network" URIs. This extracts just the
scheme, host, and port from @uri_string. All three out parameters
are mandatory.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE on success, %FALSE on failure.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uri_string" transfer-ownership="none">
          <doc xml:space="preserve">a string containing a network URI</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve">flags for parsing @uri_string</doc>
          <type name="UriParseFlags" c:type="IdeUriParseFlags"/>
        </parameter>
        <parameter name="scheme"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">on return, will contain @uri_string's URI scheme</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="host"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">on return, will contain @uri_string's decoded hostname</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="port"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">on return, will contain @uri_string's port, or %0</doc>
          <type name="gushort" c:type="gushort*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_parse_params"
              c:identifier="ide_uri_parse_params"
              moved-to="Uri.parse_params">
      <doc xml:space="preserve">Many URI schemes include one or more attribute/value pairs
as part of the URI value. This method can be used to parse them
into a hash table.

The @params string is assumed to still be %&lt;!-- --&gt;-encoded, but
the returned values will be fully decoded. (Thus it is possible
that the returned values may contain '=' or @separator, if the
value was encoded in the input.) Invalid %&lt;!-- --&gt;-encoding is
treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
(However, if @params is the path or query string from a #IdeUri that
was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
does not contain any invalid encoding.)</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">a hash table
of attribute/value pairs. Both names and values will be fully-decoded. If
@params cannot be parsed (eg, it contains two @separator characters in a
row), then %NULL is returned.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="params" transfer-ownership="none">
          <doc xml:space="preserve">a string containing "attribute=value" parameters</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve">the length of @params, or -1 if it is NUL-terminated</doc>
          <type name="gssize" c:type="gssize"/>
        </parameter>
        <parameter name="separator" transfer-ownership="none">
          <doc xml:space="preserve">the separator character between parameters.
  (usually ';', but sometimes '&amp;')</doc>
          <type name="gchar" c:type="gchar"/>
        </parameter>
        <parameter name="case_insensitive" transfer-ownership="none">
          <doc xml:space="preserve">whether to match parameter names case-insensitively</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="uri_split"
              c:identifier="ide_uri_split"
              moved-to="Uri.split">
      <doc xml:space="preserve">Parses @uri_string more-or-less according to the generic grammar of
RFC 3986 ("more" if @strict is %TRUE, "less" if %FALSE), and
outputs the pieces into the provided variables. This is a low-level
method that does not do any pre- or post-processing of @uri_string,
and is "garbage in, garbage out"; it just splits @uri_string into
pieces at the appropriate punctuation characters (consuming
delimiters as appropriate), and returns the pieces. Components that
are not present in @uri_string will be set to %NULL (but note that
the path is always present, though it may be an empty string).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="uri_string" transfer-ownership="none">
          <doc xml:space="preserve">a string containing a relative or absolute URI</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="strict" transfer-ownership="none">
          <doc xml:space="preserve">whether to parse @uri_string strictly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="scheme"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the scheme, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="userinfo"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the userinfo, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="host"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the host, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="port"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the port, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="path"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the path, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="query"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the query, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="fragment"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve">on return, contains the fragment, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_new_async"
              c:identifier="ide_vcs_new_async"
              moved-to="Vcs.new_async">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
        <parameter name="io_priority" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_new_finish"
              c:identifier="ide_vcs_new_finish"
              moved-to="Vcs.new_finish"
              throws="1">
      <doc xml:space="preserve">Completes a call to ide_vcs_new_async().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">An #IdeVcs.</doc>
        <type name="Vcs" c:type="IdeVcs*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_uri_is_valid"
              c:identifier="ide_vcs_uri_is_valid"
              moved-to="VcsUri.is_valid">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uri_string" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_action" c:identifier="ide_widget_action">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="param" transfer-ownership="none">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_action_with_string"
              c:identifier="ide_widget_action_with_string">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="group" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="param" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_add_style_class"
              c:identifier="ide_widget_add_style_class">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="class_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_find_child_typed"
              c:identifier="ide_widget_find_child_typed">
      <return-value transfer-ownership="none" nullable="1">
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_get_context"
              c:identifier="ide_widget_get_context"
              introspectable="0">
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">An #IdeContext or %NULL.</doc>
        <type name="Context" c:type="IdeContext*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_get_workbench"
              c:identifier="ide_widget_get_workbench">
      <doc xml:space="preserve">Gets the workbench @widget is associated with, if any.

If no workbench is associated, NULL is returned.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">An #IdeWorkbench</doc>
        <type name="Workbench" c:type="IdeWorkbench*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_hide_with_fade"
              c:identifier="ide_widget_hide_with_fade">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_set_context_handler"
              c:identifier="ide_widget_set_context_handler">
      <doc xml:space="preserve">Calls @handler when the #IdeContext has been set for @widget.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve">A #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="gpointer"/>
        </parameter>
        <parameter name="handler" transfer-ownership="none" scope="async">
          <doc xml:space="preserve">A callback to handle the context</doc>
          <type name="WidgetContextHandler" c:type="IdeWidgetContextHandler"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_show_with_fade"
              c:identifier="ide_widget_show_with_fade">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
