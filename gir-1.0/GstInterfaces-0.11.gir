<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.11"/>
  <package name="gstreamer-interfaces-0.11"/>
  <c:include name="gst/interfaces/interfaces-enumtypes.h"/>
  <c:include name="gst/interfaces/navigation.h"/>
  <c:include name="gst/interfaces/tuner.h"/>
  <c:include name="gst/interfaces/tunerchannel.h"/>
  <c:include name="gst/interfaces/tunernorm.h"/>
  <namespace name="GstInterfaces"
             version="0.11"
             shared-library="libgstinterfaces-0.11.so.28"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <interface name="Navigation"
               c:symbol-prefix="navigation"
               c:type="GstNavigation"
               glib:type-name="GstNavigation"
               glib:get-type="gst_navigation_get_type"
               glib:type-struct="NavigationInterface">
      <doc xml:whitespace="preserve">The Navigation interface is used for creating and injecting navigation related
events such as mouse button presses, cursor motion and key presses. The associated
library also provides methods for parsing received events, and for sending and
receiving navigation related bus events. One main usecase is DVD menu navigation.

The main parts of the API are:
&lt;itemizedlist&gt;
&lt;listitem&gt;
&lt;para&gt;
The GstNavigation interface, implemented by elements which provide an application
with the ability to create and inject navigation events into the pipeline.
&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;
GstNavigation event handling API. GstNavigation events are created in response to
calls on a GstNavigation interface implementation, and sent in the pipeline. Upstream
elements can use the navigation event API functions to parse the contents of received
messages.
&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
&lt;para&gt;
GstNavigation message handling API. GstNavigation messages may be sent on the message
bus to inform applications of navigation related changes in the pipeline, such as the
mouse moving over a clickable region, or the set of available angles changing.
&lt;/para&gt;&lt;para&gt;
The GstNavigation message functions provide functions for creating and parsing
custom bus messages for signaling GstNavigation changes.
&lt;/para&gt;
&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
      <function name="event_get_type"
                c:identifier="gst_navigation_event_get_type"
                version="0.10.23">
        <doc xml:whitespace="preserve">Inspect a #GstEvent and return the #GstNavigationEventType of the event, or
#GST_NAVIGATION_EVENT_INVALID if the event is not a #GstNavigation event.</doc>
        <return-value transfer-ownership="none">
          <type name="NavigationEventType" c:type="GstNavigationEventType"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </function>
      <function name="event_parse_command"
                c:identifier="gst_navigation_event_parse_command"
                version="0.10.23">
        <doc xml:whitespace="preserve">Inspect a #GstNavigation command event and retrieve the enum value of the
associated command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the navigation command could be extracted, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to GstNavigationCommand to receive the type of the navigation event.</doc>
            <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
          </parameter>
        </parameters>
      </function>
      <function name="event_parse_key_event"
                c:identifier="gst_navigation_event_parse_key_event"
                version="0.10.23">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">A pointer to a location to receive the string identifying the key press. The returned string is owned by the event, and valid only until the event is unreffed.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <function name="event_parse_mouse_button_event"
                c:identifier="gst_navigation_event_parse_mouse_button_event"
                version="0.10.23">
        <doc xml:whitespace="preserve">Retrieve the details of either a #GstNavigation mouse button press event or
a mouse button release event. Determine which type the event is using
gst_navigation_event_get_type() to retrieve the #GstNavigationEventType.

otherwise FALSE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the button number and both coordinates could be extracted,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a gint that will receive the button number associated with the event.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a gdouble to receive the x coordinate of the mouse button event.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a gdouble to receive the y coordinate of the mouse button event.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="event_parse_mouse_move_event"
                c:identifier="gst_navigation_event_parse_mouse_move_event"
                version="0.10.23">
        <doc xml:whitespace="preserve">Inspect a #GstNavigation mouse movement event and extract the coordinates
of the event.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if both coordinates could be extracted, otherwise FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a gdouble to receive the x coordinate of the mouse movement.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a gdouble to receive the y coordinate of the mouse movement.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_get_type"
                c:identifier="gst_navigation_message_get_type"
                version="0.10.23">
        <doc xml:whitespace="preserve">Check a bus message to see if it is a #GstNavigation event, and return
the #GstNavigationMessageType identifying the type of the message if so.

#GST_NAVIGATION_MESSAGE_INVALID if the message is not a #GstNavigation
notification.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The type of the #GstMessage, or</doc>
          <type name="NavigationMessageType"
                c:type="GstNavigationMessageType"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
            <type name="Gst.Message" c:type="GstMessage*"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_new_angles_changed"
                c:identifier="gst_navigation_message_new_angles_changed"
                version="0.10.23">
        <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_ANGLES_CHANGED for notifying an application
that the current angle, or current number of angles available in a
multiangle video has changed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GstMessage.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
            <type name="Gst.Object" c:type="GstObject*"/>
          </parameter>
          <parameter name="cur_angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">The currently selected angle.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_angles" transfer-ownership="none">
            <doc xml:whitespace="preserve">The number of viewing angles now available.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_new_commands_changed"
                c:identifier="gst_navigation_message_new_commands_changed"
                version="0.10.23">
        <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GstMessage.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
            <type name="Gst.Object" c:type="GstObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_new_mouse_over"
                c:identifier="gst_navigation_message_new_mouse_over"
                version="0.10.23">
        <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_MOUSE_OVER.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new #GstMessage.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
            <type name="Gst.Object" c:type="GstObject*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the mouse has entered a clickable area of the display. %FALSE if it over a non-clickable area.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_parse_angles_changed"
                c:identifier="gst_navigation_message_parse_angles_changed"
                version="0.10.23">
        <doc xml:whitespace="preserve">Parse a #GstNavigation message of type GST_NAVIGATION_MESSAGE_ANGLES_CHANGED
and extract the @cur_angle and @n_angles parameters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the message could be successfully parsed. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
            <type name="Gst.Message" c:type="GstMessage*"/>
          </parameter>
          <parameter name="cur_angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">A pointer to a #guint to receive the new current angle number, or NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="n_angles" transfer-ownership="none">
            <doc xml:whitespace="preserve">A pointer to a #guint to receive the new angle count, or NULL.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="message_parse_mouse_over"
                c:identifier="gst_navigation_message_parse_mouse_over"
                version="0.10.23">
        <doc xml:whitespace="preserve">Parse a #GstNavigation message of type #GST_NAVIGATION_MESSAGE_MOUSE_OVER
and extract the active/inactive flag. If the mouse over event is marked
active, it indicates that the mouse is over a clickable area.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the message could be successfully parsed. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
            <type name="Gst.Message" c:type="GstMessage*"/>
          </parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:whitespace="preserve">A pointer to a gboolean to receive the active/inactive state, or NULL.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_get_type"
                c:identifier="gst_navigation_query_get_type"
                version="0.10.23">
        <doc xml:whitespace="preserve">Inspect a #GstQuery and return the #GstNavigationQueryType associated with
it if it is a #GstNavigation query.

#GST_NAVIGATION_QUERY_INVALID</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GstNavigationQueryType of the query, or</doc>
          <type name="NavigationQueryType" c:type="GstNavigationQueryType"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">The query to inspect</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_new_angles"
                c:identifier="gst_navigation_query_new_angles"
                version="0.10.23">
        <doc xml:whitespace="preserve">Create a new #GstNavigation angles query. When executed, it will
query the pipeline for the set of currently available angles, which may be
greater than one in a multiangle video.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new query.</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </return-value>
      </function>
      <function name="query_new_commands"
                c:identifier="gst_navigation_query_new_commands"
                version="0.10.23">
        <doc xml:whitespace="preserve">Create a new #GstNavigation commands query. When executed, it will
query the pipeline for the set of currently available commands.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The new query.</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </return-value>
      </function>
      <function name="query_parse_angles"
                c:identifier="gst_navigation_query_parse_angles"
                version="0.10.23">
        <doc xml:whitespace="preserve">Parse the current angle number in the #GstNavigation angles @query into the
#guint pointed to by the @cur_angle variable, and the number of available
angles into the #guint pointed to by the @n_angles variable.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="cur_angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a #guint into which to store the currently selected angle value from the query, or NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="n_angles" transfer-ownership="none">
            <doc xml:whitespace="preserve">Pointer to a #guint into which to store the number of angles value from the query, or NULL</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_parse_commands_length"
                c:identifier="gst_navigation_query_parse_commands_length"
                version="0.10.23">
        <doc xml:whitespace="preserve">Parse the number of commands in the #GstNavigation commands @query.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="n_cmds" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of commands in this query.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_parse_commands_nth"
                c:identifier="gst_navigation_query_parse_commands_nth"
                version="0.10.23">
        <doc xml:whitespace="preserve">Parse the #GstNavigation command query and retrieve the @nth command from
it into @cmd. If the list contains less elements than @nth, @cmd will be
set to #GST_NAVIGATION_COMMAND_INVALID.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:whitespace="preserve">the nth command to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to store the nth command into.</doc>
            <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_set_angles"
                c:identifier="gst_navigation_query_set_angles"
                version="0.10.23">
        <doc xml:whitespace="preserve">Set the #GstNavigation angles query result field in @query.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="cur_angle" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current viewing angle to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="n_angles" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of viewing angles to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="query_set_commands"
                c:identifier="gst_navigation_query_set_commands"
                version="0.10.23"
                introspectable="0">
        <doc xml:whitespace="preserve">Set the #GstNavigation command query result fields in @query. The number
of commands passed must be equal to @n_commands.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="n_cmds" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of commands to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </function>
      <function name="query_set_commandsv"
                c:identifier="gst_navigation_query_set_commandsv"
                version="0.10.23">
        <doc xml:whitespace="preserve">Set the #GstNavigation command query result fields in @query. The number
of commands passed must be equal to @n_commands.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstQuery</doc>
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
          <parameter name="n_cmds" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of commands to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cmds" transfer-ownership="none">
            <doc xml:whitespace="preserve">An array containing @n_cmds @GstNavigationCommand values.</doc>
            <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="send_event" invoker="send_event">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="structure" transfer-ownership="none">
            <type name="Gst.Structure" c:type="GstStructure*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="send_command"
              c:identifier="gst_navigation_send_command"
              version="0.10.23">
        <doc xml:whitespace="preserve">Sends the indicated command to the navigation interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="command" transfer-ownership="none">
            <doc xml:whitespace="preserve">The command to issue</doc>
            <type name="NavigationCommand" c:type="GstNavigationCommand"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_event" c:identifier="gst_navigation_send_event">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="structure" transfer-ownership="none">
            <type name="Gst.Structure" c:type="GstStructure*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_key_event"
              c:identifier="gst_navigation_send_key_event">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of the key event. Recognised values are "key-press" and "key-release"</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">Character representation of the key. This is typically as produced by XKeysymToString.</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_mouse_event"
              c:identifier="gst_navigation_send_mouse_event">
        <doc xml:whitespace="preserve">Sends a mouse event to the navigation interface. Mouse event coordinates
are sent relative to the display space of the related output area. This is
usually the size in pixels of the window associated with the element
implementing the #GstNavigation interface.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <doc xml:whitespace="preserve">The type of mouse event, as a text string. Recognised values are "mouse-button-press", "mouse-button-release" and "mouse-move".</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:whitespace="preserve">The button number of the button being pressed or released. Pass 0 for mouse-move events.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:whitespace="preserve">The x coordinate of the mouse event.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:whitespace="preserve">The y coordinate of the mouse event.</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <enumeration name="NavigationCommand"
                 version="0.10.23"
                 glib:type-name="GstNavigationCommand"
                 glib:get-type="gst_navigation_command_get_type"
                 c:type="GstNavigationCommand">
      <doc xml:whitespace="preserve">A set of commands that may be issued to an element providing the
#GstNavigation interface. The available commands can be queried via
the gst_navigation_query_new_commands() query.

For convenience in handling DVD navigation, the MENU commands are aliased as:
GST_NAVIGATION_COMMAND_DVD_MENU            = @GST_NAVIGATION_COMMAND_MENU1
GST_NAVIGATION_COMMAND_DVD_TITLE_MENU      = @GST_NAVIGATION_COMMAND_MENU2
GST_NAVIGATION_COMMAND_DVD_ROOT_MENU       = @GST_NAVIGATION_COMMAND_MENU3
GST_NAVIGATION_COMMAND_DVD_SUBPICTURE_MENU = @GST_NAVIGATION_COMMAND_MENU4
GST_NAVIGATION_COMMAND_DVD_AUDIO_MENU      = @GST_NAVIGATION_COMMAND_MENU5
GST_NAVIGATION_COMMAND_DVD_ANGLE_MENU      = @GST_NAVIGATION_COMMAND_MENU6
GST_NAVIGATION_COMMAND_DVD_CHAPTER_MENU    = @GST_NAVIGATION_COMMAND_MENU7</doc>
      <member name="invalid"
              value="0"
              c:identifier="GST_NAVIGATION_COMMAND_INVALID"
              glib:nick="invalid"/>
      <member name="menu1"
              value="1"
              c:identifier="GST_NAVIGATION_COMMAND_MENU1"
              glib:nick="menu1"/>
      <member name="menu2"
              value="2"
              c:identifier="GST_NAVIGATION_COMMAND_MENU2"
              glib:nick="menu2"/>
      <member name="menu3"
              value="3"
              c:identifier="GST_NAVIGATION_COMMAND_MENU3"
              glib:nick="menu3"/>
      <member name="menu4"
              value="4"
              c:identifier="GST_NAVIGATION_COMMAND_MENU4"
              glib:nick="menu4"/>
      <member name="menu5"
              value="5"
              c:identifier="GST_NAVIGATION_COMMAND_MENU5"
              glib:nick="menu5"/>
      <member name="menu6"
              value="6"
              c:identifier="GST_NAVIGATION_COMMAND_MENU6"
              glib:nick="menu6"/>
      <member name="menu7"
              value="7"
              c:identifier="GST_NAVIGATION_COMMAND_MENU7"
              glib:nick="menu7"/>
      <member name="left"
              value="20"
              c:identifier="GST_NAVIGATION_COMMAND_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="21"
              c:identifier="GST_NAVIGATION_COMMAND_RIGHT"
              glib:nick="right"/>
      <member name="up"
              value="22"
              c:identifier="GST_NAVIGATION_COMMAND_UP"
              glib:nick="up"/>
      <member name="down"
              value="23"
              c:identifier="GST_NAVIGATION_COMMAND_DOWN"
              glib:nick="down"/>
      <member name="activate"
              value="24"
              c:identifier="GST_NAVIGATION_COMMAND_ACTIVATE"
              glib:nick="activate"/>
      <member name="prev_angle"
              value="30"
              c:identifier="GST_NAVIGATION_COMMAND_PREV_ANGLE"
              glib:nick="prev-angle"/>
      <member name="next_angle"
              value="31"
              c:identifier="GST_NAVIGATION_COMMAND_NEXT_ANGLE"
              glib:nick="next-angle"/>
    </enumeration>
    <enumeration name="NavigationEventType"
                 version="0.10.23"
                 glib:type-name="GstNavigationEventType"
                 glib:get-type="gst_navigation_event_type_get_type"
                 c:type="GstNavigationEventType">
      <doc xml:whitespace="preserve">Enum values for the various events that an element implementing the
GstNavigation interface might send up the pipeline.</doc>
      <member name="invalid"
              value="0"
              c:identifier="GST_NAVIGATION_EVENT_INVALID"
              glib:nick="invalid"/>
      <member name="key_press"
              value="1"
              c:identifier="GST_NAVIGATION_EVENT_KEY_PRESS"
              glib:nick="key-press"/>
      <member name="key_release"
              value="2"
              c:identifier="GST_NAVIGATION_EVENT_KEY_RELEASE"
              glib:nick="key-release"/>
      <member name="mouse_button_press"
              value="3"
              c:identifier="GST_NAVIGATION_EVENT_MOUSE_BUTTON_PRESS"
              glib:nick="mouse-button-press"/>
      <member name="mouse_button_release"
              value="4"
              c:identifier="GST_NAVIGATION_EVENT_MOUSE_BUTTON_RELEASE"
              glib:nick="mouse-button-release"/>
      <member name="mouse_move"
              value="5"
              c:identifier="GST_NAVIGATION_EVENT_MOUSE_MOVE"
              glib:nick="mouse-move"/>
      <member name="command"
              value="6"
              c:identifier="GST_NAVIGATION_EVENT_COMMAND"
              glib:nick="command"/>
    </enumeration>
    <record name="NavigationInterface"
            c:type="GstNavigationInterface"
            glib:is-gtype-struct-for="Navigation">
      <doc xml:whitespace="preserve">Navigation interface.</doc>
      <field name="iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="send_event">
        <callback name="send_event">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="navigation" transfer-ownership="none">
              <type name="Navigation" c:type="GstNavigation*"/>
            </parameter>
            <parameter name="structure" transfer-ownership="none">
              <type name="Gst.Structure" c:type="GstStructure*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="NavigationMessageType"
                 version="0.10.23"
                 glib:type-name="GstNavigationMessageType"
                 glib:get-type="gst_navigation_message_type_get_type"
                 c:type="GstNavigationMessageType">
      <doc xml:whitespace="preserve">A set of notifications that may be received on the bus when navigation
related status changes.</doc>
      <member name="invalid"
              value="0"
              c:identifier="GST_NAVIGATION_MESSAGE_INVALID"
              glib:nick="invalid"/>
      <member name="mouse_over"
              value="1"
              c:identifier="GST_NAVIGATION_MESSAGE_MOUSE_OVER"
              glib:nick="mouse-over"/>
      <member name="commands_changed"
              value="2"
              c:identifier="GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED"
              glib:nick="commands-changed"/>
      <member name="angles_changed"
              value="3"
              c:identifier="GST_NAVIGATION_MESSAGE_ANGLES_CHANGED"
              glib:nick="angles-changed"/>
    </enumeration>
    <enumeration name="NavigationQueryType"
                 glib:type-name="GstNavigationQueryType"
                 glib:get-type="gst_navigation_query_type_get_type"
                 c:type="GstNavigationQueryType">
      <doc xml:whitespace="preserve">Tyoes of navigation interface queries.</doc>
      <member name="invalid"
              value="0"
              c:identifier="GST_NAVIGATION_QUERY_INVALID"
              glib:nick="invalid"/>
      <member name="commands"
              value="1"
              c:identifier="GST_NAVIGATION_QUERY_COMMANDS"
              glib:nick="commands"/>
      <member name="angles"
              value="2"
              c:identifier="GST_NAVIGATION_QUERY_ANGLES"
              glib:nick="angles"/>
    </enumeration>
    <interface name="Tuner"
               c:symbol-prefix="tuner"
               c:type="GstTuner"
               glib:type-name="GstTuner"
               glib:get-type="gst_tuner_get_type"
               glib:type-struct="TunerInterface">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
The GstTuner interface is provided by elements that have the ability to
tune into multiple input signals, for example TV or radio capture cards.
&lt;/para&gt;&lt;para&gt;
The interpretation of 'tuning into' an input stream depends on the element
implementing the interface. For v4lsrc, it might imply selection of an
input source and/or frequency to be configured on a TV card. Another 
GstTuner implementation might be to allow selection of an active input pad
from multiple input pads.
&lt;/para&gt;&lt;para&gt;
That said, the GstTuner interface functions are biased toward the
TV capture scenario.
&lt;/para&gt;&lt;para&gt;
The general parameters provided are for configuration are:
&lt;itemizedlist&gt;
&lt;listitem&gt;Selection of a current #GstTunerChannel. The current channel
represents the input source (e.g. Composite, S-Video etc for TV capture).
&lt;/listitem&gt;
&lt;listitem&gt;The #GstTunerNorm for the channel. The norm chooses the
interpretation of the incoming signal for the current channel. For example,
PAL or NTSC, or more specific variants there-of.
&lt;/listitem&gt;
&lt;listitem&gt;Channel frequency. If the current channel has the ability to tune
between multiple frequencies (if it has the GST_TUNER_CHANNEL_FREQUENCY flag)
then the frequency can be changed/retrieved via the
gst_tuner_set_frequency() and gst_tuner_get_frequency() methods.
&lt;/listitem&gt;
&lt;/itemizedlist&gt;
&lt;/para&gt;
&lt;para&gt;
Where applicable, the signal strength can be retrieved and/or monitored
via a signal.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <virtual-method name="channel_changed" invoker="channel_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
current channel changes. Fires the #GstTuner::channel-changed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstTunerChannel instance</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="frequency_changed" invoker="frequency_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
configured frequency changes. Fires the #GstTuner::frequency-changed
signal on the tuner, and the #GstTunerChannel::frequency-changed signal
on the channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new frequency setting</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_channel"
                      invoker="get_channel"
                      introspectable="0">
        <doc xml:whitespace="preserve">Retrieve the current channel from the tuner.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current channel of the tuner object.</doc>
          <type name="TunerChannel" c:type="GstTunerChannel*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_frequency" invoker="get_frequency">
        <doc xml:whitespace="preserve">Retrieve the current frequency from the given channel. As for
gst_tuner_set_frequency(), the #GstTunerChannel must support frequency
operations, as indicated by the GST_TUNER_CHANNEL_FREQUENCY flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current frequency, or 0 on error.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GstTunerChannel to retrieve the frequency from.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_norm" invoker="get_norm" introspectable="0">
        <doc xml:whitespace="preserve">Get the current video norm from the given tuner object for the
currently selected channel.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current norm.</doc>
          <type name="TunerNorm" c:type="GstTunerNorm*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="list_channels"
                      invoker="list_channels"
                      introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a #GList of #GstTunerChannels available
(e.g. 'composite', 's-video', ...) from the given tuner object.

owned by the GstTuner and must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A list of channels available on this tuner. The list is</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="list_norms"
                      invoker="list_norms"
                      introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a GList of available #GstTunerNorm settings for the currently
tuned channel on the given tuner object.

tuner object. The list is owned by the GstTuner and must not
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A list of norms available on the current channel for this</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="norm_changed" invoker="norm_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
current norm changes. Fires the #GstTuner::norm-changed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstTunerNorm instance</doc>
            <type name="TunerNorm" c:type="GstTunerNorm*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_channel" invoker="set_channel">
        <doc xml:whitespace="preserve">Tunes the object to the given channel, which should be one of the
channels returned by gst_tuner_list_channels().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">the channel to tune to.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_frequency" invoker="set_frequency">
        <doc xml:whitespace="preserve">Sets a tuning frequency on the given tuner/channel. Note that this
requires the given channel to be a "tuning" channel, which can be
checked using GST_TUNER_CHANNEL_HAS_FLAG (), with the proper flag
being GST_TUNER_CHANNEL_FREQUENCY.

The frequency is in Hz, with minimum steps indicated by the 
frequency_multiplicator provided in the #GstTunerChannel. The
valid range is provided in the min_frequency and max_frequency properties
of the #GstTunerChannel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GstTunerChannel to set the frequency on.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:whitespace="preserve">The frequency to tune in to.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_norm" invoker="set_norm">
        <doc xml:whitespace="preserve">Changes the video norm on this tuner to the given norm, which should be
one of the norms returned by gst_tuner_list_norms().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">the norm to use for the current channel.</doc>
            <type name="TunerNorm" c:type="GstTunerNorm*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="signal_changed" invoker="signal_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
incoming signal strength changes. Fires the #GstTuner::signal-changed
signal on the tuner and the #GstTunerChannel::signal-changed signal on 
the channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new signal strength</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="signal_strength" invoker="signal_strength">
        <doc xml:whitespace="preserve">Get the strength of the signal on this channel. Note that this
requires the current channel to be a "tuning" channel, i.e. a
channel on which frequency can be set. This can be checked using
GST_TUNER_CHANNEL_HAS_FLAG (), and the appropriate flag to check
for is GST_TUNER_CHANNEL_FREQUENCY.

The valid range of the signal strength is indicated in the 
min_signal and max_signal properties of the #GstTunerChannel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Signal strength, or 0 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstTunerChannel to get the signal strength from.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="channel_changed" c:identifier="gst_tuner_channel_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
current channel changes. Fires the #GstTuner::channel-changed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstTunerChannel instance</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_channel_by_name"
              c:identifier="gst_tuner_find_channel_by_name"
              introspectable="0">
        <doc xml:whitespace="preserve">Look up a #GstTunerChannel by name.

is available.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A #GstTunerChannel, or NULL if no channel with the provided name</doc>
          <type name="TunerChannel" c:type="GstTunerChannel*"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string containing the name of a #GstTunerChannel</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_norm_by_name"
              c:identifier="gst_tuner_find_norm_by_name"
              introspectable="0">
        <doc xml:whitespace="preserve">Look up a #GstTunerNorm by name.

is available.</doc>
        <return-value>
          <doc xml:whitespace="preserve">A #GstTunerNorm, or NULL if no norm with the provided name</doc>
          <type name="TunerNorm" c:type="GstTunerNorm*"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">A string containing the name of a #GstTunerNorm</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="frequency_changed"
              c:identifier="gst_tuner_frequency_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
configured frequency changes. Fires the #GstTuner::frequency-changed
signal on the tuner, and the #GstTunerChannel::frequency-changed signal
on the channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new frequency setting</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_channel"
              c:identifier="gst_tuner_get_channel"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieve the current channel from the tuner.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current channel of the tuner object.</doc>
          <type name="TunerChannel" c:type="GstTunerChannel*"/>
        </return-value>
      </method>
      <method name="get_frequency" c:identifier="gst_tuner_get_frequency">
        <doc xml:whitespace="preserve">Retrieve the current frequency from the given channel. As for
gst_tuner_set_frequency(), the #GstTunerChannel must support frequency
operations, as indicated by the GST_TUNER_CHANNEL_FREQUENCY flag.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The current frequency, or 0 on error.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GstTunerChannel to retrieve the frequency from.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_norm"
              c:identifier="gst_tuner_get_norm"
              introspectable="0">
        <doc xml:whitespace="preserve">Get the current video norm from the given tuner object for the
currently selected channel.</doc>
        <return-value>
          <doc xml:whitespace="preserve">the current norm.</doc>
          <type name="TunerNorm" c:type="GstTunerNorm*"/>
        </return-value>
      </method>
      <method name="list_channels"
              c:identifier="gst_tuner_list_channels"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a #GList of #GstTunerChannels available
(e.g. 'composite', 's-video', ...) from the given tuner object.

owned by the GstTuner and must not be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A list of channels available on this tuner. The list is</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="list_norms"
              c:identifier="gst_tuner_list_norms"
              introspectable="0">
        <doc xml:whitespace="preserve">Retrieve a GList of available #GstTunerNorm settings for the currently
tuned channel on the given tuner object.

tuner object. The list is owned by the GstTuner and must not
be freed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A list of norms available on the current channel for this</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
      </method>
      <method name="norm_changed" c:identifier="gst_tuner_norm_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
current norm changes. Fires the #GstTuner::norm-changed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GstTunerNorm instance</doc>
            <type name="TunerNorm" c:type="GstTunerNorm*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_channel" c:identifier="gst_tuner_set_channel">
        <doc xml:whitespace="preserve">Tunes the object to the given channel, which should be one of the
channels returned by gst_tuner_list_channels().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">the channel to tune to.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frequency" c:identifier="gst_tuner_set_frequency">
        <doc xml:whitespace="preserve">Sets a tuning frequency on the given tuner/channel. Note that this
requires the given channel to be a "tuning" channel, which can be
checked using GST_TUNER_CHANNEL_HAS_FLAG (), with the proper flag
being GST_TUNER_CHANNEL_FREQUENCY.

The frequency is in Hz, with minimum steps indicated by the 
frequency_multiplicator provided in the #GstTunerChannel. The
valid range is provided in the min_frequency and max_frequency properties
of the #GstTunerChannel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #GstTunerChannel to set the frequency on.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:whitespace="preserve">The frequency to tune in to.</doc>
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_norm" c:identifier="gst_tuner_set_norm">
        <doc xml:whitespace="preserve">Changes the video norm on this tuner to the given norm, which should be
one of the norms returned by gst_tuner_list_norms().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">the norm to use for the current channel.</doc>
            <type name="TunerNorm" c:type="GstTunerNorm*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_changed" c:identifier="gst_tuner_signal_changed">
        <doc xml:whitespace="preserve">Called by elements implementing the #GstTuner interface when the
incoming signal strength changes. Fires the #GstTuner::signal-changed
signal on the tuner and the #GstTunerChannel::signal-changed signal on 
the channel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new signal strength</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="signal_strength" c:identifier="gst_tuner_signal_strength">
        <doc xml:whitespace="preserve">Get the strength of the signal on this channel. Note that this
requires the current channel to be a "tuning" channel, i.e. a
channel on which frequency can be set. This can be checked using
GST_TUNER_CHANNEL_HAS_FLAG (), and the appropriate flag to check
for is GST_TUNER_CHANNEL_FREQUENCY.

The valid range of the signal strength is indicated in the 
min_signal and max_signal properties of the #GstTunerChannel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">Signal strength, or 0 on error.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstTunerChannel to get the signal strength from.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="channel-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the current #GstTunerChannel has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new configured channel.</doc>
            <type name="TunerChannel"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="frequency-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the current frequency has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="TunerChannel"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gulong"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="norm-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the current #GstTunerNorm has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="norm" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new configured norm.</doc>
            <type name="TunerNorm"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="signal-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the signal strength has changed.

See Also: gst_tuner_signal_strength()</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
            <type name="TunerChannel"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new signal strength (an integer)</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <class name="TunerChannel"
           c:symbol-prefix="tuner_channel"
           c:type="GstTunerChannel"
           parent="GObject.Object"
           glib:type-name="GstTunerChannel"
           glib:get-type="gst_tuner_channel_get_type"
           glib:type-struct="TunerChannelClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;The #GstTunerChannel object is provided by an element implementing
the #GstTuner interface.
&lt;/para&gt;
&lt;para&gt;
GstTunerChannel provides a name and flags to determine the type and
capabilities of the channel. If the GST_TUNER_CHANNEL_FREQUENCY flag is
set, then the channel also information about the minimum and maximum
frequency, and range of the reported signal strength.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <virtual-method name="frequency_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="frequency" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="signal_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="signal" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="label">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags">
        <type name="TunerChannelFlags" c:type="GstTunerChannelFlags"/>
      </field>
      <field name="freq_multiplicator">
        <type name="gfloat" c:type="gfloat"/>
      </field>
      <field name="min_frequency">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="max_frequency">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="min_signal">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="max_signal">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="frequency-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the current frequency has changed.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="frequency" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new frequency (an unsigned long)</doc>
            <type name="gulong"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="signal-changed" when="last">
        <doc xml:whitespace="preserve">Reports that the signal strength has changed.

See Also: gst_tuner_signal_strength()</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:whitespace="preserve">The new signal strength (an integer)</doc>
            <type name="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TunerChannelClass"
            c:type="GstTunerChannelClass"
            glib:is-gtype-struct-for="TunerChannel">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="frequency_changed">
        <callback name="frequency_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="channel" transfer-ownership="none">
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
            <parameter name="frequency" transfer-ownership="none">
              <type name="gulong" c:type="gulong"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_changed">
        <callback name="signal_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="channel" transfer-ownership="none">
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
            <parameter name="signal" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="TunerChannelFlags"
              glib:type-name="GstTunerChannelFlags"
              glib:get-type="gst_tuner_channel_flags_get_type"
              c:type="GstTunerChannelFlags">
      <doc xml:whitespace="preserve">An enumeration for flags indicating the available capabilities
of a #GstTunerChannel.</doc>
      <member name="input"
              value="1"
              c:identifier="GST_TUNER_CHANNEL_INPUT"
              glib:nick="input"/>
      <member name="output"
              value="2"
              c:identifier="GST_TUNER_CHANNEL_OUTPUT"
              glib:nick="output"/>
      <member name="frequency"
              value="4"
              c:identifier="GST_TUNER_CHANNEL_FREQUENCY"
              glib:nick="frequency"/>
      <member name="audio"
              value="8"
              c:identifier="GST_TUNER_CHANNEL_AUDIO"
              glib:nick="audio"/>
    </bitfield>
    <record name="TunerInterface"
            c:type="GstTunerInterface"
            glib:is-gtype-struct-for="Tuner">
      <doc xml:whitespace="preserve">Tuner interface.</doc>
      <field name="iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="list_channels" introspectable="0">
        <callback name="list_channels" introspectable="0">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">A list of channels available on this tuner. The list is</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_channel">
        <callback name="set_channel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">the channel to tune to.</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_channel" introspectable="0">
        <callback name="get_channel" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the current channel of the tuner object.</doc>
            <type name="TunerChannel" c:type="GstTunerChannel*"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_norms" introspectable="0">
        <callback name="list_norms" introspectable="0">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">A list of norms available on the current channel for this</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_norm">
        <callback name="set_norm">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="norm" transfer-ownership="none">
              <doc xml:whitespace="preserve">the norm to use for the current channel.</doc>
              <type name="TunerNorm" c:type="GstTunerNorm*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_norm" introspectable="0">
        <callback name="get_norm" introspectable="0">
          <return-value>
            <doc xml:whitespace="preserve">the current norm.</doc>
            <type name="TunerNorm" c:type="GstTunerNorm*"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_frequency">
        <callback name="set_frequency">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GstTunerChannel to set the frequency on.</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
            <parameter name="frequency" transfer-ownership="none">
              <doc xml:whitespace="preserve">The frequency to tune in to.</doc>
              <type name="gulong" c:type="gulong"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_frequency">
        <callback name="get_frequency">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">The current frequency, or 0 on error.</doc>
            <type name="gulong" c:type="gulong"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">The #GstTunerChannel to retrieve the frequency from.</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_strength">
        <callback name="signal_strength">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">Signal strength, or 0 on error.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">the #GstTunerChannel to get the signal strength from.</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="channel_changed">
        <callback name="channel_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GstTunerChannel instance</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="norm_changed">
        <callback name="norm_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="norm" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #GstTunerNorm instance</doc>
              <type name="TunerNorm" c:type="GstTunerNorm*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="frequency_changed">
        <callback name="frequency_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
            <parameter name="frequency" transfer-ownership="none">
              <doc xml:whitespace="preserve">The new frequency setting</doc>
              <type name="gulong" c:type="gulong"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="signal_changed">
        <callback name="signal_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="tuner" transfer-ownership="none">
              <type name="Tuner" c:type="GstTuner*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:whitespace="preserve">The current #GstTunerChannel</doc>
              <type name="TunerChannel" c:type="GstTunerChannel*"/>
            </parameter>
            <parameter name="signal" transfer-ownership="none">
              <doc xml:whitespace="preserve">The new signal strength</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TunerNorm"
           c:symbol-prefix="tuner_norm"
           c:type="GstTunerNorm"
           parent="GObject.Object"
           glib:type-name="GstTunerNorm"
           glib:get-type="gst_tuner_norm_get_type"
           glib:type-struct="TunerNormClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;The #GstTunerNorm object is created by an element implementing the
#GstTuner interface and encapsulates the selection of a capture/output format
for a selected #GstTunerChannel.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="label">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="framerate">
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="TunerNormClass"
            c:type="GstTunerNormClass"
            glib:is-gtype-struct-for="TunerNorm">
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gst_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function name="interfaces_marshal_VOID__OBJECT_INT"
              c:identifier="gst_interfaces_marshal_VOID__OBJECT_INT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="interfaces_marshal_VOID__OBJECT_ULONG"
              c:identifier="gst_interfaces_marshal_VOID__OBJECT_ULONG">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_event_get_type"
              c:identifier="gst_navigation_event_get_type"
              moved-to="Navigation.event_get_type"
              version="0.10.23">
      <doc xml:whitespace="preserve">Inspect a #GstEvent and return the #GstNavigationEventType of the event, or
#GST_NAVIGATION_EVENT_INVALID if the event is not a #GstNavigation event.</doc>
      <return-value transfer-ownership="none">
        <type name="NavigationEventType" c:type="GstNavigationEventType"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_event_parse_command"
              c:identifier="gst_navigation_event_parse_command"
              moved-to="Navigation.event_parse_command"
              version="0.10.23">
      <doc xml:whitespace="preserve">Inspect a #GstNavigation command event and retrieve the enum value of the
associated command.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if the navigation command could be extracted, otherwise FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="command" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to GstNavigationCommand to receive the type of the navigation event.</doc>
          <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_event_parse_key_event"
              c:identifier="gst_navigation_event_parse_key_event"
              moved-to="Navigation.event_parse_key_event"
              version="0.10.23">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a location to receive the string identifying the key press. The returned string is owned by the event, and valid only until the event is unreffed.</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_event_parse_mouse_button_event"
              c:identifier="gst_navigation_event_parse_mouse_button_event"
              moved-to="Navigation.event_parse_mouse_button_event"
              version="0.10.23">
      <doc xml:whitespace="preserve">Retrieve the details of either a #GstNavigation mouse button press event or
a mouse button release event. Determine which type the event is using
gst_navigation_event_get_type() to retrieve the #GstNavigationEventType.

otherwise FALSE.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if the button number and both coordinates could be extracted,</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="button" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a gint that will receive the button number associated with the event.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a gdouble to receive the x coordinate of the mouse button event.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a gdouble to receive the y coordinate of the mouse button event.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_event_parse_mouse_move_event"
              c:identifier="gst_navigation_event_parse_mouse_move_event"
              moved-to="Navigation.event_parse_mouse_move_event"
              version="0.10.23">
      <doc xml:whitespace="preserve">Inspect a #GstNavigation mouse movement event and extract the coordinates
of the event.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if both coordinates could be extracted, otherwise FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to inspect.</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a gdouble to receive the x coordinate of the mouse movement.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a gdouble to receive the y coordinate of the mouse movement.</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_get_type"
              c:identifier="gst_navigation_message_get_type"
              moved-to="Navigation.message_get_type"
              version="0.10.23">
      <doc xml:whitespace="preserve">Check a bus message to see if it is a #GstNavigation event, and return
the #GstNavigationMessageType identifying the type of the message if so.

#GST_NAVIGATION_MESSAGE_INVALID if the message is not a #GstNavigation
notification.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The type of the #GstMessage, or</doc>
        <type name="NavigationMessageType" c:type="GstNavigationMessageType"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_new_angles_changed"
              c:identifier="gst_navigation_message_new_angles_changed"
              moved-to="Navigation.message_new_angles_changed"
              version="0.10.23">
      <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_ANGLES_CHANGED for notifying an application
that the current angle, or current number of angles available in a
multiangle video has changed.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new #GstMessage.</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="cur_angle" transfer-ownership="none">
          <doc xml:whitespace="preserve">The currently selected angle.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="n_angles" transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of viewing angles now available.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_new_commands_changed"
              c:identifier="gst_navigation_message_new_commands_changed"
              moved-to="Navigation.message_new_commands_changed"
              version="0.10.23">
      <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new #GstMessage.</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_new_mouse_over"
              c:identifier="gst_navigation_message_new_mouse_over"
              moved-to="Navigation.message_new_mouse_over"
              version="0.10.23">
      <doc xml:whitespace="preserve">Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_MOUSE_OVER.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new #GstMessage.</doc>
        <type name="Gst.Message" c:type="GstMessage*"/>
      </return-value>
      <parameters>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstObject to set as source of the new message.</doc>
          <type name="Gst.Object" c:type="GstObject*"/>
        </parameter>
        <parameter name="active" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the mouse has entered a clickable area of the display. %FALSE if it over a non-clickable area.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_parse_angles_changed"
              c:identifier="gst_navigation_message_parse_angles_changed"
              moved-to="Navigation.message_parse_angles_changed"
              version="0.10.23">
      <doc xml:whitespace="preserve">Parse a #GstNavigation message of type GST_NAVIGATION_MESSAGE_ANGLES_CHANGED
and extract the @cur_angle and @n_angles parameters.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the message could be successfully parsed. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="cur_angle" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a #guint to receive the new current angle number, or NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="n_angles" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a #guint to receive the new angle count, or NULL.</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_message_parse_mouse_over"
              c:identifier="gst_navigation_message_parse_mouse_over"
              moved-to="Navigation.message_parse_mouse_over"
              version="0.10.23">
      <doc xml:whitespace="preserve">Parse a #GstNavigation message of type #GST_NAVIGATION_MESSAGE_MOUSE_OVER
and extract the active/inactive flag. If the mouse over event is marked
active, it indicates that the mouse is over a clickable area.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the message could be successfully parsed. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstMessage to inspect.</doc>
          <type name="Gst.Message" c:type="GstMessage*"/>
        </parameter>
        <parameter name="active" transfer-ownership="none">
          <doc xml:whitespace="preserve">A pointer to a gboolean to receive the active/inactive state, or NULL.</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_get_type"
              c:identifier="gst_navigation_query_get_type"
              moved-to="Navigation.query_get_type"
              version="0.10.23">
      <doc xml:whitespace="preserve">Inspect a #GstQuery and return the #GstNavigationQueryType associated with
it if it is a #GstNavigation query.

#GST_NAVIGATION_QUERY_INVALID</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GstNavigationQueryType of the query, or</doc>
        <type name="NavigationQueryType" c:type="GstNavigationQueryType"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">The query to inspect</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_new_angles"
              c:identifier="gst_navigation_query_new_angles"
              moved-to="Navigation.query_new_angles"
              version="0.10.23">
      <doc xml:whitespace="preserve">Create a new #GstNavigation angles query. When executed, it will
query the pipeline for the set of currently available angles, which may be
greater than one in a multiangle video.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new query.</doc>
        <type name="Gst.Query" c:type="GstQuery*"/>
      </return-value>
    </function>
    <function name="navigation_query_new_commands"
              c:identifier="gst_navigation_query_new_commands"
              moved-to="Navigation.query_new_commands"
              version="0.10.23">
      <doc xml:whitespace="preserve">Create a new #GstNavigation commands query. When executed, it will
query the pipeline for the set of currently available commands.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">The new query.</doc>
        <type name="Gst.Query" c:type="GstQuery*"/>
      </return-value>
    </function>
    <function name="navigation_query_parse_angles"
              c:identifier="gst_navigation_query_parse_angles"
              moved-to="Navigation.query_parse_angles"
              version="0.10.23">
      <doc xml:whitespace="preserve">Parse the current angle number in the #GstNavigation angles @query into the
#guint pointed to by the @cur_angle variable, and the number of available
angles into the #guint pointed to by the @n_angles variable.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstQuery</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="cur_angle" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a #guint into which to store the currently selected angle value from the query, or NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="n_angles" transfer-ownership="none">
          <doc xml:whitespace="preserve">Pointer to a #guint into which to store the number of angles value from the query, or NULL</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_parse_commands_length"
              c:identifier="gst_navigation_query_parse_commands_length"
              moved-to="Navigation.query_parse_commands_length"
              version="0.10.23">
      <doc xml:whitespace="preserve">Parse the number of commands in the #GstNavigation commands @query.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstQuery</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="n_cmds" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of commands in this query.</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_parse_commands_nth"
              c:identifier="gst_navigation_query_parse_commands_nth"
              moved-to="Navigation.query_parse_commands_nth"
              version="0.10.23">
      <doc xml:whitespace="preserve">Parse the #GstNavigation command query and retrieve the @nth command from
it into @cmd. If the list contains less elements than @nth, @cmd will be
set to #GST_NAVIGATION_COMMAND_INVALID.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the query could be successfully parsed. %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstQuery</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="nth" transfer-ownership="none">
          <doc xml:whitespace="preserve">the nth command to retrieve.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="cmd" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to store the nth command into.</doc>
          <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_set_angles"
              c:identifier="gst_navigation_query_set_angles"
              moved-to="Navigation.query_set_angles"
              version="0.10.23">
      <doc xml:whitespace="preserve">Set the #GstNavigation angles query result field in @query.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstQuery</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="cur_angle" transfer-ownership="none">
          <doc xml:whitespace="preserve">the current viewing angle to set.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="n_angles" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of viewing angles to set.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="navigation_query_set_commandsv"
              c:identifier="gst_navigation_query_set_commandsv"
              moved-to="Navigation.query_set_commandsv"
              version="0.10.23">
      <doc xml:whitespace="preserve">Set the #GstNavigation command query result fields in @query. The number
of commands passed must be equal to @n_commands.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="query" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstQuery</doc>
          <type name="Gst.Query" c:type="GstQuery*"/>
        </parameter>
        <parameter name="n_cmds" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of commands to set.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="cmds" transfer-ownership="none">
          <doc xml:whitespace="preserve">An array containing @n_cmds @GstNavigationCommand values.</doc>
          <type name="NavigationCommand" c:type="GstNavigationCommand*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
