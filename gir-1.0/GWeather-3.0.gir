<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="xlib" version="2.0"/>
  <package name="gweather-3.0"/>
  <namespace name="GWeather"
             version="3.0"
             shared-library="libgweather-3.so.0"
             c:identifier-prefixes="GWeather"
             c:symbol-prefixes="gweather">
    <constant name="LOCATION_ENTRY_H"
              value="1"
              c:type="GWEATHER_LOCATION_ENTRY_H">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Location"
            c:type="GWeatherLocation"
            glib:type-name="GWeatherLocation"
            glib:get-type="gweather_location_get_type"
            c:symbol-prefix="location">
      <constructor name="new_world" c:identifier="gweather_location_new_world">
        <doc xml:whitespace="preserve">Creates a new #GWeatherLocation of type %GWEATHER_LOCATION_WORLD,
representing a hierarchy containing all of the locations from
Locations.xml.

If @use_regions is %TRUE, the immediate children of the returned
location will be %GWEATHER_LOCATION_REGION nodes, representing the
top-level "regions" of Locations.xml (the continents and a few
other divisions), and the country-level nodes will be the children
of the regions. If @use_regions is %FALSE, the regions will be
skipped, and the children of the returned location will be the
%GWEATHER_LOCATION_COUNTRY nodes.

%NULL if Locations.xml could not be found or could not be parsed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a %GWEATHER_LOCATION_WORLD location, or</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <parameter name="use_regions" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether or not to divide the world into regions</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="free_children"
              c:identifier="gweather_location_free_children"
              deprecated="This is a no-op.">
        <doc xml:whitespace="preserve">This is a no-op. Do not use it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="children" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of @loc's children</doc>
            <type name="Location" c:type="GWeatherLocation**"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_timezones"
              c:identifier="gweather_location_free_timezones">
        <doc xml:whitespace="preserve">Frees the array of timezones returned by
gweather_location_get_timezones().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="zones" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array returned from gweather_location_get_timezones()</doc>
            <type name="Timezone" c:type="GWeatherTimezone**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="gweather_location_get_children">
        <doc xml:whitespace="preserve">Gets an array of @loc's children; this is owned by @loc and will
not remain valid if @loc is freed.

children. (May be empty, but will not be %NULL.)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's</doc>
          <array c:type="GWeatherLocation**">
            <type name="Location" c:type="GWeatherLocation*"/>
          </array>
        </return-value>
      </method>
      <method name="get_city_name"
              c:identifier="gweather_location_get_city_name">
        <doc xml:whitespace="preserve">For a %GWEATHER_LOCATION_CITY location, this is equivalent to
gweather_location_get_name(). For a
%GWEATHER_LOCATION_WEATHER_STATION location, it is equivalent to
calling gweather_location_get_name() on the location's parent. For
other locations it will return %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">(allow-none) @loc's city name, or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_code" c:identifier="gweather_location_get_code">
        <doc xml:whitespace="preserve">Gets the METAR station code associated with a
%GWEATHER_LOCATION_WEATHER_STATION location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's METAR station code, or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_coords" c:identifier="gweather_location_get_coords">
        <doc xml:whitespace="preserve">Gets @loc's coordinates; you must check
gweather_location_has_coords() before calling this.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="latitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">on return will contain @loc's latitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="longitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">on return will contain @loc's longitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_country" c:identifier="gweather_location_get_country">
        <doc xml:whitespace="preserve">Gets the ISO 3166 country code of @loc (or %NULL if @loc is a
region- or world-level location)

is a region- or world-level location)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's country code (or %NULL if @loc</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_distance"
              c:identifier="gweather_location_get_distance">
        <doc xml:whitespace="preserve">Determines the distance in kilometers between @loc and @loc2.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the distance between @loc and @loc2.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <parameter name="loc2" transfer-ownership="none">
            <doc xml:whitespace="preserve">a second #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_level" c:identifier="gweather_location_get_level">
        <doc xml:whitespace="preserve">Gets @loc's level, from %GWEATHER_LOCATION_WORLD, to
%GWEATHER_LOCATION_WEATHER_STATION.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's level</doc>
          <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gweather_location_get_name">
        <doc xml:whitespace="preserve">Gets @loc's name, localized into the current language.

Note that %GWEATHER_LOCATION_WEATHER_STATION nodes are not
localized, and so the name returned for those nodes will always be
in English, and should therefore not be displayed to the user.
(FIXME: should we just not return a name?)</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_parent" c:identifier="gweather_location_get_parent">
        <doc xml:whitespace="preserve">Gets @loc's parent location.

if @loc is a %GWEATHER_LOCATION_WORLD node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's parent, or %NULL</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
      </method>
      <method name="get_sort_name"
              c:identifier="gweather_location_get_sort_name">
        <doc xml:whitespace="preserve">Gets @loc's "sort name", which is the name after having
g_utf8_normalize() (with %G_NORMALIZE_ALL) and g_utf8_casefold()
called on it. You can use this to sort locations, or to comparing
user input against a location name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's sort name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_timezone"
              c:identifier="gweather_location_get_timezone">
        <doc xml:whitespace="preserve">Gets the timezone associated with @loc, if known.

The timezone is owned either by @loc or by one of its parents.
FIXME.

%NULL</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@loc's timezone, or</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
      </method>
      <method name="get_timezones"
              c:identifier="gweather_location_get_timezones">
        <doc xml:whitespace="preserve">Gets an array of all timezones associated with any location under
@loc. You can use gweather_location_free_timezones() to free this
array.

of timezones. May be empty but will not be %NULL.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">an array</doc>
          <array c:type="GWeatherTimezone**">
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </array>
        </return-value>
      </method>
      <method name="get_weather"
              c:identifier="gweather_location_get_weather"
              introspectable="0">
        <doc xml:whitespace="preserve">Creates a #WeatherInfo corresponding to @loc; you can use
weather_info_update() to fill it in.

@loc.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #WeatherInfo corresponding to</doc>
          <type c:type="WeatherInfo*"/>
        </return-value>
      </method>
      <method name="has_coords" c:identifier="gweather_location_has_coords">
        <doc xml:whitespace="preserve">Checks if @loc has valid latitude and longitude.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @loc has valid latitude and longitude.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="ref" c:identifier="gweather_location_ref">
        <doc xml:whitespace="preserve">Adds 1 to @loc's reference count.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@loc</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gweather_location_unref">
        <doc xml:whitespace="preserve">Subtracts 1 from @loc's reference count, and frees it if the
reference count reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <class name="LocationEntry"
           c:symbol-prefix="location_entry"
           c:type="GWeatherLocationEntry"
           parent="Gtk.Entry"
           glib:type-name="GWeatherLocationEntry"
           glib:get-type="gweather_location_entry_get_type"
           glib:type-struct="LocationEntryClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="gweather_location_entry_new">
        <doc xml:whitespace="preserve">Creates a new #GWeatherLocationEntry.

@top will normally be a location returned from
gweather_location_new_world(), but you can create an entry that
only accepts a smaller set of locations if you want.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GWeatherLocationEntry</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="top" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top-level location for the entry.</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_location"
              c:identifier="gweather_location_entry_get_location">
        <doc xml:whitespace="preserve">Gets the location that was set by a previous call to
gweather_location_entry_set_location() or was selected by the user.

(which you must unref when you are done with it), or %NULL if no
location is selected.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the selected location</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
      </method>
      <method name="has_custom_text"
              c:identifier="gweather_location_entry_has_custom_text">
        <doc xml:whitespace="preserve">Checks whether or not @entry's text has been modified by the user.
Note that this does not mean that no location is associated with @entry.
gweather_location_entry_get_location() should be used for this.

it's set to the default text of a location.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @entry's text was modified by the user, or %FALSE if</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_city" c:identifier="gweather_location_entry_set_city">
        <doc xml:whitespace="preserve">Sets @entry's location to a city with the given @code, and given
@city_name, if non-%NULL. If there is no matching city, sets
@entry's location to %NULL.

%FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @entry's location could be set to a matching city,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="city_name" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the city name, or %NULL</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:whitespace="preserve">the METAR station code</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="gweather_location_entry_set_location">
        <doc xml:whitespace="preserve">Sets @entry's location to @loc, and updates the text of the
entry accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="loc" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GWeatherLocation in @entry, or %NULL to clear @entry</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <property name="location" writable="1" transfer-ownership="none">
        <type name="gpointer"/>
      </property>
      <property name="top"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer"/>
      </property>
      <field name="parent">
        <type name="Gtk.Entry" c:type="GtkEntry"/>
      </field>
      <field name="location" readable="0" private="1">
        <type name="Location" c:type="GWeatherLocation*"/>
      </field>
      <field name="top" readable="0" private="1">
        <type name="Location" c:type="GWeatherLocation*"/>
      </field>
      <field name="custom_text" readable="0" bits="1" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </class>
    <record name="LocationEntryClass"
            c:type="GWeatherLocationEntryClass"
            glib:is-gtype-struct-for="LocationEntry">
      <field name="parent_class">
        <type name="Gtk.EntryClass" c:type="GtkEntryClass"/>
      </field>
    </record>
    <enumeration name="LocationLevel"
                 glib:type-name="GWeatherLocationLevel"
                 glib:get-type="gweather_location_level_get_type"
                 c:type="GWeatherLocationLevel">
      <doc xml:whitespace="preserve">The size/scope of a particular #GWeatherLocation.

Locations form a hierarchy, with a %GWEATHER_LOCATION_WORLD
location at the top, divided into regions or countries, and so on.
Countries may or may not be divided into "adm1"s, and "adm1"s may
or may not be divided into "adm2"s. A city will have at least one,
and possibly several, weather stations inside it. Weather stations
will never appear outside of cities.</doc>
      <member name="world"
              value="0"
              c:identifier="GWEATHER_LOCATION_WORLD"
              glib:nick="world"/>
      <member name="region"
              value="1"
              c:identifier="GWEATHER_LOCATION_REGION"
              glib:nick="region"/>
      <member name="country"
              value="2"
              c:identifier="GWEATHER_LOCATION_COUNTRY"
              glib:nick="country"/>
      <member name="adm1"
              value="3"
              c:identifier="GWEATHER_LOCATION_ADM1"
              glib:nick="adm1"/>
      <member name="adm2"
              value="4"
              c:identifier="GWEATHER_LOCATION_ADM2"
              glib:nick="adm2"/>
      <member name="city"
              value="5"
              c:identifier="GWEATHER_LOCATION_CITY"
              glib:nick="city"/>
      <member name="weather_station"
              value="6"
              c:identifier="GWEATHER_LOCATION_WEATHER_STATION"
              glib:nick="weather-station"/>
    </enumeration>
    <constant name="TIMEZONE_MENU_H"
              value="1"
              c:type="GWEATHER_TIMEZONE_MENU_H">
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Timezone"
            c:type="GWeatherTimezone"
            glib:type-name="GWeatherTimezone"
            glib:get-type="gweather_timezone_get_type"
            c:symbol-prefix="timezone">
      <method name="get_dst_offset"
              c:identifier="gweather_timezone_get_dst_offset">
        <doc xml:whitespace="preserve">Gets @zone's daylight/summer time offset from UTC, in minutes. Eg,
a value of %120 would indicate "GMT+2". This is only meaningful if
gweather_timezone_has_dst() returns %TRUE.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@zone's daylight/summer time offset, in minutes</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="gweather_timezone_get_name">
        <doc xml:whitespace="preserve">Gets @zone's name; a translated, user-presentable string.

Note that the returned name might not be unique among timezones,
and may not make sense to the user unless it is presented along
with the timezone's country's name (or in some context where the
country is obvious).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@zone's name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_offset" c:identifier="gweather_timezone_get_offset">
        <doc xml:whitespace="preserve">Gets @zone's standard offset from UTC, in minutes. Eg, a value of
%120 would indicate "GMT+2".</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@zone's standard offset, in minutes</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_tzid" c:identifier="gweather_timezone_get_tzid">
        <doc xml:whitespace="preserve">Gets @zone's tzdata identifier, eg "America/New_York".</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@zone's tzid</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="has_dst" c:identifier="gweather_timezone_has_dst">
        <doc xml:whitespace="preserve">Checks if @zone observes daylight/summer time for part of the year.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @zone observes daylight/summer time.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="ref" c:identifier="gweather_timezone_ref">
        <doc xml:whitespace="preserve">Adds 1 to @zone's reference count.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@zone</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gweather_timezone_unref">
        <doc xml:whitespace="preserve">Subtracts 1 from @zone's reference count and frees it if it reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <function name="get_utc" c:identifier="gweather_timezone_get_utc">
        <doc xml:whitespace="preserve">Gets the UTC timezone.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GWeatherTimezone for UTC, or %NULL on error.</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
      </function>
    </record>
    <class name="TimezoneMenu"
           c:symbol-prefix="timezone_menu"
           c:type="GWeatherTimezoneMenu"
           parent="Gtk.ComboBox"
           glib:type-name="GWeatherTimezoneMenu"
           glib:get-type="gweather_timezone_menu_get_type"
           glib:type-struct="TimezoneMenuClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.CellLayout"/>
      <constructor name="new" c:identifier="gweather_timezone_menu_new">
        <doc xml:whitespace="preserve">Creates a new #GWeatherTimezoneMenu.

@top will normally be a location returned from
gweather_location_new_world(), but you can create a menu that
contains the timezones from a smaller set of locations if you want.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new #GWeatherTimezoneMenu</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="top" transfer-ownership="none">
            <doc xml:whitespace="preserve">the top-level location for the menu.</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_tzid" c:identifier="gweather_timezone_menu_get_tzid">
        <doc xml:whitespace="preserve">Gets @menu's timezone id.

is selected.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@menu's tzid, or %NULL if no timezone</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="set_tzid" c:identifier="gweather_timezone_menu_set_tzid">
        <doc xml:whitespace="preserve">Sets @menu to the given @tzid. If @tzid is %NULL, sets @menu to
"Unknown".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tzid" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a tzdata id (eg, "America/New_York")</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="top"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer"/>
      </property>
      <property name="tzid" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="Gtk.ComboBox" c:type="GtkComboBox"/>
      </field>
      <field name="zone" readable="0" private="1">
        <type name="Timezone" c:type="GWeatherTimezone*"/>
      </field>
    </class>
    <record name="TimezoneMenuClass"
            c:type="GWeatherTimezoneMenuClass"
            glib:is-gtype-struct-for="TimezoneMenu">
      <field name="parent_class">
        <type name="Gtk.ComboBoxClass" c:type="GtkComboBoxClass"/>
      </field>
    </record>
    <function name="timezone_get_utc"
              c:identifier="gweather_timezone_get_utc"
              moved-to="Timezone.get_utc">
      <doc xml:whitespace="preserve">Gets the UTC timezone.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a #GWeatherTimezone for UTC, or %NULL on error.</doc>
        <type name="Timezone" c:type="GWeatherTimezone*"/>
      </return-value>
    </function>
  </namespace>
</repository>
