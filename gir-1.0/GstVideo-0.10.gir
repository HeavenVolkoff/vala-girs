<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gst" version="0.10"/>
  <include name="GstBase" version="0.10"/>
  <include name="libxml2" version="2.0"/>
  <package name="gstreamer-video-0.10"/>
  <c:include name="gst/video/gstvideodecoder.h"/>
  <c:include name="gst/video/gstvideoencoder.h"/>
  <c:include name="gst/video/gstvideofilter.h"/>
  <c:include name="gst/video/gstvideosink.h"/>
  <c:include name="gst/video/gstvideoutils.h"/>
  <c:include name="gst/video/video-enumtypes.h"/>
  <c:include name="gst/video/video-overlay-composition.h"/>
  <c:include name="gst/video/video.h"/>
  <namespace name="GstVideo"
             version="0.10"
             shared-library="libgstvideo-0.10.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <constant name="VIDEO_BYTE1_MASK_24"
              value="0x00FF0000"
              c:type="GST_VIDEO_BYTE1_MASK_24">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE1_MASK_24_INT"
              value="16711680"
              c:type="GST_VIDEO_BYTE1_MASK_24_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE1_MASK_32"
              value="0xFF000000"
              c:type="GST_VIDEO_BYTE1_MASK_32">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE1_MASK_32_INT"
              value="4278190080"
              c:type="GST_VIDEO_BYTE1_MASK_32_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE2_MASK_24"
              value="0x0000FF00"
              c:type="GST_VIDEO_BYTE2_MASK_24">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE2_MASK_24_INT"
              value="65280"
              c:type="GST_VIDEO_BYTE2_MASK_24_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE2_MASK_32"
              value="0x00FF0000"
              c:type="GST_VIDEO_BYTE2_MASK_32">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE2_MASK_32_INT"
              value="16711680"
              c:type="GST_VIDEO_BYTE2_MASK_32_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE3_MASK_24"
              value="0x000000FF"
              c:type="GST_VIDEO_BYTE3_MASK_24">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE3_MASK_24_INT"
              value="255"
              c:type="GST_VIDEO_BYTE3_MASK_24_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE3_MASK_32"
              value="0x0000FF00"
              c:type="GST_VIDEO_BYTE3_MASK_32">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE3_MASK_32_INT"
              value="65280"
              c:type="GST_VIDEO_BYTE3_MASK_32_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_BYTE4_MASK_32"
              value="0x000000FF"
              c:type="GST_VIDEO_BYTE4_MASK_32">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_BYTE4_MASK_32_INT"
              value="255"
              c:type="GST_VIDEO_BYTE4_MASK_32_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_CAPS_GRAY8"
              value="video/x-raw-gray, bpp = (int) 8, depth = (int) 8, width = "
              c:type="GST_VIDEO_CAPS_GRAY8">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_CAPS_RGB8_PALETTED"
              value="video/x-raw-rgb, bpp = (int)8, depth = (int)8, width = "
              c:type="GST_VIDEO_CAPS_RGB8_PALETTED">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_CAPS_r210"
              value="video/x-raw-rgb, bpp = (int) 32, depth = (int) 30, endianness = (int) BIG_ENDIAN, red_mask = (int) 0x3ff00000, green_mask = (int) 0x000ffc00, blue_mask = (int) 0x000003ff, width = "
              c:type="GST_VIDEO_CAPS_r210">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COLORIMETRY_BT601"
              value="bt601"
              c:type="GST_VIDEO_COLORIMETRY_BT601">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COLORIMETRY_BT709"
              value="bt709"
              c:type="GST_VIDEO_COLORIMETRY_BT709">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COLORIMETRY_SMPTE240M"
              value="smpte240m"
              c:type="GST_VIDEO_COLORIMETRY_SMPTE240M">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP1_MASK_15"
              value="0x7c00"
              c:type="GST_VIDEO_COMP1_MASK_15">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP1_MASK_15_INT"
              value="31744"
              c:type="GST_VIDEO_COMP1_MASK_15_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP1_MASK_16"
              value="0xf800"
              c:type="GST_VIDEO_COMP1_MASK_16">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP1_MASK_16_INT"
              value="63488"
              c:type="GST_VIDEO_COMP1_MASK_16_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP2_MASK_15"
              value="0x03e0"
              c:type="GST_VIDEO_COMP2_MASK_15">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP2_MASK_15_INT"
              value="992"
              c:type="GST_VIDEO_COMP2_MASK_15_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP2_MASK_16"
              value="0x07e0"
              c:type="GST_VIDEO_COMP2_MASK_16">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP2_MASK_16_INT"
              value="2016"
              c:type="GST_VIDEO_COMP2_MASK_16_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP3_MASK_15"
              value="0x001f"
              c:type="GST_VIDEO_COMP3_MASK_15">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP3_MASK_15_INT"
              value="31"
              c:type="GST_VIDEO_COMP3_MASK_15_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP3_MASK_16"
              value="0x001f"
              c:type="GST_VIDEO_COMP3_MASK_16">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_COMP3_MASK_16_INT"
              value="31"
              c:type="GST_VIDEO_COMP3_MASK_16_INT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_A" value="3" c:type="GST_VIDEO_COMP_A">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_B" value="2" c:type="GST_VIDEO_COMP_B">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_G" value="1" c:type="GST_VIDEO_COMP_G">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_R" value="0" c:type="GST_VIDEO_COMP_R">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_U" value="1" c:type="GST_VIDEO_COMP_U">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_V" value="2" c:type="GST_VIDEO_COMP_V">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_COMP_Y" value="0" c:type="GST_VIDEO_COMP_Y">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_DECODER_MAX_ERRORS"
              value="10"
              c:type="GST_VIDEO_DECODER_MAX_ERRORS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_DECODER_SINK_NAME"
              value="sink"
              c:type="GST_VIDEO_DECODER_SINK_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_DECODER_SRC_NAME"
              value="src"
              c:type="GST_VIDEO_DECODER_SRC_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_ENCODER_SINK_NAME"
              value="sink"
              c:type="GST_VIDEO_ENCODER_SINK_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_ENCODER_SRC_NAME"
              value="src"
              c:type="GST_VIDEO_ENCODER_SRC_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_FPS_RANGE"
              value="(fraction) [ 0, max ]"
              c:type="GST_VIDEO_FPS_RANGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VIDEO_MAX_COMPONENTS"
              value="4"
              c:type="GST_VIDEO_MAX_COMPONENTS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_MAX_PLANES" value="4" c:type="GST_VIDEO_MAX_PLANES">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VIDEO_SIZE_RANGE"
              value="(int) [ 1, max ]"
              c:type="GST_VIDEO_SIZE_RANGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <bitfield name="VideoChromaSite"
              glib:type-name="GstVideoChromaSite"
              glib:get-type="gst_video_chroma_site_get_type"
              c:type="GstVideoChromaSite">
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_CHROMA_SITE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="none"
              value="1"
              c:identifier="GST_VIDEO_CHROMA_SITE_NONE"
              glib:nick="none"/>
      <member name="h_cosited"
              value="2"
              c:identifier="GST_VIDEO_CHROMA_SITE_H_COSITED"
              glib:nick="h-cosited"/>
      <member name="v_cosited"
              value="4"
              c:identifier="GST_VIDEO_CHROMA_SITE_V_COSITED"
              glib:nick="v-cosited"/>
      <member name="alt_line"
              value="8"
              c:identifier="GST_VIDEO_CHROMA_SITE_ALT_LINE"
              glib:nick="alt-line"/>
      <member name="cosited"
              value="6"
              c:identifier="GST_VIDEO_CHROMA_SITE_COSITED"
              glib:nick="cosited"/>
      <member name="jpeg"
              value="1"
              c:identifier="GST_VIDEO_CHROMA_SITE_JPEG"
              glib:nick="jpeg"/>
      <member name="mpeg2"
              value="2"
              c:identifier="GST_VIDEO_CHROMA_SITE_MPEG2"
              glib:nick="mpeg2"/>
      <member name="dv"
              value="14"
              c:identifier="GST_VIDEO_CHROMA_SITE_DV"
              glib:nick="dv"/>
    </bitfield>
    <record name="VideoCodecFrame"
            c:type="GstVideoCodecFrame"
            glib:type-name="GstVideoCodecFrame"
            glib:get-type="gst_video_codec_frame_get_type"
            c:symbol-prefix="video_codec_frame">
      <doc xml:whitespace="preserve">A #GstVideoCodecFrame represents a video frame both in raw and
encoded form.</doc>
      <field name="ref_count" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="system_frame_number" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="decode_frame_number" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="presentation_frame_number" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="dts" writable="1">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="pts" writable="1">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="duration" writable="1">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="distance_from_sync" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="input_buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="output_buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="deadline" writable="1">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="events" readable="0" private="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="user_data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="user_data_destroy_notify" readable="0" private="1">
        <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="void*"/>
        </array>
      </field>
      <method name="get_user_data"
              c:identifier="gst_video_codec_frame_get_user_data">
        <doc xml:whitespace="preserve">Gets private data set on the frame by the subclass via
gst_video_codec_frame_set_user_data() previously.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The previously set user_data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
      </method>
      <method name="ref" c:identifier="gst_video_codec_frame_ref">
        <doc xml:whitespace="preserve">Increases the refcount of the given frame by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@buf</doc>
          <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
        </return-value>
      </method>
      <method name="set_user_data"
              c:identifier="gst_video_codec_frame_set_user_data">
        <doc xml:whitespace="preserve">Sets @user_data on the frame and the #GDestroyNotify that will be called when
the frame is freed. Allows to attach private data by the subclass to frames.

If a @user_data was previously set, then the previous set @notify will be called
before the @user_data is replaced.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">private data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     scope="async"
                     closure="0">
            <doc xml:whitespace="preserve">a #GDestroyNotify</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gst_video_codec_frame_unref">
        <doc xml:whitespace="preserve">Decreases the refcount of the frame. If the refcount reaches 0, the frame
will be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <bitfield name="VideoCodecFrameFlags" c:type="GstVideoCodecFrameFlags">
      <doc xml:whitespace="preserve">Flags for #GstVideoCodecFrame</doc>
      <member name="decode_only"
              value="1"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_DECODE_ONLY"/>
      <member name="sync_point"
              value="2"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_SYNC_POINT"/>
      <member name="force_keyframe"
              value="4"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_FORCE_KEYFRAME"/>
      <member name="force_keyframe_headers"
              value="8"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_FORCE_KEYFRAME_HEADERS"/>
      <member name="tff"
              value="16"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_TFF"/>
      <member name="rff"
              value="32"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_RFF"/>
      <member name="onefield"
              value="64"
              c:identifier="GST_VIDEO_CODEC_FRAME_FLAG_ONEFIELD"/>
    </bitfield>
    <record name="VideoCodecState"
            c:type="GstVideoCodecState"
            glib:type-name="GstVideoCodecState"
            glib:get-type="gst_video_codec_state_get_type"
            c:symbol-prefix="video_codec_state">
      <doc xml:whitespace="preserve">Structure representing the state of an incoming or outgoing video
stream for encoders and decoders.

Decoders and encoders will receive such a state through their
respective @set_format vmethods.

Decoders and encoders can set the downstream state, by using the
@gst_video_decoder_set_output_state() or
@gst_video_encoder_set_output_state() methods.</doc>
      <field name="ref_count" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="info" writable="1">
        <type name="VideoInfo" c:type="GstVideoInfo"/>
      </field>
      <field name="caps" writable="1">
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </field>
      <field name="codec_data" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="void*"/>
        </array>
      </field>
      <method name="ref" c:identifier="gst_video_codec_state_ref">
        <doc xml:whitespace="preserve">Increases the refcount of the given state by one.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">@buf</doc>
          <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
        </return-value>
      </method>
      <method name="unref" c:identifier="gst_video_codec_state_unref">
        <doc xml:whitespace="preserve">Decreases the refcount of the state. If the refcount reaches 0, the state
will be freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <enumeration name="VideoColorMatrix"
                 glib:type-name="GstVideoColorMatrix"
                 glib:get-type="gst_video_color_matrix_get_type"
                 c:type="GstVideoColorMatrix">
      <doc xml:whitespace="preserve">The color matrix is used to convert between Y'PbPr and
non-linear RGB (R'G'B')</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_MATRIX_UNKNOWN"
              glib:nick="unknown"/>
      <member name="rgb"
              value="1"
              c:identifier="GST_VIDEO_COLOR_MATRIX_RGB"
              glib:nick="rgb"/>
      <member name="fcc"
              value="2"
              c:identifier="GST_VIDEO_COLOR_MATRIX_FCC"
              glib:nick="fcc"/>
      <member name="bt709"
              value="3"
              c:identifier="GST_VIDEO_COLOR_MATRIX_BT709"
              glib:nick="bt709"/>
      <member name="bt601"
              value="4"
              c:identifier="GST_VIDEO_COLOR_MATRIX_BT601"
              glib:nick="bt601"/>
      <member name="smpte240m"
              value="5"
              c:identifier="GST_VIDEO_COLOR_MATRIX_SMPTE240M"
              glib:nick="smpte240m"/>
    </enumeration>
    <enumeration name="VideoColorPrimaries"
                 glib:type-name="GstVideoColorPrimaries"
                 glib:get-type="gst_video_color_primaries_get_type"
                 c:type="GstVideoColorPrimaries">
      <doc xml:whitespace="preserve">The color primaries define the how to transform linear RGB values to and from
the CIE XYZ colorspace.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_UNKNOWN"
              glib:nick="unknown"/>
      <member name="bt709"
              value="1"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT709"
              glib:nick="bt709"/>
      <member name="bt470m"
              value="2"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT470M"
              glib:nick="bt470m"/>
      <member name="bt470bg"
              value="3"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_BT470BG"
              glib:nick="bt470bg"/>
      <member name="smpte170m"
              value="4"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_SMPTE170M"
              glib:nick="smpte170m"/>
      <member name="smpte240m"
              value="5"
              c:identifier="GST_VIDEO_COLOR_PRIMARIES_SMPTE240M"
              glib:nick="smpte240m"/>
    </enumeration>
    <enumeration name="VideoColorRange"
                 glib:type-name="GstVideoColorRange"
                 glib:get-type="gst_video_color_range_get_type"
                 c:type="GstVideoColorRange">
      <doc xml:whitespace="preserve">Possible color range values. These constants are defined for 8 bit color
values and can be scaled for other bit depths.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_COLOR_RANGE_UNKNOWN"
              glib:nick="unknown"/>
      <member name="0_255"
              value="1"
              c:identifier="GST_VIDEO_COLOR_RANGE_0_255"
              glib:nick="0-255"/>
      <member name="16_235"
              value="2"
              c:identifier="GST_VIDEO_COLOR_RANGE_16_235"
              glib:nick="16-235"/>
    </enumeration>
    <record name="VideoColorimetry" c:type="GstVideoColorimetry">
      <doc xml:whitespace="preserve">Structure describing the color info.</doc>
      <field name="range" writable="1">
        <type name="VideoColorRange" c:type="GstVideoColorRange"/>
      </field>
      <field name="matrix" writable="1">
        <type name="VideoColorMatrix" c:type="GstVideoColorMatrix"/>
      </field>
      <field name="transfer" writable="1">
        <type name="VideoTransferFunction" c:type="GstVideoTransferFunction"/>
      </field>
      <field name="primaries" writable="1">
        <type name="VideoColorPrimaries" c:type="GstVideoColorPrimaries"/>
      </field>
      <method name="from_string"
              c:identifier="gst_video_colorimetry_from_string"
              version="0.10.37">
        <doc xml:whitespace="preserve">Parse the colorimetry string and update @cinfo with the parsed
values.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if @color points to valid colorimetry info.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a colorimetry string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches"
              c:identifier="gst_video_colorimetry_matches"
              version="0.10.37">
        <doc xml:whitespace="preserve">Check if the colorimetry information in @cinfo matches that of the
string @color.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if @color conveys the same colorimetry info as the color information in @info.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="color" transfer-ownership="none">
            <doc xml:whitespace="preserve">a colorimetry string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="gst_video_colorimetry_to_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
    </record>
    <callback name="VideoConvertFrameCallback"
              c:type="GstVideoConvertFrameCallback">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="VideoDecoder"
           c:symbol-prefix="video_decoder"
           c:type="GstVideoDecoder"
           version="0.10.37"
           parent="Gst.Element"
           glib:type-name="GstVideoDecoder"
           glib:get-type="gst_video_decoder_get_type"
           glib:type-struct="VideoDecoderClass">
      <doc xml:whitespace="preserve">This base class is for video decoders turning encoded data into raw video
frames.

GstVideoDecoder and subclass should cooperate as follows.
&lt;orderedlist&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;&lt;title&gt;Configuration&lt;/title&gt;
  &lt;listitem&gt;&lt;para&gt;
    Initially, GstVideoDecoder calls @start when the decoder element
    is activated, which allows subclass to perform any global setup.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoDecoder calls @set_format to inform subclass of caps
    describing input video data that it is about to receive, including
    possibly configuration data.
    While unlikely, it might be called more than once, if changing input
    parameters require reconfiguration.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoDecoder calls @stop at end of all processing.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;
  &lt;title&gt;Data processing&lt;/title&gt;
    &lt;listitem&gt;&lt;para&gt;
      Base class gathers input data, and optionally allows subclass
      to parse this into subsequently manageable chunks, typically
      corresponding to and referred to as 'frames'.
    &lt;/para&gt;&lt;/listitem&gt;
    &lt;listitem&gt;&lt;para&gt;
      Input frame is provided to subclass' @handle_frame. The ownership of
      the frame is given to @handle_frame.
    &lt;/para&gt;&lt;/listitem&gt;
    &lt;listitem&gt;&lt;para&gt;
      If codec processing results in decoded data, subclass should call
      @gst_video_decoder_finish_frame to have decoded data pushed.
      downstream.
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;&lt;title&gt;Shutdown phase&lt;/title&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoDecoder class calls @stop to inform the subclass that data
    parsing will be stopped.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;/orderedlist&gt;

Subclass is responsible for providing pad template caps for
source and sink pads. The pads need to be named "sink" and "src". It also
needs to set the fixed caps on srcpad, when the format is ensured.  This
is typically when base class calls subclass' @set_format function, though
it might be delayed until calling @gst_video_decoder_finish_frame.

Subclass is also responsible for providing (presentation) timestamps
(likely based on corresponding input ones).  If that is not applicable
or possible, baseclass provides limited framerate based interpolation.

Similarly, the baseclass provides some limited (legacy) seeking support
(upon explicit subclass request), as full-fledged support
should rather be left to upstream demuxer, parser or alike.  This simple
approach caters for seeking and duration reporting using estimated input
bitrates.

Baseclass provides some support for reverse playback, in particular
in case incoming data is not packetized or upstream does not provide
fragments on keyframe boundaries.  However, subclass should then be prepared
for the parsing and frame processing stage to occur separately (rather
than otherwise the latter immediately following the former),
and should ensure the parsing stage properly marks keyframes or rely on
upstream to do so properly for incoming data.

Things that subclass need to take care of:
&lt;itemizedlist&gt;
  &lt;listitem&gt;&lt;para&gt;Provide pad templates&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Set source pad caps when appropriate
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Configure some baseclass behaviour parameters.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Optionally parse input data, if it is not considered packetized.
     Data will be provided to @parse which should invoke @gst_video_decoder_add_to_frame and
     @gst_video_decoder_have_frame as appropriate.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Accept data in @handle_frame and provide decoded results to
     @gst_video_decoder_finish_frame.
  &lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
      <virtual-method name="close">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="finish">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
      </virtual-method>
      <virtual-method name="handle_frame">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="parse">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
          <parameter name="adapter" transfer-ownership="none">
            <type name="GstBase.Adapter" c:type="GstAdapter*"/>
          </parameter>
          <parameter name="at_eos" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hard" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_format">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sink_event">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="src_event">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="stop">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="add_to_frame"
              c:identifier="gst_video_decoder_add_to_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Removes next @n_bytes of input data and adds it to currently parsed frame.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_bytes" transfer-ownership="none">
            <doc xml:whitespace="preserve">an encoded #GstVideoCodecFrame</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="alloc_output_buffer"
              c:identifier="gst_video_decoder_alloc_output_buffer"
              version="0.10.37">
        <doc xml:whitespace="preserve">Helper function that uses @gst_pad_alloc_buffer_and_set_caps()
to allocate a buffer to hold a video frame for @decoder's
current #GstVideoCodecState.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">allocated buffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
      </method>
      <method name="alloc_output_frame"
              c:identifier="gst_video_decoder_alloc_output_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Helper function that uses @gst_pad_alloc_buffer_and_set_caps()
to allocate a buffer to hold a video frame for @decoder's
current #GstVideoCodecState.  Subclass should already have configured video state
and set src pad caps.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">result from pad alloc call</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoCodecFrame</doc>
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="drop_frame"
              c:identifier="gst_video_decoder_drop_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Similar to gst_video_decoder_finish_frame(), but drops @frame in any
case and posts a QoS message with the frame's details on the bus.
In any case, the frame is considered finished and released.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstFlowReturn, usually GST_FLOW_OK.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="full">
            <doc xml:whitespace="preserve">the #GstVideoCodecFrame to drop</doc>
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="finish_frame"
              c:identifier="gst_video_decoder_finish_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">@frame should have a valid decoded data buffer, whose metadata fields
are then appropriately set according to frame data and pushed downstream.
If no output data is provided, @frame is considered skipped.
In any case, the frame is considered finished and released.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstFlowReturn resulting from sending data downstream</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="full">
            <doc xml:whitespace="preserve">a decoded #GstVideoCodecFrame</doc>
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_estimate_rate"
              c:identifier="gst_video_decoder_get_estimate_rate"
              version="0.10.37">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">currently configured byte to time conversion setting</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_frame"
              c:identifier="gst_video_decoder_get_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get a pending unfinished #GstVideoCodecFrame</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">pending unfinished #GstVideoCodecFrame identified by @frame_number.</doc>
          <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
        </return-value>
        <parameters>
          <parameter name="frame_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">system_frame_number of a frame</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_latency"
              c:identifier="gst_video_decoder_get_latency"
              version="0.10.37">
        <doc xml:whitespace="preserve">Returns the configured encoding latency.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_latency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">the configured minimum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime*"/>
          </parameter>
          <parameter name="max_latency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">the configured maximum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_decode_time"
              c:identifier="gst_video_decoder_get_max_decode_time"
              version="0.10.37">
        <doc xml:whitespace="preserve">Determines maximum possible decoding time for @frame that will
allow it to decode and arrive in time (as determined by QoS events).
In particular, a negative result means decoding in time is no longer possible
and should therefore occur as soon/skippy as possible.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">max decoding time.</doc>
          <type name="Gst.ClockTimeDiff" c:type="GstClockTimeDiff"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoCodecFrame</doc>
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_errors"
              c:identifier="gst_video_decoder_get_max_errors"
              version="0.10.37">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">currently configured decoder tolerated error count.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_oldest_frame"
              c:identifier="gst_video_decoder_get_oldest_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get the oldest pending unfinished #GstVideoCodecFrame</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">oldest pending unfinished #GstVideoCodecFrame.</doc>
          <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
        </return-value>
      </method>
      <method name="get_output_state"
              c:identifier="gst_video_decoder_get_output_state"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get the #GstVideoCodecState currently describing the output stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GstVideoCodecState describing format of video data.</doc>
          <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
        </return-value>
      </method>
      <method name="get_packetized"
              c:identifier="gst_video_decoder_get_packetized"
              version="0.10.37">
        <doc xml:whitespace="preserve">Queries whether input data is considered packetized or not by the
base class.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if input data is considered packetized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="have_frame"
              c:identifier="gst_video_decoder_have_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Gathers all data collected for currently parsed frame, gathers corresponding
metadata and passes it along for further processing, i.e. @handle_frame.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstFlowReturn</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
      </method>
      <method name="set_estimate_rate"
              c:identifier="gst_video_decoder_set_estimate_rate"
              version="0.10.37">
        <doc xml:whitespace="preserve">Allows baseclass to perform byte to time estimated conversion.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to enable byte to time conversion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_latency"
              c:identifier="gst_video_decoder_set_latency"
              version="0.10.37">
        <doc xml:whitespace="preserve">Informs baseclass of encoding latency.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_latency" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
          <parameter name="max_latency" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_errors"
              c:identifier="gst_video_decoder_set_max_errors"
              version="0.10.37">
        <doc xml:whitespace="preserve">Sets numbers of tolerated decoder errors, where a tolerated one is then only
warned about, but more than tolerated will lead to fatal error.  Default
is set to GST_VIDEO_DECODER_MAX_ERRORS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="num" transfer-ownership="none">
            <doc xml:whitespace="preserve">max tolerated errors</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_state"
              c:identifier="gst_video_decoder_set_output_state"
              version="0.10.37">
        <doc xml:whitespace="preserve">Creates a new #GstVideoCodecState with the specified @fmt, @width and @height
as the output state for the decoder.
Any previously set output state on @decoder will be replaced by the newly
created one.

If the subclass wishes to copy over existing fields (like pixel aspec ratio,
or framerate) from an existing #GstVideoCodecState, it can be provided as a
@reference.

If the subclass wishes to override some fields from the output state (like
pixel-aspect-ratio or framerate) it can do so on the returned #GstVideoCodecState.

The new output state will only take effect (set on pads and buffers) starting
from the next call to #gst_video_decoder_finish_frame().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly configured output state.</doc>
          <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
        </return-value>
        <parameters>
          <parameter name="fmt" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">The width in pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">The height in pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reference" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional reference #GstVideoCodecState</doc>
            <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_packetized"
              c:identifier="gst_video_decoder_set_packetized"
              version="0.10.37">
        <doc xml:whitespace="preserve">Allows baseclass to consider input data as packetized or not. If the
input is packetized, then the @parse method will not be called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="packetized" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the input data should be considered as packetized.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="element" readable="0" private="1">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="stream_lock" introspectable="0" readable="0" private="1">
        <type c:type="GStaticRecMutex"/>
      </field>
      <field name="input_segment" readable="0" private="1">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="output_segment" readable="0" private="1">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VideoDecoderPrivate" c:type="GstVideoDecoderPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VideoDecoderClass"
            c:type="GstVideoDecoderClass"
            glib:is-gtype-struct-for="VideoDecoder"
            version="0.10.37">
      <doc xml:whitespace="preserve">Subclasses can override any of the available virtual methods or not, as
needed. At minimum @handle_frame needs to be overridden, and @set_format
and likely as well.  If non-packetized input is supported or expected,
@parse needs to be overridden as well.</doc>
      <field name="element_class" readable="0" private="1">
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="open">
        <callback name="open">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start">
        <callback name="start">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop">
        <callback name="stop">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parse">
        <callback name="parse">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
            </parameter>
            <parameter name="adapter" transfer-ownership="none">
              <type name="GstBase.Adapter" c:type="GstAdapter*"/>
            </parameter>
            <parameter name="at_eos" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_format">
        <callback name="set_format">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="hard" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finish">
        <callback name="finish">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_frame">
        <callback name="handle_frame">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sink_event">
        <callback name="sink_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="src_event">
        <callback name="src_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="decoder" transfer-ownership="none">
              <type name="VideoDecoder" c:type="GstVideoDecoder*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VideoDecoderPrivate"
            c:type="GstVideoDecoderPrivate"
            disguised="1">
    </record>
    <class name="VideoEncoder"
           c:symbol-prefix="video_encoder"
           c:type="GstVideoEncoder"
           version="0.10.37"
           parent="Gst.Element"
           glib:type-name="GstVideoEncoder"
           glib:get-type="gst_video_encoder_get_type"
           glib:type-struct="VideoEncoderClass">
      <doc xml:whitespace="preserve">This base class is for video encoders turning raw video into
encoded video data.

GstVideoEncoder and subclass should cooperate as follows.
&lt;orderedlist&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;&lt;title&gt;Configuration&lt;/title&gt;
  &lt;listitem&gt;&lt;para&gt;
    Initially, GstVideoEncoder calls @start when the encoder element
    is activated, which allows subclass to perform any global setup.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoEncoder calls @set_format to inform subclass of the format
    of input video data that it is about to receive.  Subclass should
    setup for encoding and configure base class as appropriate
    (e.g. latency). While unlikely, it might be called more than once,
    if changing input parameters require reconfiguration.  Baseclass
    will ensure that processing of current configuration is finished.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoEncoder calls @stop at end of all processing.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;
  &lt;title&gt;Data processing&lt;/title&gt;
    &lt;listitem&gt;&lt;para&gt;
      Base class collects input data and metadata into a frame and hands
      this to subclass' @handle_frame.
    &lt;/para&gt;&lt;/listitem&gt;
    &lt;listitem&gt;&lt;para&gt;
      If codec processing results in encoded data, subclass should call
      @gst_video_encoder_finish_frame to have encoded data pushed
      downstream.
    &lt;/para&gt;&lt;/listitem&gt;
    &lt;listitem&gt;&lt;para&gt;
      If implemented, baseclass calls subclass @pre_push just prior to
      pushing to allow subclasses to modify some metadata on the buffer.
      If it returns GST_FLOW_OK, the buffer is pushed downstream.
    &lt;/para&gt;&lt;/listitem&gt;
    &lt;listitem&gt;&lt;para&gt;
      GstVideoEncoderClass will handle both srcpad and sinkpad events.
      Sink events will be passed to subclass if @event callback has been
      provided.
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;listitem&gt;
  &lt;itemizedlist&gt;&lt;title&gt;Shutdown phase&lt;/title&gt;
  &lt;listitem&gt;&lt;para&gt;
    GstVideoEncoder class calls @stop to inform the subclass that data
    parsing will be stopped.
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/listitem&gt;
&lt;/orderedlist&gt;

Subclass is responsible for providing pad template caps for
source and sink pads. The pads need to be named "sink" and "src". It should
also be able to provide fixed src pad caps in @getcaps by the time it calls
@gst_video_encoder_finish_frame.

Things that subclass need to take care of:
&lt;itemizedlist&gt;
  &lt;listitem&gt;&lt;para&gt;Provide pad templates&lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Provide source pad caps before pushing the first buffer
  &lt;/para&gt;&lt;/listitem&gt;
  &lt;listitem&gt;&lt;para&gt;
     Accept data in @handle_frame and provide encoded results to
     @gst_video_encoder_finish_frame.
  &lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
      <implements name="Gst.Preset"/>
      <virtual-method name="close">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="finish">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
      </virtual-method>
      <virtual-method name="getcaps">
        <return-value transfer-ownership="full">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="handle_frame">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="pre_push">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="none">
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="hard" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_format">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sink_event">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="src_event">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="stop">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="finish_frame"
              c:identifier="gst_video_encoder_finish_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">@frame must have a valid encoded data buffer, whose metadata fields
are then appropriately set according to frame data or no buffer at
all if the frame should be dropped.
It is subsequently pushed downstream or provided to @pre_push.
In any case, the frame is considered finished and released.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstFlowReturn resulting from sending data downstream</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="frame" transfer-ownership="full">
            <doc xml:whitespace="preserve">an encoded #GstVideoCodecFrame</doc>
            <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_discont" c:identifier="gst_video_encoder_get_discont">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_frame"
              c:identifier="gst_video_encoder_get_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get a pending unfinished #GstVideoCodecFrame</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">pending unfinished #GstVideoCodecFrame identified by @frame_number.</doc>
          <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
        </return-value>
        <parameters>
          <parameter name="frame_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">system_frame_number of a frame</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_latency"
              c:identifier="gst_video_encoder_get_latency"
              version="0.10.37">
        <doc xml:whitespace="preserve">Returns the configured encoding latency.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_latency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">the configured minimum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime*"/>
          </parameter>
          <parameter name="max_latency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">the configured maximum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_oldest_frame"
              c:identifier="gst_video_encoder_get_oldest_frame"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get the oldest unfinished pending #GstVideoCodecFrame</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">oldest unfinished pending #GstVideoCodecFrame</doc>
          <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
        </return-value>
      </method>
      <method name="get_output_state"
              c:identifier="gst_video_encoder_get_output_state"
              version="0.10.37">
        <doc xml:whitespace="preserve">Get the current #GstVideoCodecState</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">#GstVideoCodecState describing format of video data.</doc>
          <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
        </return-value>
      </method>
      <method name="proxy_getcaps"
              c:identifier="gst_video_encoder_proxy_getcaps"
              version="0.10.37">
        <doc xml:whitespace="preserve">Returns caps that express @caps (or sink template caps if @caps == NULL)
restricted to resolution/format/... combinations supported by downstream
elements (e.g. muxers).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GstCaps owned by caller</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">initial caps</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_discont" c:identifier="gst_video_encoder_set_discont">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="set_headers"
              c:identifier="gst_video_encoder_set_headers"
              version="0.10.37">
        <doc xml:whitespace="preserve">Set the codec headers to be sent downstream whenever requested.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="headers" transfer-ownership="full">
            <doc xml:whitespace="preserve">a list of #GstBuffer containing the codec header</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gst.Buffer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_latency"
              c:identifier="gst_video_encoder_set_latency"
              version="0.10.37">
        <doc xml:whitespace="preserve">Informs baseclass of encoding latency.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="min_latency" transfer-ownership="none">
            <doc xml:whitespace="preserve">minimum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
          <parameter name="max_latency" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum latency</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_output_state"
              c:identifier="gst_video_encoder_set_output_state"
              version="0.10.37">
        <doc xml:whitespace="preserve">Creates a new #GstVideoCodecState with the specified caps as the output state
for the encoder.
Any previously set output state on @decoder will be replaced by the newly
created one.

The specified @caps should not contain any resolution, pixel-aspect-ratio,
framerate, codec-data, .... Those should be specified instead in the returned
#GstVideoCodecState.

If the subclass wishes to copy over existing fields (like pixel aspect ratio,
or framerate) from an existing #GstVideoCodecState, it can be provided as a
@reference.

If the subclass wishes to override some fields from the output state (like
pixel-aspect-ratio or framerate) it can do so on the returned #GstVideoCodecState.

The new output state will only take effect (set on pads and buffers) starting
from the next call to #gst_video_encoder_finish_frame().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the newly configured output state.</doc>
          <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="full">
            <doc xml:whitespace="preserve">the #GstCaps to use for the output</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="reference" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional reference @GstVideoCodecState</doc>
            <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
          </parameter>
        </parameters>
      </method>
      <field name="element" readable="0" private="1">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="stream_lock" introspectable="0" readable="0" private="1">
        <type c:type="GStaticRecMutex"/>
      </field>
      <field name="input_segment" readable="0" private="1">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="output_segment" readable="0" private="1">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VideoEncoderPrivate" c:type="GstVideoEncoderPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VideoEncoderClass"
            c:type="GstVideoEncoderClass"
            glib:is-gtype-struct-for="VideoEncoder"
            version="0.10.37">
      <doc xml:whitespace="preserve">Subclasses can override any of the available virtual methods or not, as
needed. At minimum @handle_frame needs to be overridden, and @set_format
and @get_caps are likely needed as well.</doc>
      <field name="element_class" readable="0" private="1">
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="open">
        <callback name="open">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="start">
        <callback name="start">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop">
        <callback name="stop">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_format">
        <callback name="set_format">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="VideoCodecState" c:type="GstVideoCodecState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_frame">
        <callback name="handle_frame">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <callback name="reset">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="hard" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finish">
        <callback name="finish">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pre_push">
        <callback name="pre_push">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="VideoCodecFrame" c:type="GstVideoCodecFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="getcaps">
        <callback name="getcaps">
          <return-value transfer-ownership="full">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </return-value>
          <parameters>
            <parameter name="enc" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sink_event">
        <callback name="sink_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="src_event">
        <callback name="src_event">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="encoder" transfer-ownership="none">
              <type name="VideoEncoder" c:type="GstVideoEncoder*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VideoEncoderPrivate"
            c:type="GstVideoEncoderPrivate"
            disguised="1">
    </record>
    <class name="VideoFilter"
           c:symbol-prefix="video_filter"
           c:type="GstVideoFilter"
           parent="GstBase.BaseTransform"
           abstract="1"
           glib:type-name="GstVideoFilter"
           glib:get-type="gst_video_filter_get_type"
           glib:type-struct="VideoFilterClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
Provides useful functions and a base class for video filters.
&lt;/para&gt;
&lt;para&gt;
The videofilter will by default enable QoS on the parent GstBaseTransform
to implement frame dropping.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <field name="element">
        <type name="GstBase.BaseTransform" c:type="GstBaseTransform"/>
      </field>
      <field name="inited">
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </class>
    <record name="VideoFilterClass"
            c:type="GstVideoFilterClass"
            glib:is-gtype-struct-for="VideoFilter">
      <doc xml:whitespace="preserve">The video filter class structure.</doc>
      <field name="parent_class">
        <type name="GstBase.BaseTransformClass"
              c:type="GstBaseTransformClass"/>
      </field>
    </record>
    <bitfield name="VideoFlags"
              glib:type-name="GstVideoFlags"
              glib:get-type="gst_video_flags_get_type"
              c:type="GstVideoFlags">
      <doc xml:whitespace="preserve">Extra video flags</doc>
      <member name="none"
              value="0"
              c:identifier="GST_VIDEO_FLAG_NONE"
              glib:nick="none"/>
      <member name="variable_fps"
              value="2"
              c:identifier="GST_VIDEO_FLAG_VARIABLE_FPS"
              glib:nick="variable-fps"/>
    </bitfield>
    <enumeration name="VideoFormat"
                 glib:type-name="GstVideoFormat"
                 glib:get-type="gst_video_format_get_type"
                 c:type="GstVideoFormat">
      <doc xml:whitespace="preserve">Enum value describing the most common video formats.</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_FORMAT_UNKNOWN"
              glib:nick="unknown"/>
      <member name="i420"
              value="1"
              c:identifier="GST_VIDEO_FORMAT_I420"
              glib:nick="i420"/>
      <member name="yv12"
              value="2"
              c:identifier="GST_VIDEO_FORMAT_YV12"
              glib:nick="yv12"/>
      <member name="yuy2"
              value="3"
              c:identifier="GST_VIDEO_FORMAT_YUY2"
              glib:nick="yuy2"/>
      <member name="uyvy"
              value="4"
              c:identifier="GST_VIDEO_FORMAT_UYVY"
              glib:nick="uyvy"/>
      <member name="ayuv"
              value="5"
              c:identifier="GST_VIDEO_FORMAT_AYUV"
              glib:nick="ayuv"/>
      <member name="rgbx"
              value="6"
              c:identifier="GST_VIDEO_FORMAT_RGBx"
              glib:nick="rgbx"/>
      <member name="bgrx"
              value="7"
              c:identifier="GST_VIDEO_FORMAT_BGRx"
              glib:nick="bgrx"/>
      <member name="xrgb"
              value="8"
              c:identifier="GST_VIDEO_FORMAT_xRGB"
              glib:nick="xrgb"/>
      <member name="xbgr"
              value="9"
              c:identifier="GST_VIDEO_FORMAT_xBGR"
              glib:nick="xbgr"/>
      <member name="rgba"
              value="10"
              c:identifier="GST_VIDEO_FORMAT_RGBA"
              glib:nick="rgba"/>
      <member name="bgra"
              value="11"
              c:identifier="GST_VIDEO_FORMAT_BGRA"
              glib:nick="bgra"/>
      <member name="argb"
              value="12"
              c:identifier="GST_VIDEO_FORMAT_ARGB"
              glib:nick="argb"/>
      <member name="abgr"
              value="13"
              c:identifier="GST_VIDEO_FORMAT_ABGR"
              glib:nick="abgr"/>
      <member name="rgb"
              value="14"
              c:identifier="GST_VIDEO_FORMAT_RGB"
              glib:nick="rgb"/>
      <member name="bgr"
              value="15"
              c:identifier="GST_VIDEO_FORMAT_BGR"
              glib:nick="bgr"/>
      <member name="y41b"
              value="16"
              c:identifier="GST_VIDEO_FORMAT_Y41B"
              glib:nick="y41b"/>
      <member name="y42b"
              value="17"
              c:identifier="GST_VIDEO_FORMAT_Y42B"
              glib:nick="y42b"/>
      <member name="yvyu"
              value="18"
              c:identifier="GST_VIDEO_FORMAT_YVYU"
              glib:nick="yvyu"/>
      <member name="y444"
              value="19"
              c:identifier="GST_VIDEO_FORMAT_Y444"
              glib:nick="y444"/>
      <member name="v210"
              value="20"
              c:identifier="GST_VIDEO_FORMAT_v210"
              glib:nick="v210"/>
      <member name="v216"
              value="21"
              c:identifier="GST_VIDEO_FORMAT_v216"
              glib:nick="v216"/>
      <member name="nv12"
              value="22"
              c:identifier="GST_VIDEO_FORMAT_NV12"
              glib:nick="nv12"/>
      <member name="nv21"
              value="23"
              c:identifier="GST_VIDEO_FORMAT_NV21"
              glib:nick="nv21"/>
      <member name="gray8"
              value="24"
              c:identifier="GST_VIDEO_FORMAT_GRAY8"
              glib:nick="gray8"/>
      <member name="gray16_be"
              value="25"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_BE"
              glib:nick="gray16-be"/>
      <member name="gray16_le"
              value="26"
              c:identifier="GST_VIDEO_FORMAT_GRAY16_LE"
              glib:nick="gray16-le"/>
      <member name="v308"
              value="27"
              c:identifier="GST_VIDEO_FORMAT_v308"
              glib:nick="v308"/>
      <member name="y800"
              value="28"
              c:identifier="GST_VIDEO_FORMAT_Y800"
              glib:nick="y800"/>
      <member name="y16"
              value="29"
              c:identifier="GST_VIDEO_FORMAT_Y16"
              glib:nick="y16"/>
      <member name="rgb16"
              value="30"
              c:identifier="GST_VIDEO_FORMAT_RGB16"
              glib:nick="rgb16"/>
      <member name="bgr16"
              value="31"
              c:identifier="GST_VIDEO_FORMAT_BGR16"
              glib:nick="bgr16"/>
      <member name="rgb15"
              value="32"
              c:identifier="GST_VIDEO_FORMAT_RGB15"
              glib:nick="rgb15"/>
      <member name="bgr15"
              value="33"
              c:identifier="GST_VIDEO_FORMAT_BGR15"
              glib:nick="bgr15"/>
      <member name="uyvp"
              value="34"
              c:identifier="GST_VIDEO_FORMAT_UYVP"
              glib:nick="uyvp"/>
      <member name="a420"
              value="35"
              c:identifier="GST_VIDEO_FORMAT_A420"
              glib:nick="a420"/>
      <member name="rgb8_paletted"
              value="36"
              c:identifier="GST_VIDEO_FORMAT_RGB8_PALETTED"
              glib:nick="rgb8-paletted"/>
      <member name="yuv9"
              value="37"
              c:identifier="GST_VIDEO_FORMAT_YUV9"
              glib:nick="yuv9"/>
      <member name="yvu9"
              value="38"
              c:identifier="GST_VIDEO_FORMAT_YVU9"
              glib:nick="yvu9"/>
      <member name="iyu1"
              value="39"
              c:identifier="GST_VIDEO_FORMAT_IYU1"
              glib:nick="iyu1"/>
      <member name="argb64"
              value="40"
              c:identifier="GST_VIDEO_FORMAT_ARGB64"
              glib:nick="argb64"/>
      <member name="ayuv64"
              value="41"
              c:identifier="GST_VIDEO_FORMAT_AYUV64"
              glib:nick="ayuv64"/>
      <member name="r210"
              value="42"
              c:identifier="GST_VIDEO_FORMAT_r210"
              glib:nick="r210"/>
      <member name="encoded"
              value="43"
              c:identifier="GST_VIDEO_FORMAT_ENCODED"
              glib:nick="encoded"/>
      <function name="convert"
                c:identifier="gst_video_format_convert"
                version="0.10.16">
        <doc xml:whitespace="preserve">Converts among various #GstFormat types.  This function handles
GST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For
raw video, GST_FORMAT_DEFAULT corresponds to video frames.  This
function can be to handle pad queries of the type GST_QUERY_CONVERT.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the conversion was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="fps_n" transfer-ownership="none">
            <doc xml:whitespace="preserve">frame rate numerator</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="fps_d" transfer-ownership="none">
            <doc xml:whitespace="preserve">frame rate denominator</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="src_format" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GstFormat of the @src_value</doc>
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="src_value" transfer-ownership="none">
            <doc xml:whitespace="preserve">value to convert</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <doc xml:whitespace="preserve">#GstFormat of the @dest_value</doc>
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="dest_value" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to destination value</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_fourcc"
                c:identifier="gst_video_format_from_fourcc"
                version="0.10.16">
        <doc xml:whitespace="preserve">Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat describing the FOURCC value</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </return-value>
        <parameters>
          <parameter name="fourcc" transfer-ownership="none">
            <doc xml:whitespace="preserve">a FOURCC value representing raw YUV video</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_masks" c:identifier="gst_video_format_from_masks">
        <doc xml:whitespace="preserve">Find the #GstVideoFormat for the given parameters.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat or GST_VIDEO_FORMAT_UNKNOWN when the parameters to not specify a known format.</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </return-value>
        <parameters>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of bits used for a pixel</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="bpp" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of bits used to store a pixel. This value is bigger than @depth</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="endianness" transfer-ownership="none">
            <doc xml:whitespace="preserve">the endianness of the masks</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="red_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the red mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="green_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the green mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="blue_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the blue mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="alpha_mask" transfer-ownership="none">
            <doc xml:whitespace="preserve">the optional alpha mask</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_component_depth"
                c:identifier="gst_video_format_get_component_depth"
                version="0.10.33">
        <doc xml:whitespace="preserve">Returns the number of bits used to encode an individual pixel of
a given @component.  Typically this is 8, although higher and lower
values are possible for some formats.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">depth of component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video component (e.g. 0 for 'R' in RGB)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_component_height"
                c:identifier="gst_video_format_get_component_height"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the height of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">height of component @component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the component index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_component_offset"
                c:identifier="gst_video_format_get_component_offset"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the offset (in bytes) of the first pixel of the component
with index @component.  For packed formats, this will typically be a
small integer (0, 1, 2, 3).  For planar formats, this will be a
(relatively) large offset to the beginning of the second or third
component planes.  See @gst_video_format_get_row_stride for a description
of the component index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">offset of component @component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the component index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_component_width"
                c:identifier="gst_video_format_get_component_width"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the width of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">width of component @component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the component index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_info"
                c:identifier="gst_video_format_get_info"
                version="0.10.37">
        <doc xml:whitespace="preserve">Get the #GstVideoFormatInfo for @format</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GstVideoFormatInfo for @format.</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_pixel_stride"
                c:identifier="gst_video_format_get_pixel_stride"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the pixel stride (number of bytes from one pixel to the
pixel to its immediate left) for the video component with an index
of @component.  See @gst_video_format_get_row_stride for a description
of the component index.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">pixel stride of component @component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the component index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_row_stride"
                c:identifier="gst_video_format_get_row_stride"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the row stride (number of bytes from one row of pixels to
the next) for the video component with an index of @component.  For
YUV video, Y, U, and V have component indices of 0, 1, and 2,
respectively.  For RGB video, R, G, and B have component indicies of
0, 1, and 2, respectively.  Alpha channels, if present, have a component
index of 3.  The @width parameter always represents the width of the
video, not the component.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">row stride of component @component</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="component" transfer-ownership="none">
            <doc xml:whitespace="preserve">the component index</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_size"
                c:identifier="gst_video_format_get_size"
                version="0.10.16">
        <doc xml:whitespace="preserve">Calculates the total number of bytes in the raw video format.  This
number should be used when allocating a buffer for raw video.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">size (in bytes) of raw video format</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="has_alpha"
                c:identifier="gst_video_format_has_alpha"
                version="0.10.16"
                deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_HAS_ALPHA">
        <doc xml:whitespace="preserve">Returns TRUE or FALSE depending on if the video format provides an
alpha channel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @format has an alpha channel</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_gray"
                c:identifier="gst_video_format_is_gray"
                version="0.10.29"
                deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_GRAY">
        <doc xml:whitespace="preserve">Determine whether the video format is a grayscale format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @format represents grayscale video</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_rgb"
                c:identifier="gst_video_format_is_rgb"
                version="0.10.16"
                deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_RGB">
        <doc xml:whitespace="preserve">Determine whether the video format is an RGB format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @format represents RGB video</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_yuv"
                c:identifier="gst_video_format_is_yuv"
                version="0.10.16"
                deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_YUV">
        <doc xml:whitespace="preserve">Determine whether the video format is a YUV format.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @format represents YUV video</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_caps"
                c:identifier="gst_video_format_new_caps"
                version="0.10.16">
        <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="framerate_n" transfer-ownership="none">
            <doc xml:whitespace="preserve">numerator of frame rate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="framerate_d" transfer-ownership="none">
            <doc xml:whitespace="preserve">denominator of frame rate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="par_n" transfer-ownership="none">
            <doc xml:whitespace="preserve">numerator of pixel aspect ratio</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="par_d" transfer-ownership="none">
            <doc xml:whitespace="preserve">denominator of pixel aspect ratio</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_caps_interlaced"
                c:identifier="gst_video_format_new_caps_interlaced"
                version="0.10.23">
        <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">width of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">height of video</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="framerate_n" transfer-ownership="none">
            <doc xml:whitespace="preserve">numerator of frame rate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="framerate_d" transfer-ownership="none">
            <doc xml:whitespace="preserve">denominator of frame rate</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="par_n" transfer-ownership="none">
            <doc xml:whitespace="preserve">numerator of pixel aspect ratio</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="par_d" transfer-ownership="none">
            <doc xml:whitespace="preserve">denominator of pixel aspect ratio</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="interlaced" transfer-ownership="none">
            <doc xml:whitespace="preserve">#TRUE if the format is interlaced</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_template_caps"
                c:identifier="gst_video_format_new_template_caps"
                version="0.10.33">
        <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.
Size, frame rate, and pixel aspect ratio are set to the full
range.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="parse_caps"
                c:identifier="gst_video_format_parse_caps"
                version="0.10.16">
        <doc xml:whitespace="preserve">Determines the #GstVideoFormat of @caps and places it in the location
pointed to by @format.  Extracts the size of the video and places it
in the location pointed to by @width and @height.  If @caps does not
represent a video format or does not contain height and width, the
function will fail and return FALSE. If @caps does not represent a raw
video format listed in #GstVideoFormat, but still contains video caps,
this function will return TRUE and set @format to #GST_VIDEO_FORMAT_UNKNOWN.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstCaps to parse</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoFormat of the video represented by @caps (output)</doc>
            <type name="VideoFormat" c:type="GstVideoFormat*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the video represented by @caps, may be NULL (output)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the video represented by @caps, may be NULL (output)</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </function>
      <function name="parse_caps_interlaced"
                c:identifier="gst_video_format_parse_caps_interlaced"
                version="0.10.23">
        <doc xml:whitespace="preserve">Extracts whether the caps represents interlaced content or not and places it
in @interlaced.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">the fixed #GstCaps to parse</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="interlaced" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether @caps represents interlaced video or not, may be NULL (output)</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_fourcc"
                c:identifier="gst_video_format_to_fourcc"
                version="0.10.16">
        <doc xml:whitespace="preserve">Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the FOURCC corresponding to @format</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string"
                c:identifier="gst_video_format_to_string"
                version="0.10.37">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a short string that describes @format, or #NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="VideoFormatFlags"
              glib:type-name="GstVideoFormatFlags"
              glib:get-type="gst_video_format_flags_get_type"
              c:type="GstVideoFormatFlags">
      <doc xml:whitespace="preserve">The different video flags that a format info can have.</doc>
      <member name="yuv"
              value="1"
              c:identifier="GST_VIDEO_FORMAT_FLAG_YUV"
              glib:nick="yuv"/>
      <member name="rgb"
              value="2"
              c:identifier="GST_VIDEO_FORMAT_FLAG_RGB"
              glib:nick="rgb"/>
      <member name="gray"
              value="4"
              c:identifier="GST_VIDEO_FORMAT_FLAG_GRAY"
              glib:nick="gray"/>
      <member name="alpha"
              value="8"
              c:identifier="GST_VIDEO_FORMAT_FLAG_ALPHA"
              glib:nick="alpha"/>
      <member name="le"
              value="16"
              c:identifier="GST_VIDEO_FORMAT_FLAG_LE"
              glib:nick="le"/>
      <member name="palette"
              value="32"
              c:identifier="GST_VIDEO_FORMAT_FLAG_PALETTE"
              glib:nick="palette"/>
      <member name="complex"
              value="64"
              c:identifier="GST_VIDEO_FORMAT_FLAG_COMPLEX"
              glib:nick="complex"/>
    </bitfield>
    <record name="VideoFormatInfo" c:type="GstVideoFormatInfo">
      <doc xml:whitespace="preserve">Information for a video format.</doc>
      <field name="format" writable="1">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="VideoFormatFlags" c:type="GstVideoFormatFlags"/>
      </field>
      <field name="bits" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="n_components" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="shift" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="depth" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="pixel_stride" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <field name="n_planes" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="plane" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="poffset" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="w_sub" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="h_sub" writable="1">
        <array zero-terminated="0" c:type="guint" fixed-size="4">
          <type name="guint" c:type="guint"/>
        </array>
      </field>
      <field name="unpack_format" writable="1">
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </field>
      <field name="unpack_func" writable="1">
        <type name="VideoFormatUnpack" c:type="GstVideoFormatUnpack"/>
      </field>
      <field name="pack_func" writable="1">
        <type name="VideoFormatPack" c:type="GstVideoFormatPack"/>
      </field>
    </record>
    <callback name="VideoFormatPack" c:type="GstVideoFormatPack">
      <doc xml:whitespace="preserve">Packs @width pixels from @src to the given planes and strides in the
format @info. The pixels from source have each component interleaved
and will be packed into the planes in @data.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormatInfo</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </parameter>
        <parameter name="src" transfer-ownership="none">
          <doc xml:whitespace="preserve">a source array</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointers to the destination data planes</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:whitespace="preserve">strides of the destination planes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position in the image to pack to</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position in the image to pack to</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of pixels to pack.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="VideoFormatUnpack" c:type="GstVideoFormatUnpack">
      <doc xml:whitespace="preserve">Unpacks @width pixels from the given planes and strides containing data of
format @info. The pixels will be unpacked into @dest which each component
interleaved. @dest should at least be big enough to hold @width *
n_components * size(unpack_format) bytes.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormatInfo</doc>
          <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
        </parameter>
        <parameter name="dest" transfer-ownership="none">
          <doc xml:whitespace="preserve">a destination array</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointers to the data planes</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="stride" transfer-ownership="none">
          <doc xml:whitespace="preserve">strides of the planes</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:whitespace="preserve">the x position in the image to start from</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:whitespace="preserve">the y position in the image to start from</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of pixels to unpack.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="VideoInfo" c:type="GstVideoInfo">
      <doc xml:whitespace="preserve">Information describing image properties. This information can be filled
in from GstCaps with gst_video_info_from_caps(). The information is also used
to store the specific video info when mapping a video frame with
gst_video_frame_map().

Use the provided macros to access the info in this structure.</doc>
      <field name="finfo" writable="1">
        <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
      </field>
      <field name="interlace_mode" writable="1">
        <type name="VideoInterlaceMode" c:type="GstVideoInterlaceMode"/>
      </field>
      <field name="flags" writable="1">
        <type name="VideoFlags" c:type="GstVideoFlags"/>
      </field>
      <field name="width" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="size" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="chroma_site" writable="1">
        <type name="VideoChromaSite" c:type="GstVideoChromaSite"/>
      </field>
      <field name="colorimetry" writable="1">
        <type name="VideoColorimetry" c:type="GstVideoColorimetry"/>
      </field>
      <field name="palette" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="par_n" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="par_d" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fps_n" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="fps_d" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="offset" writable="1">
        <array zero-terminated="0" c:type="gsize" fixed-size="4">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <field name="stride" writable="1">
        <array zero-terminated="0" c:type="gint" fixed-size="4">
          <type name="gint" c:type="gint"/>
        </array>
      </field>
      <method name="convert" c:identifier="gst_video_info_convert">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="src_format" transfer-ownership="none">
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="src_value" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="dest_format" transfer-ownership="none">
            <type name="Gst.Format" c:type="GstFormat"/>
          </parameter>
          <parameter name="dest_value" transfer-ownership="none">
            <type name="gint64" c:type="gint64*"/>
          </parameter>
        </parameters>
      </method>
      <method name="from_caps"
              c:identifier="gst_video_info_from_caps"
              version="0.10.37">
        <doc xml:whitespace="preserve">Parse @caps and update @info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @caps could be parsed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="caps" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstCaps</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="gst_video_info_init" version="0.10.37">
        <doc xml:whitespace="preserve">Initialize @info with default values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="is_equal"
              c:identifier="gst_video_info_is_equal"
              version="0.10.37">
        <doc xml:whitespace="preserve">Compares two #GstVideoInfo and returns whether they are equal or not</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @info and @other are equal, else %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="other" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoInfo</doc>
            <type name="VideoInfo" c:type="GstVideoInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format"
              c:identifier="gst_video_info_set_format"
              version="0.10.37">
        <doc xml:whitespace="preserve">Set the default info for a video frame of @format and @width and @height.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:whitespace="preserve">the format</doc>
            <type name="VideoFormat" c:type="GstVideoFormat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">a width</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">a height</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_caps"
              c:identifier="gst_video_info_to_caps"
              version="0.10.37">
        <doc xml:whitespace="preserve">Convert the values of @info into a #GstCaps.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstCaps containing the info of @info.</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </method>
    </record>
    <enumeration name="VideoInterlaceMode"
                 glib:type-name="GstVideoInterlaceMode"
                 glib:get-type="gst_video_interlace_mode_get_type"
                 c:type="GstVideoInterlaceMode">
      <doc xml:whitespace="preserve">The possible values of the #GstVideoInterlaceMode describing the interlace
mode of the stream.</doc>
      <member name="progressive"
              value="0"
              c:identifier="GST_VIDEO_INTERLACE_MODE_PROGRESSIVE"
              glib:nick="progressive"/>
      <member name="interleaved"
              value="1"
              c:identifier="GST_VIDEO_INTERLACE_MODE_INTERLEAVED"
              glib:nick="interleaved"/>
      <member name="mixed"
              value="2"
              c:identifier="GST_VIDEO_INTERLACE_MODE_MIXED"
              glib:nick="mixed"/>
    </enumeration>
    <class name="VideoOverlayComposition"
           c:symbol-prefix="video_overlay_composition"
           c:type="GstVideoOverlayComposition"
           version="0.10.36"
           parent="Gst.MiniObject"
           glib:type-name="GstVideoOverlayComposition"
           glib:get-type="gst_video_overlay_composition_get_type"
           glib:type-struct="VideoOverlayCompositionClass"
           glib:fundamental="1">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
Functions to create and handle overlay compositions on video buffers.
&lt;/para&gt;
&lt;para&gt;
An overlay composition describes one or more overlay rectangles to be
blended on top of a video buffer.
&lt;/para&gt;
&lt;para&gt;
This API serves two main purposes:
&lt;itemizedlist&gt;
&lt;listitem&gt;
it can be used to attach overlay information (subtitles or logos)
to non-raw video buffers such as GL/VAAPI/VDPAU surfaces. The actual
blending of the overlay can then be done by e.g. the video sink that
processes these non-raw buffers.
&lt;/listitem&gt;
&lt;listitem&gt;
it can also be used to blend overlay rectangles on top of raw video
buffers, thus consolidating blending functionality for raw video in
one place.
&lt;/listitem&gt;
Together, this allows existing overlay elements to easily handle raw
and non-raw video as input in without major changes (once the overlays
have been put into a #GstOverlayComposition object anyway) - for raw
video the overlay can just use the blending function to blend the data
on top of the video, and for surface buffers it can just attach them to
the buffer and let the sink render the overlays.
&lt;/itemizedlist&gt;
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <constructor name="new"
                   c:identifier="gst_video_overlay_composition_new"
                   version="0.10.36">
        <doc xml:whitespace="preserve">Creates a new video overlay composition object to hold one or more
overlay rectangles.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstVideoOverlayComposition. Unref with gst_video_overlay_composition_unref() when no longer needed.</doc>
          <type name="VideoOverlayComposition"
                c:type="GstVideoOverlayComposition*"/>
        </return-value>
        <parameters>
          <parameter name="rectangle" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoOverlayRectangle to add to the composition</doc>
            <type name="VideoOverlayRectangle"
                  c:type="GstVideoOverlayRectangle*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_rectangle"
              c:identifier="gst_video_overlay_composition_add_rectangle"
              version="0.10.36">
        <doc xml:whitespace="preserve">Adds an overlay rectangle to an existing overlay composition object. This
must be done right after creating the overlay composition.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rectangle" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstVideoOverlayRectangle to add to the composition</doc>
            <type name="VideoOverlayRectangle"
                  c:type="GstVideoOverlayRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="blend"
              c:identifier="gst_video_overlay_composition_blend"
              version="0.10.36">
        <doc xml:whitespace="preserve">Blends the overlay rectangles in @comp on top of the raw video data
contained in @video_buf. The data in @video_buf must be writable. If
needed, use gst_buffer_make_writable() before calling this function to
ensure a buffer is writable. @video_buf must also have valid raw video
caps set on it.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="video_buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBuffer containing raw video data in a supported format</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="gst_video_overlay_composition_copy"
              version="0.10.36">
        <doc xml:whitespace="preserve">Makes a copy of @comp and all contained rectangles, so that it is possible
to modify the composition and contained rectangles (e.g. add additional
rectangles or change the render co-ordinates or render dimension). The
actual overlay pixel data buffers contained in the rectangles are not
copied.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstVideoOverlayComposition equivalent to @comp.</doc>
          <type name="VideoOverlayComposition"
                c:type="GstVideoOverlayComposition*"/>
        </return-value>
      </method>
      <method name="get_rectangle"
              c:identifier="gst_video_overlay_composition_get_rectangle"
              version="0.10.36">
        <doc xml:whitespace="preserve">Returns the @n-th #GstVideoOverlayRectangle contained in @comp.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the @n-th rectangle, or NULL if @n is out of bounds. Will not return a new reference, the caller will need to obtain her own reference using gst_video_overlay_rectangle_ref() if needed.</doc>
          <type name="VideoOverlayRectangle"
                c:type="GstVideoOverlayRectangle*"/>
        </return-value>
        <parameters>
          <parameter name="n" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of the rectangle to get</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_seqnum"
              c:identifier="gst_video_overlay_composition_get_seqnum"
              version="0.10.36">
        <doc xml:whitespace="preserve">Returns the sequence number of this composition. Sequence numbers are
monotonically increasing and unique for overlay compositions and rectangles
(meaning there will never be a rectangle with the same sequence number as
a composition).</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the sequence number of @comp</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="make_writable"
              c:identifier="gst_video_overlay_composition_make_writable"
              version="0.10.36">
        <doc xml:whitespace="preserve">Takes ownership of @comp and returns a version of @comp that is writable
(i.e. can be modified). Will either return @comp right away, or create a
new writable copy of @comp and unref @comp itself. All the contained
rectangles will also be copied, but the actual overlay pixel data buffers
contained in the rectangles are not copied.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a writable #GstVideoOverlayComposition equivalent to @comp.</doc>
          <type name="VideoOverlayComposition"
                c:type="GstVideoOverlayComposition*"/>
        </return-value>
      </method>
      <method name="n_rectangles"
              c:identifier="gst_video_overlay_composition_n_rectangles"
              version="0.10.36">
        <doc xml:whitespace="preserve">Returns the number of #GstVideoOverlayRectangle&lt;!-- --&gt;s contained in @comp.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of rectangles</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
    </class>
    <record name="VideoOverlayCompositionClass"
            c:type="GstVideoOverlayCompositionClass"
            disguised="1"
            glib:is-gtype-struct-for="VideoOverlayComposition">
    </record>
    <enumeration name="VideoOverlayFormatFlags"
                 version="0.10.36"
                 c:type="GstVideoOverlayFormatFlags">
      <doc xml:whitespace="preserve">Overlay format flags.</doc>
      <member name="none"
              value="0"
              c:identifier="GST_VIDEO_OVERLAY_FORMAT_FLAG_NONE"/>
      <member name="premultiplied_alpha"
              value="1"
              c:identifier="GST_VIDEO_OVERLAY_FORMAT_FLAG_PREMULTIPLIED_ALPHA"/>
      <member name="global_alpha"
              value="2"
              c:identifier="GST_VIDEO_OVERLAY_FORMAT_FLAG_GLOBAL_ALPHA"/>
    </enumeration>
    <class name="VideoOverlayRectangle"
           c:symbol-prefix="video_overlay_rectangle"
           c:type="GstVideoOverlayRectangle"
           version="0.10.36"
           parent="Gst.MiniObject"
           glib:type-name="GstVideoOverlayRectangle"
           glib:get-type="gst_video_overlay_rectangle_get_type"
           glib:type-struct="VideoOverlayRectangleClass"
           glib:fundamental="1">
      <doc xml:whitespace="preserve">An opaque video overlay rectangle object. A rectangle contains a single
overlay rectangle which can be added to a composition.</doc>
      <constructor name="new_argb"
                   c:identifier="gst_video_overlay_rectangle_new_argb"
                   version="0.10.36">
        <doc xml:whitespace="preserve">Creates a new video overlay rectangle with ARGB pixel data. The layout
of the components in memory is B-G-R-A on little-endian platforms
(corresponding to #GST_VIDEO_FORMAT_BGRA) and A-R-G-B on big-endian
platforms (corresponding to #GST_VIDEO_FORMAT_ARGB). In other words,
pixels are treated as 32-bit words and the lowest 8 bits then contain
the blue component value and the highest 8 bits contain the alpha
component value. Unless specified in the flags, the RGB values are
non-premultiplied. This is the format that is used by most hardware,
and also many rendering libraries such as Cairo, for example.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstVideoOverlayRectangle. Unref with gst_video_overlay_rectangle_unref() when no longer needed.</doc>
          <type name="VideoOverlayRectangle"
                c:type="GstVideoOverlayRectangle*"/>
        </return-value>
        <parameters>
          <parameter name="pixels" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBuffer pointing to the pixel memory</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width of the rectangle in @pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height of the rectangle in @pixels</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stride of the rectangle in @pixels in bytes (&amp;gt;= 4*width)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="render_x" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="render_y" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="render_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the render width of this rectangle on the video</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="render_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the render height of this rectangle on the video</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags</doc>
            <type name="VideoOverlayFormatFlags"
                  c:type="GstVideoOverlayFormatFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="gst_video_overlay_rectangle_copy"
              version="0.10.36">
        <doc xml:whitespace="preserve">Makes a copy of @rectangle, so that it is possible to modify it
(e.g. to change the render co-ordinates or render dimension). The
actual overlay pixel data buffers contained in the rectangle are not
copied.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstVideoOverlayRectangle equivalent to @rectangle.</doc>
          <type name="VideoOverlayRectangle"
                c:type="GstVideoOverlayRectangle*"/>
        </return-value>
      </method>
      <method name="get_flags"
              c:identifier="gst_video_overlay_rectangle_get_flags"
              version="0.10.37">
        <doc xml:whitespace="preserve">Retrieves the flags associated with a #GstVideoOverlayRectangle.
This is useful if the caller can handle both premultiplied alpha and
non premultiplied alpha, for example. By knowing whether the rectangle
uses premultiplied or not, it can request the pixel data in the format
it is stored in, to avoid unnecessary conversion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoOverlayFormatFlags associated with the rectangle.</doc>
          <type name="VideoOverlayFormatFlags"
                c:type="GstVideoOverlayFormatFlags"/>
        </return-value>
      </method>
      <method name="get_global_alpha"
              c:identifier="gst_video_overlay_rectangle_get_global_alpha"
              version="0.10.37">
        <doc xml:whitespace="preserve">Retrieves the global-alpha value associated with a #GstVideoOverlayRectangle.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the global-alpha value associated with the rectangle.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_pixels_argb"
              c:identifier="gst_video_overlay_rectangle_get_pixels_argb"
              version="0.10.36">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer holding the ARGB pixel data with row stride @stride and width and height of the render dimensions as per gst_video_overlay_rectangle_get_render_rectangle(). This function does not return a reference, the caller should obtain a reference of her own with gst_buffer_ref() if needed.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="stride"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">address of guint variable where to store the row stride of the ARGB pixel data in the buffer</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags If a global_alpha value != 1 is set for the rectangle, the caller should set the #GST_VIDEO_OVERLAY_FORMAT_FLAG_GLOBAL_ALPHA flag if he wants to apply global-alpha himself. If the flag is not set global_alpha is applied internally before returning the pixel-data.</doc>
            <type name="VideoOverlayFormatFlags"
                  c:type="GstVideoOverlayFormatFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pixels_unscaled_argb"
              c:identifier="gst_video_overlay_rectangle_get_pixels_unscaled_argb"
              version="0.10.36">
        <doc xml:whitespace="preserve">Retrieves the pixel data as it is. This is useful if the caller can
do the scaling itself when handling the overlaying. The rectangle will
need to be scaled to the render dimensions, which can be retrieved using
gst_video_overlay_rectangle_get_render_rectangle().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer holding the ARGB pixel data with row stride @stride. This function does not return a reference, the caller should obtain a reference of her own with gst_buffer_ref() if needed.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">address where to store the height of the unscaled rectangle in pixels</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="stride"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">address of guint variable where to store the row stride of the ARGB pixel data in the buffer</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags. If a global_alpha value != 1 is set for the rectangle, the caller should set the #GST_VIDEO_OVERLAY_FORMAT_FLAG_GLOBAL_ALPHA flag if he wants to apply global-alpha himself. If the flag is not set global_alpha is applied internally before returning the pixel-data.</doc>
            <type name="VideoOverlayFormatFlags"
                  c:type="GstVideoOverlayFormatFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_render_rectangle"
              c:identifier="gst_video_overlay_rectangle_get_render_rectangle"
              version="0.10.36">
        <doc xml:whitespace="preserve">Retrieves the render position and render dimension of the overlay
rectangle on the video.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if valid render dimensions were retrieved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="render_x"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">address where to store the X render offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="render_y"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">address where to store the Y render offset</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="render_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">address where to store the render width</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="render_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     allow-none="1">
            <doc xml:whitespace="preserve">address where to store the render height</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_seqnum"
              c:identifier="gst_video_overlay_rectangle_get_seqnum"
              version="0.10.36">
        <doc xml:whitespace="preserve">Returns the sequence number of this rectangle. Sequence numbers are
monotonically increasing and unique for overlay compositions and rectangles
(meaning there will never be a rectangle with the same sequence number as
a composition).

Using the sequence number of a rectangle as an indicator for changed
pixel-data of a rectangle is dangereous. Some API calls, like e.g.
gst_video_overlay_rectangle_set_global_alpha(), automatically update
the per rectangle sequence number, which is misleading for renderers/
consumers, that handle global-alpha themselves. For them  the
pixel-data returned by gst_video_overlay_rectangle_get_pixels_*()
wont be different for different global-alpha values. In this case a
renderer could also use the GstBuffer pointers as a hint for changed
pixel-data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the sequence number of @rectangle</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="set_global_alpha"
              c:identifier="gst_video_overlay_rectangle_set_global_alpha"
              version="0.10.37">
        <doc xml:whitespace="preserve">Sets the global alpha value associated with a #GstVideoOverlayRectangle. Per-
pixel alpha values are multiplied with this value. Valid
values: 0 &lt;= global_alpha &lt;= 1; 1 to deactivate.

 # @rectangle must be writable, meaning its refcount must be 1. You can
make the rectangles inside a #GstVideoOverlayComposition writable using
gst_video_overlay_composition_make_writable() or
gst_video_overlay_composition_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="global_alpha" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_render_rectangle"
              c:identifier="gst_video_overlay_rectangle_set_render_rectangle"
              version="0.10.36">
        <doc xml:whitespace="preserve">Sets the render position and dimensions of the rectangle on the video.
This function is mainly for elements that modify the size of the video
in some way (e.g. through scaling or cropping) and need to adjust the
details of any overlays to match the operation that changed the size.

@rectangle must be writable, meaning its refcount must be 1. You can
make the rectangles inside a #GstVideoOverlayComposition writable using
gst_video_overlay_composition_make_writable() or
gst_video_overlay_composition_copy().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="render_x" transfer-ownership="none">
            <doc xml:whitespace="preserve">render X position of rectangle on video</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="render_y" transfer-ownership="none">
            <doc xml:whitespace="preserve">render Y position of rectangle on video</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="render_width" transfer-ownership="none">
            <doc xml:whitespace="preserve">render width of rectangle</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="render_height" transfer-ownership="none">
            <doc xml:whitespace="preserve">render height of rectangle</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="VideoOverlayRectangleClass"
            c:type="GstVideoOverlayRectangleClass"
            disguised="1"
            glib:is-gtype-struct-for="VideoOverlayRectangle">
    </record>
    <record name="VideoRectangle" c:type="GstVideoRectangle">
      <doc xml:whitespace="preserve">Helper structure representing a rectangular area.</doc>
      <field name="x" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="y" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="w" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="h" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <class name="VideoSink"
           c:symbol-prefix="video_sink"
           c:type="GstVideoSink"
           parent="GstBase.BaseSink"
           glib:type-name="GstVideoSink"
           glib:get-type="gst_video_sink_get_type"
           glib:type-struct="VideoSinkClass">
      <doc xml:whitespace="preserve">&lt;refsect2&gt;
&lt;para&gt;
Provides useful functions and a base class for video sinks. 
&lt;/para&gt;
&lt;para&gt;
GstVideoSink will configure the default base sink to drop frames that
arrive later than 20ms as this is considered the default threshold for
observing out-of-sync frames.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <function name="center_rect" c:identifier="gst_video_sink_center_rect">
        <doc xml:whitespace="preserve">Takes @src rectangle and position it at the center of @dst rectangle with or
without @scaling. It handles clipping if the @src rectangle is bigger than
the @dst one and @scaling is set to FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="src" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoRectangle describing the source area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="dst" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstVideoRectangle describing the destination area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:whitespace="preserve">a pointer to a #GstVideoRectangle which will receive the result area</doc>
            <type name="VideoRectangle" c:type="GstVideoRectangle*"/>
          </parameter>
          <parameter name="scaling" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #gboolean indicating if scaling should be applied or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="show_frame">
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buf" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <property name="show-preroll-frame"
                version="0.10.25"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Whether to show video frames during preroll. If set to #FALSE, video
frames will only be rendered in PLAYING state.</doc>
        <type name="gboolean"/>
      </property>
      <field name="element">
        <type name="GstBase.BaseSink" c:type="GstBaseSink"/>
      </field>
      <field name="width">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="height">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VideoSinkPrivate" c:type="GstVideoSinkPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="VideoSinkClass"
            c:type="GstVideoSinkClass"
            glib:is-gtype-struct-for="VideoSink">
      <doc xml:whitespace="preserve">The video sink class structure. Derived classes should override the
@show_frame virtual function.</doc>
      <field name="parent_class">
        <type name="GstBase.BaseSinkClass" c:type="GstBaseSinkClass"/>
      </field>
      <field name="show_frame">
        <callback name="show_frame">
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="video_sink" transfer-ownership="none">
              <type name="VideoSink" c:type="GstVideoSink*"/>
            </parameter>
            <parameter name="buf" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="3">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="VideoSinkPrivate" c:type="GstVideoSinkPrivate" disguised="1">
    </record>
    <enumeration name="VideoTransferFunction"
                 glib:type-name="GstVideoTransferFunction"
                 glib:get-type="gst_video_transfer_function_get_type"
                 c:type="GstVideoTransferFunction">
      <doc xml:whitespace="preserve">The video transfer function defines the formula for converting between
non-linear RGB (R'G'B') and linear RGB</doc>
      <member name="unknown"
              value="0"
              c:identifier="GST_VIDEO_TRANSFER_UNKNOWN"
              glib:nick="unknown"/>
      <member name="gamma10"
              value="1"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA10"
              glib:nick="gamma10"/>
      <member name="gamma18"
              value="2"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA18"
              glib:nick="gamma18"/>
      <member name="gamma20"
              value="3"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA20"
              glib:nick="gamma20"/>
      <member name="gamma22"
              value="4"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA22"
              glib:nick="gamma22"/>
      <member name="bt709"
              value="5"
              c:identifier="GST_VIDEO_TRANSFER_BT709"
              glib:nick="bt709"/>
      <member name="smpte240m"
              value="6"
              c:identifier="GST_VIDEO_TRANSFER_SMPTE240M"
              glib:nick="smpte240m"/>
      <member name="srgb"
              value="7"
              c:identifier="GST_VIDEO_TRANSFER_SRGB"
              glib:nick="srgb"/>
      <member name="gamma28"
              value="8"
              c:identifier="GST_VIDEO_TRANSFER_GAMMA28"
              glib:nick="gamma28"/>
      <member name="log100"
              value="9"
              c:identifier="GST_VIDEO_TRANSFER_LOG100"
              glib:nick="log100"/>
      <member name="log316"
              value="10"
              c:identifier="GST_VIDEO_TRANSFER_LOG316"
              glib:nick="log316"/>
    </enumeration>
    <function name="video_buffer_get_overlay_composition"
              c:identifier="gst_video_buffer_get_overlay_composition"
              version="0.10.36">
      <doc xml:whitespace="preserve">Get the overlay composition that has previously been attached to a buffer
with gst_video_buffer_get_overlay_composition(), usually by another element
upstream.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GstVideoOverlayComposition attached to this buffer, or NULL. Does not return a reference to the composition, caller must obtain her own ref via gst_video_overlay_composition_ref() if needed.</doc>
        <type name="VideoOverlayComposition"
              c:type="GstVideoOverlayComposition*"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_buffer_set_overlay_composition"
              c:identifier="gst_video_buffer_set_overlay_composition"
              version="0.10.36">
      <doc xml:whitespace="preserve">Sets an overlay composition on a buffer. The buffer will obtain its own
reference to the composition, meaning this function does not take ownership
of @comp.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="comp" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve">a #GstVideoOverlayComposition, or NULL to clear a previously-set composition</doc>
          <type name="VideoOverlayComposition"
                c:type="GstVideoOverlayComposition*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_calculate_display_ratio"
              c:identifier="gst_video_calculate_display_ratio"
              version="0.10.7">
      <doc xml:whitespace="preserve">Given the Pixel Aspect Ratio and size of an input video frame, and the
pixel aspect ratio of the intended display device, calculates the actual
display ratio the video will be rendered with.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">A boolean indicating success and a calculated Display Ratio in the dar_n and dar_d parameters. The return value is FALSE in the case of integer overflow or other error.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="dar_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the calculated display_ratio</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="dar_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the calculated display_ratio</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="video_width" transfer-ownership="none">
          <doc xml:whitespace="preserve">Width of the video frame in pixels</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_height" transfer-ownership="none">
          <doc xml:whitespace="preserve">Height of the video frame in pixels</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the pixel aspect ratio of the input video.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="video_par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the pixel aspect ratio of the input video.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">Numerator of the pixel aspect ratio of the display device</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="display_par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">Denominator of the pixel aspect ratio of the display device</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_convert_frame"
              c:identifier="gst_video_convert_frame"
              version="0.10.31"
              introspectable="0"
              throws="1">
      <doc xml:whitespace="preserve">Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.</doc>
      <return-value>
        <doc xml:whitespace="preserve">The converted #GstBuffer, or %NULL if an error happened (in which case @err will point to the #GError).</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="to_caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstCaps to convert to</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum amount of time allowed for the processing.</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_convert_frame_async"
              c:identifier="gst_video_convert_frame_async"
              version="0.10.31">
      <doc xml:whitespace="preserve">Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.

@callback will be called after conversion, when an error occured or if conversion didn't
finish after @timeout. @callback will always be called from the thread default
%GMainContext, see g_main_context_get_thread_default(). If GLib before 2.22 is used,
this will always be the global default main context.

@destroy_notify will be called after the callback was called and @user_data is not needed
anymore.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buf" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="to_caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstCaps to convert to</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="timeout" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum amount of time allowed for the processing.</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4"
                   destroy="5">
          <doc xml:whitespace="preserve">%GstVideoConvertFrameCallback that will be called after conversion.</doc>
          <type name="VideoConvertFrameCallback"
                c:type="GstVideoConvertFrameCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">extra data that will be passed to the @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy_notify"
                   transfer-ownership="none"
                   scope="async">
          <doc xml:whitespace="preserve">%GDestroyNotify to be called after @user_data is not needed anymore</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_is_force_key_unit"
              c:identifier="gst_video_event_is_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Checks if an event is a force key unit event. Returns true for both upstream
and downstream force key unit events.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid force key unit event</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to check</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_downstream_force_key_unit"
              c:identifier="gst_video_event_new_downstream_force_key_unit"
              version="0.10.36"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new downstream force key unit event. A downstream force key unit
event can be sent down the pipeline to request downstream elements to produce
a key unit. A downstream force key unit event must also be sent when handling
an upstream force key unit event to notify downstream that the latter has been
handled.

To parse an event created by gst_video_event_new_downstream_force_key_unit() use
gst_video_event_parse_downstream_force_key_unit().</doc>
      <return-value>
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="timestamp" transfer-ownership="none">
          <doc xml:whitespace="preserve">the timestamp of the buffer that starts a new key unit</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="streamtime" transfer-ownership="none">
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="runningtime" transfer-ownership="none">
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="all_headers" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to produce headers when starting a new key unit</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">integer that can be used to number key units</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_still_frame"
              c:identifier="gst_video_event_new_still_frame"
              version="0.10.26"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new Still Frame event. If @in_still is %TRUE, then the event
represents the start of a still frame sequence. If it is %FALSE, then
the event ends a still frame sequence.

To parse an event created by gst_video_event_new_still_frame() use
gst_video_event_parse_still_frame().</doc>
      <return-value>
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="in_still" transfer-ownership="none">
          <doc xml:whitespace="preserve">boolean value for the still-frame state of the event.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_new_upstream_force_key_unit"
              c:identifier="gst_video_event_new_upstream_force_key_unit"
              version="0.10.36"
              introspectable="0">
      <doc xml:whitespace="preserve">Creates a new upstream force key unit event. An upstream force key unit event
can be sent to request upstream elements to produce a key unit. 

@running_time can be set to request a new key unit at a specific
running_time. If set to GST_CLOCK_TIME_NONE, upstream elements will produce a
new key unit as soon as possible.

To parse an event created by gst_video_event_new_downstream_force_key_unit() use
gst_video_event_parse_downstream_force_key_unit().</doc>
      <return-value>
        <doc xml:whitespace="preserve">The new GstEvent</doc>
        <type name="Gst.Event" c:type="GstEvent*"/>
      </return-value>
      <parameters>
        <parameter name="running_time" transfer-ownership="none">
          <doc xml:whitespace="preserve">the running_time at which a new key unit should be produced</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime"/>
        </parameter>
        <parameter name="all_headers" transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE to produce headers when starting a new key unit</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">integer that can be used to number key units</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_downstream_force_key_unit"
              c:identifier="gst_video_event_parse_downstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Get timestamp, stream-time, running-time, all-headers and count in the force
key unit event. See gst_video_event_new_downstream_force_key_unit() for a
full description of the downstream force key unit event.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid downstream force key unit event.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="timestamp"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the timestamp in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="streamtime" transfer-ownership="none">
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="runningtime" transfer-ownership="none">
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="all_headers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the all_headers flag in the event</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the count field of the event</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_still_frame"
              c:identifier="gst_video_event_parse_still_frame"
              version="0.10.26">
      <doc xml:whitespace="preserve">Parse a #GstEvent, identify if it is a Still Frame event, and
return the still-frame state from the event if it is.
If the event represents the start of a still frame, the in_still
variable will be set to TRUE, otherwise FALSE. It is OK to pass NULL for the
in_still variable order to just check whether the event is a valid still-frame
event.

Create a still frame event using gst_video_event_new_still_frame()</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid still-frame event. %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="in_still" transfer-ownership="none">
          <doc xml:whitespace="preserve">A boolean to receive the still-frame status from the event, or NULL</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_event_parse_upstream_force_key_unit"
              c:identifier="gst_video_event_parse_upstream_force_key_unit"
              version="0.10.36">
      <doc xml:whitespace="preserve">Get running-time, all-headers and count in the force key unit event. See
gst_video_event_new_upstream_force_key_unit() for a full description of the
upstream force key unit event.

Create an upstream force key unit event using  gst_video_event_new_upstream_force_key_unit()</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the event is a valid upstream force-key-unit event. %FALSE if not</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GstEvent to parse</doc>
          <type name="Gst.Event" c:type="GstEvent*"/>
        </parameter>
        <parameter name="running_time"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the running_time in the event</doc>
          <type name="Gst.ClockTime" c:type="GstClockTime*"/>
        </parameter>
        <parameter name="all_headers"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the all_headers flag in the event</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
        <parameter name="count"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:whitespace="preserve">A pointer to the count field in the event</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_convert"
              c:identifier="gst_video_format_convert"
              moved-to="VideoFormat.convert"
              version="0.10.16">
      <doc xml:whitespace="preserve">Converts among various #GstFormat types.  This function handles
GST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For
raw video, GST_FORMAT_DEFAULT corresponds to video frames.  This
function can be to handle pad queries of the type GST_QUERY_CONVERT.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if the conversion was successful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fps_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">frame rate numerator</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="fps_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">frame rate denominator</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="src_format" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstFormat of the @src_value</doc>
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
        <parameter name="src_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">value to convert</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="dest_format" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstFormat of the @dest_value</doc>
          <type name="Gst.Format" c:type="GstFormat"/>
        </parameter>
        <parameter name="dest_value" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to destination value</doc>
          <type name="gint64" c:type="gint64*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_from_fourcc"
              c:identifier="gst_video_format_from_fourcc"
              moved-to="VideoFormat.from_fourcc"
              version="0.10.16">
      <doc xml:whitespace="preserve">Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the #GstVideoFormat describing the FOURCC value</doc>
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="fourcc" transfer-ownership="none">
          <doc xml:whitespace="preserve">a FOURCC value representing raw YUV video</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_from_masks"
              c:identifier="gst_video_format_from_masks"
              moved-to="VideoFormat.from_masks">
      <doc xml:whitespace="preserve">Find the #GstVideoFormat for the given parameters.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstVideoFormat or GST_VIDEO_FORMAT_UNKNOWN when the parameters to not specify a known format.</doc>
        <type name="VideoFormat" c:type="GstVideoFormat"/>
      </return-value>
      <parameters>
        <parameter name="depth" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of bits used for a pixel</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="bpp" transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of bits used to store a pixel. This value is bigger than @depth</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="endianness" transfer-ownership="none">
          <doc xml:whitespace="preserve">the endianness of the masks</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="red_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the red mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="green_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the green mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="blue_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the blue mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="alpha_mask" transfer-ownership="none">
          <doc xml:whitespace="preserve">the optional alpha mask</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_component_depth"
              c:identifier="gst_video_format_get_component_depth"
              moved-to="VideoFormat.get_component_depth"
              version="0.10.33">
      <doc xml:whitespace="preserve">Returns the number of bits used to encode an individual pixel of
a given @component.  Typically this is 8, although higher and lower
values are possible for some formats.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">depth of component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the video component (e.g. 0 for 'R' in RGB)</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_component_height"
              c:identifier="gst_video_format_get_component_height"
              moved-to="VideoFormat.get_component_height"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the height of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">height of component @component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the component index</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_component_offset"
              c:identifier="gst_video_format_get_component_offset"
              moved-to="VideoFormat.get_component_offset"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the offset (in bytes) of the first pixel of the component
with index @component.  For packed formats, this will typically be a
small integer (0, 1, 2, 3).  For planar formats, this will be a
(relatively) large offset to the beginning of the second or third
component planes.  See @gst_video_format_get_row_stride for a description
of the component index.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">offset of component @component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the component index</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_component_width"
              c:identifier="gst_video_format_get_component_width"
              moved-to="VideoFormat.get_component_width"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the width of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">width of component @component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the component index</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_info"
              c:identifier="gst_video_format_get_info"
              moved-to="VideoFormat.get_info"
              version="0.10.37">
      <doc xml:whitespace="preserve">Get the #GstVideoFormatInfo for @format</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The #GstVideoFormatInfo for @format.</doc>
        <type name="VideoFormatInfo" c:type="GstVideoFormatInfo*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_pixel_stride"
              c:identifier="gst_video_format_get_pixel_stride"
              moved-to="VideoFormat.get_pixel_stride"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the pixel stride (number of bytes from one pixel to the
pixel to its immediate left) for the video component with an index
of @component.  See @gst_video_format_get_row_stride for a description
of the component index.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">pixel stride of component @component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the component index</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_row_stride"
              c:identifier="gst_video_format_get_row_stride"
              moved-to="VideoFormat.get_row_stride"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the row stride (number of bytes from one row of pixels to
the next) for the video component with an index of @component.  For
YUV video, Y, U, and V have component indices of 0, 1, and 2,
respectively.  For RGB video, R, G, and B have component indicies of
0, 1, and 2, respectively.  Alpha channels, if present, have a component
index of 3.  The @width parameter always represents the width of the
video, not the component.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">row stride of component @component</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="component" transfer-ownership="none">
          <doc xml:whitespace="preserve">the component index</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_get_size"
              c:identifier="gst_video_format_get_size"
              moved-to="VideoFormat.get_size"
              version="0.10.16">
      <doc xml:whitespace="preserve">Calculates the total number of bytes in the raw video format.  This
number should be used when allocating a buffer for raw video.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">size (in bytes) of raw video format</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_has_alpha"
              c:identifier="gst_video_format_has_alpha"
              moved-to="VideoFormat.has_alpha"
              version="0.10.16"
              deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_HAS_ALPHA">
      <doc xml:whitespace="preserve">Returns TRUE or FALSE depending on if the video format provides an
alpha channel.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @format has an alpha channel</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_is_gray"
              c:identifier="gst_video_format_is_gray"
              moved-to="VideoFormat.is_gray"
              version="0.10.29"
              deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_GRAY">
      <doc xml:whitespace="preserve">Determine whether the video format is a grayscale format.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @format represents grayscale video</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_is_rgb"
              c:identifier="gst_video_format_is_rgb"
              moved-to="VideoFormat.is_rgb"
              version="0.10.16"
              deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_RGB">
      <doc xml:whitespace="preserve">Determine whether the video format is an RGB format.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @format represents RGB video</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_is_yuv"
              c:identifier="gst_video_format_is_yuv"
              moved-to="VideoFormat.is_yuv"
              version="0.10.16"
              deprecated="Use #GstVideoFormatInfo and #GST_VIDEO_FORMAT_INFO_IS_YUV">
      <doc xml:whitespace="preserve">Determine whether the video format is a YUV format.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @format represents YUV video</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_new_caps"
              c:identifier="gst_video_format_new_caps"
              moved-to="VideoFormat.new_caps"
              version="0.10.16">
      <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="framerate_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">numerator of frame rate</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="framerate_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">denominator of frame rate</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">numerator of pixel aspect ratio</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">denominator of pixel aspect ratio</doc>
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_new_caps_interlaced"
              c:identifier="gst_video_format_new_caps_interlaced"
              moved-to="VideoFormat.new_caps_interlaced"
              version="0.10.23">
      <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">width of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">height of video</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="framerate_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">numerator of frame rate</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="framerate_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">denominator of frame rate</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">numerator of pixel aspect ratio</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">denominator of pixel aspect ratio</doc>
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="interlaced" transfer-ownership="none">
          <doc xml:whitespace="preserve">#TRUE if the format is interlaced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_new_template_caps"
              c:identifier="gst_video_format_new_template_caps"
              moved-to="VideoFormat.new_template_caps"
              version="0.10.33">
      <doc xml:whitespace="preserve">Creates a new #GstCaps object based on the parameters provided.
Size, frame rate, and pixel aspect ratio are set to the full
range.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a new #GstCaps object, or NULL if there was an error</doc>
        <type name="Gst.Caps" c:type="GstCaps*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat describing the raw video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_parse_caps"
              c:identifier="gst_video_format_parse_caps"
              moved-to="VideoFormat.parse_caps"
              version="0.10.16">
      <doc xml:whitespace="preserve">Determines the #GstVideoFormat of @caps and places it in the location
pointed to by @format.  Extracts the size of the video and places it
in the location pointed to by @width and @height.  If @caps does not
represent a video format or does not contain height and width, the
function will fail and return FALSE. If @caps does not represent a raw
video format listed in #GstVideoFormat, but still contains video caps,
this function will return TRUE and set @format to #GST_VIDEO_FORMAT_UNKNOWN.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstVideoFormat of the video represented by @caps (output)</doc>
          <type name="VideoFormat" c:type="GstVideoFormat*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the video represented by @caps, may be NULL (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the video represented by @caps, may be NULL (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_parse_caps_interlaced"
              c:identifier="gst_video_format_parse_caps_interlaced"
              moved-to="VideoFormat.parse_caps_interlaced"
              version="0.10.23">
      <doc xml:whitespace="preserve">Extracts whether the caps represents interlaced content or not and places it
in @interlaced.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the fixed #GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="interlaced" transfer-ownership="none">
          <doc xml:whitespace="preserve">whether @caps represents interlaced video or not, may be NULL (output)</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_to_fourcc"
              c:identifier="gst_video_format_to_fourcc"
              moved-to="VideoFormat.to_fourcc"
              version="0.10.16">
      <doc xml:whitespace="preserve">Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the FOURCC corresponding to @format</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_format_to_string"
              c:identifier="gst_video_format_to_string"
              moved-to="VideoFormat.to_string"
              version="0.10.37">
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a short string that describes @format, or #NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="format" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstVideoFormat video format</doc>
          <type name="VideoFormat" c:type="GstVideoFormat"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_frame_rate" c:identifier="gst_video_frame_rate">
      <doc xml:whitespace="preserve">A convenience function to retrieve a GValue holding the framerate
from the caps on a pad.

The pad needs to have negotiated caps containing a framerate property.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">NULL if the pad has no configured caps or the configured caps do not contain a framerate.</doc>
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a #GstPad</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_get_size" c:identifier="gst_video_get_size">
      <doc xml:whitespace="preserve">Inspect the caps of the provided pad and retrieve the width and height of
the video frames it is configured for.

The pad needs to have negotiated caps containing width and height properties.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if the width and height could be retrieved.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pad" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a #GstPad</doc>
          <type name="Gst.Pad" c:type="GstPad*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to integer to hold pixel width of the video frames (output)</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to integer to hold pixel height of the video frames (output)</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_get_size_from_caps"
              c:identifier="gst_video_get_size_from_caps"
              version="0.10.36">
      <doc xml:whitespace="preserve">Calculates the total number of bytes in the raw video format for the given
caps.  This number should be used when allocating a buffer for raw video.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE if the size could be calculated from the caps</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to #GstCaps</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:whitespace="preserve">a pointer to a gint that will be assigned the size (in bytes) of a video frame with the given caps</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_parse_caps_chroma_site"
              c:identifier="gst_video_parse_caps_chroma_site"
              version="0.10.29">
      <doc xml:whitespace="preserve">Extracts the chroma site used by the caps.  Possible values are
"mpeg2" for MPEG-2 style chroma siting (co-sited horizontally,
halfway-sited vertically), "jpeg" for JPEG and Theora style
chroma siting (halfway-sited both horizontally and vertically).
Other chroma site values are possible, but uncommon.

When no chroma site is specified in the caps, it should be assumed
to be "mpeg2".</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a chroma site string, or NULL if no chroma site could be determined.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the fixed #GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_parse_caps_color_matrix"
              c:identifier="gst_video_parse_caps_color_matrix"
              version="0.10.29">
      <doc xml:whitespace="preserve">Extracts the color matrix used by the caps.  Possible values are
"sdtv" for the standard definition color matrix (as specified in
Rec. ITU-R BT.470-6) or "hdtv" for the high definition color
matrix (as specified in Rec. ITU-R BT.709)</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a color matrix string, or NULL if no color matrix could be determined.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">the fixed #GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_parse_caps_framerate"
              c:identifier="gst_video_parse_caps_framerate"
              version="0.10.16">
      <doc xml:whitespace="preserve">Extracts the frame rate from @caps and places the values in the locations
pointed to by @fps_n and @fps_d.  Returns TRUE if the values could be
parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a #GstCaps instance</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="fps_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to integer to hold numerator of frame rate (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="fps_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to integer to hold denominator of frame rate (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_parse_caps_palette"
              c:identifier="gst_video_parse_caps_palette"
              version="0.10.32"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns the palette data from the caps as a #GstBuffer. For
#GST_VIDEO_FORMAT_RGB8_PALETTED this is containing 256 #guint32
values, each containing ARGB colors in native endianness.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a #GstBuffer containing the palette data. Unref after usage.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">#GstCaps to parse</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
      </parameters>
    </function>
    <function name="video_parse_caps_pixel_aspect_ratio"
              c:identifier="gst_video_parse_caps_pixel_aspect_ratio"
              version="0.10.16">
      <doc xml:whitespace="preserve">Extracts the pixel aspect ratio from @caps and places the values in
the locations pointed to by @par_n and @par_d.  Returns TRUE if the
values could be parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE if @caps was parsed correctly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="caps" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to a #GstCaps instance</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </parameter>
        <parameter name="par_n" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to numerator of pixel aspect ratio (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="par_d" transfer-ownership="none">
          <doc xml:whitespace="preserve">pointer to denominator of pixel aspect ratio (output)</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
