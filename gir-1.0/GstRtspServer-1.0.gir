<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gst" version="1.0"/>
  <include name="GstRtsp" version="1.0"/>
  <include name="GstSdp" version="1.0"/>
  <package name="gstreamer-rtsp-server-1.0"/>
  <c:include name="gst/gst.h"/>
  <namespace name="GstRtspServer"
             version="1.0"
             shared-library="libgstrtspserver-1.0.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <record name="RTSPAddress"
            c:type="GstRTSPAddress"
            glib:type-name="GstRTSPAddress"
            glib:get-type="gst_rtsp_address_get_type"
            c:symbol-prefix="rtsp_address">
      <field name="pool" writable="1">
        <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
      </field>
      <field name="address" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="port" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="n_ports" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="ttl" writable="1">
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="priv" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="copy" c:identifier="gst_rtsp_address_copy">
        <return-value transfer-ownership="full">
          <type name="RTSPAddress" c:type="GstRTSPAddress*"/>
        </return-value>
      </method>
      <method name="free" c:identifier="gst_rtsp_address_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
    </record>
    <record name="RTSPAddressClass" c:type="GstRTSPAddressClass" disguised="1">
    </record>
    <bitfield name="RTSPAddressFlags" c:type="GstRTSPAddressFlags">
      <member name="none" value="0" c:identifier="GST_RTSP_ADDRESS_FLAG_NONE">
      </member>
      <member name="ipv4" value="1" c:identifier="GST_RTSP_ADDRESS_FLAG_IPV4">
      </member>
      <member name="ipv6" value="2" c:identifier="GST_RTSP_ADDRESS_FLAG_IPV6">
      </member>
      <member name="even_port"
              value="4"
              c:identifier="GST_RTSP_ADDRESS_FLAG_EVEN_PORT">
      </member>
    </bitfield>
    <class name="RTSPAddressPool"
           c:symbol-prefix="rtsp_address_pool"
           c:type="GstRTSPAddressPool"
           parent="GObject.Object"
           glib:type-name="GstRTSPAddressPool"
           glib:get-type="gst_rtsp_address_pool_get_type"
           glib:type-struct="RTSPAddressPoolClass">
      <constructor name="new" c:identifier="gst_rtsp_address_pool_new">
        <doc xml:whitespace="preserve">Make a new #GstRTSPAddressPool.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPAddressPool</doc>
          <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
        </return-value>
      </constructor>
      <method name="acquire_address"
              c:identifier="gst_rtsp_address_pool_acquire_address">
        <doc xml:whitespace="preserve">Take an address and ports from @pool. @flags can be used to control the
allocation. @n_ports consecutive ports will be allocated of which the first
one can be found in @port.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GstRTSPAddress that should be freed with gst_rtsp_address_free after use or %NULL when no address could be acquired.</doc>
          <type name="RTSPAddress" c:type="GstRTSPAddress*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">flags</doc>
            <type name="RTSPAddressFlags" c:type="GstRTSPAddressFlags"/>
          </parameter>
          <parameter name="n_ports" transfer-ownership="none">
            <doc xml:whitespace="preserve">the amount of ports</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_range" c:identifier="gst_rtsp_address_pool_add_range">
        <doc xml:whitespace="preserve">Adds the multicast addresses from @min_addess to @max_address (inclusive)
to @pool. The valid port range for the addresses will be from @min_port to
@max_port inclusive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the addresses could be added.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="min_address" transfer-ownership="none">
            <doc xml:whitespace="preserve">a minimum address to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_address" transfer-ownership="none">
            <doc xml:whitespace="preserve">a maximum address to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min_port" transfer-ownership="none">
            <doc xml:whitespace="preserve">the minimum port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="max_port" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="ttl" transfer-ownership="none">
            <doc xml:whitespace="preserve">a TTL</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="gst_rtsp_address_pool_clear">
        <doc xml:whitespace="preserve">Clear all addresses in @pool. There should be no outstanding
allocations.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="dump" c:identifier="gst_rtsp_address_pool_dump">
        <doc xml:whitespace="preserve">Dump the free and allocated addresses to stdout.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPAddressPoolPrivate"
              c:type="GstRTSPAddressPoolPrivate*"/>
      </field>
    </class>
    <record name="RTSPAddressPoolClass"
            c:type="GstRTSPAddressPoolClass"
            glib:is-gtype-struct-for="RTSPAddressPool">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RTSPAddressPoolPrivate"
            c:type="GstRTSPAddressPoolPrivate"
            disguised="1">
    </record>
    <class name="RTSPAuth"
           c:symbol-prefix="rtsp_auth"
           c:type="GstRTSPAuth"
           parent="GObject.Object"
           glib:type-name="GstRTSPAuth"
           glib:get-type="gst_rtsp_auth_get_type"
           glib:type-struct="RTSPAuthClass">
      <doc xml:whitespace="preserve">The authentication structure.</doc>
      <constructor name="new" c:identifier="gst_rtsp_auth_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPAuth instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPAuth</doc>
          <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
        </return-value>
      </constructor>
      <function name="make_basic" c:identifier="gst_rtsp_auth_make_basic">
        <doc xml:whitespace="preserve">Construct a Basic authorisation token from @user and @pass.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the base64 encoding of the string @user:@pass. g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="user" transfer-ownership="none">
            <doc xml:whitespace="preserve">a userid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pass" transfer-ownership="none">
            <doc xml:whitespace="preserve">a password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="check_method">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="setup_auth" invoker="setup_auth">
        <doc xml:whitespace="preserve">Add authentication tokens to @response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if something is wrong.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:whitespace="preserve">the client</doc>
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:whitespace="preserve">TODO</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">TODO</doc>
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check" c:identifier="gst_rtsp_auth_check">
        <doc xml:whitespace="preserve">Check if @client is allowed to perform the actions of @state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if the action is not allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:whitespace="preserve">the client</doc>
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:whitespace="preserve">a hint</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">client state</doc>
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_basic" c:identifier="gst_rtsp_auth_set_basic">
        <doc xml:whitespace="preserve">Set the basic token for the default authentication algorithm.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="basic" transfer-ownership="none">
            <doc xml:whitespace="preserve">the basic token</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_auth" c:identifier="gst_rtsp_auth_setup_auth">
        <doc xml:whitespace="preserve">Add authentication tokens to @response.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">FALSE if something is wrong.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:whitespace="preserve">the client</doc>
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:whitespace="preserve">TODO</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">TODO</doc>
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPAuthPrivate" c:type="GstRTSPAuthPrivate*"/>
      </field>
    </class>
    <record name="RTSPAuthClass"
            c:type="GstRTSPAuthClass"
            glib:is-gtype-struct-for="RTSPAuth">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="setup_auth">
        <callback name="setup_auth">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">FALSE if something is wrong.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <doc xml:whitespace="preserve">the client</doc>
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="hint" transfer-ownership="none">
              <doc xml:whitespace="preserve">TODO</doc>
              <type name="GLib.Quark" c:type="GQuark"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <doc xml:whitespace="preserve">TODO</doc>
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="check_method">
        <callback name="check_method">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="auth" transfer-ownership="none">
              <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="hint" transfer-ownership="none">
              <type name="GLib.Quark" c:type="GQuark"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RTSPAuthPrivate" c:type="GstRTSPAuthPrivate" disguised="1">
    </record>
    <class name="RTSPClient"
           c:symbol-prefix="rtsp_client"
           c:type="GstRTSPClient"
           parent="GObject.Object"
           glib:type-name="GstRTSPClient"
           glib:get-type="gst_rtsp_client_get_type"
           glib:type-struct="RTSPClientClass">
      <doc xml:whitespace="preserve">The client structure.</doc>
      <constructor name="new" c:identifier="gst_rtsp_client_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPClient instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPClient</doc>
          <type name="RTSPClient" c:type="GstRTSPClient*"/>
        </return-value>
      </constructor>
      <virtual-method name="closed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <virtual-method name="create_sdp" introspectable="0">
        <return-value>
          <type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="describe_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_parameter_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_session">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="session" transfer-ownership="none">
            <type name="RTSPSession" c:type="GstRTSPSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="options_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="pause_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="play_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_parameter_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="setup_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="teardown_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="accept" c:identifier="gst_rtsp_client_accept" throws="1">
        <doc xml:whitespace="preserve">Accept a new connection for @client on @socket.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the client could be accepted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GSocket</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="gst_rtsp_client_attach">
        <doc xml:whitespace="preserve">Attaches @client to @context. When the mainloop for @context is run, the
client will be dispatched. When @context is NULL, the default context will be
used).

This function should be called when the client properties and urls are fully
configured and the client is ready to start.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the ID (greater than 0) for the source within the GMainContext.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GMainContext</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auth" c:identifier="gst_rtsp_client_get_auth">
        <doc xml:whitespace="preserve">Get the #GstRTSPAuth used as the authentication manager of @client.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAuth of @client. g_object_unref() after usage.</doc>
          <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
        </return-value>
      </method>
      <method name="get_mount_points"
              c:identifier="gst_rtsp_client_get_mount_points">
        <doc xml:whitespace="preserve">Get the #GstRTSPMountPoints object that @client uses to manage its sessions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GstRTSPMountPoints, unref after usage.</doc>
          <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
        </return-value>
      </method>
      <method name="get_session_pool"
              c:identifier="gst_rtsp_client_get_session_pool">
        <doc xml:whitespace="preserve">Get the #GstRTSPSessionPool object that @client uses to manage its sessions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GstRTSPSessionPool, unref after usage.</doc>
          <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
        </return-value>
      </method>
      <method name="get_use_client_settings"
              c:identifier="gst_rtsp_client_get_use_client_settings">
        <doc xml:whitespace="preserve">Check if client transport settings (destination and ttl) for multicast
will be used.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="handle_message"
              c:identifier="gst_rtsp_client_handle_message">
        <doc xml:whitespace="preserve">Let the client handle @message.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPResult.</doc>
          <type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">an #GstRTSPMessage</doc>
            <type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth" c:identifier="gst_rtsp_client_set_auth">
        <doc xml:whitespace="preserve">configure @auth to be used as the authentication manager of @client.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAuth</doc>
            <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="gst_rtsp_client_set_mount_points">
        <doc xml:whitespace="preserve">Set @mounts as the mount points for @client which it will use to map urls
to media streams. These mount points are usually inherited from the server that
created the client but can be overriden later.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mounts" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPMountPoints</doc>
            <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_send_func"
              c:identifier="gst_rtsp_client_set_send_func">
        <doc xml:whitespace="preserve">Set @func as the callback that will be called when a new message needs to be
sent to the client. @user_data is passed to @func and @notify is called when
@user_data is no longer in use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a #GstRTSPClientSendFunc</doc>
            <type name="RTSPClientSendFunc" c:type="GstRTSPClientSendFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">called when @user_data is no longer in use</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_pool"
              c:identifier="gst_rtsp_client_set_session_pool">
        <doc xml:whitespace="preserve">Set @pool as the sessionpool for @client which it will use to find
or allocate sessions. the sessionpool is usually inherited from the server
that created the client but can be overridden later.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPSessionPool</doc>
            <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_client_settings"
              c:identifier="gst_rtsp_client_set_use_client_settings">
        <doc xml:whitespace="preserve">Use client transport settings (destination and ttl) for multicast.
When @use_client_settings is %FALSE, the server settings will be
used.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="use_client_settings" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether to use client settings for multicast</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="use_socket"
              c:identifier="gst_rtsp_client_use_socket"
              throws="1">
        <doc xml:whitespace="preserve">Take an existing network socket and use it for an RTSP connection.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GSocket</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="ip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the IP address of the remote client</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:whitespace="preserve">the port used by the other end</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="initial_buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">any zero terminated initial data that was already read from the socket</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="mount-points" writable="1" transfer-ownership="none">
        <type name="RTSPMountPoints"/>
      </property>
      <property name="session-pool" writable="1" transfer-ownership="none">
        <type name="RTSPSessionPool"/>
      </property>
      <property name="use-client-settings"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPClientPrivate" c:type="GstRTSPClientPrivate*"/>
      </field>
      <glib:signal name="closed" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="describe-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="get-parameter-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="new-session" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="RTSPSession"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="options-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pause-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="play-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="set-parameter-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="setup-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="teardown-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RTSPClientClass"
            c:type="GstRTSPClientClass"
            glib:is-gtype-struct-for="RTSPClient">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_sdp" introspectable="0">
        <callback name="create_sdp" introspectable="0">
          <return-value>
            <type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_session">
        <callback name="new_session">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="RTSPSession" c:type="GstRTSPSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="options_request">
        <callback name="options_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="describe_request">
        <callback name="describe_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="setup_request">
        <callback name="setup_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="play_request">
        <callback name="play_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pause_request">
        <callback name="pause_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="teardown_request">
        <callback name="teardown_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_parameter_request">
        <callback name="set_parameter_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_parameter_request">
        <callback name="get_parameter_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RTSPClientPrivate"
            c:type="GstRTSPClientPrivate"
            disguised="1">
    </record>
    <callback name="RTSPClientSendFunc" c:type="GstRTSPClientSendFunc">
      <doc xml:whitespace="preserve">This callback is called when @client wants to send @message. When @close is
%TRUE, the connection should be closed when the message has been sent.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPClient</doc>
          <type name="RTSPClient" c:type="GstRTSPClient*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPMessage</doc>
          <type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/>
        </parameter>
        <parameter name="close" transfer-ownership="none">
          <doc xml:whitespace="preserve">close the connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <doc xml:whitespace="preserve">user data when registering the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RTSPClientState" c:type="GstRTSPClientState">
      <doc xml:whitespace="preserve">Information passed around containing the client state of a request.</doc>
      <field name="request" writable="1">
        <type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/>
      </field>
      <field name="uri" writable="1">
        <type name="GstRtsp.RTSPUrl" c:type="GstRTSPUrl*"/>
      </field>
      <field name="method" writable="1">
        <type name="GstRtsp.RTSPMethod" c:type="GstRTSPMethod"/>
      </field>
      <field name="session" writable="1">
        <type name="RTSPSession" c:type="GstRTSPSession*"/>
      </field>
      <field name="sessmedia" writable="1">
        <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
      </field>
      <field name="factory" writable="1">
        <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
      </field>
      <field name="media" writable="1">
        <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
      </field>
      <field name="stream" writable="1">
        <type name="RTSPStream" c:type="GstRTSPStream*"/>
      </field>
      <field name="response" writable="1">
        <type name="GstRtsp.RTSPMessage" c:type="GstRTSPMessage*"/>
      </field>
    </record>
    <enumeration name="RTSPFilterResult" c:type="GstRTSPFilterResult">
      <doc xml:whitespace="preserve">Possible return values for gst_rtsp_session_pool_filter().</doc>
      <member name="remove" value="0" c:identifier="GST_RTSP_FILTER_REMOVE">
        <doc xml:whitespace="preserve">Remove session</doc>
      </member>
      <member name="keep" value="1" c:identifier="GST_RTSP_FILTER_KEEP">
        <doc xml:whitespace="preserve">Keep session in the pool</doc>
      </member>
      <member name="ref" value="2" c:identifier="GST_RTSP_FILTER_REF">
        <doc xml:whitespace="preserve">Ref session in the result list</doc>
      </member>
    </enumeration>
    <callback name="RTSPKeepAliveFunc" c:type="GstRTSPKeepAliveFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data" transfer-ownership="none" closure="0">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RTSPMedia"
           c:symbol-prefix="rtsp_media"
           c:type="GstRTSPMedia"
           parent="GObject.Object"
           glib:type-name="GstRTSPMedia"
           glib:get-type="gst_rtsp_media_get_type"
           glib:type-struct="RTSPMediaClass">
      <doc xml:whitespace="preserve">A class that contains the GStreamer element along with a list of
#GstRTSPStream objects that can produce data.

This object is usually created from a #GstRTSPMediaFactory.</doc>
      <constructor name="new" c:identifier="gst_rtsp_media_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPMedia instance. @element is the bin element that
provides the different streams. The #GstRTSPMedia object contains the
element to produce RTP data for one or more related (audio/video/..)
streams.

Ownership is taken of @element.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMedia object.</doc>
          <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #GstElement</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="handle_message">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <type name="Gst.Message" c:type="GstMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_state">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="Gst.State" c:type="GstState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_stream">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <type name="RTSPStream" c:type="GstRTSPStream*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepared">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="unprepare" invoker="unprepare">
        <doc xml:whitespace="preserve">Unprepare @media. After this call, the media should be prepared again before
it can be used again. If the media is set to be non-reusable, a new instance
must be created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="unprepared">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <method name="collect_streams"
              c:identifier="gst_rtsp_media_collect_streams">
        <doc xml:whitespace="preserve">Find all payloader elements, they should be named pay%d in the
element of @media, and create #GstRTSPStreams for them.

Collect all dynamic elements, named dynpay%d, and add them to
the list of dynamic elements.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="create_stream" c:identifier="gst_rtsp_media_create_stream">
        <doc xml:whitespace="preserve">Create a new stream in @media that provides RTP data on @srcpad.
@srcpad should be a pad of an element inside @media-&gt;element.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GstRTSPStream that remains valid for as long as @media exists.</doc>
          <type name="RTSPStream" c:type="GstRTSPStream*"/>
        </return-value>
        <parameters>
          <parameter name="payloader" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstElement</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="srcpad" transfer-ownership="none">
            <doc xml:whitespace="preserve">a source #GstPad</doc>
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address_pool"
              c:identifier="gst_rtsp_media_get_address_pool">
        <doc xml:whitespace="preserve">Get the #GstRTSPAddressPool used as the address pool of @media.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAddressPool of @media. g_object_unref() after usage.</doc>
          <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
        </return-value>
      </method>
      <method name="get_auth" c:identifier="gst_rtsp_media_get_auth">
        <doc xml:whitespace="preserve">Get the #GstRTSPAuth used as the authentication manager of @media.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAuth of @media. g_object_unref() after usage.</doc>
          <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
        </return-value>
      </method>
      <method name="get_buffer_size"
              c:identifier="gst_rtsp_media_get_buffer_size">
        <doc xml:whitespace="preserve">Get the kernel UDP buffer size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the kernel UDP buffer size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_protocols" c:identifier="gst_rtsp_media_get_protocols">
        <doc xml:whitespace="preserve">Get the allowed protocols of @media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPLowerTrans</doc>
          <type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/>
        </return-value>
      </method>
      <method name="get_range_string"
              c:identifier="gst_rtsp_media_get_range_string">
        <doc xml:whitespace="preserve">Get the current range as a string. @media must be prepared with
gst_rtsp_media_prepare ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">The range as a string, g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="play" transfer-ownership="none">
            <doc xml:whitespace="preserve">for the PLAY request</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="gst_rtsp_media_get_status">
        <doc xml:whitespace="preserve">Get the status of @media. When @media is busy preparing, this function waits
until @media is prepared or in error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the status of @media.</doc>
          <type name="RTSPMediaStatus" c:type="GstRTSPMediaStatus"/>
        </return-value>
      </method>
      <method name="get_stream" c:identifier="gst_rtsp_media_get_stream">
        <doc xml:whitespace="preserve">Retrieve the stream with index @idx from @media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstRTSPStream at index @idx or %NULL when a stream with that index did not exist.</doc>
          <type name="RTSPStream" c:type="GstRTSPStream*"/>
        </return-value>
        <parameters>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stream index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_eos_shutdown"
              c:identifier="gst_rtsp_media_is_eos_shutdown">
        <doc xml:whitespace="preserve">Check if the pipeline for @media will send an EOS down the pipeline before
unpreparing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the media will send EOS before unpreparing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_reusable" c:identifier="gst_rtsp_media_is_reusable">
        <doc xml:whitespace="preserve">Check if the pipeline for @media can be reused after an unprepare.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the media can be reused</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_shared" c:identifier="gst_rtsp_media_is_shared">
        <doc xml:whitespace="preserve">Check if the pipeline for @media can be shared between multiple clients.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the media can be shared between clients.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="n_streams" c:identifier="gst_rtsp_media_n_streams">
        <doc xml:whitespace="preserve">Get the number of streams in this media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The number of streams.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="prepare" c:identifier="gst_rtsp_media_prepare">
        <doc xml:whitespace="preserve">Prepare @media for streaming. This function will create the pipeline and
other objects to manage the streaming.

It will preroll the pipeline and collect vital information about the streams
such as the duration.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="seek" c:identifier="gst_rtsp_media_seek">
        <doc xml:whitespace="preserve">Seek the pipeline of @media to @range. @media must be prepared with
gst_rtsp_media_prepare().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="range" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPTimeRange</doc>
            <type name="GstRtsp.RTSPTimeRange" c:type="GstRTSPTimeRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address_pool"
              c:identifier="gst_rtsp_media_set_address_pool">
        <doc xml:whitespace="preserve">configure @pool to be used as the address pool of @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAddressPool</doc>
            <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth" c:identifier="gst_rtsp_media_set_auth">
        <doc xml:whitespace="preserve">configure @auth to be used as the authentication manager of @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAuth</doc>
            <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buffer_size"
              c:identifier="gst_rtsp_media_set_buffer_size">
        <doc xml:whitespace="preserve">Set the kernel UDP buffer size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eos_shutdown"
              c:identifier="gst_rtsp_media_set_eos_shutdown">
        <doc xml:whitespace="preserve">Set or unset if an EOS event will be sent to the pipeline for @media before
it is unprepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="eos_shutdown" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocols" c:identifier="gst_rtsp_media_set_protocols">
        <doc xml:whitespace="preserve">Configure the allowed lower transport for @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="protocols" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new flags</doc>
            <type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reusable" c:identifier="gst_rtsp_media_set_reusable">
        <doc xml:whitespace="preserve">Set or unset if the pipeline for @media can be reused after the pipeline has
been unprepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reusable" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shared" c:identifier="gst_rtsp_media_set_shared">
        <doc xml:whitespace="preserve">Set or unset if the pipeline for @media can be shared will multiple clients.
When @shared is %TRUE, client requests for this media will share the media
pipeline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shared" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="gst_rtsp_media_set_state"
              introspectable="0">
        <doc xml:whitespace="preserve">Set the state of @media to @state and for the transports in @transports.

@media must be prepared with gst_rtsp_media_prepare();</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target state of the media</doc>
            <type name="Gst.State" c:type="GstState"/>
          </parameter>
          <parameter name="transports" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GPtrArray of #GstRTSPStreamTransport pointers</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="take_pipeline" c:identifier="gst_rtsp_media_take_pipeline">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Gst.Pipeline" c:type="GstPipeline*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unprepare" c:identifier="gst_rtsp_media_unprepare">
        <doc xml:whitespace="preserve">Unprepare @media. After this call, the media should be prepared again before
it can be used again. If the media is set to be non-reusable, a new instance
must be created.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="buffer-size" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="element"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gst.Element"/>
      </property>
      <property name="eos-shutdown" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="protocols" writable="1" transfer-ownership="none">
        <type name="GstRtsp.RTSPLowerTrans"/>
      </property>
      <property name="reusable" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="shared" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPMediaPrivate" c:type="GstRTSPMediaPrivate*"/>
      </field>
      <glib:signal name="new-state" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-stream" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="RTSPStream"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="prepared" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="unprepared" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RTSPMediaClass"
            c:type="GstRTSPMediaClass"
            glib:is-gtype-struct-for="RTSPMedia">
      <doc xml:whitespace="preserve">The RTSP media class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="context">
        <type name="GLib.MainContext" c:type="GMainContext*"/>
      </field>
      <field name="loop">
        <type name="GLib.MainLoop" c:type="GMainLoop*"/>
      </field>
      <field name="thread">
        <type name="GLib.Thread" c:type="GThread*"/>
      </field>
      <field name="handle_message">
        <callback name="handle_message">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Gst.Message" c:type="GstMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unprepare">
        <callback name="unprepare">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE on success.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_stream">
        <callback name="new_stream">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <type name="RTSPStream" c:type="GstRTSPStream*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepared">
        <callback name="prepared">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unprepared">
        <callback name="unprepared">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="new_state">
        <callback name="new_state">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="Gst.State" c:type="GstState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RTSPMediaFactory"
           c:symbol-prefix="rtsp_media_factory"
           c:type="GstRTSPMediaFactory"
           parent="GObject.Object"
           glib:type-name="GstRTSPMediaFactory"
           glib:get-type="gst_rtsp_media_factory_get_type"
           glib:type-struct="RTSPMediaFactoryClass">
      <doc xml:whitespace="preserve">The definition and logic for constructing the pipeline for a media. The media
can contain multiple streams like audio and video.</doc>
      <constructor name="new" c:identifier="gst_rtsp_media_factory_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPMediaFactory instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMediaFactory object.</doc>
          <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
        </return-value>
      </constructor>
      <virtual-method name="configure">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct" invoker="construct">
        <doc xml:whitespace="preserve">Construct the media object and create its streams. Implementations
should create the needed gstreamer elements and add them to the result
object. No state changes should be performed on them yet.

One or more GstRTSPStream objects should be created from the result
with gst_rtsp_media_create_stream ().

After the media is constructed, it can be configured and then prepared
with gst_rtsp_media_prepare ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMedia if the media could be prepared.</doc>
          <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url used</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_element" invoker="create_element">
        <doc xml:whitespace="preserve">Construct and return a #GstElement that is a #GstBin containing
the elements to use for streaming the media.

The bin should contain payloaders pay%d for each stream. The default
implementation of this function returns the bin created from the
launch parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GstElement.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url used</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_pipeline" introspectable="0">
        <return-value>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="gen_key">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="media_configure">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="media_constructed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="construct" c:identifier="gst_rtsp_media_factory_construct">
        <doc xml:whitespace="preserve">Construct the media object and create its streams. Implementations
should create the needed gstreamer elements and add them to the result
object. No state changes should be performed on them yet.

One or more GstRTSPStream objects should be created from the result
with gst_rtsp_media_create_stream ().

After the media is constructed, it can be configured and then prepared
with gst_rtsp_media_prepare ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMedia if the media could be prepared.</doc>
          <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url used</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_element"
              c:identifier="gst_rtsp_media_factory_create_element">
        <doc xml:whitespace="preserve">Construct and return a #GstElement that is a #GstBin containing
the elements to use for streaming the media.

The bin should contain payloaders pay%d for each stream. The default
implementation of this function returns the bin created from the
launch parameter.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GstElement.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url used</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address_pool"
              c:identifier="gst_rtsp_media_factory_get_address_pool">
        <doc xml:whitespace="preserve">Get the #GstRTSPAddressPool used as the address pool of @factory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAddressPool of @factory. g_object_unref() after usage.</doc>
          <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
        </return-value>
      </method>
      <method name="get_auth" c:identifier="gst_rtsp_media_factory_get_auth">
        <doc xml:whitespace="preserve">Get the #GstRTSPAuth used as the authentication manager of @factory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAuth of @factory. g_object_unref() after usage.</doc>
          <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
        </return-value>
      </method>
      <method name="get_buffer_size"
              c:identifier="gst_rtsp_media_factory_get_buffer_size">
        <doc xml:whitespace="preserve">Get the kernel UDP buffer size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the kernel UDP buffer size.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_launch"
              c:identifier="gst_rtsp_media_factory_get_launch">
        <doc xml:whitespace="preserve">Get the gst_parse_launch() pipeline description that will be used in the
default prepare vmethod.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the configured launch description. g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_protocols"
              c:identifier="gst_rtsp_media_factory_get_protocols">
        <doc xml:whitespace="preserve">Get the allowed protocols of @factory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPLowerTrans</doc>
          <type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/>
        </return-value>
      </method>
      <method name="is_eos_shutdown"
              c:identifier="gst_rtsp_media_factory_is_eos_shutdown">
        <doc xml:whitespace="preserve">Get if media created from this factory will have an EOS event sent to the
pipeline before shutdown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the media will receive EOS before shutdown.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_shared" c:identifier="gst_rtsp_media_factory_is_shared">
        <doc xml:whitespace="preserve">Get if media created from this factory can be shared between clients.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the media will be shared between clients.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_address_pool"
              c:identifier="gst_rtsp_media_factory_set_address_pool">
        <doc xml:whitespace="preserve">configure @pool to be used as the address pool of @factory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAddressPool</doc>
            <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth" c:identifier="gst_rtsp_media_factory_set_auth">
        <doc xml:whitespace="preserve">configure @auth to be used as the authentication manager of @factory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAuth</doc>
            <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_buffer_size"
              c:identifier="gst_rtsp_media_factory_set_buffer_size">
        <doc xml:whitespace="preserve">Set the kernel UDP buffer size.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eos_shutdown"
              c:identifier="gst_rtsp_media_factory_set_eos_shutdown">
        <doc xml:whitespace="preserve">Configure if media created from this factory will have an EOS sent to the
pipeline before shutdown.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="eos_shutdown" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_launch"
              c:identifier="gst_rtsp_media_factory_set_launch">
        <doc xml:whitespace="preserve">The gst_parse_launch() line to use for constructing the pipeline in the
default prepare vmethod.

The pipeline description should return a GstBin as the toplevel element
which can be accomplished by enclosing the dscription with brackets '('
')'.

The description should return a pipeline with payloaders named pay0, pay1,
etc.. Each of the payloaders will result in a stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="launch" transfer-ownership="none">
            <doc xml:whitespace="preserve">the launch description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_protocols"
              c:identifier="gst_rtsp_media_factory_set_protocols">
        <doc xml:whitespace="preserve">Configure the allowed lower transport for @factory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="protocols" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new flags</doc>
            <type name="GstRtsp.RTSPLowerTrans" c:type="GstRTSPLowerTrans"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shared"
              c:identifier="gst_rtsp_media_factory_set_shared">
        <doc xml:whitespace="preserve">Configure if media created from this factory can be shared between clients.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shared" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer-size" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <property name="eos-shutdown" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="launch" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="protocols" writable="1" transfer-ownership="none">
        <type name="GstRtsp.RTSPLowerTrans"/>
      </property>
      <property name="shared" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPMediaFactoryPrivate"
              c:type="GstRTSPMediaFactoryPrivate*"/>
      </field>
      <glib:signal name="media-configure" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="RTSPMedia"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="media-constructed" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="RTSPMedia"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RTSPMediaFactoryClass"
            c:type="GstRTSPMediaFactoryClass"
            glib:is-gtype-struct-for="RTSPMediaFactory">
      <doc xml:whitespace="preserve">The #GstRTSPMediaFactory class structure.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="gen_key">
        <callback name="gen_key">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_element">
        <callback name="create_element">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">a new #GstElement.</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <doc xml:whitespace="preserve">the url used</doc>
              <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct">
        <callback name="construct">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">a new #GstRTSPMedia if the media could be prepared.</doc>
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <doc xml:whitespace="preserve">the url used</doc>
              <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure">
        <callback name="configure">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_pipeline" introspectable="0">
        <callback name="create_pipeline" introspectable="0">
          <return-value>
            <type name="Gst.Element" c:type="GstElement*"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="media_constructed">
        <callback name="media_constructed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="media_configure">
        <callback name="media_configure">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="factory" transfer-ownership="none">
              <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RTSPMediaFactoryPrivate"
            c:type="GstRTSPMediaFactoryPrivate"
            disguised="1">
    </record>
    <class name="RTSPMediaFactoryURI"
           c:symbol-prefix="rtsp_media_factory_uri"
           c:type="GstRTSPMediaFactoryURI"
           parent="RTSPMediaFactory"
           glib:type-name="GstRTSPMediaFactoryURI"
           glib:get-type="gst_rtsp_media_factory_uri_get_type"
           glib:type-struct="RTSPMediaFactoryURIClass">
      <doc xml:whitespace="preserve">A media factory that creates a pipeline to play and uri.</doc>
      <constructor name="new" c:identifier="gst_rtsp_media_factory_uri_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPMediaFactoryURI instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMediaFactoryURI object.</doc>
          <type name="RTSPMediaFactoryURI" c:type="GstRTSPMediaFactoryURI*"/>
        </return-value>
      </constructor>
      <method name="get_uri" c:identifier="gst_rtsp_media_factory_uri_get_uri">
        <doc xml:whitespace="preserve">Get the URI that will provide media for this factory.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the configured URI. g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_uri" c:identifier="gst_rtsp_media_factory_uri_set_uri">
        <doc xml:whitespace="preserve">Set the URI of the resource that will be streamed by this factory.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the uri the stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="uri" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="use-gstpay" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory"/>
      </field>
      <field name="priv">
        <type name="RTSPMediaFactoryURIPrivate"
              c:type="GstRTSPMediaFactoryURIPrivate*"/>
      </field>
    </class>
    <record name="RTSPMediaFactoryURIClass"
            c:type="GstRTSPMediaFactoryURIClass"
            glib:is-gtype-struct-for="RTSPMediaFactoryURI">
      <doc xml:whitespace="preserve">The #GstRTSPMediaFactoryURI class structure.</doc>
      <field name="parent_class">
        <type name="RTSPMediaFactoryClass" c:type="GstRTSPMediaFactoryClass"/>
      </field>
    </record>
    <record name="RTSPMediaFactoryURIPrivate"
            c:type="GstRTSPMediaFactoryURIPrivate"
            disguised="1">
    </record>
    <record name="RTSPMediaPrivate" c:type="GstRTSPMediaPrivate" disguised="1">
    </record>
    <enumeration name="RTSPMediaStatus" c:type="GstRTSPMediaStatus">
      <doc xml:whitespace="preserve">The state of the media pipeline.</doc>
      <member name="unprepared"
              value="0"
              c:identifier="GST_RTSP_MEDIA_STATUS_UNPREPARED">
        <doc xml:whitespace="preserve">media pipeline not prerolled</doc>
      </member>
      <member name="unpreparing"
              value="1"
              c:identifier="GST_RTSP_MEDIA_STATUS_UNPREPARING">
        <doc xml:whitespace="preserve">media pipeline is busy doing a clean shutdown.</doc>
      </member>
      <member name="preparing"
              value="2"
              c:identifier="GST_RTSP_MEDIA_STATUS_PREPARING">
        <doc xml:whitespace="preserve">media pipeline is prerolling</doc>
      </member>
      <member name="prepared"
              value="3"
              c:identifier="GST_RTSP_MEDIA_STATUS_PREPARED">
        <doc xml:whitespace="preserve">media pipeline is prerolled</doc>
      </member>
      <member name="error"
              value="4"
              c:identifier="GST_RTSP_MEDIA_STATUS_ERROR">
        <doc xml:whitespace="preserve">media pipeline is in error</doc>
      </member>
    </enumeration>
    <class name="RTSPMountPoints"
           c:symbol-prefix="rtsp_mount_points"
           c:type="GstRTSPMountPoints"
           parent="GObject.Object"
           glib:type-name="GstRTSPMountPoints"
           glib:get-type="gst_rtsp_mount_points_get_type"
           glib:type-struct="RTSPMountPointsClass">
      <doc xml:whitespace="preserve">Creates a #GstRTSPMediaFactory object for a given url.</doc>
      <constructor name="new" c:identifier="gst_rtsp_mount_points_new">
        <doc xml:whitespace="preserve">Make a new mount points object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPMountPoints</doc>
          <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
        </return-value>
      </constructor>
      <virtual-method name="find_factory" invoker="find_factory">
        <doc xml:whitespace="preserve">Find the #GstRTSPMediaFactory for @url. The default implementation of this object
will use the media factory added with gst_rtsp_mount_points_add_factory ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPMediaFactory for @url. g_object_unref() after usage.</doc>
          <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a url</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_factory"
              c:identifier="gst_rtsp_mount_points_add_factory">
        <doc xml:whitespace="preserve">Attach @factory to the mount point @path in @mounts.

@path is of the form (/node)+. Any previous mount point will be freed.

Ownership is taken of the reference on @factory so that @factory should not be
used after calling this function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a mount point</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #GstRTSPMediaFactory</doc>
            <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_factory"
              c:identifier="gst_rtsp_mount_points_find_factory">
        <doc xml:whitespace="preserve">Find the #GstRTSPMediaFactory for @url. The default implementation of this object
will use the media factory added with gst_rtsp_mount_points_add_factory ().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPMediaFactory for @url. g_object_unref() after usage.</doc>
          <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a url</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_factory"
              c:identifier="gst_rtsp_mount_points_remove_factory">
        <doc xml:whitespace="preserve">Remove the #GstRTSPMediaFactory associated with @path in @mounts.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a mount point</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPMountPointsPrivate"
              c:type="GstRTSPMountPointsPrivate*"/>
      </field>
    </class>
    <record name="RTSPMountPointsClass"
            c:type="GstRTSPMountPointsClass"
            glib:is-gtype-struct-for="RTSPMountPoints">
      <doc xml:whitespace="preserve">The class for the media mounts object.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="find_factory">
        <callback name="find_factory">
          <return-value transfer-ownership="full">
            <doc xml:whitespace="preserve">the #GstRTSPMediaFactory for @url. g_object_unref() after usage.</doc>
            <type name="RTSPMediaFactory" c:type="GstRTSPMediaFactory*"/>
          </return-value>
          <parameters>
            <parameter name="mounts" transfer-ownership="none">
              <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <doc xml:whitespace="preserve">a url</doc>
              <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RTSPMountPointsPrivate"
            c:type="GstRTSPMountPointsPrivate"
            disguised="1">
    </record>
    <callback name="RTSPSendFunc" c:type="GstRTSPSendFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="channel" transfer-ownership="none">
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RTSPServer"
           c:symbol-prefix="rtsp_server"
           c:type="GstRTSPServer"
           parent="GObject.Object"
           glib:type-name="GstRTSPServer"
           glib:get-type="gst_rtsp_server_get_type"
           glib:type-struct="RTSPServerClass">
      <doc xml:whitespace="preserve">This object listens on a port, creates and manages the clients connected to
it.</doc>
      <constructor name="new" c:identifier="gst_rtsp_server_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPServer instance.</doc>
        <return-value transfer-ownership="full">
          <type name="RTSPServer" c:type="GstRTSPServer*"/>
        </return-value>
      </constructor>
      <function name="io_func" c:identifier="gst_rtsp_server_io_func">
        <doc xml:whitespace="preserve">A default #GSocketSourceFunc that creates a new #GstRTSPClient to accept and handle a
new connection on @socket or @server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if the source could be connected, FALSE if an error occured.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GSocket</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="condition" transfer-ownership="none">
            <doc xml:whitespace="preserve">the condition on @source</doc>
            <type name="GLib.IOCondition" c:type="GIOCondition"/>
          </parameter>
          <parameter name="server" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPServer</doc>
            <type name="RTSPServer" c:type="GstRTSPServer*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="accept_client" throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
          <parameter name="socket" transfer-ownership="none">
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="client_connected">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_client" introspectable="0">
        <return-value>
          <type name="RTSPClient" c:type="GstRTSPClient*"/>
        </return-value>
      </virtual-method>
      <method name="attach" c:identifier="gst_rtsp_server_attach">
        <doc xml:whitespace="preserve">Attaches @server to @context. When the mainloop for @context is run, the
server will be dispatched. When @context is NULL, the default context will be
used).

This function should be called when the server properties and urls are fully
configured and the server is ready to start.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the ID (greater than 0) for the source within the GMainContext.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GMainContext</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_socket"
              c:identifier="gst_rtsp_server_create_socket"
              throws="1">
        <doc xml:whitespace="preserve">Create a #GSocket for @server. The socket will listen on the
configured service.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GSocket for @server or NULL when an error occured.</doc>
          <type name="Gio.Socket" c:type="GSocket*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="gst_rtsp_server_create_source"
              throws="1">
        <doc xml:whitespace="preserve">Create a #GSource for @server. The new source will have a default
#GSocketSourceFunc of gst_rtsp_server_io_func().

@cancellable if not NULL can be used to cancel the source, which will cause
the source to trigger, reporting the current condition (which is likely 0
unless cancellation happened at the same time as a condition change). You can
check for this in the callback using g_cancellable_is_cancelled().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GSource for @server or NULL when an error occured. Free with g_source_unref ()</doc>
          <type name="GLib.Source" c:type="GSource*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address" c:identifier="gst_rtsp_server_get_address">
        <doc xml:whitespace="preserve">Get the address on which the server will accept connections.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the server address. g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_auth" c:identifier="gst_rtsp_server_get_auth">
        <doc xml:whitespace="preserve">Get the #GstRTSPAuth used as the authentication manager of @server.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAuth of @server. g_object_unref() after usage.</doc>
          <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
        </return-value>
      </method>
      <method name="get_backlog" c:identifier="gst_rtsp_server_get_backlog">
        <doc xml:whitespace="preserve">The maximum amount of queued requests for the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the server backlog.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_bound_port"
              c:identifier="gst_rtsp_server_get_bound_port">
        <doc xml:whitespace="preserve">Get the port number where the server was bound to.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the port number</doc>
          <type name="gint" c:type="int"/>
        </return-value>
      </method>
      <method name="get_max_threads"
              c:identifier="gst_rtsp_server_get_max_threads">
        <doc xml:whitespace="preserve">Get the maximum number of threads used for client connections.
See gst_rtsp_server_set_max_threads().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum number of threads.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_mount_points"
              c:identifier="gst_rtsp_server_get_mount_points">
        <doc xml:whitespace="preserve">Get the #GstRTSPMountPoints used as the mount points of @server.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPMountPoints of @server. g_object_unref() after usage.</doc>
          <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
        </return-value>
      </method>
      <method name="get_service" c:identifier="gst_rtsp_server_get_service">
        <doc xml:whitespace="preserve">Get the service on which the server will accept connections.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the service. use g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_session_pool"
              c:identifier="gst_rtsp_server_get_session_pool">
        <doc xml:whitespace="preserve">Get the #GstRTSPSessionPool used as the session pool of @server.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPSessionPool used for sessions. g_object_unref() after usage.</doc>
          <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
        </return-value>
      </method>
      <method name="set_address" c:identifier="gst_rtsp_server_set_address">
        <doc xml:whitespace="preserve">Configure @server to accept connections on the given address.

This function must be called before the server is bound.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:whitespace="preserve">the address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth" c:identifier="gst_rtsp_server_set_auth">
        <doc xml:whitespace="preserve">configure @auth to be used as the authentication manager of @server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="auth" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAuth</doc>
            <type name="RTSPAuth" c:type="GstRTSPAuth*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backlog" c:identifier="gst_rtsp_server_set_backlog">
        <doc xml:whitespace="preserve">configure the maximum amount of requests that may be queued for the
server.

This function must be called before the server is bound.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="backlog" transfer-ownership="none">
            <doc xml:whitespace="preserve">the backlog</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_threads"
              c:identifier="gst_rtsp_server_set_max_threads">
        <doc xml:whitespace="preserve">Set the maximum threads used by the server to handle client requests.
A value of 0 will use the server mainloop, a value of -1 will use an
unlimited number of threads.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max_threads" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum threads</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="gst_rtsp_server_set_mount_points">
        <doc xml:whitespace="preserve">configure @mounts to be used as the mount points of @server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mounts" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPMountPoints</doc>
            <type name="RTSPMountPoints" c:type="GstRTSPMountPoints*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service" c:identifier="gst_rtsp_server_set_service">
        <doc xml:whitespace="preserve">Configure @server to accept connections on the given service.
@service should be a string containing the service name (see services(5)) or
a string containing a port number between 1 and 65535.

This function must be called before the server is bound.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service" transfer-ownership="none">
            <doc xml:whitespace="preserve">the service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_pool"
              c:identifier="gst_rtsp_server_set_session_pool">
        <doc xml:whitespace="preserve">configure @pool to be used as the session pool of @server.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPSessionPool</doc>
            <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="transfer_connection"
              c:identifier="gst_rtsp_server_transfer_connection">
        <doc xml:whitespace="preserve">Take an existing network socket and use it for an RTSP connection. This
is used when transferring a socket from an HTTP server which should be used
as an RTSP over HTTP tunnel. The @initial_buffer contains any remaining data
that the HTTP server read from the socket while parsing the HTTP header.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if all was ok, FALSE if an error occured.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:whitespace="preserve">a network socket</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
          <parameter name="ip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the IP address of the remote client</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:whitespace="preserve">the port used by the other end</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="initial_buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">any initial data that was already read from the socket</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="backlog" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="bound-port" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="max-threads" writable="1" transfer-ownership="none">
        <type name="gint"/>
      </property>
      <property name="mount-points" writable="1" transfer-ownership="none">
        <type name="RTSPMountPoints"/>
      </property>
      <property name="service" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="session-pool" writable="1" transfer-ownership="none">
        <type name="RTSPSessionPool"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPServerPrivate" c:type="GstRTSPServerPrivate*"/>
      </field>
      <glib:signal name="client-connected" when="last">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="RTSPClient"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RTSPServerClass"
            c:type="GstRTSPServerClass"
            glib:is-gtype-struct-for="RTSPServer">
      <doc xml:whitespace="preserve">object that handles the new connection on @socket.

The RTSP server class structure</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="pool">
        <type name="GLib.ThreadPool" c:type="GThreadPool*"/>
      </field>
      <field name="create_client" introspectable="0">
        <callback name="create_client" introspectable="0">
          <return-value>
            <type name="RTSPClient" c:type="GstRTSPClient*"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="RTSPServer" c:type="GstRTSPServer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="accept_client">
        <callback name="accept_client" throws="1">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="RTSPServer" c:type="GstRTSPServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
            <parameter name="socket" transfer-ownership="none">
              <type name="Gio.Socket" c:type="GSocket*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="client_connected">
        <callback name="client_connected">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="server" transfer-ownership="none">
              <type name="RTSPServer" c:type="GstRTSPServer*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="RTSPClient" c:type="GstRTSPClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="RTSPServerPrivate"
            c:type="GstRTSPServerPrivate"
            disguised="1">
    </record>
    <class name="RTSPSession"
           c:symbol-prefix="rtsp_session"
           c:type="GstRTSPSession"
           parent="GObject.Object"
           glib:type-name="GstRTSPSession"
           glib:get-type="gst_rtsp_session_get_type"
           glib:type-struct="RTSPSessionClass">
      <doc xml:whitespace="preserve">Session information kept by the server for a specific client.
One client session, identified with a session id, can handle multiple medias
identified with the url of a media.</doc>
      <constructor name="new" c:identifier="gst_rtsp_session_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPSession instance with @sessionid.</doc>
        <return-value transfer-ownership="full">
          <type name="RTSPSession" c:type="GstRTSPSession*"/>
        </return-value>
        <parameters>
          <parameter name="sessionid" transfer-ownership="none">
            <doc xml:whitespace="preserve">a session id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="allow_expire" c:identifier="gst_rtsp_session_allow_expire">
        <doc xml:whitespace="preserve">Allow @session to expire. This method must be called an equal
amount of time as gst_rtsp_session_prevent_expire().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="filter" c:identifier="gst_rtsp_session_filter">
        <doc xml:whitespace="preserve">Call @func for each media in @sess. The result value of @func determines
what happens to the media. @func will be called with @sess
locked so no further actions on @sess can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the media will be removed from
@sess.

If @func returns #GST_RTSP_FILTER_KEEP, the media will remain in @sess.

If @func returns #GST_RTSP_FILTER_REF, the media will remain in @sess but
will also be added with an additional ref to the result #GList of this
function..</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a GList with all media for which @func returned #GST_RTSP_FILTER_REF. After usage, each element in the #GList should be unreffed before the list is freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RTSPSessionMedia"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a callback</doc>
            <type name="RTSPSessionFilterFunc"
                  c:type="GstRTSPSessionFilterFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_header" c:identifier="gst_rtsp_session_get_header">
        <doc xml:whitespace="preserve">Get the string that can be placed in the Session header field.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the Session header of @session. g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_media" c:identifier="gst_rtsp_session_get_media">
        <doc xml:whitespace="preserve">Get the session media of the @url.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the configuration for @url in @sess.</doc>
          <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url for the media</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sessionid"
              c:identifier="gst_rtsp_session_get_sessionid">
        <doc xml:whitespace="preserve">Get the sessionid of @session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the sessionid of @session. The value remains valid as long as @session is alive.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_timeout" c:identifier="gst_rtsp_session_get_timeout">
        <doc xml:whitespace="preserve">Get the timeout value of @session.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the timeout of @session in seconds.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="is_expired" c:identifier="gst_rtsp_session_is_expired">
        <doc xml:whitespace="preserve">Check if @session timeout out.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @session timed out</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="now" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current system time</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="manage_media" c:identifier="gst_rtsp_session_manage_media">
        <doc xml:whitespace="preserve">Manage the media object @obj in @sess. @uri will be used to retrieve this
media from the session with gst_rtsp_session_get_media().

Ownership is taken from @media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new @GstRTSPSessionMedia object.</doc>
          <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">the uri for the media</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
          <parameter name="media" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #GstRTSPMedia</doc>
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_timeout" c:identifier="gst_rtsp_session_next_timeout">
        <doc xml:whitespace="preserve">Get the amount of milliseconds till the session will expire.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of milliseconds since the session will time out.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="now" transfer-ownership="none">
            <doc xml:whitespace="preserve">the current system time</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prevent_expire"
              c:identifier="gst_rtsp_session_prevent_expire">
        <doc xml:whitespace="preserve">Prevent @session from expiring.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="release_media"
              c:identifier="gst_rtsp_session_release_media">
        <doc xml:whitespace="preserve">Release the managed @media in @sess, freeing the memory allocated by it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if there are more media session left in @sess.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPMedia</doc>
            <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout" c:identifier="gst_rtsp_session_set_timeout">
        <doc xml:whitespace="preserve">Configure @session for a timeout of @timeout seconds. The session will be
cleaned up when there is no activity for @timeout seconds.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new timeout</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch" c:identifier="gst_rtsp_session_touch">
        <doc xml:whitespace="preserve">Update the last_access time of the session to the current time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="sessionid"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="timeout" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPSessionPrivate" c:type="GstRTSPSessionPrivate*"/>
      </field>
    </class>
    <record name="RTSPSessionClass"
            c:type="GstRTSPSessionClass"
            glib:is-gtype-struct-for="RTSPSession">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="RTSPSessionFilterFunc" c:type="GstRTSPSessionFilterFunc">
      <doc xml:whitespace="preserve">This function will be called by the gst_rtsp_session_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @media will be removed
from @sess.

A return value of #GST_RTSP_FILTER_KEEP will leave @media untouched in
@sess.

A value of GST_RTSP_FILTER_REF will add @media to the result #GList of
gst_rtsp_session_filter().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstRTSPFilterResult.</doc>
        <type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/>
      </return-value>
      <parameters>
        <parameter name="sess" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPSession object</doc>
          <type name="RTSPSession" c:type="GstRTSPSession*"/>
        </parameter>
        <parameter name="media" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPSessionMedia in @sess</doc>
          <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">user data that has been given to gst_rtsp_session_filter()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RTSPSessionMedia"
           c:symbol-prefix="rtsp_session_media"
           c:type="GstRTSPSessionMedia"
           parent="GObject.Object"
           glib:type-name="GstRTSPSessionMedia"
           glib:get-type="gst_rtsp_session_media_get_type"
           glib:type-struct="RTSPSessionMediaClass">
      <doc xml:whitespace="preserve">State of a client session regarding a specific media identified by uri.</doc>
      <constructor name="new" c:identifier="gst_rtsp_session_media_new">
        <doc xml:whitespace="preserve">Create a new #GstRTPSessionMedia that manages the streams
in @media for @url. @media should be prepared.

Ownership is taken of @media.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPSessionMedia.</doc>
          <type name="RTSPSessionMedia" c:type="GstRTSPSessionMedia*"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstRTSPUrl</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GstRTSPMedia</doc>
            <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="alloc_channels"
              c:identifier="gst_rtsp_session_media_alloc_channels">
        <doc xml:whitespace="preserve">Fill @range with the next available min and max channels for
interleaved transport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="range" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPRange</doc>
            <type name="GstRtsp.RTSPRange" c:type="GstRTSPRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media" c:identifier="gst_rtsp_session_media_get_media">
        <doc xml:whitespace="preserve">Get the #GstRTSPMedia that was used when constructing @media</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GstRTSPMedia of @media. Remains valid as long as @media is valid.</doc>
          <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
        </return-value>
      </method>
      <method name="get_rtsp_state"
              c:identifier="gst_rtsp_session_media_get_rtsp_state">
        <return-value transfer-ownership="none">
          <type name="GstRtsp.RTSPState" c:type="GstRTSPState"/>
        </return-value>
      </method>
      <method name="get_transport"
              c:identifier="gst_rtsp_session_media_get_transport">
        <doc xml:whitespace="preserve">Get a previously created #GstRTSPStreamTransport for the stream at @idx.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPStreamTransport that is valid until the session of @media is unreffed.</doc>
          <type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/>
        </return-value>
        <parameters>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:whitespace="preserve">the stream index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="matches_url"
              c:identifier="gst_rtsp_session_media_matches_url">
        <doc xml:whitespace="preserve">Check if the url of @media matches @url.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE when @url matches the url of @media.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPUrl</doc>
            <type name="GstRtsp.RTSPUrl" c:type="const GstRTSPUrl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rtsp_state"
              c:identifier="gst_rtsp_session_media_set_rtsp_state">
        <doc xml:whitespace="preserve">Get the current RTSP state of @media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the current RTSP state of @media.</doc>
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="GstRtsp.RTSPState" c:type="GstRTSPState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="gst_rtsp_session_media_set_state">
        <doc xml:whitespace="preserve">Tell the media object @media to change to @state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new state</doc>
            <type name="Gst.State" c:type="GstState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport"
              c:identifier="gst_rtsp_session_media_set_transport">
        <doc xml:whitespace="preserve">Configure the transport for @stream to @tr in @media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the new or updated #GstRTSPStreamTransport for @stream.</doc>
          <type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPStream</doc>
            <type name="RTSPStream" c:type="GstRTSPStream*"/>
          </parameter>
          <parameter name="tr" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPTransport</doc>
            <type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPSessionMediaPrivate"
              c:type="GstRTSPSessionMediaPrivate*"/>
      </field>
    </class>
    <record name="RTSPSessionMediaClass"
            c:type="GstRTSPSessionMediaClass"
            glib:is-gtype-struct-for="RTSPSessionMedia">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RTSPSessionMediaPrivate"
            c:type="GstRTSPSessionMediaPrivate"
            disguised="1">
    </record>
    <class name="RTSPSessionPool"
           c:symbol-prefix="rtsp_session_pool"
           c:type="GstRTSPSessionPool"
           parent="GObject.Object"
           glib:type-name="GstRTSPSessionPool"
           glib:get-type="gst_rtsp_session_pool_get_type"
           glib:type-struct="RTSPSessionPoolClass">
      <doc xml:whitespace="preserve">An object that keeps track of the active sessions. This object is usually
attached to a #GstRTSPServer object to manage the sessions in that server.</doc>
      <constructor name="new" c:identifier="gst_rtsp_session_pool_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPSessionPool instance.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #GstRTSPSessionPool. g_object_unref() after usage.</doc>
          <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
        </return-value>
      </constructor>
      <virtual-method name="create_session_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <method name="cleanup" c:identifier="gst_rtsp_session_pool_cleanup">
        <doc xml:whitespace="preserve">Inspect all the sessions in @pool and remove the sessions that are inactive
for more than their timeout.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of sessions that got removed.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="create" c:identifier="gst_rtsp_session_pool_create">
        <doc xml:whitespace="preserve">Create a new #GstRTSPSession object in @pool.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new #GstRTSPSession.</doc>
          <type name="RTSPSession" c:type="GstRTSPSession*"/>
        </return-value>
      </method>
      <method name="create_watch"
              c:identifier="gst_rtsp_session_pool_create_watch">
        <doc xml:whitespace="preserve">A GSource that will be dispatched when the session should be cleaned up.</doc>
        <return-value transfer-ownership="full">
          <type name="GLib.Source" c:type="GSource*"/>
        </return-value>
      </method>
      <method name="filter" c:identifier="gst_rtsp_session_pool_filter">
        <doc xml:whitespace="preserve">Call @func for each session in @pool. The result value of @func determines
what happens to the session. @func will be called with the session pool
locked so no further actions on @pool can be performed from @func.

If @func returns #GST_RTSP_FILTER_REMOVE, the session will be removed from
@pool.

If @func returns #GST_RTSP_FILTER_KEEP, the session will remain in @pool.

If @func returns #GST_RTSP_FILTER_REF, the session will remain in @pool but
will also be added with an additional ref to the result GList of this
function..</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a GList with all sessions for which @func returned #GST_RTSP_FILTER_REF. After usage, each element in the GList should be unreffed before the list is freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="RTSPSession"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:whitespace="preserve">a callback</doc>
            <type name="RTSPSessionPoolFilterFunc"
                  c:type="GstRTSPSessionPoolFilterFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="gst_rtsp_session_pool_find">
        <doc xml:whitespace="preserve">Find the session with @sessionid in @pool. The access time of the session
will be updated with gst_rtsp_session_touch().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPSession with @sessionid or %NULL when the session did not exist. g_object_unref() after usage.</doc>
          <type name="RTSPSession" c:type="GstRTSPSession*"/>
        </return-value>
        <parameters>
          <parameter name="sessionid" transfer-ownership="none">
            <doc xml:whitespace="preserve">the session id</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_sessions"
              c:identifier="gst_rtsp_session_pool_get_max_sessions">
        <doc xml:whitespace="preserve">Get the maximum allowed number of sessions in @pool. 0 means an unlimited
amount of sessions.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum allowed number of sessions.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_n_sessions"
              c:identifier="gst_rtsp_session_pool_get_n_sessions">
        <doc xml:whitespace="preserve">Get the amount of active sessions in @pool.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the amount of active sessions in @pool.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="remove" c:identifier="gst_rtsp_session_pool_remove">
        <doc xml:whitespace="preserve">Remove @sess from @pool, releasing the ref that the pool has on @sess.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the session was found and removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="sess" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPSession</doc>
            <type name="RTSPSession" c:type="GstRTSPSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_sessions"
              c:identifier="gst_rtsp_session_pool_set_max_sessions">
        <doc xml:whitespace="preserve">Configure the maximum allowed number of sessions in @pool to @max.
A value of 0 means an unlimited amount of sessions.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">the maximum number of sessions</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-sessions" writable="1" transfer-ownership="none">
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPSessionPoolPrivate"
              c:type="GstRTSPSessionPoolPrivate*"/>
      </field>
    </class>
    <record name="RTSPSessionPoolClass"
            c:type="GstRTSPSessionPoolClass"
            glib:is-gtype-struct-for="RTSPSessionPool">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_session_id">
        <callback name="create_session_id">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="pool" transfer-ownership="none">
              <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="RTSPSessionPoolFilterFunc"
              c:type="GstRTSPSessionPoolFilterFunc">
      <doc xml:whitespace="preserve">This function will be called by the gst_rtsp_session_pool_filter(). An
implementation should return a value of #GstRTSPFilterResult.

When this function returns #GST_RTSP_FILTER_REMOVE, @session will be removed
from @pool.

A return value of #GST_RTSP_FILTER_KEEP will leave @session untouched in
@pool.

A value of GST_RTSP_FILTER_REF will add @session to the result #GList of
gst_rtsp_session_pool_filter().</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstRTSPFilterResult.</doc>
        <type name="RTSPFilterResult" c:type="GstRTSPFilterResult"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPSessionPool object</doc>
          <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
        </parameter>
        <parameter name="session" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPSession in @pool</doc>
          <type name="RTSPSession" c:type="GstRTSPSession*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">user data that has been given to gst_rtsp_session_pool_filter()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RTSPSessionPoolFunc" c:type="GstRTSPSessionPoolFunc">
      <doc xml:whitespace="preserve">The function that will be called from the GSource watch on the session pool.

The function will be called when the pool must be cleaned up because one or
more sessions timed out.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">%FALSE if the source should be removed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pool" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPSessionPool object</doc>
          <type name="RTSPSessionPool" c:type="GstRTSPSessionPool*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="1">
          <doc xml:whitespace="preserve">user data that has been given when registering the handler</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RTSPSessionPoolPrivate"
            c:type="GstRTSPSessionPoolPrivate"
            disguised="1">
    </record>
    <record name="RTSPSessionPrivate"
            c:type="GstRTSPSessionPrivate"
            disguised="1">
    </record>
    <class name="RTSPStream"
           c:symbol-prefix="rtsp_stream"
           c:type="GstRTSPStream"
           parent="GObject.Object"
           glib:type-name="GstRTSPStream"
           glib:get-type="gst_rtsp_stream_get_type"
           glib:type-struct="RTSPStreamClass">
      <doc xml:whitespace="preserve">The definition of a media stream.</doc>
      <constructor name="new" c:identifier="gst_rtsp_stream_new">
        <doc xml:whitespace="preserve">Create a new media stream with index @idx that handles RTP data on
@srcpad and has a payloader element @payloader.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPStream</doc>
          <type name="RTSPStream" c:type="GstRTSPStream*"/>
        </return-value>
        <parameters>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:whitespace="preserve">an index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payloader" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstElement</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="srcpad" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstPad</doc>
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_transport"
              c:identifier="gst_rtsp_stream_add_transport">
        <doc xml:whitespace="preserve">Add the transport in @trans to @stream. The media of @stream will
then also be send to the values configured in @trans.

@stream must be joined to a bin.

@trans must contain a valid #GstRTSPTransport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @trans was added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="trans" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPStreamTransport</doc>
            <type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address" c:identifier="gst_rtsp_stream_get_address">
        <doc xml:whitespace="preserve">Get the multicast address of @stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAddress of @stream or %NULL when no address could be allocated. gst_rtsp_address_free() after usage.</doc>
          <type name="RTSPAddress" c:type="GstRTSPAddress*"/>
        </return-value>
      </method>
      <method name="get_address_pool"
              c:identifier="gst_rtsp_stream_get_address_pool">
        <doc xml:whitespace="preserve">Get the #GstRTSPAddressPool used as the address pool of @stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstRTSPAddressPool of @stream. g_object_unref() after usage.</doc>
          <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
        </return-value>
      </method>
      <method name="get_caps" c:identifier="gst_rtsp_stream_get_caps">
        <doc xml:whitespace="preserve">Retrieve the current caps of @stream.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the #GstCaps of @stream. use gst_caps_unref() after usage.</doc>
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
      </method>
      <method name="get_index" c:identifier="gst_rtsp_stream_get_index">
        <doc xml:whitespace="preserve">Get the stream index.

Return: the stream index.</doc>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_mtu" c:identifier="gst_rtsp_stream_get_mtu">
        <doc xml:whitespace="preserve">Get the configured MTU in the payloader of @stream.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the MTU of the payloader.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_rtpinfo" c:identifier="gst_rtsp_stream_get_rtpinfo">
        <doc xml:whitespace="preserve">Retrieve the current rtptime and seq. This is used to
construct a RTPInfo reply header.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE when rtptime and seq could be determined.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="rtptime" transfer-ownership="none">
            <doc xml:whitespace="preserve">result RTP timestamp</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="seq" transfer-ownership="none">
            <doc xml:whitespace="preserve">result RTP seqnum</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_server_port"
              c:identifier="gst_rtsp_stream_get_server_port">
        <doc xml:whitespace="preserve">Fill @server_port with the port pair used by the server. This function can
only be called when @stream has been joined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="server_port"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">result server port</doc>
            <type name="GstRtsp.RTSPRange" c:type="GstRTSPRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ssrc" c:identifier="gst_rtsp_stream_get_ssrc">
        <doc xml:whitespace="preserve">Get the SSRC used by the RTP session of this stream. This function can only
be called when @stream has been joined.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ssrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">result ssrc</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="join_bin" c:identifier="gst_rtsp_stream_join_bin">
        <doc xml:whitespace="preserve">Join the #Gstbin @bin that contains the element @rtpbin.

@stream will link to @rtpbin, which must be inside @bin. The elements
added to @bin will be set to the state given in @state.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="bin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBin to join</doc>
            <type name="Gst.Bin" c:type="GstBin*"/>
          </parameter>
          <parameter name="rtpbin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a rtpbin element in @bin</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:whitespace="preserve">the target state of the new elements</doc>
            <type name="Gst.State" c:type="GstState"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_bin" c:identifier="gst_rtsp_stream_leave_bin">
        <doc xml:whitespace="preserve">Remove the elements of @stream from @bin. @bin must be set
to the NULL state before calling this.

Return: %TRUE on success.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="bin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBin</doc>
            <type name="Gst.Bin" c:type="GstBin*"/>
          </parameter>
          <parameter name="rtpbin" transfer-ownership="none">
            <doc xml:whitespace="preserve">a rtpbin #GstElement</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv_rtcp" c:identifier="gst_rtsp_stream_recv_rtcp">
        <doc xml:whitespace="preserve">Handle an RTCP buffer for the stream. This method is usually called when a
message has been received from a client using the TCP transport.

This function takes ownership of @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="recv_rtp" c:identifier="gst_rtsp_stream_recv_rtp">
        <doc xml:whitespace="preserve">Handle an RTP buffer for the stream. This method is usually called when a
message has been received from a client using the TCP transport.

This function takes ownership of @buffer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="full">
            <doc xml:whitespace="preserve">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_transport"
              c:identifier="gst_rtsp_stream_remove_transport">
        <doc xml:whitespace="preserve">Remove the transport in @trans from @stream. The media of @stream will
not be sent to the values configured in @trans.

@stream must be joined to a bin.

@trans must contain a valid #GstRTSPTransport.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @trans was removed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="trans" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPStreamTransport</doc>
            <type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address_pool"
              c:identifier="gst_rtsp_stream_set_address_pool">
        <doc xml:whitespace="preserve">configure @pool to be used as the address pool of @stream.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pool" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPAddressPool</doc>
            <type name="RTSPAddressPool" c:type="GstRTSPAddressPool*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtu" c:identifier="gst_rtsp_stream_set_mtu">
        <doc xml:whitespace="preserve">Configure the mtu in the payloader of @stream to @mtu.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mtu" transfer-ownership="none">
            <doc xml:whitespace="preserve">a new MTU</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPStreamPrivate" c:type="GstRTSPStreamPrivate*"/>
      </field>
    </class>
    <record name="RTSPStreamClass"
            c:type="GstRTSPStreamClass"
            glib:is-gtype-struct-for="RTSPStream">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RTSPStreamPrivate"
            c:type="GstRTSPStreamPrivate"
            disguised="1">
    </record>
    <class name="RTSPStreamTransport"
           c:symbol-prefix="rtsp_stream_transport"
           c:type="GstRTSPStreamTransport"
           parent="GObject.Object"
           glib:type-name="GstRTSPStreamTransport"
           glib:get-type="gst_rtsp_stream_transport_get_type"
           glib:type-struct="RTSPStreamTransportClass">
      <doc xml:whitespace="preserve">A Transport description for a stream</doc>
      <constructor name="new" c:identifier="gst_rtsp_stream_transport_new">
        <doc xml:whitespace="preserve">Create a new #GstRTSPStreamTransport that can be used to manage
@stream with transport @tr.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GstRTSPStreamTransport</doc>
          <type name="RTSPStreamTransport" c:type="GstRTSPStreamTransport*"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstRTSPStream</doc>
            <type name="RTSPStream" c:type="GstRTSPStream*"/>
          </parameter>
          <parameter name="tr" transfer-ownership="full">
            <doc xml:whitespace="preserve">a GstRTSPTransport</doc>
            <type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_stream"
              c:identifier="gst_rtsp_stream_transport_get_stream">
        <doc xml:whitespace="preserve">Get the #GstRTSPStream used when constructing @trans.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the stream used when constructing @trans.</doc>
          <type name="RTSPStream" c:type="GstRTSPStream*"/>
        </return-value>
      </method>
      <method name="get_transport"
              c:identifier="gst_rtsp_stream_transport_get_transport">
        <doc xml:whitespace="preserve">Get the transport configured in @trans.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the transport configured in @trans. It remains valid for as long as @trans is valid.</doc>
          <type name="GstRtsp.RTSPTransport" c:type="const GstRTSPTransport*"/>
        </return-value>
      </method>
      <method name="is_timed_out"
              c:identifier="gst_rtsp_stream_transport_is_timed_out">
        <doc xml:whitespace="preserve">Check if @trans is timed out.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @trans timed out.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="keep_alive"
              c:identifier="gst_rtsp_stream_transport_keep_alive">
        <doc xml:whitespace="preserve">Signal the installed keep_alive callback for @trans.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="send_rtcp"
              c:identifier="gst_rtsp_stream_transport_send_rtcp">
        <doc xml:whitespace="preserve">Send @buffer to the installed RTCP callback for @trans.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_rtp"
              c:identifier="gst_rtsp_stream_transport_send_rtp">
        <doc xml:whitespace="preserve">Send @buffer to the installed RTP callback for @trans.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="gst_rtsp_stream_transport_set_active">
        <doc xml:whitespace="preserve">Activate or deactivate datatransfer configured in @trans.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE when the state was changed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="active" transfer-ownership="none">
            <doc xml:whitespace="preserve">new state of @trans</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_callbacks"
              c:identifier="gst_rtsp_stream_transport_set_callbacks">
        <doc xml:whitespace="preserve">Install callbacks that will be called when data for a stream should be sent
to a client. This is usually used when sending RTP/RTCP over TCP.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="send_rtp"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:whitespace="preserve">a callback called when RTP should be sent</doc>
            <type name="RTSPSendFunc" c:type="GstRTSPSendFunc"/>
          </parameter>
          <parameter name="send_rtcp"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:whitespace="preserve">a callback called when RTCP should be sent</doc>
            <type name="RTSPSendFunc" c:type="GstRTSPSendFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data passed to callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">called with the user_data when no longer needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keepalive"
              c:identifier="gst_rtsp_stream_transport_set_keepalive">
        <doc xml:whitespace="preserve">Install callbacks that will be called when RTCP packets are received from the
receiver of @trans.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="keep_alive"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:whitespace="preserve">a callback called when the receiver is active</doc>
            <type name="RTSPKeepAliveFunc" c:type="GstRTSPKeepAliveFunc"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data passed to callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:whitespace="preserve">called with the user_data when no longer needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timed_out"
              c:identifier="gst_rtsp_stream_transport_set_timed_out">
        <doc xml:whitespace="preserve">Set the timed out state of @trans to @timedout</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timedout" transfer-ownership="none">
            <doc xml:whitespace="preserve">timed out value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport"
              c:identifier="gst_rtsp_stream_transport_set_transport">
        <doc xml:whitespace="preserve">Set @tr as the client transport. This function takes ownership of the
passed @tr.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tr" transfer-ownership="full">
            <doc xml:whitespace="preserve">a client #GstRTSPTransport</doc>
            <type name="GstRtsp.RTSPTransport" c:type="GstRTSPTransport*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="RTSPStreamTransportPrivate"
              c:type="GstRTSPStreamTransportPrivate*"/>
      </field>
    </class>
    <record name="RTSPStreamTransportClass"
            c:type="GstRTSPStreamTransportClass"
            glib:is-gtype-struct-for="RTSPStreamTransport">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RTSPStreamTransportPrivate"
            c:type="GstRTSPStreamTransportPrivate"
            disguised="1">
    </record>
    <record name="SDPInfo" c:type="GstSDPInfo">
      <field name="server_proto" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="server_ip" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <function name="rtsp_params_get" c:identifier="gst_rtsp_params_get">
      <doc xml:whitespace="preserve">Get parameters (not implemented yet)</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstRTSPResult</doc>
        <type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPClient</doc>
          <type name="RTSPClient" c:type="GstRTSPClient*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPClientState</doc>
          <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtsp_params_set" c:identifier="gst_rtsp_params_set">
      <doc xml:whitespace="preserve">Set parameters (not implemented yet)</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">a #GstRTSPResult</doc>
        <type name="GstRtsp.RTSPResult" c:type="GstRTSPResult"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPClient</doc>
          <type name="RTSPClient" c:type="GstRTSPClient*"/>
        </parameter>
        <parameter name="state" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPClientState</doc>
          <type name="RTSPClientState" c:type="GstRTSPClientState*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtsp_sdp_from_media"
              c:identifier="gst_rtsp_sdp_from_media">
      <doc xml:whitespace="preserve">Add @media specific info to @sdp. @info is used to configure the connection
information in the SDP.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="sdp" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstSDPMessage</doc>
          <type name="GstSdp.SDPMessage" c:type="GstSDPMessage*"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:whitespace="preserve">info</doc>
          <type name="SDPInfo" c:type="GstSDPInfo*"/>
        </parameter>
        <parameter name="media" transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GstRTSPMedia</doc>
          <type name="RTSPMedia" c:type="GstRTSPMedia*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
