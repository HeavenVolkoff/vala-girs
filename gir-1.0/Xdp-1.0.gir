<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="libportal"/>
  <c:include name="libportal/portal.h"/>
  <namespace name="Xdp"
             version="1.0"
             shared-library="libportal.so.1"
             c:identifier-prefixes="Xdp"
             c:symbol-prefixes="xdp">
    <bitfield name="BackgroundFlags"
              glib:type-name="XdpBackgroundFlags"
              glib:get-type="xdp_background_flags_get_type"
              c:type="XdpBackgroundFlags">
      <doc xml:space="preserve"
           filename="../libportal/background.h"
           line="26">Options to use when requesting background.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_BACKGROUND_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_BACKGROUND_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/background.h"
             line="28">No options</doc>
      </member>
      <member name="autostart"
              value="1"
              c:identifier="XDP_BACKGROUND_FLAG_AUTOSTART"
              glib:nick="autostart"
              glib:name="XDP_BACKGROUND_FLAG_AUTOSTART">
        <doc xml:space="preserve"
             filename="../libportal/background.h"
             line="29">Request autostart as well</doc>
      </member>
      <member name="activatable"
              value="2"
              c:identifier="XDP_BACKGROUND_FLAG_ACTIVATABLE"
              glib:nick="activatable"
              glib:name="XDP_BACKGROUND_FLAG_ACTIVATABLE">
        <doc xml:space="preserve"
             filename="../libportal/background.h"
             line="30">Whether the application is D-Bus-activatable</doc>
      </member>
    </bitfield>
    <enumeration name="ButtonState"
                 glib:type-name="XdpButtonState"
                 glib:get-type="xdp_button_state_get_type"
                 c:type="XdpButtonState">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="210">The XdpButtonState enumeration is used to describe
the state of buttons.</doc>
      <member name="released"
              value="0"
              c:identifier="XDP_BUTTON_RELEASED"
              glib:nick="released"
              glib:name="XDP_BUTTON_RELEASED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="212">the button is down</doc>
      </member>
      <member name="pressed"
              value="1"
              c:identifier="XDP_BUTTON_PRESSED"
              glib:nick="pressed"
              glib:name="XDP_BUTTON_PRESSED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="213">the button is up</doc>
      </member>
    </enumeration>
    <enumeration name="CameraFlags"
                 glib:type-name="XdpCameraFlags"
                 glib:get-type="xdp_camera_flags_get_type"
                 c:type="XdpCameraFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_CAMERA_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_CAMERA_FLAG_NONE">
      </member>
    </enumeration>
    <bitfield name="CursorMode"
              glib:type-name="XdpCursorMode"
              glib:get-type="xdp_cursor_mode_get_type"
              c:type="XdpCursorMode">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="99">Options for how the cursor is handled.</doc>
      <member name="hidden"
              value="1"
              c:identifier="XDP_CURSOR_MODE_HIDDEN"
              glib:nick="hidden"
              glib:name="XDP_CURSOR_MODE_HIDDEN">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="101">no cursor</doc>
      </member>
      <member name="embedded"
              value="2"
              c:identifier="XDP_CURSOR_MODE_EMBEDDED"
              glib:nick="embedded"
              glib:name="XDP_CURSOR_MODE_EMBEDDED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="102">cursor is embedded on the stream</doc>
      </member>
      <member name="metadata"
              value="4"
              c:identifier="XDP_CURSOR_MODE_METADATA"
              glib:nick="metadata"
              glib:name="XDP_CURSOR_MODE_METADATA">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="103">cursor is sent as metadata of the stream</doc>
      </member>
    </bitfield>
    <bitfield name="DeviceType"
              glib:type-name="XdpDeviceType"
              glib:get-type="xdp_device_type_get_type"
              c:type="XdpDeviceType">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="45">Flags to specify what input devices to control for a remote desktop session.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_DEVICE_NONE"
              glib:nick="none"
              glib:name="XDP_DEVICE_NONE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="47">no device</doc>
      </member>
      <member name="keyboard"
              value="1"
              c:identifier="XDP_DEVICE_KEYBOARD"
              glib:nick="keyboard"
              glib:name="XDP_DEVICE_KEYBOARD">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="48">control the keyboard.</doc>
      </member>
      <member name="pointer"
              value="2"
              c:identifier="XDP_DEVICE_POINTER"
              glib:nick="pointer"
              glib:name="XDP_DEVICE_POINTER">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="49">control the pointer.</doc>
      </member>
      <member name="touchscreen"
              value="4"
              c:identifier="XDP_DEVICE_TOUCHSCREEN"
              glib:nick="touchscreen"
              glib:name="XDP_DEVICE_TOUCHSCREEN">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="50">control the touchscreen.</doc>
      </member>
    </bitfield>
    <enumeration name="DiscreteAxis"
                 glib:type-name="XdpDiscreteAxis"
                 glib:get-type="xdp_discrete_axis_get_type"
                 c:type="XdpDiscreteAxis">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="234">The XdpDiscreteAxis enumeration is used to describe
the discrete scroll axes.</doc>
      <member name="horizontal_scroll"
              value="0"
              c:identifier="XDP_AXIS_HORIZONTAL_SCROLL"
              glib:nick="horizontal-scroll"
              glib:name="XDP_AXIS_HORIZONTAL_SCROLL">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="236">the horizontal scroll axis</doc>
      </member>
      <member name="vertical_scroll"
              value="1"
              c:identifier="XDP_AXIS_VERTICAL_SCROLL"
              glib:nick="vertical-scroll"
              glib:name="XDP_AXIS_VERTICAL_SCROLL">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="237">the horizontal scroll axis</doc>
      </member>
    </enumeration>
    <enumeration name="EmailFlags"
                 glib:type-name="XdpEmailFlags"
                 glib:get-type="xdp_email_flags_get_type"
                 c:type="XdpEmailFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_EMAIL_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_EMAIL_FLAG_NONE">
      </member>
    </enumeration>
    <bitfield name="InhibitFlags"
              glib:type-name="XdpInhibitFlags"
              glib:get-type="xdp_inhibit_flags_get_type"
              c:type="XdpInhibitFlags">
      <doc xml:space="preserve"
           filename="../libportal/inhibit.h"
           line="26">Flags that determine what session status changes are inhibited.</doc>
      <member name="logout"
              value="1"
              c:identifier="XDP_INHIBIT_FLAG_LOGOUT"
              glib:nick="logout"
              glib:name="XDP_INHIBIT_FLAG_LOGOUT">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="28">Inhibit logout</doc>
      </member>
      <member name="user_switch"
              value="2"
              c:identifier="XDP_INHIBIT_FLAG_USER_SWITCH"
              glib:nick="user-switch"
              glib:name="XDP_INHIBIT_FLAG_USER_SWITCH">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="29">Inhibit user switching</doc>
      </member>
      <member name="suspend"
              value="4"
              c:identifier="XDP_INHIBIT_FLAG_SUSPEND"
              glib:nick="suspend"
              glib:name="XDP_INHIBIT_FLAG_SUSPEND">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="30">Inhibit suspend</doc>
      </member>
      <member name="idle"
              value="8"
              c:identifier="XDP_INHIBIT_FLAG_IDLE"
              glib:nick="idle"
              glib:name="XDP_INHIBIT_FLAG_IDLE">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="31">Inhibit the session going idle</doc>
      </member>
    </bitfield>
    <enumeration name="KeyState"
                 glib:type-name="XdpKeyState"
                 glib:get-type="xdp_key_state_get_type"
                 c:type="XdpKeyState">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="252">The XdpKeyState enumeration is used to describe
the state of keys.</doc>
      <member name="released"
              value="0"
              c:identifier="XDP_KEY_RELEASED"
              glib:nick="released"
              glib:name="XDP_KEY_RELEASED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="254">the key is down</doc>
      </member>
      <member name="pressed"
              value="1"
              c:identifier="XDP_KEY_PRESSED"
              glib:nick="pressed"
              glib:name="XDP_KEY_PRESSED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="255">the key is up</doc>
      </member>
    </enumeration>
    <enumeration name="LocationAccuracy"
                 glib:type-name="XdpLocationAccuracy"
                 glib:get-type="xdp_location_accuracy_get_type"
                 c:type="XdpLocationAccuracy">
      <doc xml:space="preserve"
           filename="../libportal/location.h"
           line="26">The values of this enum indicate the desired level
of accuracy for location information.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_LOCATION_ACCURACY_NONE"
              glib:nick="none"
              glib:name="XDP_LOCATION_ACCURACY_NONE">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="28">No particular accuracy</doc>
      </member>
      <member name="country"
              value="1"
              c:identifier="XDP_LOCATION_ACCURACY_COUNTRY"
              glib:nick="country"
              glib:name="XDP_LOCATION_ACCURACY_COUNTRY">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="29">Country-level accuracy</doc>
      </member>
      <member name="city"
              value="2"
              c:identifier="XDP_LOCATION_ACCURACY_CITY"
              glib:nick="city"
              glib:name="XDP_LOCATION_ACCURACY_CITY">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="30">City-level accuracy</doc>
      </member>
      <member name="neighborhood"
              value="3"
              c:identifier="XDP_LOCATION_ACCURACY_NEIGHBORHOOD"
              glib:nick="neighborhood"
              glib:name="XDP_LOCATION_ACCURACY_NEIGHBORHOOD">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="31">Neighborhood-level accuracy</doc>
      </member>
      <member name="street"
              value="4"
              c:identifier="XDP_LOCATION_ACCURACY_STREET"
              glib:nick="street"
              glib:name="XDP_LOCATION_ACCURACY_STREET">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="32">Street-level accuracy</doc>
      </member>
      <member name="exact"
              value="5"
              c:identifier="XDP_LOCATION_ACCURACY_EXACT"
              glib:nick="exact"
              glib:name="XDP_LOCATION_ACCURACY_EXACT">
        <doc xml:space="preserve"
             filename="../libportal/location.h"
             line="33">Maximum accuracy</doc>
      </member>
    </enumeration>
    <enumeration name="LocationMonitorFlags"
                 glib:type-name="XdpLocationMonitorFlags"
                 glib:get-type="xdp_location_monitor_flags_get_type"
                 c:type="XdpLocationMonitorFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_LOCATION_MONITOR_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_LOCATION_MONITOR_FLAG_NONE">
      </member>
    </enumeration>
    <enumeration name="LoginSessionState"
                 glib:type-name="XdpLoginSessionState"
                 glib:get-type="xdp_login_session_state_get_type"
                 c:type="XdpLoginSessionState">
      <doc xml:space="preserve"
           filename="../libportal/inhibit.h"
           line="60">The values of this enum are returned in the #XdpPortal::session-state-changed signal
to indicate the current state of the user session.</doc>
      <member name="running"
              value="1"
              c:identifier="XDP_LOGIN_SESSION_RUNNING"
              glib:nick="running"
              glib:name="XDP_LOGIN_SESSION_RUNNING">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="62">the session is running</doc>
      </member>
      <member name="query_end"
              value="2"
              c:identifier="XDP_LOGIN_SESSION_QUERY_END"
              glib:nick="query-end"
              glib:name="XDP_LOGIN_SESSION_QUERY_END">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="63">the session is in the query end phase,
    during which applications can save their state or inhibit the
    session from ending</doc>
      </member>
      <member name="ending"
              value="3"
              c:identifier="XDP_LOGIN_SESSION_ENDING"
              glib:nick="ending"
              glib:name="XDP_LOGIN_SESSION_ENDING">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.h"
             line="66">the session is about to end</doc>
      </member>
    </enumeration>
    <enumeration name="NotificationFlags"
                 glib:type-name="XdpNotificationFlags"
                 glib:get-type="xdp_notification_flags_get_type"
                 c:type="XdpNotificationFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_NOTIFICATION_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_NOTIFICATION_FLAG_NONE">
      </member>
    </enumeration>
    <bitfield name="OpenFileFlags"
              glib:type-name="XdpOpenFileFlags"
              glib:get-type="xdp_open_file_flags_get_type"
              c:type="XdpOpenFileFlags">
      <doc xml:space="preserve"
           filename="../libportal/filechooser.h"
           line="26">Options for opening files.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_OPEN_FILE_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_OPEN_FILE_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.h"
             line="28">No options</doc>
      </member>
      <member name="multiple"
              value="1"
              c:identifier="XDP_OPEN_FILE_FLAG_MULTIPLE"
              glib:nick="multiple"
              glib:name="XDP_OPEN_FILE_FLAG_MULTIPLE">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.h"
             line="29">Allow selecting multiple files</doc>
      </member>
    </bitfield>
    <bitfield name="OpenUriFlags"
              glib:type-name="XdpOpenUriFlags"
              glib:get-type="xdp_open_uri_flags_get_type"
              c:type="XdpOpenUriFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_OPEN_URI_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_OPEN_URI_FLAG_NONE">
      </member>
      <member name="ask"
              value="1"
              c:identifier="XDP_OPEN_URI_FLAG_ASK"
              glib:nick="ask"
              glib:name="XDP_OPEN_URI_FLAG_ASK">
      </member>
      <member name="writable"
              value="2"
              c:identifier="XDP_OPEN_URI_FLAG_WRITABLE"
              glib:nick="writable"
              glib:name="XDP_OPEN_URI_FLAG_WRITABLE">
      </member>
    </bitfield>
    <bitfield name="OutputType"
              glib:type-name="XdpOutputType"
              glib:get-type="xdp_output_type_get_type"
              c:type="XdpOutputType">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="31">Flags to specify what kind of sources to offer for a screencast session.</doc>
      <member name="monitor"
              value="1"
              c:identifier="XDP_OUTPUT_MONITOR"
              glib:nick="monitor"
              glib:name="XDP_OUTPUT_MONITOR">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="33">allow selecting monitors</doc>
      </member>
      <member name="window"
              value="2"
              c:identifier="XDP_OUTPUT_WINDOW"
              glib:nick="window"
              glib:name="XDP_OUTPUT_WINDOW">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="34">allow selecting individual application windows</doc>
      </member>
      <member name="virtual"
              value="4"
              c:identifier="XDP_OUTPUT_VIRTUAL"
              glib:nick="virtual"
              glib:name="XDP_OUTPUT_VIRTUAL">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="35">allow creating new virtual displays</doc>
      </member>
    </bitfield>
    <record name="Parent"
            c:type="XdpParent"
            glib:type-name="XdpParent"
            glib:get-type="xdp_parent_get_type"
            c:symbol-prefix="parent">
      <source-position filename="../libportal/types.h" line="26"/>
      <method name="copy" c:identifier="xdp_parent_copy">
        <doc xml:space="preserve"
             filename="../libportal/parent.c"
             line="25">Copies @source into a new #XdpParent.</doc>
        <source-position filename="../libportal/parent.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/parent.c"
               line="31">an #XdpParent that is a copy of @source</doc>
          <type name="Parent" c:type="XdpParent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/parent.c"
                 line="27">a #XdpParent</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="xdp_parent_free">
        <doc xml:space="preserve"
             filename="../libportal/parent.c"
             line="48">Frees @parent.</doc>
        <source-position filename="../libportal/parent.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/parent.c"
                 line="50">an #XdpParent</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="PersistMode"
                 glib:type-name="XdpPersistMode"
                 glib:get-type="xdp_persist_mode_get_type"
                 c:type="XdpPersistMode">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="113">Options for how the screencast session should persist.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_PERSIST_MODE_NONE"
              glib:nick="none"
              glib:name="XDP_PERSIST_MODE_NONE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="115">do not persist</doc>
      </member>
      <member name="transient"
              value="1"
              c:identifier="XDP_PERSIST_MODE_TRANSIENT"
              glib:nick="transient"
              glib:name="XDP_PERSIST_MODE_TRANSIENT">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="116">persist as long as the application is alive</doc>
      </member>
      <member name="persistent"
              value="2"
              c:identifier="XDP_PERSIST_MODE_PERSISTENT"
              glib:nick="persistent"
              glib:name="XDP_PERSIST_MODE_PERSISTENT">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="117">persist until the user revokes this permission</doc>
      </member>
    </enumeration>
    <class name="Portal"
           c:symbol-prefix="portal"
           c:type="XdpPortal"
           parent="GObject.Object"
           glib:type-name="XdpPortal"
           glib:get-type="xdp_portal_get_type"
           glib:type-struct="PortalClass">
      <source-position filename="../libportal/portal-helpers.h" line="35"/>
      <constructor name="new" c:identifier="xdp_portal_new">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="264">Creates a new #XdpPortal object.</doc>
        <source-position filename="../libportal/portal-helpers.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/portal.c"
               line="269">a newly created #XdpPortal object</doc>
          <type name="Portal" c:type="XdpPortal*"/>
        </return-value>
      </constructor>
      <method name="access_camera" c:identifier="xdp_portal_access_camera">
        <doc xml:space="preserve"
             filename="../libportal/camera.c"
             line="216">Request access to a camera.

When the request is done, @callback will be called.
You can then call xdp_portal_access_camera_finished()
to get the results.</doc>
        <source-position filename="../libportal/camera.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="218">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="219">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="220">options for this call</doc>
            <type name="CameraFlags" c:type="XdpCameraFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="221">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="222">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="223">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="access_camera_finish"
              c:identifier="xdp_portal_access_camera_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/camera.c"
             line="254">Finishes a camera acess request, and returns
the result as a boolean.

If the access was granted, you can then call
xdp_portal_open_pipewire_remote_for_camera()
to obtain a pipewire remote.</doc>
        <source-position filename="../libportal/camera.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/camera.c"
               line="267">%TRUE if access to a camera was granted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="256">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="257">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_notification"
              c:identifier="xdp_portal_add_notification">
        <doc xml:space="preserve"
             filename="../libportal/notification.c"
             line="92">Sends a desktop notification.

The following keys may be present in @notification:
- title `s`: a user-visible string to display as title
- body `s`: a user-visible string to display as body
- icon `v`: a serialized icon (in the format produced by g_icon_serialize())
- priority `s`: "low", "normal", "high" or "urgent"
- default-action `s`: name of an action that
    will be activated when the user clicks on the notification
- default-action-target `v`: target parameter to send along when
    activating the default action.
- buttons `aa{sv}`: array of serialized buttons

Each serialized button is a dictionary with the following supported keys:
- label `s`: user-visible lable for the button. Mandatory
- action `s`: name of an action that will be activated when
    the user clicks on the button. Mandatory
- target `v`: target parameter to send along when activating
    the button

Actions with a prefix of "app." are assumed to be exported by the
application and will be activated via the org.freedesktop.Application
interface, others are activated by emitting the
#XdpPortal::notification-action-invoked signal.

It is the callers responsibility to ensure that the ID is unique
among all notifications.

To withdraw a notification, use xdp_portal_remove_notification().</doc>
        <source-position filename="../libportal/notification.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="94">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="95">unique ID for the notification</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="96">a #GVariant dictionary with the content of the notification</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="97">options for this call</doc>
            <type name="NotificationFlags" c:type="XdpNotificationFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="98">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="99">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="100">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_notification_finish"
              c:identifier="xdp_portal_add_notification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/notification.c"
             line="172">Finishes the notification request, and returns the result
as a boolean.</doc>
        <source-position filename="../libportal/notification.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/notification.c"
               line="181">%TRUE if the notification was added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="174">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="175">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compose_email" c:identifier="xdp_portal_compose_email">
        <doc xml:space="preserve"
             filename="../libportal/email.c"
             line="301">Presents a window that lets the user compose an email,
with some pre-filled information.

When the request is done, @callback will be called. You can then
call xdp_portal_compose_email_finish() to get the results.</doc>
        <source-position filename="../libportal/email.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="303">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="304">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="addresses"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="305">the email addresses to send to</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="cc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="306">the email addresses to cc</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="bcc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="307">the email addresses to bcc</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="subject"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="308">the subject for the email</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="309">the body for the email</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="attachments"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="310">an array of paths for files to attach</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="311">options for this call</doc>
            <type name="EmailFlags" c:type="XdpEmailFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="312">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="10">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="313">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="314">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="compose_email_finish"
              c:identifier="xdp_portal_compose_email_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/email.c"
             line="359">Finishes the compose-email request.</doc>
        <source-position filename="../libportal/email.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/email.c"
               line="367">%TRUE if the request was handled successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="361">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/email.c"
                 line="362">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_remote_desktop_session"
              c:identifier="xdp_portal_create_remote_desktop_session">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="468">Creates a session for remote desktop.

When the request is done, @callback will be called. You can then
call xdp_portal_create_remote_desktop_session_finish() to get the results.</doc>
        <source-position filename="../libportal/remote.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="470">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="471">which kinds of input devices to ofer in the new dialog</doc>
            <type name="DeviceType" c:type="XdpDeviceType"/>
          </parameter>
          <parameter name="outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="472">which kinds of source to offer in the dialog</doc>
            <type name="OutputType" c:type="XdpOutputType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="473">options for this call</doc>
            <type name="RemoteDesktopFlags" c:type="XdpRemoteDesktopFlags"/>
          </parameter>
          <parameter name="cursor_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="474">the cursor mode of the session</doc>
            <type name="CursorMode" c:type="XdpCursorMode"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="475">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="476">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="477">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_remote_desktop_session_finish"
              c:identifier="xdp_portal_create_remote_desktop_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="513">Finishes the create-remote-desktop request, and returns an #XdpSession.</doc>
        <source-position filename="../libportal/remote.h" line="166"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="521">a #XdpSession</doc>
          <type name="Session" c:type="XdpSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="515">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="516">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_screencast_session"
              c:identifier="xdp_portal_create_screencast_session">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="391">Creates a session for a screencast.

When the request is done, @callback will be called. You can then
call xdp_portal_create_screencast_session_finish() to get the results.</doc>
        <source-position filename="../libportal/remote.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="393">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="outputs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="394">which kinds of source to offer in the dialog</doc>
            <type name="OutputType" c:type="XdpOutputType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="395">options for this call</doc>
            <type name="ScreencastFlags" c:type="XdpScreencastFlags"/>
          </parameter>
          <parameter name="cursor_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="396">the cursor mode of the session</doc>
            <type name="CursorMode" c:type="XdpCursorMode"/>
          </parameter>
          <parameter name="persist_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="397">the persist mode of the session</doc>
            <type name="PersistMode" c:type="XdpPersistMode"/>
          </parameter>
          <parameter name="restore_token"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="398">the token of a previous screencast session to restore</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="399">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="400">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="401">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_screencast_session_finish"
              c:identifier="xdp_portal_create_screencast_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="441">Finishes the create-screencast request, and returns an #XdpSession.</doc>
        <source-position filename="../libportal/remote.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="449">a #XdpSession</doc>
          <type name="Session" c:type="XdpSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="443">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="444">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_information"
              c:identifier="xdp_portal_get_user_information">
        <doc xml:space="preserve"
             filename="../libportal/account.c"
             line="205">Gets information about the user.

When the request is done, @callback will be called. You can then
call xdp_portal_get_user_information_finish() to get the results.</doc>
        <source-position filename="../libportal/account.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="207">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="208">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="209">a string that can be shown in the dialog to explain
   why the information is needed</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="211">options for this call</doc>
            <type name="UserInformationFlags"
                  c:type="XdpUserInformationFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="212">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="213">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="214">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_information_finish"
              c:identifier="xdp_portal_get_user_information_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/account.c"
             line="248">Finishes the get-user-information request, and returns
the result in the form of a #GVariant dictionary containing
the following fields:
- id `s`: the user ID
- name `s`: the users real name
- image `s`: the uri of an image file for the users avatar picture</doc>
        <source-position filename="../libportal/account.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/account.c"
               line="261">a #GVariant dictionary with user information</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="250">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/account.c"
                 line="251">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_camera_present"
              c:identifier="xdp_portal_is_camera_present">
        <doc xml:space="preserve"
             filename="../libportal/camera.c"
             line="38">Returns whether any camera are present.</doc>
        <source-position filename="../libportal/camera.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/camera.c"
               line="44">%TRUE if the system has cameras</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="40">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="location_monitor_start"
              c:identifier="xdp_portal_location_monitor_start">
        <doc xml:space="preserve"
             filename="../libportal/location.c"
             line="317">Makes XdpPortal start monitoring location changes.

When the location changes, the #XdpPortal::location-updated.
signal is emitted.

Use xdp_portal_location_monitor_stop() to stop monitoring.

Note that #XdpPortal only maintains a single location monitor
at a time. If you want to change the @distance_threshold,
@time_threshold or @accuracy of the current monitor, you
first have to call xdp_portal_location_monitor_stop() to
stop monitoring.</doc>
        <source-position filename="../libportal/location.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="319">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="320">a #XdpParent, or %NULL</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="distance_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="321">distance threshold, in meters</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="time_threshold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="322">time threshold, in seconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accuracy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="323">desired accuracy</doc>
            <type name="LocationAccuracy" c:type="XdpLocationAccuracy"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="324">options for this call</doc>
            <type name="LocationMonitorFlags"
                  c:type="XdpLocationMonitorFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="325">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="326">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="327">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="location_monitor_start_finish"
              c:identifier="xdp_portal_location_monitor_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/location.c"
             line="373">Finishes a location-monitor request, and returns
the result in the form of boolean.</doc>
        <source-position filename="../libportal/location.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/location.c"
               line="382">%TRUE if the request succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="375">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="376">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="location_monitor_stop"
              c:identifier="xdp_portal_location_monitor_stop">
        <doc xml:space="preserve"
             filename="../libportal/location.c"
             line="396">Stops location monitoring that was started with
xdp_portal_location_monitor_start().</doc>
        <source-position filename="../libportal/location.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/location.c"
                 line="398">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_directory" c:identifier="xdp_portal_open_directory">
        <doc xml:space="preserve"
             filename="../libportal/openuri.c"
             line="332">Opens the directory containing the file specified by the @uri. which
must be a file: uri pointing to a file that the application has access
to.</doc>
        <source-position filename="../libportal/openuri.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="334">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="335">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="336">the URI to open</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="337">options for this call</doc>
            <type name="OpenUriFlags" c:type="XdpOpenUriFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="338">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="339">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="340">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_directory_finish"
              c:identifier="xdp_portal_open_directory_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/openuri.c"
             line="376">Finishes the open-directory request, and returns
the result in the form of a boolean.</doc>
        <source-position filename="../libportal/openuri.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/openuri.c"
               line="385">%TRUE if the call succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="378">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="379">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_file" c:identifier="xdp_portal_open_file">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="243">Asks the user to open one or more files.

The format for the @filters argument is a(sa(us)).
Each item in the array specifies a single filter to offer to the user.
The first string is a user-visible name for the filter. The a(us)
specifies a list of filter strings, which can be either a glob pattern
(indicated by 0) or a mimetype (indicated by 1).

Example: [('Images', [(0, '*.ico'), (1, 'image/png')]), ('Text', [(0, '*.txt')])]

The format for the @choices argument is a(ssa(ss)s).
For each element, the first string is an ID that will be returned
with the response, te second string is a user-visible label. The
a(ss) is the list of choices, each being a is an ID and a
user-visible label. The final string is the initial selection,
or "", to let the portal decide which choice will be initially selected.
None of the strings, except for the initial selection, should be empty.

As a special case, passing an empty array for the list of choices
indicates a boolean choice that is typically displayed as a check
button, using "true" and "false" as the choices.

Example: [('encoding', 'Encoding', [('utf8', 'Unicode (UTF-8)'), ('latin15', 'Western')], 'latin15'), ('reencode', 'Reencode', [], 'false')]

When the request is done, @callback will be called. You can then
call xdp_portal_open_file_finish() to get the results.</doc>
        <source-position filename="../libportal/filechooser.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="245">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="246">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="247">title for the file chooser dialog</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="filters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="248">a #GVariant describing file filters</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="current_filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="249">a #GVariant describing the current file filter</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="choices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="250">a #GVariant describing extra widgets</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="251">options for this call</doc>
            <type name="OpenFileFlags" c:type="XdpOpenFileFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="252">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="253">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="254">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_file_finish"
              c:identifier="xdp_portal_open_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="318">Finishes the open-file request, and returns
the result in the form of a #GVariant dictionary containing
the following fields:
- uris `as`: an array of strings containing the uris of selected files
- choices `a(ss)`: an array of pairs of strings, the first string being the
    ID of a combobox that was passed into this call, the second string
    being the selected option.</doc>
        <source-position filename="../libportal/filechooser.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/filechooser.c"
               line="332">a #GVariant dictionary with the results</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="320">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="321">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_pipewire_remote_for_camera"
              c:identifier="xdp_portal_open_pipewire_remote_for_camera">
        <doc xml:space="preserve"
             filename="../libportal/camera.c"
             line="281">Opens a file descriptor to the pipewire remote where the camera
nodes are available. The file descriptor should be used to create
a pw_remote object, by using pw_remote_connect_fd(). Only the
camera nodes will be available from this pipewire node.</doc>
        <source-position filename="../libportal/camera.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/camera.c"
               line="290">the file descriptor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/camera.c"
                 line="283">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_uri" c:identifier="xdp_portal_open_uri">
        <doc xml:space="preserve"
             filename="../libportal/openuri.c"
             line="266">Opens @uri with an external hamdler.</doc>
        <source-position filename="../libportal/openuri.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="268">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="269">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="270">the URI to open</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="271">options for this call</doc>
            <type name="OpenUriFlags" c:type="XdpOpenUriFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="272">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="273">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="274">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_uri_finish"
              c:identifier="xdp_portal_open_uri_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/openuri.c"
             line="309">Finishes the open-uri request, and returns
the result in the form of a boolean.</doc>
        <source-position filename="../libportal/openuri.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/openuri.c"
               line="318">%TRUE if the call succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="311">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/openuri.c"
                 line="312">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pick_color" c:identifier="xdp_portal_pick_color">
        <doc xml:space="preserve"
             filename="../libportal/screenshot.c"
             line="285">Lets the user pick a color from the screen.

When the request is done, @callback will be called. You can then
call xdp_portal_pick_color_finish() to get the results.</doc>
        <source-position filename="../libportal/screenshot.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="287">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="288">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="289">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="290">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="291">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="pick_color_finish"
              c:identifier="xdp_portal_pick_color_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/screenshot.c"
             line="322">Finishes a pick-color request, and returns
the result in the form of a GVariant of the form (ddd), containing
red, green and blue components in the range [0,1].</doc>
        <source-position filename="../libportal/screenshot.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/screenshot.c"
               line="332">GVariant containing the color</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="324">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="325">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_print" c:identifier="xdp_portal_prepare_print">
        <doc xml:space="preserve"
             filename="../libportal/print.c"
             line="274">Presents a print dialog to the user and returns print settings and page setup.

When the request is done, @callback will be called. You can then
call xdp_portal_prepare_print_finish() to get the results.</doc>
        <source-position filename="../libportal/print.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="276">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="277">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="278">tile for the print dialog</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="settings"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="279">Serialized print settings</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="page_setup"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="280">Serialized page setup</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="281">options for this call</doc>
            <type name="PrintFlags" c:type="XdpPrintFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="282">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="283">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="284">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_print_finish"
              c:identifier="xdp_portal_prepare_print_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/print.c"
             line="323">Finishes the prepare-print request, and returns #GVariant dictionary
with the following information:
- settings `a{sv}`: print settings as set up by the user in the print dialog
- page-setup `a{sv}: page setup as set up by the user in the print dialog
- token u: a token that can by used in a xdp_portal_print_file() call to
    avoid the print dialog</doc>
        <source-position filename="../libportal/print.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/print.c"
               line="336">a #GVariant dictionary with print information</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="325">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="326">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="print_file" c:identifier="xdp_portal_print_file">
        <doc xml:space="preserve"
             filename="../libportal/print.c"
             line="350">Prints a file.

If a valid token is present in the @options, then this call will print
with the settings from the Print call that the token refers to. If
no token is present, then a print dialog will be presented to the user.

When the request is done, @callback will be called. You can then
call xdp_portal_print_file_finish() to get the results.</doc>
        <source-position filename="../libportal/print.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="352">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="353">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="354">tile for the print dialog</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="355">token that was returned by a previous xdp_portal_prepare_print() call, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="356">path of the document to print</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="357">options for this call</doc>
            <type name="PrintFlags" c:type="XdpPrintFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="358">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="359">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="360">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="print_file_finish"
              c:identifier="xdp_portal_print_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/print.c"
             line="403">Finishes the print request.</doc>
        <source-position filename="../libportal/print.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/print.c"
               line="411">%TRUE if the request was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="405">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/print.c"
                 line="406">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_notification"
              c:identifier="xdp_portal_remove_notification">
        <doc xml:space="preserve"
             filename="../libportal/notification.c"
             line="195">Withdraws a desktop notification.</doc>
        <source-position filename="../libportal/notification.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="197">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/notification.c"
                 line="198">the ID of an notification</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_background"
              c:identifier="xdp_portal_request_background">
        <doc xml:space="preserve"
             filename="../libportal/background.c"
             line="218">Requests background permissions.

When the request is done, @callback will be called. You can then
call xdp_portal_request_background_finish() to get the results.</doc>
        <source-position filename="../libportal/background.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="220">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="221">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="223">reason to present to user for request</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="commandline" transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="222">command line to autostart</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="224">options for this call</doc>
            <type name="BackgroundFlags" c:type="XdpBackgroundFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="225">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="226">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="227">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_background_finish"
              c:identifier="xdp_portal_request_background_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/background.c"
             line="268">Finishes the request, and returns %TRUE if successful.</doc>
        <source-position filename="../libportal/background.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/background.c"
               line="276">%TRUE if successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="270">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/background.c"
                 line="271">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file" c:identifier="xdp_portal_save_file">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="349">Asks the user for a location to save a file.

The format for the @filters argument is the same as for xdp_portal_open_file().

The format for the @choices argument is the same as for xdp_portal_open_file().

When the request is done, @callback will be called. You can then
call xdp_portal_save_file_finish() to get the results.</doc>
        <source-position filename="../libportal/filechooser.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="351">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="352">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="353">title for the file chooser dialog</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="current_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="354">suggested filename</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="current_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="355">suggested folder to save the file in</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="current_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="356">the current file (when saving an existing file)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="filters"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="357">a #GVariant describing file filters</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="current_filter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="358">a #GVariant describing the current file filter</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="choices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="359">a #GVariant describing extra widgets</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="360">options for this call</doc>
            <type name="SaveFileFlags" c:type="XdpSaveFileFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="361">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="362">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="363">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_finish"
              c:identifier="xdp_portal_save_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="414">Finishes the save-file request, and returns
the result in the form of a #GVariant dictionary containing
the following fields:
- uris `(as)`: an array of strings containing the uri of the selected file
- choices `a(ss)`: an array of pairs of strings, the first string being the
  ID of a combobox that was passed into this call, the second string
  being the selected option.</doc>
        <source-position filename="../libportal/filechooser.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/filechooser.c"
               line="428">a #GVariant dictionary with the results</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="416">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="417">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_files" c:identifier="xdp_portal_save_files">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="445">Asks for a folder as a location to save one or more files. The
names of the files will be used as-is and appended to the selected
folder's path in the list of returned files. If the selected folder
already contains a file with one of the given names, the portal may
prompt or take some other action to construct a unique file name and
return that instead.

The format for the @choices argument is the same as for xdp_portal_open_file().

When the request is done, @callback will be called. You can then
call xdp_portal_save_file_finish() to get the results.</doc>
        <source-position filename="../libportal/filechooser.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="447">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="448">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="449">title for the file chooser dialog</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="current_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="450">suggested filename</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="current_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="451">suggested folder to save the file in</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="452">An array of file names to be saved</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="choices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="453">a #GVariant describing extra widgets</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="454">options for this call</doc>
            <type name="SaveFileFlags" c:type="XdpSaveFileFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="455">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="456">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="457">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_files_finish"
              c:identifier="xdp_portal_save_files_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/filechooser.c"
             line="508">Finishes the save-files request, and returns
the result in the form of a #GVariant dictionary containing
the following fields:
- uris `(as)`: an array of strings containing the uri corresponding to each
  file passed to the save-files request, in the same order. Note that the
  file names may have changed, for example if a file with the same name in
  the selected folder already exists.
- choices `a(ss)`: an array of pairs of strings, the first string being the
  ID of a combobox that was passed into this call, the second string
  being the selected option.</doc>
        <source-position filename="../libportal/filechooser.h" line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/filechooser.c"
               line="525">a #GVariant dictionary with the results</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="510">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/filechooser.c"
                 line="511">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="session_inhibit" c:identifier="xdp_portal_session_inhibit">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="213">Inhibits various session status changes.

To obtain an ID that can be used to undo the inhibition, use
xdp_portal_session_inhibit_finish() in the callback.

To remove an active inhibitor, call xdp_portal_session_uninhibit()
with the same ID.</doc>
        <source-position filename="../libportal/inhibit.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="215">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="216">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="reason"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="217">user-visible reason for the inhibition</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="218">information about what to inhibit</doc>
            <type name="InhibitFlags" c:type="XdpInhibitFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="219">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="220">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="221">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="session_inhibit_finish"
              c:identifier="xdp_portal_session_inhibit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="270">Finishes the inhbit request, and returns the ID of the
inhibition as a positive integer. The ID can be passed to
xdg_portal_session_uninhibit() to undo the inhibition.</doc>
        <source-position filename="../libportal/inhibit.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/inhibit.c"
               line="280">the ID of the inhibition, or -1 if there was an error</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="272">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="273">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="session_monitor_query_end_response"
              c:identifier="xdp_portal_session_monitor_query_end_response">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="654">This method should be called within one second of
receiving a #XdpPortal::session-state-changed signal
with the 'Query End' state, to acknowledge that they
have handled the state change.

Possible ways to handle the state change are either
to call xdp_portal_session_inhibit() to prevent the
session from ending, or to save your state and get
ready for the session to end.</doc>
        <source-position filename="../libportal/inhibit.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="656">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="session_monitor_start"
              c:identifier="xdp_portal_session_monitor_start">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="558">Makes XdpPortal start monitoring the login session state.

When the state changes, the #XdpPortal::session-state-changed
signal is emitted.

Use xdp_portal_session_monitor_stop() to stop monitoring.</doc>
        <source-position filename="../libportal/inhibit.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="560">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="561">a XdpParent, or %NULL</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="562">options for this call</doc>
            <type name="SessionMonitorFlags" c:type="XdpSessionMonitorFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="563">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="564">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="565">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="session_monitor_start_finish"
              c:identifier="xdp_portal_session_monitor_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="600">Finishes a session-monitor request, and returns
the result in the form of boolean.</doc>
        <source-position filename="../libportal/inhibit.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/inhibit.c"
               line="609">%TRUE if the request succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="602">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="603">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="session_monitor_stop"
              c:identifier="xdp_portal_session_monitor_stop">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="623">Stops session state monitoring that was started with
xdp_portal_session_monitor_start().</doc>
        <source-position filename="../libportal/inhibit.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="625">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="session_uninhibit"
              c:identifier="xdp_portal_session_uninhibit">
        <doc xml:space="preserve"
             filename="../libportal/inhibit.c"
             line="294">Removes an inhibitor that was created by a call
to xdp_portal_session_inhibit().</doc>
        <source-position filename="../libportal/inhibit.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="296">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/inhibit.c"
                 line="297">unique ID for an active inhibition</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wallpaper" c:identifier="xdp_portal_set_wallpaper">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.c"
             line="276">Sets a desktop background image, given by a uri.</doc>
        <source-position filename="../libportal/wallpaper.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="278">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="279">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="280">the URI to use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="281">options for this call</doc>
            <type name="WallpaperFlags" c:type="XdpWallpaperFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="282">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="283">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="284">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wallpaper_finish"
              c:identifier="xdp_portal_set_wallpaper_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.c"
             line="319">Finishes the open-uri request, and returns
the result in the form of a boolean.</doc>
        <source-position filename="../libportal/wallpaper.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/wallpaper.c"
               line="328">%TRUE if the call succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="321">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/wallpaper.c"
                 line="322">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn" c:identifier="xdp_portal_spawn">
        <doc xml:space="preserve"
             filename="../libportal/spawn.c"
             line="200">Creates a new copy of the applications sandbox, and runs
a process in, with the given arguments.

The learn when the spawned process exits, connect to the
#XdpPortal::spawn-exited signal.</doc>
        <source-position filename="../libportal/spawn.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="202">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="203">the cwd for the new process</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="204">the argv for the new process</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="fds"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="205">an array of open fds to pass to the new process, or %NULL</doc>
            <array length="4" zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
          <parameter name="map_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="206">an array of integers to map the @fds to, or %NULL. Must be the same
    length as @fds</doc>
            <array length="4" zero-terminated="0" c:type="int*">
              <type name="gint" c:type="int"/>
            </array>
          </parameter>
          <parameter name="n_fds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="208">the length of @fds and @map_to arrays</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="env"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="209">an array of KEY=VALUE environment settings, or %NULL</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="210">flags influencing the spawn operation</doc>
            <type name="SpawnFlags" c:type="XdpSpawnFlags"/>
          </parameter>
          <parameter name="sandbox_expose"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="211">paths to expose rw in the new sandbox, or %NULL</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="sandbox_expose_ro"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="212">paths to expose ro in the new sandbox, or %NULL</doc>
            <array c:type="const char* const*">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="213">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="214">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="215">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_finish"
              c:identifier="xdp_portal_spawn_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/spawn.c"
             line="264">Finishes the spawn request, and returns
the pid of the newly spawned process.</doc>
        <source-position filename="../libportal/spawn.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/spawn.c"
               line="273">the pid of the spawned process.</doc>
          <type name="gint" c:type="pid_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="266">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="267">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_signal" c:identifier="xdp_portal_spawn_signal">
        <doc xml:space="preserve"
             filename="../libportal/spawn.c"
             line="288">Sends a Unix signal to a process that has been spawned
by xdp_portal_spawn().</doc>
        <source-position filename="../libportal/spawn.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="290">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="291">the pid of the process to send a signal to</doc>
            <type name="gint" c:type="pid_t"/>
          </parameter>
          <parameter name="signal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="292">the Unix signal to send (see signal(7))</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="to_process_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/spawn.c"
                 line="293">whether to send the signal to the process
    group of the process</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_screenshot" c:identifier="xdp_portal_take_screenshot">
        <doc xml:space="preserve"
             filename="../libportal/screenshot.c"
             line="221">Takes a screenshot.

When the request is done, @callback will be called. You can then
call xdp_portal_take_screenshot_finish() to get the results.</doc>
        <source-position filename="../libportal/screenshot.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="223">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="224">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="225">options for this call</doc>
            <type name="ScreenshotFlags" c:type="XdpScreenshotFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="226">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="227">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="228">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_screenshot_finish"
              c:identifier="xdp_portal_take_screenshot_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/screenshot.c"
             line="262">Finishes a screenshot request, and returns
the result in the form of a URI pointing to an image file.</doc>
        <source-position filename="../libportal/screenshot.h" line="40"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libportal/screenshot.c"
               line="271">URI pointing to an image file</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="264">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/screenshot.c"
                 line="265">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file" c:identifier="xdp_portal_trash_file">
        <doc xml:space="preserve"
             filename="../libportal/trash.c"
             line="132">Sends the file at @path to the trash can.</doc>
        <source-position filename="../libportal/trash.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="134">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="135">the path for a local file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="136">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="137">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="138">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file_finish"
              c:identifier="xdp_portal_trash_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/trash.c"
             line="164">Finishes the trash-file request, and returns
the result in the form of a boolean.</doc>
        <source-position filename="../libportal/trash.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/trash.c"
               line="173">%TRUE if the call succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="166">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/trash.c"
                 line="167">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_install" c:identifier="xdp_portal_update_install">
        <doc xml:space="preserve"
             filename="../libportal/updates.c"
             line="395">Installs an available software update. This should be
called in response to a #XdpPortal::update-available signal.

During the update installation, the #XdpPortal::update-progress
signal will be emitted to provide progress information.</doc>
        <source-position filename="../libportal/updates.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="397">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="398">a #XdpParent</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="399">options for this call</doc>
            <type name="UpdateInstallFlags" c:type="XdpUpdateInstallFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="400">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="401">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="402">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_install_finish"
              c:identifier="xdp_portal_update_install_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/updates.c"
             line="435">Finishes an update-installation request, and returns
the result in the form of boolean.

Note that the update may not be completely installed
by the time this function is called. You need to
listen to the #XdpPortal::update-progress signal
to learn when the installation is complete.</doc>
        <source-position filename="../libportal/updates.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/updates.c"
               line="449">%TRUE if the update is being installed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="437">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="438">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_monitor_start"
              c:identifier="xdp_portal_update_monitor_start">
        <doc xml:space="preserve"
             filename="../libportal/updates.c"
             line="214">Makes XdpPortal start monitoring for available software updates.

When a new update is available, the #XdpPortal::update-available.
signal is emitted.

Use xdp_portal_update_monitor_stop() to stop monitoring.</doc>
        <source-position filename="../libportal/updates.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="216">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="217">options for this cal..</doc>
            <type name="UpdateMonitorFlags" c:type="XdpUpdateMonitorFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="218">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="219">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="220">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_monitor_start_finish"
              c:identifier="xdp_portal_update_monitor_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/updates.c"
             line="249">Finishes an update-monitor request, and returns
the result in the form of boolean.</doc>
        <source-position filename="../libportal/updates.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/updates.c"
               line="258">%TRUE if the request succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="251">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="252">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_monitor_stop"
              c:identifier="xdp_portal_update_monitor_stop">
        <doc xml:space="preserve"
             filename="../libportal/updates.c"
             line="272">Stops update monitoring that was started with
xdp_portal_update_monitor_start().</doc>
        <source-position filename="../libportal/updates.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="portal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/updates.c"
                 line="274">a #XdpPortal</doc>
            <type name="Portal" c:type="XdpPortal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="location-updated" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="195">The ::location-updated signal is emitted when location
monitoring is enabled and the location changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="198">the latitude, in degrees</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="199">the longitude, in degrees</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="altitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="200">the altitude, in meters</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="accuracy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="201">the accuracy, in meters</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="speed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="202">the speed, in meters per second</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="heading" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="203">the heading, in degrees</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="204">the description</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="timestamp_s" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="205">the timestamp seconds since the Unix epoch</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="timestamp_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="206">the microseconds fraction of the timestamp</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="notification-action-invoked" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="229">The ::notification-action-invoked signal is emitted when
a non-exported action is activated on a notification.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="232">the notification ID</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="233">the action name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="parameter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="234">the target parameter for the action</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-state-changed" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="118">This signal is emitted when session state monitoring is
enabled and the state of the login session changes or
the screensaver is activated or deactivated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screensaver_active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="121">whether the screensaver is active</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="session_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="122">the current state of the login session</doc>
            <type name="LoginSessionState"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="spawn-exited" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="99">This signal is emitted when a process that was spawned
with xdp_portal_spawn() exits.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="102">the pid of the process</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="exit_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="103">the exit status of the process</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-available" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="138">This signal is emitted when updates monitoring is enabled
and a new update is available. It is only sent once with
the same information, but it can be sent many times if
new updates appear.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="running_commit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="141">the commit that the sandbox is running with</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="local_commit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="142">the commit that is currently deployed. Restarting
    the app will use this commit</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="remote_commit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="144">the commit that is available as an update.
    Updating the app will deloy this commit</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-progress" when="first">
        <doc xml:space="preserve"
             filename="../libportal/portal.c"
             line="163">This signal gets emitted to indicate progress of an
update installation. It is undefined exactly how often it
is sent, but it will be emitted at least once at the end with
a non-zero @status. For each successful operation in the
update, we're also guaranteed to send exactly one signal
with @progress 100.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="n_ops" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="166">the number of operations that the update consists of</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="op" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="167">the position of the currently active operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="168">the progress of the currently active operation, as
  a number between 0 and 100</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="170">the overall status of the update</doc>
            <type name="UpdateStatus"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="171">the error name if the status is 'failed'</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="error_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/portal.c"
                 line="172">the error message if the status is 'failed'</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PortalClass"
            c:type="XdpPortalClass"
            glib:is-gtype-struct-for="Portal">
      <source-position filename="../libportal/portal-helpers.h" line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="PrintFlags"
                 glib:type-name="XdpPrintFlags"
                 glib:get-type="xdp_print_flags_get_type"
                 c:type="XdpPrintFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_PRINT_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_PRINT_FLAG_NONE">
      </member>
    </enumeration>
    <bitfield name="RemoteDesktopFlags"
              glib:type-name="XdpRemoteDesktopFlags"
              glib:get-type="xdp_remote_desktop_flags_get_type"
              c:type="XdpRemoteDesktopFlags">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="143">Options for starting remote desktop sessions.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_REMOTE_DESKTOP_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_REMOTE_DESKTOP_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="145">No options</doc>
      </member>
      <member name="multiple"
              value="1"
              c:identifier="XDP_REMOTE_DESKTOP_FLAG_MULTIPLE"
              glib:nick="multiple"
              glib:name="XDP_REMOTE_DESKTOP_FLAG_MULTIPLE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="146">allow opening multiple streams</doc>
      </member>
    </bitfield>
    <enumeration name="SaveFileFlags"
                 glib:type-name="XdpSaveFileFlags"
                 glib:get-type="xdp_save_file_flags_get_type"
                 c:type="XdpSaveFileFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_SAVE_FILE_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_SAVE_FILE_FLAG_NONE">
      </member>
    </enumeration>
    <bitfield name="ScreencastFlags"
              glib:type-name="XdpScreencastFlags"
              glib:get-type="xdp_screencast_flags_get_type"
              c:type="XdpScreencastFlags">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="87">Options for starting screen casts.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_SCREENCAST_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_SCREENCAST_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="89">No options</doc>
      </member>
      <member name="multiple"
              value="1"
              c:identifier="XDP_SCREENCAST_FLAG_MULTIPLE"
              glib:nick="multiple"
              glib:name="XDP_SCREENCAST_FLAG_MULTIPLE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="90">allow opening multiple streams</doc>
      </member>
    </bitfield>
    <bitfield name="ScreenshotFlags"
              glib:type-name="XdpScreenshotFlags"
              glib:get-type="xdp_screenshot_flags_get_type"
              c:type="XdpScreenshotFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_SCREENSHOT_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_SCREENSHOT_FLAG_NONE">
      </member>
      <member name="interactive"
              value="1"
              c:identifier="XDP_SCREENSHOT_FLAG_INTERACTIVE"
              glib:nick="interactive"
              glib:name="XDP_SCREENSHOT_FLAG_INTERACTIVE">
      </member>
    </bitfield>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="XdpSession"
           parent="GObject.Object"
           glib:type-name="XdpSession"
           glib:get-type="xdp_session_get_type"
           glib:type-struct="SessionClass">
      <source-position filename="../libportal/remote.h" line="29"/>
      <method name="close" c:identifier="xdp_session_close">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="762">Closes the session.</doc>
        <source-position filename="../libportal/remote.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="764">an active #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="xdp_session_get_devices">
        <doc xml:space="preserve"
             filename="../libportal/session.c"
             line="187">Obtains the devices that the user selected.

Unless the session is active, this function returns %XDP_DEVICE_NONE.</doc>
        <source-position filename="../libportal/remote.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/session.c"
               line="195">the selected devices</doc>
          <type name="DeviceType" c:type="XdpDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/session.c"
                 line="189">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persist_mode"
              c:identifier="xdp_session_get_persist_mode">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1149">Retrieves the effective persist mode of @session.

May only be called after @session is successfully started, i.e. after
xdp_session_start_finish().</doc>
        <source-position filename="../libportal/remote.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="1158">the effective persist mode of @session</doc>
          <type name="PersistMode" c:type="XdpPersistMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1151">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_restore_token"
              c:identifier="xdp_session_get_restore_token">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1169">Retrieves the restore token of @session.

A restore token will only be available if #XDP_PERSIST_MODE_TRANSIENT
or #XDP_PERSIST_MODE_PERSISTENT was passed when creating the screencast
session.

Remote desktop sessions cannot be restored.

May only be called after @session is successfully started, i.e. after
xdp_session_start_finish().</doc>
        <source-position filename="../libportal/remote.h" line="294"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="1184">the restore token of @session</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1171">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_state"
              c:identifier="xdp_session_get_session_state">
        <doc xml:space="preserve"
             filename="../libportal/session.c"
             line="149">Obtains information about the state of the session that is represented
by @session.</doc>
        <source-position filename="../libportal/remote.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/session.c"
               line="156">the state of @session</doc>
          <type name="SessionState" c:type="XdpSessionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/session.c"
                 line="151">an #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_type"
              c:identifier="xdp_session_get_session_type">
        <doc xml:space="preserve"
             filename="../libportal/session.c"
             line="132">Obtains information about the type of session that is represented
by @session.</doc>
        <source-position filename="../libportal/remote.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/session.c"
               line="139">the type of @session</doc>
          <type name="SessionType" c:type="XdpSessionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/session.c"
                 line="134">an #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_streams" c:identifier="xdp_session_get_streams">
        <doc xml:space="preserve"
             filename="../libportal/session.c"
             line="215">Obtains the streams that the user selected. The information in the
returned #GVariant has the format `a(ua{sv})`. Each item in the array
is describing a stream. The first member is the pipewire node ID, the
second is a dictionary of stream properties, including:
- position, `(ii)`: a tuple consisting of the position (x, y) in the compositor
    coordinate space. Note that the position may not be equivalent to a
    position in a pixel coordinate space. Only available for monitor streams.
- size, `(ii)`: a tuple consisting of (width, height). The size represents the size
    of the stream as it is displayed in the compositor coordinate space.
    Note that this size may not be equivalent to a size in a pixel coordinate
    space. The size may differ from the size of the stream.

Unless the session is active, this function returns %NULL.</doc>
        <source-position filename="../libportal/remote.h" line="198"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libportal/session.c"
               line="233">the selected streams</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/session.c"
                 line="217">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="keyboard_key" c:identifier="xdp_session_keyboard_key">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1005">Changes the state of the key to @state.

May only be called on a remote desktop session
with %XDP_DEVICE_KEYBOARD access.</doc>
        <source-position filename="../libportal/remote.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1007">a remote desktop #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="keysym" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1008">whether to interpret @key as a keysym instead of a keycode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1009">the keysym or keycode to change</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1010">the new state</doc>
            <type name="KeyState" c:type="XdpKeyState"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_pipewire_remote"
              c:identifier="xdp_session_open_pipewire_remote">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="785">Opens a file descriptor to the pipewire remote where the screencast
streams are available. The file descriptor should be used to create
a pw_remote object, by using pw_remote_connect_fd(). Only the
screencast stream nodes will be available from this pipewire node.</doc>
        <source-position filename="../libportal/remote.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="794">the file descriptor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="787">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pointer_axis" c:identifier="xdp_session_pointer_axis">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="934">The axis movement from a smooth scroll device, such as a touchpad.
When applicable, the size of the motion delta should be equivalent to
the motion vector of a pointer motion done using the same advice.

May only be called on a remote desktop session
with %XDP_DEVICE_POINTER access.</doc>
        <source-position filename="../libportal/remote.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="936">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="finish" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="937">whether this is the last in a series of related events</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="938">relative axis movement on the X axis</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="939">relative axis movement on the Y axis</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pointer_axis_discrete"
              c:identifier="xdp_session_pointer_axis_discrete">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="972">The axis movement from a discrete scroll device.

May only be called on a remote desktop session
with %XDP_DEVICE_POINTER access.</doc>
        <source-position filename="../libportal/remote.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="974">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="axis" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="975">the axis to change</doc>
            <type name="DiscreteAxis" c:type="XdpDiscreteAxis"/>
          </parameter>
          <parameter name="steps" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="976">number of steps scrolled</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="pointer_button" c:identifier="xdp_session_pointer_button">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="901">Changes the state of the button to @state.

May only be called on a remote desktop session
with %XDP_DEVICE_POINTER access.</doc>
        <source-position filename="../libportal/remote.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="903">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="904">the button</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="905">the new state</doc>
            <type name="ButtonState" c:type="XdpButtonState"/>
          </parameter>
        </parameters>
      </method>
      <method name="pointer_motion" c:identifier="xdp_session_pointer_motion">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="832">Moves the pointer from its current position.

May only be called on a remote desktop session
with %XDP_DEVICE_POINTER access.</doc>
        <source-position filename="../libportal/remote.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="834">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="dx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="835">relative horizontal movement</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="836">relative vertical movement</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="pointer_position"
              c:identifier="xdp_session_pointer_position">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="865">Moves the pointer to a new position in the given streams logical
coordinate space.

May only be called on a remote desktop session
with %XDP_DEVICE_POINTER access.</doc>
        <source-position filename="../libportal/remote.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="867">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="868">the node ID of the pipewire stream the position is relative to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="869">new X position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="870">new Y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="xdp_session_start">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="705">Starts the session.

When the request is done, @callback will be called. You can then
call xdp_session_start_finish() to get the results.</doc>
        <source-position filename="../libportal/remote.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="707">a #XdpSession in initial state</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="708">parent window information</doc>
            <type name="Parent" c:type="XdpParent*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="709">optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="710">a callback to call when the request is done</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="711">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="xdp_session_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="741">Finishes the session-start request.</doc>
        <source-position filename="../libportal/remote.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libportal/remote.c"
               line="749">%TRUE if the session was started successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="743">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="744">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch_down" c:identifier="xdp_session_touch_down">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1040">Notify about a new touch down event. The (x, y) position
represents the new touch point position in the streams logical
coordinate space.

May only be called on a remote desktop session
with %XDP_DEVICE_TOUCHSCREEN access.</doc>
        <source-position filename="../libportal/remote.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1042">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1043">the node ID of the pipewire stream the position is relative to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1044">touch slot where the touch point appeared</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1045">new X position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1046">new Y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch_position" c:identifier="xdp_session_touch_position">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1079">Notify about a new touch motion event. The (x, y) position
represents where the touch point position in the streams logical
coordinate space moved.

May only be called on a remote desktop session
with %XDP_DEVICE_TOUCHSCREEN access.</doc>
        <source-position filename="../libportal/remote.h" line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1081">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1082">the node ID of the pipewire stream the position is relative to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1083">touch slot that is changing position</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1084">new X position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1085">new Y position</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="touch_up" c:identifier="xdp_session_touch_up">
        <doc xml:space="preserve"
             filename="../libportal/remote.c"
             line="1118">Notify about a new touch up event.

May only be called on a remote desktop session
with %XDP_DEVICE_TOUCHSCREEN access.</doc>
        <source-position filename="../libportal/remote.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1120">a #XdpSession</doc>
            <type name="Session" c:type="XdpSession*"/>
          </instance-parameter>
          <parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libportal/remote.c"
                 line="1121">touch slot that changed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="closed" when="cleanup" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="../libportal/session.c"
             line="72">The ::closed signal is emitted when a session is closed externally.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SessionClass"
            c:type="XdpSessionClass"
            glib:is-gtype-struct-for="Session">
      <source-position filename="../libportal/remote.h" line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SessionMonitorFlags"
                 glib:type-name="XdpSessionMonitorFlags"
                 glib:get-type="xdp_session_monitor_flags_get_type"
                 c:type="XdpSessionMonitorFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_SESSION_MONITOR_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_SESSION_MONITOR_FLAG_NONE">
      </member>
    </enumeration>
    <enumeration name="SessionState"
                 glib:type-name="XdpSessionState"
                 glib:get-type="xdp_session_state_get_type"
                 c:type="XdpSessionState">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="73">The state of a session.</doc>
      <member name="initial"
              value="0"
              c:identifier="XDP_SESSION_INITIAL"
              glib:nick="initial"
              glib:name="XDP_SESSION_INITIAL">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="75">the session has not been started.</doc>
      </member>
      <member name="active"
              value="1"
              c:identifier="XDP_SESSION_ACTIVE"
              glib:nick="active"
              glib:name="XDP_SESSION_ACTIVE">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="76">the session is active.</doc>
      </member>
      <member name="closed"
              value="2"
              c:identifier="XDP_SESSION_CLOSED"
              glib:nick="closed"
              glib:name="XDP_SESSION_CLOSED">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="77">the session is no longer active.</doc>
      </member>
    </enumeration>
    <enumeration name="SessionType"
                 glib:type-name="XdpSessionType"
                 glib:get-type="xdp_session_type_get_type"
                 c:type="XdpSessionType">
      <doc xml:space="preserve"
           filename="../libportal/remote.h"
           line="61">The type of a session.</doc>
      <member name="screencast"
              value="0"
              c:identifier="XDP_SESSION_SCREENCAST"
              glib:nick="screencast"
              glib:name="XDP_SESSION_SCREENCAST">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="63">a screencast session.</doc>
      </member>
      <member name="remote_desktop"
              value="1"
              c:identifier="XDP_SESSION_REMOTE_DESKTOP"
              glib:nick="remote-desktop"
              glib:name="XDP_SESSION_REMOTE_DESKTOP">
        <doc xml:space="preserve"
             filename="../libportal/remote.h"
             line="64">a remote desktop session.</doc>
      </member>
    </enumeration>
    <bitfield name="SpawnFlags"
              glib:type-name="XdpSpawnFlags"
              glib:get-type="xdp_spawn_flags_get_type"
              c:type="XdpSpawnFlags">
      <doc xml:space="preserve"
           filename="../libportal/spawn.h"
           line="26">Flags influencing the spawn operation and how the
new sandbox is created.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_SPAWN_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_SPAWN_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="28">No flags</doc>
      </member>
      <member name="clearenv"
              value="1"
              c:identifier="XDP_SPAWN_FLAG_CLEARENV"
              glib:nick="clearenv"
              glib:name="XDP_SPAWN_FLAG_CLEARENV">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="29">Clear the environment</doc>
      </member>
      <member name="latest"
              value="2"
              c:identifier="XDP_SPAWN_FLAG_LATEST"
              glib:nick="latest"
              glib:name="XDP_SPAWN_FLAG_LATEST">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="30">Spawn the latest version of the app</doc>
      </member>
      <member name="sandbox"
              value="4"
              c:identifier="XDP_SPAWN_FLAG_SANDBOX"
              glib:nick="sandbox"
              glib:name="XDP_SPAWN_FLAG_SANDBOX">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="31">Spawn in a sandbox (equivalent to the --sandbox option of flatpak run)</doc>
      </member>
      <member name="no_network"
              value="8"
              c:identifier="XDP_SPAWN_FLAG_NO_NETWORK"
              glib:nick="no-network"
              glib:name="XDP_SPAWN_FLAG_NO_NETWORK">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="32">Spawn without network (equivalent to the --unshare=network option of flatpak run)</doc>
      </member>
      <member name="watch"
              value="16"
              c:identifier="XDP_SPAWN_FLAG_WATCH"
              glib:nick="watch"
              glib:name="XDP_SPAWN_FLAG_WATCH">
        <doc xml:space="preserve"
             filename="../libportal/spawn.h"
             line="33">Kill the sandbox when the caller disappears from the session bus</doc>
      </member>
    </bitfield>
    <enumeration name="UpdateInstallFlags"
                 glib:type-name="XdpUpdateInstallFlags"
                 glib:get-type="xdp_update_install_flags_get_type"
                 c:type="XdpUpdateInstallFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_UPDATE_INSTALL_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_UPDATE_INSTALL_FLAG_NONE">
      </member>
    </enumeration>
    <enumeration name="UpdateMonitorFlags"
                 glib:type-name="XdpUpdateMonitorFlags"
                 glib:get-type="xdp_update_monitor_flags_get_type"
                 c:type="XdpUpdateMonitorFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_UPDATE_MONITOR_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_UPDATE_MONITOR_FLAG_NONE">
      </member>
    </enumeration>
    <enumeration name="UpdateStatus"
                 glib:type-name="XdpUpdateStatus"
                 glib:get-type="xdp_update_status_get_type"
                 c:type="XdpUpdateStatus">
      <doc xml:space="preserve"
           filename="../libportal/updates.h"
           line="26">The values of this enum are returned in the
#XdpPortal::update-progress signal to indicate
the current progress of an installation.</doc>
      <member name="running"
              value="0"
              c:identifier="XDP_UPDATE_STATUS_RUNNING"
              glib:nick="running"
              glib:name="XDP_UPDATE_STATUS_RUNNING">
        <doc xml:space="preserve"
             filename="../libportal/updates.h"
             line="28">Installation in progress</doc>
      </member>
      <member name="empty"
              value="1"
              c:identifier="XDP_UPDATE_STATUS_EMPTY"
              glib:nick="empty"
              glib:name="XDP_UPDATE_STATUS_EMPTY">
        <doc xml:space="preserve"
             filename="../libportal/updates.h"
             line="29">Nothing to install</doc>
      </member>
      <member name="done"
              value="2"
              c:identifier="XDP_UPDATE_STATUS_DONE"
              glib:nick="done"
              glib:name="XDP_UPDATE_STATUS_DONE">
        <doc xml:space="preserve"
             filename="../libportal/updates.h"
             line="30">Installation finished successfully</doc>
      </member>
      <member name="failed"
              value="3"
              c:identifier="XDP_UPDATE_STATUS_FAILED"
              glib:nick="failed"
              glib:name="XDP_UPDATE_STATUS_FAILED">
        <doc xml:space="preserve"
             filename="../libportal/updates.h"
             line="31">Installation failed</doc>
      </member>
    </enumeration>
    <enumeration name="UserInformationFlags"
                 glib:type-name="XdpUserInformationFlags"
                 glib:get-type="xdp_user_information_flags_get_type"
                 c:type="XdpUserInformationFlags">
      <member name="none"
              value="0"
              c:identifier="XDP_USER_INFORMATION_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_USER_INFORMATION_FLAG_NONE">
      </member>
    </enumeration>
    <constant name="WALLPAPER_TARGET_BOTH"
              value="0"
              c:type="XDP_WALLPAPER_TARGET_BOTH">
      <source-position filename="../libportal/wallpaper.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="WallpaperFlags"
              glib:type-name="XdpWallpaperFlags"
              glib:get-type="xdp_wallpaper_flags_get_type"
              c:type="XdpWallpaperFlags">
      <doc xml:space="preserve"
           filename="../libportal/wallpaper.h"
           line="26">The values of this enumeration determine where the wallpaper is being set.</doc>
      <member name="none"
              value="0"
              c:identifier="XDP_WALLPAPER_FLAG_NONE"
              glib:nick="none"
              glib:name="XDP_WALLPAPER_FLAG_NONE">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.h"
             line="28">No flags</doc>
      </member>
      <member name="background"
              value="1"
              c:identifier="XDP_WALLPAPER_FLAG_BACKGROUND"
              glib:nick="background"
              glib:name="XDP_WALLPAPER_FLAG_BACKGROUND">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.h"
             line="29">Set wallpaper on the desktop background</doc>
      </member>
      <member name="lockscreen"
              value="2"
              c:identifier="XDP_WALLPAPER_FLAG_LOCKSCREEN"
              glib:nick="lockscreen"
              glib:name="XDP_WALLPAPER_FLAG_LOCKSCREEN">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.h"
             line="30">Set wallpaper on the lockscreen</doc>
      </member>
      <member name="preview"
              value="4"
              c:identifier="XDP_WALLPAPER_FLAG_PREVIEW"
              glib:nick="preview"
              glib:name="XDP_WALLPAPER_FLAG_PREVIEW">
        <doc xml:space="preserve"
             filename="../libportal/wallpaper.h"
             line="31">Request the preview to be shown</doc>
      </member>
    </bitfield>
    <docsection name="account">
      <doc xml:space="preserve"
           filename="../libportal/account.c"
           line="25">These functions let applications query basic information about
the user, such as user ID, name and avatar picture.

The underlying portal is org.freedesktop.portal.Account.</doc>
    </docsection>
    <docsection name="background">
      <doc xml:space="preserve"
           filename="../libportal/background.c"
           line="26">These functions let the application request background permissions
such as enabling autostart.

The underlying portal is org.freedesktop.portal.Background.</doc>
    </docsection>
    <docsection name="camera">
      <doc xml:space="preserve"
           filename="../libportal/camera.c"
           line="27">These functions lets applications access cameras and
open pipewire remotes for them.

The underlying portal is org.freedesktop.portal.Camera.</doc>
    </docsection>
    <docsection name="email">
      <doc xml:space="preserve"
           filename="../libportal/email.c"
           line="34">These functions let applications send email, by prompting
the user to compose a message. The email may already have
an address, subject, body or attachments.

The underlying portal is org.freedesktop.portal.Email.</doc>
    </docsection>
    <docsection name="filechooser">
      <doc xml:space="preserve"
           filename="../libportal/filechooser.c"
           line="25">These functions let applications ask the user for access to
files outside the sandbox, by presenting a file chooser dialog.

The selected files will be made accessible to the application
via the document portal, and the returned URI will point
into the document portal fuse filesystem in /run/user/$UID/doc/.

The underlying portal is org.freedesktop.portal.FileChooser.</doc>
    </docsection>
    <docsection name="inhibit">
      <doc xml:space="preserve"
           filename="../libportal/inhibit.c"
           line="25">These functions let applications inhibit certain login session
state changes, and be informed about the impending end of the
session.

A typical use for this functionality is to prevent the session
from locking while a video is playing.

The underlying portal is org.freedesktop.portal.Inhibit.</doc>
    </docsection>
    <docsection name="location">
      <doc xml:space="preserve"
           filename="../libportal/location.c"
           line="26">Location monitoring makes location information available
via the #XdpPortal::location-updated signal.</doc>
    </docsection>
    <docsection name="notification">
      <doc xml:space="preserve"
           filename="../libportal/notification.c"
           line="25">These functions let applications send desktop notifications.

The underlying portal is org.freedesktop.portal.Notification.</doc>
    </docsection>
    <docsection name="open">
      <doc xml:space="preserve"
           filename="../libportal/openuri.c"
           line="35">These functions let applications open URIs in external handlers.
A typical example is to open a pdf file in a document viewer.

The underlying portal is org.freedesktop.portal.OpenURI.</doc>
    </docsection>
    <docsection name="portal">
      <doc xml:space="preserve"
           filename="../libportal/portal.c"
           line="26">The XdpPortal object provides the main context object
for the portal operations of libportal.

Typically, an application will create a single XdpPortal
object with xdp_portal_new() and use it throughout its lifetime.</doc>
    </docsection>
    <docsection name="print">
      <doc xml:space="preserve"
           filename="../libportal/print.c"
           line="25">These functions let applications print.

The underlying portal is org.freedesktop.portal.Print.</doc>
    </docsection>
    <docsection name="remote">
      <doc xml:space="preserve"
           filename="../libportal/remote.c"
           line="39">A remote desktop session allows to inject events into the input stream.

The underlying portal is org.freedesktop.portal.RemoteDesktop.</doc>
    </docsection>
    <docsection name="screencast">
      <doc xml:space="preserve"
           filename="../libportal/remote.c"
           line="28">A screencast session makes the content of a monitor or window
available as a pipewire stream.

The underlying portal is org.freedesktop.portal.ScreenCast.</doc>
    </docsection>
    <docsection name="screenshot">
      <doc xml:space="preserve"
           filename="../libportal/screenshot.c"
           line="25">These functions let the application take a screenshot or pick a color.

The underlying portal is org.freedesktop.portal.Screenshot.</doc>
    </docsection>
    <docsection name="session">
      <doc xml:space="preserve"
           filename="../libportal/session.c"
           line="25">The XdpSession object is used to represent portal interactions with the
screencast or remote desktop portals that extend over multiple portal calls.

To find out what kind of session an XdpSession object represents and whether
it is still active, you can use xdp_session_get_session_type() and
xdp_session_get_session_state().

All sessions start in an initial state. They can be made active by calling
xdp_session_start(), and ended by calling xdp_session_close().</doc>
    </docsection>
    <docsection name="spawn">
      <doc xml:space="preserve"
           filename="../libportal/spawn.c"
           line="35">These functions let applications spawn a process in another
copy of their sandbox.

To monitor spawned processes, use the #XdpPortal::spawn-exited
signal.

The underlying portal is org.freedesktop.portal.Flatpak.</doc>
    </docsection>
    <docsection name="trash">
      <doc xml:space="preserve"
           filename="../libportal/trash.c"
           line="35">This function lets applications send a file to the trash can.

The underlying portal is org.freedesktop.portal.Trash.</doc>
    </docsection>
    <docsection name="updates">
      <doc xml:space="preserve"
           filename="../libportal/updates.c"
           line="25">These functions let applications be informed about available
software updates (for themselves) and install those updates.

The underlying portal is org.freedesktop.portal.Flatpak.</doc>
    </docsection>
    <docsection name="wallpaper">
      <doc xml:space="preserve"
           filename="../libportal/wallpaper.c"
           line="35">These functions let applications set desktop backgrounds.

The underlying portal is org.freedesktop.portal.Wallpaper.</doc>
    </docsection>
  </namespace>
</repository>
