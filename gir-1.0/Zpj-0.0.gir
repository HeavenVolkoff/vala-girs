<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Json" version="1.0"/>
  <include name="Rest" version="0.7"/>
  <include name="Soup" version="2.4"/>
  <namespace name="Zpj"
             version="0.0"
             shared-library="libzapojit-0.0.so.0"
             c:identifier-prefixes="Zpj"
             c:symbol-prefixes="zpj">
    <class name="AuthorizationDomain"
           c:symbol-prefix="authorization_domain"
           c:type="ZpjAuthorizationDomain"
           parent="GObject.Object"
           glib:type-name="ZpjAuthorizationDomain"
           glib:get-type="zpj_authorization_domain_get_type"
           glib:type-struct="AuthorizationDomainClass">
      <method name="get_scope"
              c:identifier="zpj_authorization_domain_get_scope">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_service_name"
              c:identifier="zpj_authorization_domain_get_service_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <property name="scope"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="service-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="AuthorizationDomainPrivate"
              c:type="ZpjAuthorizationDomainPrivate*"/>
      </field>
    </class>
    <record name="AuthorizationDomainClass"
            c:type="ZpjAuthorizationDomainClass"
            glib:is-gtype-struct-for="AuthorizationDomain">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AuthorizationDomainPrivate"
            c:type="ZpjAuthorizationDomainPrivate"
            disguised="1">
    </record>
    <interface name="Authorizer"
               c:symbol-prefix="authorizer"
               c:type="ZpjAuthorizer"
               glib:type-name="ZpjAuthorizer"
               glib:get-type="zpj_authorizer_get_type"
               glib:type-struct="AuthorizerInterface">
      <virtual-method name="is_authorized_for_domain"
                      invoker="is_authorized_for_domain">
        <doc xml:whitespace="preserve">Whether the authorization tokens held by @iface are valid for
@domain.

This method is thread safe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the tokens are valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #ZpjAuthorizationDomain.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_call" invoker="process_call">
        <doc xml:whitespace="preserve">Adds the necessary authorization to @call.

This method modifies @call in place and is thread safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
          <parameter name="call" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #RestProxyCall.</doc>
            <type name="Rest.ProxyCall" c:type="RestProxyCall*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_message" invoker="process_message">
        <doc xml:whitespace="preserve">Adds the necessary authorization to @message. The type of @message
can be DELETE, GET and POST.

This method modifies @message in place and is thread safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #SoupMessage.</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh_authorization"
                      invoker="refresh_authorization"
                      throws="1">
        <doc xml:whitespace="preserve">Synchronously forces @iface to refresh any authorization tokens
held by it. See zpj_authorizer_refresh_authorization_async() for the
asynchronous version of this call.

This method is thread safe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the authorizer now has a valid token.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="is_authorized_for_domain"
              c:identifier="zpj_authorizer_is_authorized_for_domain">
        <doc xml:whitespace="preserve">Whether the authorization tokens held by @iface are valid for
@domain.

This method is thread safe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the tokens are valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #ZpjAuthorizationDomain.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_call" c:identifier="zpj_authorizer_process_call">
        <doc xml:whitespace="preserve">Adds the necessary authorization to @call.

This method modifies @call in place and is thread safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
          <parameter name="call" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #RestProxyCall.</doc>
            <type name="Rest.ProxyCall" c:type="RestProxyCall*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_message"
              c:identifier="zpj_authorizer_process_message">
        <doc xml:whitespace="preserve">Adds the necessary authorization to @message. The type of @message
can be DELETE, GET and POST.

This method modifies @message in place and is thread safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
            <type name="AuthorizationDomain" c:type="ZpjAuthorizationDomain*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #SoupMessage.</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_authorization"
              c:identifier="zpj_authorizer_refresh_authorization"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously forces @iface to refresh any authorization tokens
held by it. See zpj_authorizer_refresh_authorization_async() for the
asynchronous version of this call.

This method is thread safe.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the authorizer now has a valid token.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_authorization_async"
              c:identifier="zpj_authorizer_refresh_authorization_async">
        <doc xml:whitespace="preserve">Asynchronously forces @iface to refresh any authorization tokens
held by it. See zpj_authorizer_refresh_authorization() for the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call zpj_authorizer_refresh_authorization_finish() to get the
result of the operation.

This method is thread safe.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_authorization_finish"
              c:identifier="zpj_authorizer_refresh_authorization_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous operation started with
zpj_authorizer_refresh_authorization_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the authorizer now has a valid token.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="AuthorizerInterface"
            c:type="ZpjAuthorizerInterface"
            glib:is-gtype-struct-for="Authorizer">
      <doc xml:whitespace="preserve">Interface structure for #ZpjAuthorizer. All methods should be
thread safe.</doc>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="is_authorized_for_domain">
        <callback name="is_authorized_for_domain">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the tokens are valid.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iface" transfer-ownership="none">
              <type name="Authorizer" c:type="ZpjAuthorizer*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #ZpjAuthorizationDomain.</doc>
              <type name="AuthorizationDomain"
                    c:type="ZpjAuthorizationDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process_call">
        <callback name="process_call">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iface" transfer-ownership="none">
              <type name="Authorizer" c:type="ZpjAuthorizer*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
              <type name="AuthorizationDomain"
                    c:type="ZpjAuthorizationDomain*"/>
            </parameter>
            <parameter name="call" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #RestProxyCall.</doc>
              <type name="Rest.ProxyCall" c:type="RestProxyCall*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process_message">
        <callback name="process_message">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="iface" transfer-ownership="none">
              <type name="Authorizer" c:type="ZpjAuthorizer*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none" allow-none="1">
              <doc xml:whitespace="preserve">An optional #ZpjAuthorizationDomain object, or %NULL.</doc>
              <type name="AuthorizationDomain"
                    c:type="ZpjAuthorizationDomain*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:whitespace="preserve">A #SoupMessage.</doc>
              <type name="Soup.Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh_authorization">
        <callback name="refresh_authorization" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if the authorizer now has a valid token.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="iface" transfer-ownership="none">
              <type name="Authorizer" c:type="ZpjAuthorizer*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       allow-none="1">
              <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GoaAuthorizer"
           c:symbol-prefix="goa_authorizer"
           c:type="ZpjGoaAuthorizer"
           parent="GObject.Object"
           glib:type-name="ZpjGoaAuthorizer"
           glib:get-type="zpj_goa_authorizer_get_type"
           glib:type-struct="GoaAuthorizerClass">
      <doc xml:whitespace="preserve">The #ZpjGoaAuthorizer structure contains only private data and
should only be accessed using the provided API.</doc>
      <implements name="Authorizer"/>
      <constructor name="new"
                   c:identifier="zpj_goa_authorizer_new"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #ZpjGoaAuthorizer using @goa_object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjGoaAuthorizer. Free the returned object with g_object_unref().</doc>
          <type name="GoaAuthorizer" c:type="ZpjGoaAuthorizer*"/>
        </return-value>
        <parameters>
          <parameter name="goa_object" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GoaObject representing a Windows Live account.</doc>
            <type c:type="GoaObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_goa_object"
              c:identifier="zpj_goa_authorizer_get_goa_object"
              introspectable="0">
        <doc xml:whitespace="preserve">Gets the GOA account used by @self for authorization.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #GoaObject. The returned object is owned by #ZpjGoaAuthorizer and should not be modified or freed.</doc>
          <type c:type="GoaObject*"/>
        </return-value>
      </method>
      <property name="goa-object"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="GoaAuthorizerPrivate" c:type="ZpjGoaAuthorizerPrivate*"/>
      </field>
    </class>
    <record name="GoaAuthorizerClass"
            c:type="ZpjGoaAuthorizerClass"
            glib:is-gtype-struct-for="GoaAuthorizer">
      <doc xml:whitespace="preserve">Class structure for #ZpjGoaAuthorizer.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GoaAuthorizerPrivate"
            c:type="ZpjGoaAuthorizerPrivate"
            disguised="1">
    </record>
    <constant name="SKYDRIVE_FOLDER_MY_DOCUMENTS"
              value="me/skydrive/my_documents"
              c:type="ZPJ_SKYDRIVE_FOLDER_MY_DOCUMENTS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SKYDRIVE_FOLDER_MY_PHOTOS"
              value="me/skydrive/my_photos"
              c:type="ZPJ_SKYDRIVE_FOLDER_MY_PHOTOS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SKYDRIVE_FOLDER_PUBLIC_DOCUMENTS"
              value="me/skydrive/public_documents"
              c:type="ZPJ_SKYDRIVE_FOLDER_PUBLIC_DOCUMENTS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SKYDRIVE_FOLDER_SKYDRIVE"
              value="me/skydrive"
              c:type="ZPJ_SKYDRIVE_FOLDER_SKYDRIVE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Skydrive"
           c:symbol-prefix="skydrive"
           c:type="ZpjSkydrive"
           parent="GObject.Object"
           glib:type-name="ZpjSkydrive"
           glib:get-type="zpj_skydrive_get_type"
           glib:type-struct="SkydriveClass">
      <doc xml:whitespace="preserve">The #ZpjSkydrive structure contains only private data and should
only be accessed using the provided API.</doc>
      <constructor name="new" c:identifier="zpj_skydrive_new">
        <doc xml:whitespace="preserve">Creates a new #ZpjSkydrive using the given @authorizer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydrive. Free the returned object with g_object_unref().</doc>
          <type name="Skydrive" c:type="ZpjSkydrive*"/>
        </return-value>
        <parameters>
          <parameter name="authorizer" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #ZpjAuthorizer to authorize the service's requests.</doc>
            <type name="Authorizer" c:type="ZpjAuthorizer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_folder"
              c:identifier="zpj_skydrive_create_folder"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <type name="SkydriveFolder" c:type="ZpjSkydriveFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_folder_from_name"
              c:identifier="zpj_skydrive_create_folder_from_name"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parent_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_entry_id"
              c:identifier="zpj_skydrive_delete_entry_id"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously deletes the entry corresponding to @entry_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the #ZpjSkydriveEntry was deleted successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="entry_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveEntry to be deleted.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_id_to_path"
              c:identifier="zpj_skydrive_download_file_id_to_path"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously downloads the file corresponding to @file_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt; and saves it in @path. The file is temporarily
saved in the preferred directory for temporary files (as returned
by g_get_tmp_dir()) while the download is going on, and then moved
to @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the #ZpjSkydriveFile was downloaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveFile to be downloaded.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The destination.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_id_to_stream"
              c:identifier="zpj_skydrive_download_file_id_to_stream"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously returns a stream for downloading the file
corresponding to @file_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See
zpj_skydrive_download_file_id_to_stream_async() for the asynchronous
version of this call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GInputStream to read the file data from. Free the returned object with g_object_unref().</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="file_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveFile to be downloaded.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_id_to_stream_async"
              c:identifier="zpj_skydrive_download_file_id_to_stream_async">
        <doc xml:whitespace="preserve">Asynchronously returns a stream for downloading the file
corresponding to @file_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_download_file_id_to_stream() for
the synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call zpj_skydrive_download_file_id_to_stream_finish() to get
the result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveFile to be downloaded.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_id_to_stream_finish"
              c:identifier="zpj_skydrive_download_file_id_to_stream_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous operation started with
zpj_skydrive_download_file_id_to_stream_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GInputStream to read the file data from. Free the returned object with g_object_unref().</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_to_path"
              c:identifier="zpj_skydrive_download_file_to_path"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously downloads @file from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt; and saves it in @path. The file is temporarily
saved in the preferred directory for temporary files (as returned
by g_get_tmp_dir()) while the download is going on, and then moved
to @path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the #ZpjSkydriveFile was downloaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #ZpjSkydriveFile to be downloaded.</doc>
            <type name="SkydriveFile" c:type="ZpjSkydriveFile*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The destination.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_to_stream"
              c:identifier="zpj_skydrive_download_file_to_stream"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously returns a stream for downloading @file from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_download_file_to_stream_async()
for the asynchronous version of this call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GInputStream to read the file data from. Free the returned object with g_object_unref().</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #ZpjSkydriveFile to be downloaded.</doc>
            <type name="SkydriveFile" c:type="ZpjSkydriveFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_to_stream_async"
              c:identifier="zpj_skydrive_download_file_to_stream_async">
        <doc xml:whitespace="preserve">Asynchronously returns a stream for downloading @file from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_download_file_to_stream() for the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call zpj_skydrive_download_file_to_stream_finish() to get the
result of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #ZpjSkydriveFile to be downloaded.</doc>
            <type name="SkydriveFile" c:type="ZpjSkydriveFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="download_file_to_stream_finish"
              c:identifier="zpj_skydrive_download_file_to_stream_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous operation started with
zpj_skydrive_download_file_to_stream_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A #GInputStream to read the file data from. Free the returned object with g_object_unref().</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_authorizer" c:identifier="zpj_skydrive_get_authorizer">
        <doc xml:whitespace="preserve">Gets the authorizer used to authorize requests to @self.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A #ZpjAuthorizer. The returned object is owned by #ZpjSkydrive and should not be modified or freed.</doc>
          <type name="Authorizer" c:type="ZpjAuthorizer*"/>
        </return-value>
      </method>
      <method name="list_folder"
              c:identifier="zpj_skydrive_list_folder"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously lists the contents of @folder_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of the #ZpjSkydrive entries within the #ZpjSkydriveFolder. Free the returned list with g_list_free() after each element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="SkydriveEntry"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:whitespace="preserve">The #ZpjSkydriveFolder to be listed.</doc>
            <type name="SkydriveFolder" c:type="ZpjSkydriveFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_folder_id"
              c:identifier="zpj_skydrive_list_folder_id"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously lists the contents of the folder corresponding to
@folder_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of the #ZpjSkydrive entries within the #ZpjSkydriveFolder, or %NULL on error. Free the returned list with g_list_free() after each element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="SkydriveEntry"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="folder_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveFolder to be listed.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_folder_id_async"
              c:identifier="zpj_skydrive_list_folder_id_async">
        <doc xml:whitespace="preserve">Asynchronously lists the contents of the folder corresponding to
@folder_id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_list_folder_id() for the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call zpj_skydrive_list_folder_id_finish() to get the result
of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="folder_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the #ZpjSkydriveFolder to be listed.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_folder_id_finish"
              c:identifier="zpj_skydrive_list_folder_id_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous operation started with
zpj_skydrive_list_folder_id_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A list of the #ZpjSkydrive entries within the #ZpjSkydriveFolder, or %NULL on error. Free the returned list with g_list_free() after each element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="SkydriveEntry"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_info_from_id"
              c:identifier="zpj_skydrive_query_info_from_id"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously reads the properties of the entry corresponding to
@id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_query_info_from_id_async() for
the asynchronous version of this call.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydriveEntry. Free the returned object with g_object_unref().</doc>
          <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">An ID to be queried.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_info_from_id_async"
              c:identifier="zpj_skydrive_query_info_from_id_async">
        <doc xml:whitespace="preserve">Asynchronously reads the properties of the entry corresponding to
@id from
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt;. See zpj_skydrive_query_info_from_id() for the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call zpj_skydrive_query_info_from_id_finish() to get the result
of the operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID to be queried.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:whitespace="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">The data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_info_from_id_finish"
              c:identifier="zpj_skydrive_query_info_from_id_finish"
              throws="1">
        <doc xml:whitespace="preserve">Finishes an asynchronous operation started with
zpj_skydrive_query_info_from_id_async().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydriveEntry. Free the returned object with g_object_unref().</doc>
          <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_authorizer" c:identifier="zpj_skydrive_set_authorizer">
        <doc xml:whitespace="preserve">Uses the new @authorizer to replace the old one that was used to
authorize requests to @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="authorizer" transfer-ownership="none">
            <doc xml:whitespace="preserve">A new #ZpjAuthorizer.</doc>
            <type name="Authorizer" c:type="ZpjAuthorizer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upload_path_to_folder"
              c:identifier="zpj_skydrive_upload_path_to_folder"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously uploads the file at @path to
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt; and places it under @folder.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file was uploaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The source.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder" transfer-ownership="none">
            <doc xml:whitespace="preserve">The destination #ZpjSkydriveFolder.</doc>
            <type name="SkydriveFolder" c:type="ZpjSkydriveFolder*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upload_path_to_folder_id"
              c:identifier="zpj_skydrive_upload_path_to_folder_id"
              throws="1">
        <doc xml:whitespace="preserve">Synchronously uploads the file at @path to
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh826521"&gt;
Skydrive&lt;/ulink&gt; and places it under the folder corresponding to
@folder_id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the file was uploaded successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">The source.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="folder_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">The ID of the destination #ZpjSkydriveFolder.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     allow-none="1">
            <doc xml:whitespace="preserve">An optional #GCancellable object, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="authorizer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Authorizer"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SkydrivePrivate" c:type="ZpjSkydrivePrivate*"/>
      </field>
    </class>
    <record name="SkydriveClass"
            c:type="ZpjSkydriveClass"
            glib:is-gtype-struct-for="Skydrive">
      <doc xml:whitespace="preserve">Class structure for #ZpjSkydrive.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SkydriveEntry"
           c:symbol-prefix="skydrive_entry"
           c:type="ZpjSkydriveEntry"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="ZpjSkydriveEntry"
           glib:get-type="zpj_skydrive_entry_get_type"
           glib:type-struct="SkydriveEntryClass">
      <doc xml:whitespace="preserve">The #ZpjSkydriveEntry structure contains only private data and
should only be accessed using the provided API.</doc>
      <virtual-method name="parse_json_node">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_created_time"
              c:identifier="zpj_skydrive_entry_get_created_time">
        <doc xml:whitespace="preserve">Gets the time at which @self was created. This is the value of the
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
updated_time&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GDateTime representing the time at which the entry was created. The returned time is owned by the #ZpjSkydriveEntry and should not be unreferenced.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
      </method>
      <method name="get_description"
              c:identifier="zpj_skydrive_entry_get_description">
        <doc xml:whitespace="preserve">Gets the description of @self. This is the value of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
description&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">description of the entry. This string is owned by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_from_id" c:identifier="zpj_skydrive_entry_get_from_id">
        <doc xml:whitespace="preserve">Gets the ID of the user who created or uploaded @self. This is part
of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
from&lt;/ulink&gt; object in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">ID of the user who created the entry. This string is by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_from_name"
              c:identifier="zpj_skydrive_entry_get_from_name">
        <doc xml:whitespace="preserve">Gets the name of the user who created or uploaded @self. This is
part of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
from&lt;/ulink&gt; object in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the user who created the entry. This string is by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_id" c:identifier="zpj_skydrive_entry_get_id">
        <doc xml:whitespace="preserve">Gets the ID of @self. This is the value of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
id&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the entry's ID. This string is owned by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="zpj_skydrive_entry_get_name">
        <doc xml:whitespace="preserve">Gets the name of @self. This is the value of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
name&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">name of the entry. This string is owned by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_parent_id"
              c:identifier="zpj_skydrive_entry_get_parent_id">
        <doc xml:whitespace="preserve">Gets the ID of the folder containing @self. This is the value of
the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
parent_id&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">ID of the parent folder. This string is owned by the #ZpjSkydriveEntry and should not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
      </method>
      <method name="get_updated_time"
              c:identifier="zpj_skydrive_entry_get_updated_time">
        <doc xml:whitespace="preserve">Gets the time at which @self was last updated. This is the value of
the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
updated_time&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GDateTime representing the time at which the entry was last updated. The returned time is owned by the #ZpjSkydriveEntry and should not be unreferenced.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
      </method>
      <method name="is_folder" c:identifier="zpj_skydrive_entry_is_folder">
        <doc xml:whitespace="preserve">Whether @self is a folder.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the entry is a folder.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="created-time" transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="description" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="from-id" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="from-name" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="id" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="json"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Json.Node"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="parent-id" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="type" transfer-ownership="none">
        <type name="SkydriveEntryType"/>
      </property>
      <property name="updated-time" transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SkydriveEntryPrivate" c:type="ZpjSkydriveEntryPrivate*"/>
      </field>
    </class>
    <record name="SkydriveEntryClass"
            c:type="ZpjSkydriveEntryClass"
            glib:is-gtype-struct-for="SkydriveEntry">
      <doc xml:whitespace="preserve">Class structure for #ZpjSkydriveEntry.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="parse_json_node">
        <callback name="parse_json_node">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="Json.Node" c:type="JsonNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SkydriveEntryPrivate"
            c:type="ZpjSkydriveEntryPrivate"
            disguised="1">
    </record>
    <enumeration name="SkydriveEntryType"
                 glib:type-name="ZpjSkydriveEntryType"
                 glib:get-type="zpj_skydrive_entry_type_get_type"
                 c:type="ZpjSkydriveEntryType">
      <doc xml:whitespace="preserve">The types of Skydrive
&lt;ulink url="http://msdn.microsoft.com/en-us/library/live/hh243648"&gt;
objects&lt;/ulink&gt;.

This enumeration can be expanded at a later date.</doc>
      <member name="file"
              value="0"
              c:identifier="ZPJ_SKYDRIVE_ENTRY_TYPE_FILE"
              glib:nick="file"/>
      <member name="folder"
              value="1"
              c:identifier="ZPJ_SKYDRIVE_ENTRY_TYPE_FOLDER"
              glib:nick="folder"/>
      <member name="photo"
              value="2"
              c:identifier="ZPJ_SKYDRIVE_ENTRY_TYPE_PHOTO"
              glib:nick="photo"/>
      <member name="invalid"
              value="3"
              c:identifier="ZPJ_SKYDRIVE_ENTRY_TYPE_INVALID"
              glib:nick="invalid"/>
    </enumeration>
    <class name="SkydriveFile"
           c:symbol-prefix="skydrive_file"
           c:type="ZpjSkydriveFile"
           parent="SkydriveEntry"
           glib:type-name="ZpjSkydriveFile"
           glib:get-type="zpj_skydrive_file_get_type"
           glib:type-struct="SkydriveFileClass">
      <doc xml:whitespace="preserve">The #ZpjSkydriveFile structure contains only private data and should
only be accessed using the provided API.</doc>
      <constructor name="new" c:identifier="zpj_skydrive_file_new">
        <doc xml:whitespace="preserve">Creates a new #ZpjSkydriveFile from the given @node. If you already
know the ID of the file then you can use
zpj_skydrive_query_info_from_id().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydriveFile. Free the returned object with g_object_unref().</doc>
          <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #JsonNode returned by the server.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_size" c:identifier="zpj_skydrive_file_get_size">
        <doc xml:whitespace="preserve">Gets the size of @self in bytes. This is the value of the &lt;ulink
url="http://msdn.microsoft.com/en-us/library/live/hh243648#file"&gt;
size&lt;/ulink&gt; member in the JSON returned by the server.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The entry's size in bytes.</doc>
          <type name="gint64" c:type="goffset"/>
        </return-value>
      </method>
      <property name="size" transfer-ownership="none">
        <type name="gint64"/>
      </property>
      <field name="parent_instance">
        <type name="SkydriveEntry" c:type="ZpjSkydriveEntry"/>
      </field>
      <field name="priv">
        <type name="SkydriveFilePrivate" c:type="ZpjSkydriveFilePrivate*"/>
      </field>
    </class>
    <record name="SkydriveFileClass"
            c:type="ZpjSkydriveFileClass"
            glib:is-gtype-struct-for="SkydriveFile">
      <doc xml:whitespace="preserve">Class structure for #ZpjSkydriveFile.</doc>
      <field name="parent_class">
        <type name="SkydriveEntryClass" c:type="ZpjSkydriveEntryClass"/>
      </field>
    </record>
    <record name="SkydriveFilePrivate"
            c:type="ZpjSkydriveFilePrivate"
            disguised="1">
    </record>
    <class name="SkydriveFolder"
           c:symbol-prefix="skydrive_folder"
           c:type="ZpjSkydriveFolder"
           parent="SkydriveEntry"
           glib:type-name="ZpjSkydriveFolder"
           glib:get-type="zpj_skydrive_folder_get_type"
           glib:type-struct="SkydriveFolderClass">
      <doc xml:whitespace="preserve">The #ZpjSkydriveFolder structure contains only private data and
should only be accessed using the provided API.</doc>
      <constructor name="new" c:identifier="zpj_skydrive_folder_new">
        <doc xml:whitespace="preserve">Creates a new #ZpjSkydriveFolder from the given @node. If you
already know the ID of the folder then you can use
zpj_skydrive_query_info_from_id().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydriveFolder. Free the returned object with g_object_unref().</doc>
          <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #JsonNode returned by the server.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="SkydriveEntry" c:type="ZpjSkydriveEntry"/>
      </field>
    </class>
    <record name="SkydriveFolderClass"
            c:type="ZpjSkydriveFolderClass"
            glib:is-gtype-struct-for="SkydriveFolder">
      <doc xml:whitespace="preserve">Class structure for #ZpjSkydriveFolder.</doc>
      <field name="parent_class">
        <type name="SkydriveEntryClass" c:type="ZpjSkydriveEntryClass"/>
      </field>
    </record>
    <class name="SkydrivePhoto"
           c:symbol-prefix="skydrive_photo"
           c:type="ZpjSkydrivePhoto"
           parent="SkydriveFile"
           glib:type-name="ZpjSkydrivePhoto"
           glib:get-type="zpj_skydrive_photo_get_type"
           glib:type-struct="SkydrivePhotoClass">
      <doc xml:whitespace="preserve">The #ZpjSkydrivePhoto structure contains only private data and
should only be accessed using the provided API.</doc>
      <constructor name="new" c:identifier="zpj_skydrive_photo_new">
        <doc xml:whitespace="preserve">Creates a new #ZpjSkydrivePhoto from the given @node. If you already
know the ID of the photo then you can use
zpj_skydrive_query_info_from_id().</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A new #ZpjSkydrivePhoto. Free the returned object with g_object_unref().</doc>
          <type name="SkydriveEntry" c:type="ZpjSkydriveEntry*"/>
        </return-value>
        <parameters>
          <parameter name="node" transfer-ownership="none">
            <doc xml:whitespace="preserve">A #JsonNode returned by the server.</doc>
            <type name="Json.Node" c:type="JsonNode*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="SkydriveFile" c:type="ZpjSkydriveFile"/>
      </field>
    </class>
    <record name="SkydrivePhotoClass"
            c:type="ZpjSkydrivePhotoClass"
            glib:is-gtype-struct-for="SkydrivePhoto">
      <doc xml:whitespace="preserve">Class structure for #ZpjSkydrivePhoto.</doc>
      <field name="parent_class">
        <type name="SkydriveFileClass" c:type="ZpjSkydriveFileClass"/>
      </field>
    </record>
    <record name="SkydrivePrivate" c:type="ZpjSkydrivePrivate" disguised="1">
    </record>
  </namespace>
</repository>
