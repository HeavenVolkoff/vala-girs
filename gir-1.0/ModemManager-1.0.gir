<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="libmm-glib"/>
  <c:include name="libmm-glib.h"/>
  <namespace name="ModemManager"
             version="1.0"
             shared-library="libmm-glib.so.0"
             c:identifier-prefixes="MM,Mm"
             c:symbol-prefixes="mm">
    <constant name="BEARER_METHOD_CONNECT"
              value="Connect"
              c:type="MM_BEARER_METHOD_CONNECT">
      <source-position filename="../include/ModemManager-names.h" line="95"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_METHOD_DISCONNECT"
              value="Disconnect"
              c:type="MM_BEARER_METHOD_DISCONNECT">
      <source-position filename="../include/ModemManager-names.h" line="96"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_BEARERTYPE"
              value="BearerType"
              c:type="MM_BEARER_PROPERTY_BEARERTYPE">
      <source-position filename="../include/ModemManager-names.h" line="104"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_CONNECTED"
              value="Connected"
              c:type="MM_BEARER_PROPERTY_CONNECTED">
      <source-position filename="../include/ModemManager-names.h" line="98"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_INTERFACE"
              value="Interface"
              c:type="MM_BEARER_PROPERTY_INTERFACE">
      <source-position filename="../include/ModemManager-names.h" line="97"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_IP4CONFIG"
              value="Ip4Config"
              c:type="MM_BEARER_PROPERTY_IP4CONFIG">
      <source-position filename="../include/ModemManager-names.h" line="100"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_IP6CONFIG"
              value="Ip6Config"
              c:type="MM_BEARER_PROPERTY_IP6CONFIG">
      <source-position filename="../include/ModemManager-names.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_IPTIMEOUT"
              value="IpTimeout"
              c:type="MM_BEARER_PROPERTY_IPTIMEOUT">
      <source-position filename="../include/ModemManager-names.h" line="103"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_PROPERTIES"
              value="Properties"
              c:type="MM_BEARER_PROPERTY_PROPERTIES">
      <source-position filename="../include/ModemManager-names.h" line="105"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_STATS"
              value="Stats"
              c:type="MM_BEARER_PROPERTY_STATS">
      <source-position filename="../include/ModemManager-names.h" line="102"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BEARER_PROPERTY_SUSPENDED"
              value="Suspended"
              c:type="MM_BEARER_PROPERTY_SUSPENDED">
      <source-position filename="../include/ModemManager-names.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Bearer"
           c:symbol-prefix="bearer"
           c:type="MMBearer"
           parent="GdbusBearerProxy"
           glib:type-name="MMBearer"
           glib:get-type="mm_bearer_get_type"
           glib:type-struct="BearerClass">
      <doc xml:space="preserve"
           filename="mm-bearer.h"
           line="51">The #MMBearer structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-bearer.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusBearer"/>
      <method name="connect" c:identifier="mm_bearer_connect">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="692">Asynchronously requests activation of a packet data connection with the
network using this #MMBearer properties.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_bearer_connect_finish() to get the result of the operation.

See mm_bearer_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-bearer.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="694">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="695">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="696">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="697">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="mm_bearer_connect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="672">Finishes an operation started with mm_bearer_connect().</doc>
        <source-position filename="mm-bearer.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="680">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="674">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="675">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_bearer_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="mm_bearer_connect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="718">Synchronously requests activation of a packet data connection with the
network using this #MMBearer properties.

The calling thread is blocked until a reply is received.
See mm_bearer_connect() for the asynchronous version of this method.</doc>
        <source-position filename="mm-bearer.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="730">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="720">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="721">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="mm_bearer_disconnect">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="744">Synchronously requests disconnection and deactivation of the packet data connection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_bearer_disconnect_finish() to get the result of the operation.

See mm_bearer_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-bearer.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="746">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="747">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="748">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="749">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="mm_bearer_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="769">Finishes an operation started with mm_bearer_disconnect().</doc>
        <source-position filename="mm-bearer.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="777">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="771">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="772">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_bearer_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_sync"
              c:identifier="mm_bearer_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="789">Synchronously requests disconnection and deactivation of the packet data connection.

The calling thread is blocked until a reply is received.
See mm_bearer_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="mm-bearer.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="800">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="791">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="792">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_interface" c:identifier="mm_bearer_dup_interface">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="130">Gets a copy of the operating system name for the network data interface that provides
packet data using this #MMBearer. This will only be available once the #MMBearer
is in connected state.</doc>
        <source-position filename="mm-bearer.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="138">The name of the interface, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="132">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_bearer_dup_path">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="82">Gets a copy of the DBus path of the #MMBearer object.</doc>
        <source-position filename="mm-bearer.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="88">The DBus path of the #MMBearer object. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="84">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bearer_type" c:identifier="mm_bearer_get_bearer_type">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="207">Gets the type of bearer.</doc>
        <source-position filename="mm-bearer.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="213">a #MMBearerType.</doc>
          <type name="BearerType" c:type="MMBearerType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="209">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connected" c:identifier="mm_bearer_get_connected">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="151">Checks whether or not the #MMBearer is connected and thus whether packet data
communication is possible.</doc>
        <source-position filename="mm-bearer.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="158">%TRUE if the #MMBearer is connected, #FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="153">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface" c:identifier="mm_bearer_get_interface">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="106">Gets the operating system name for the network data interface that provides
packet data using this #MMBearer. This will only be available once the #MMBearer
is in connected state.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_bearer_dup_interface() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="119">The name of the interface, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="108">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_timeout" c:identifier="mm_bearer_get_ip_timeout">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="189">Gets the maximum time to wait for the bearer to retrieve a valid IP address.</doc>
        <source-position filename="mm-bearer.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="195">The IP timeout, or 0 if no specific one given.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="191">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ipv4_config" c:identifier="mm_bearer_get_ipv4_config">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="287">Gets a #MMBearerIpConfig object specifying the IPv4 configuration to use in
the bearer.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_bearer_get_ipv4_config() again to get a new #MMBearerIpConfig with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="299">A #MMBearerIpConfig that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="289">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ipv6_config" c:identifier="mm_bearer_get_ipv6_config">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="399">Gets a #MMBearerIpConfig object specifying the IPv6 configuration to use in
the bearer.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_bearer_get_ipv6_config() again to get a new #MMBearerIpConfig with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="411">A #MMBearerIpConfig that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="401">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_bearer_get_path">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="65">Gets the DBus path of the #MMBearer object.</doc>
        <source-position filename="mm-bearer.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="71">The DBus path of the #MMBearer object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="67">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_properties" c:identifier="mm_bearer_get_properties">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="511">Gets a #MMBearerProperties object specifying the properties which were used
to create the bearer.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_bearer_get_properties() again to get a new #MMBearerProperties with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="523">A #MMBearerProperties that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="513">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stats" c:identifier="mm_bearer_get_stats">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="622">Gets a #MMBearerStats object specifying the statistics of the current bearer
connection.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_bearer_get_stats() again to get a new #MMBearerStats with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="634">A #MMBearerStats that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="BearerStats" c:type="MMBearerStats*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="624">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suspended" c:identifier="mm_bearer_get_suspended">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="170">Checks whether or not the #MMBearer is suspended (but not deactivated) while the
device is handling other communications, like a voice call.</doc>
        <source-position filename="mm-bearer.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="177">%TRUE if packet data service is suspended in the #MMBearer, #FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="172">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_ipv4_config"
              c:identifier="mm_bearer_peek_ipv4_config">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="312">Gets a #MMBearerIpConfig object specifying the IPv4 configuration to use in
the bearer.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_bearer_get_ipv4_config() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="324">A #MMBearerIpConfig. Do not free the returned value, it belongs to @self.</doc>
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="314">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_ipv6_config"
              c:identifier="mm_bearer_peek_ipv6_config">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="424">Gets a #MMBearerIpConfig object specifying the IPv6 configuration to use in
the bearer.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_bearer_get_ipv6_config() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="436">A #MMBearerIpConfig. Do not free the returned value, it belongs to @self.</doc>
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="426">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_properties" c:identifier="mm_bearer_peek_properties">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="536">Gets a #MMBearerProperties object specifying the properties which were used
to create the bearer.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_bearer_get_properties() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="548">A #MMBearerProperties. Do not free the returned value, it belongs to @self.</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="538">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_stats" c:identifier="mm_bearer_peek_stats">
        <doc xml:space="preserve"
             filename="mm-bearer.c"
             line="647">Gets a #MMBearerStats object specifying the statistics of the current bearer
connection.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_bearer_get_stats() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-bearer.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer.c"
               line="659">A #MMBearerStats. Do not free the returned value, it belongs to @self.</doc>
          <type name="BearerStats" c:type="MMBearerStats*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer.c"
                 line="649">A #MMBearer.</doc>
            <type name="Bearer" c:type="MMBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusBearerProxy" c:type="MmGdbusBearerProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BearerPrivate" c:type="MMBearerPrivate*"/>
      </field>
    </class>
    <bitfield name="BearerAllowedAuth"
              glib:type-name="MMBearerAllowedAuth"
              glib:get-type="mm_bearer_allowed_auth_get_type"
              c:type="MMBearerAllowedAuth">
      <member name="unknown"
              value="0"
              c:identifier="MM_BEARER_ALLOWED_AUTH_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="none"
              value="1"
              c:identifier="MM_BEARER_ALLOWED_AUTH_NONE"
              glib:nick="none">
      </member>
      <member name="pap"
              value="2"
              c:identifier="MM_BEARER_ALLOWED_AUTH_PAP"
              glib:nick="pap">
      </member>
      <member name="chap"
              value="4"
              c:identifier="MM_BEARER_ALLOWED_AUTH_CHAP"
              glib:nick="chap">
      </member>
      <member name="mschap"
              value="8"
              c:identifier="MM_BEARER_ALLOWED_AUTH_MSCHAP"
              glib:nick="mschap">
      </member>
      <member name="mschapv2"
              value="16"
              c:identifier="MM_BEARER_ALLOWED_AUTH_MSCHAPV2"
              glib:nick="mschapv2">
      </member>
      <member name="eap"
              value="32"
              c:identifier="MM_BEARER_ALLOWED_AUTH_EAP"
              glib:nick="eap">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_bearer_allowed_auth_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2629">Builds a string containing a comma-separated list of nicknames for
each #MMBearerAllowedAuth in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="371"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2636">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2631">bitmask of MMBearerAllowedAuth values.</doc>
            <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <record name="BearerClass"
            c:type="MMBearerClass"
            glib:is-gtype-struct-for="Bearer">
      <source-position filename="mm-bearer.h" line="66"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusBearerProxyClass" c:type="MmGdbusBearerProxyClass"/>
      </field>
    </record>
    <class name="BearerIpConfig"
           c:symbol-prefix="bearer_ip_config"
           c:type="MMBearerIpConfig"
           parent="GObject.Object"
           glib:type-name="MMBearerIpConfig"
           glib:get-type="mm_bearer_ip_config_get_type"
           glib:type-struct="BearerIpConfigClass">
      <doc xml:space="preserve"
           filename="mm-bearer-ip-config.h"
           line="39">The #MMBearerIpConfig structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-bearer-ip-config.h" line="54"/>
      <constructor name="new" c:identifier="mm_bearer_ip_config_new">
        <source-position filename="mm-bearer-ip-config.h" line="72"/>
        <return-value transfer-ownership="full">
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_bearer_ip_config_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-bearer-ip-config.h" line="73"/>
        <return-value transfer-ownership="full">
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="mm_bearer_ip_config_dup">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="370">Creates a copy of @orig.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="376">a newly created #MMBearerIpConfig</doc>
          <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="372">a #MMBearerIpConfig</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="mm_bearer_ip_config_get_address">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="83">Gets the IP address to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="89">a string with the IP address, or #NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="85">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_bearer_ip_config_get_dictionary">
        <source-position filename="mm-bearer-ip-config.h" line="91"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dns" c:identifier="mm_bearer_ip_config_get_dns">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="138">Gets the list of IP addresses of DNS servers to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="144">a NULL-terminated array of strings. Do not free the returned value, it is owned by @self.</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="140">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gateway"
              c:identifier="mm_bearer_ip_config_get_gateway">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="166">Gets the IP address of the gateway to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="172">a string with the IP address, or #NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="168">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="mm_bearer_ip_config_get_method">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="56">Gets the IP method to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="62">a #MMBearerIpMethod.</doc>
          <type name="BearerIpMethod" c:type="MMBearerIpMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="58">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="mm_bearer_ip_config_get_mtu">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="194">Gets the MTU to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="200">the MTU.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="196">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix" c:identifier="mm_bearer_ip_config_get_prefix">
        <doc xml:space="preserve"
             filename="mm-bearer-ip-config.c"
             line="111">Gets the network prefix to be used with this bearer.</doc>
        <source-position filename="mm-bearer-ip-config.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-ip-config.c"
               line="117">the network prefix.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-ip-config.c"
                 line="113">a #MMBearerIpConfig.</doc>
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="mm_bearer_ip_config_set_address">
        <source-position filename="mm-bearer-ip-config.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dns" c:identifier="mm_bearer_ip_config_set_dns">
        <source-position filename="mm-bearer-ip-config.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="dns" transfer-ownership="none">
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gateway"
              c:identifier="mm_bearer_ip_config_set_gateway">
        <source-position filename="mm-bearer-ip-config.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="gateway" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_method" c:identifier="mm_bearer_ip_config_set_method">
        <source-position filename="mm-bearer-ip-config.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="ip_method" transfer-ownership="none">
            <type name="BearerIpMethod" c:type="MMBearerIpMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mtu" c:identifier="mm_bearer_ip_config_set_mtu">
        <source-position filename="mm-bearer-ip-config.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="mtu" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix" c:identifier="mm_bearer_ip_config_set_prefix">
        <source-position filename="mm-bearer-ip-config.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerIpConfig" c:type="MMBearerIpConfig*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BearerIpConfigPrivate" c:type="MMBearerIpConfigPrivate*"/>
      </field>
    </class>
    <record name="BearerIpConfigClass"
            c:type="MMBearerIpConfigClass"
            glib:is-gtype-struct-for="BearerIpConfig">
      <source-position filename="mm-bearer-ip-config.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BearerIpConfigPrivate"
            c:type="MMBearerIpConfigPrivate"
            disguised="1">
      <source-position filename="mm-bearer-ip-config.h" line="37"/>
    </record>
    <bitfield name="BearerIpFamily"
              glib:type-name="MMBearerIpFamily"
              glib:get-type="mm_bearer_ip_family_get_type"
              c:type="MMBearerIpFamily">
      <member name="none"
              value="0"
              c:identifier="MM_BEARER_IP_FAMILY_NONE"
              glib:nick="none">
      </member>
      <member name="ipv4"
              value="1"
              c:identifier="MM_BEARER_IP_FAMILY_IPV4"
              glib:nick="ipv4">
      </member>
      <member name="ipv6"
              value="2"
              c:identifier="MM_BEARER_IP_FAMILY_IPV6"
              glib:nick="ipv6">
      </member>
      <member name="ipv4v6"
              value="4"
              c:identifier="MM_BEARER_IP_FAMILY_IPV4V6"
              glib:nick="ipv4v6">
      </member>
      <member name="any"
              value="4294967295"
              c:identifier="MM_BEARER_IP_FAMILY_ANY"
              glib:nick="any">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_bearer_ip_family_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2527">Builds a string containing a comma-separated list of nicknames for
each #MMBearerIpFamily in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="356"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2534">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2529">bitmask of MMBearerIpFamily values.</doc>
            <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <enumeration name="BearerIpMethod"
                 glib:type-name="MMBearerIpMethod"
                 glib:get-type="mm_bearer_ip_method_get_type"
                 c:type="MMBearerIpMethod">
      <member name="unknown"
              value="0"
              c:identifier="MM_BEARER_IP_METHOD_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="ppp"
              value="1"
              c:identifier="MM_BEARER_IP_METHOD_PPP"
              glib:nick="ppp">
      </member>
      <member name="static"
              value="2"
              c:identifier="MM_BEARER_IP_METHOD_STATIC"
              glib:nick="static">
      </member>
      <member name="dhcp"
              value="3"
              c:identifier="MM_BEARER_IP_METHOD_DHCP"
              glib:nick="dhcp">
      </member>
      <function name="get_string"
                c:identifier="mm_bearer_ip_method_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2404">Gets the nickname string for the #MMBearerIpMethod specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2410">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2406">a MMBearerIpMethod.</doc>
            <type name="BearerIpMethod" c:type="MMBearerIpMethod"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="BearerPrivate" c:type="MMBearerPrivate" disguised="1">
      <source-position filename="mm-bearer.h" line="49"/>
    </record>
    <class name="BearerProperties"
           c:symbol-prefix="bearer_properties"
           c:type="MMBearerProperties"
           parent="GObject.Object"
           glib:type-name="MMBearerProperties"
           glib:get-type="mm_bearer_properties_get_type"
           glib:type-struct="BearerPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-bearer-properties.h"
           line="39">The #MMBearerProperties structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-bearer-properties.h" line="54"/>
      <constructor name="new" c:identifier="mm_bearer_properties_new">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="660">Creates a new empty #MMBearerProperties.</doc>
        <source-position filename="mm-bearer-properties.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="665">a #MMBearerProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_bearer_properties_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-bearer-properties.h" line="95"/>
        <return-value transfer-ownership="full">
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_bearer_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-bearer-properties.h" line="93"/>
        <return-value transfer-ownership="full">
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cmp" c:identifier="mm_bearer_properties_cmp">
        <source-position filename="mm-bearer-properties.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </parameter>
        </parameters>
      </method>
      <method name="consume_string"
              c:identifier="mm_bearer_properties_consume_string"
              throws="1">
        <source-position filename="mm-bearer-properties.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="consume_variant"
              c:identifier="mm_bearer_properties_consume_variant"
              throws="1">
        <source-position filename="mm-bearer-properties.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="properties" transfer-ownership="none">
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="mm_bearer_properties_dup">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="616">Creates a copy of @orig.</doc>
        <source-position filename="mm-bearer-properties.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="622">a newly created #MMBearerProperties</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="618">a #MMBearerProperties</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_roaming"
              c:identifier="mm_bearer_properties_get_allow_roaming">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="258">Checks whether roaming is allowed in the connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="264">%TRUE if roaming is allowed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="260">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allowed_auth"
              c:identifier="mm_bearer_properties_get_allowed_auth">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="118">Gets the authentication methods allowed in the connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="124">a bitmask of #MMBearerAllowedAuth values, or %MM_BEARER_ALLOWED_AUTH_UNKNOWN to request the modem-default method.</doc>
          <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="120">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apn" c:identifier="mm_bearer_properties_get_apn">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="84">Gets the name of the access point to use when connecting.</doc>
        <source-position filename="mm-bearer-properties.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="90">the access point, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="86">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_bearer_properties_get_dictionary">
        <source-position filename="mm-bearer-properties.h" line="110"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_type"
              c:identifier="mm_bearer_properties_get_ip_type">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="222">Sets the IP type to use.</doc>
        <source-position filename="mm-bearer-properties.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="228">a #MMBearerIpFamily.</doc>
          <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="224">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="mm_bearer_properties_get_number">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="293">Gets the number to use when performing the connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="299">the number, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="295">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="mm_bearer_properties_get_password">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="188">Gets the password used to authenticate with the access point.</doc>
        <source-position filename="mm-bearer-properties.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="194">the password, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="190">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rm_protocol"
              c:identifier="mm_bearer_properties_get_rm_protocol">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="327">Gets the RM protocol requested to use in the CDMA connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="333">a #MMModemCdmaRmProtocol.</doc>
          <type name="ModemCdmaRmProtocol" c:type="MMModemCdmaRmProtocol"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="329">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="mm_bearer_properties_get_user">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="153">Gets the username used to authenticate with the access point.</doc>
        <source-position filename="mm-bearer-properties.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-properties.c"
               line="159">the username, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="155">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_roaming"
              c:identifier="mm_bearer_properties_set_allow_roaming">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="240">Sets the flag to indicate whether roaming is allowed or not in the
connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="242">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="allow_roaming" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="243">boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allowed_auth"
              c:identifier="mm_bearer_properties_set_allowed_auth">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="102">Sets the authentication method to use.</doc>
        <source-position filename="mm-bearer-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="104">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="allowed_auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="105">a bitmask of #MMBearerAllowedAuth values. %MM_BEARER_ALLOWED_AUTH_UNKNOWN may be given to request the modem-default method.</doc>
            <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apn" c:identifier="mm_bearer_properties_set_apn">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="67">Sets the name of the access point to use when connecting.</doc>
        <source-position filename="mm-bearer-properties.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="69">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="apn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="70">Name of the access point.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip_type"
              c:identifier="mm_bearer_properties_set_ip_type">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="206">Sets the IP type to use.</doc>
        <source-position filename="mm-bearer-properties.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="208">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="ip_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="209">a #MMBearerIpFamily.</doc>
            <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number" c:identifier="mm_bearer_properties_set_number">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="276">Sets the number to use when performing the connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="278">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="279">the number.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="mm_bearer_properties_set_password">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="171">Sets the password used to authenticate with the access point.</doc>
        <source-position filename="mm-bearer-properties.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="173">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="174">the password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rm_protocol"
              c:identifier="mm_bearer_properties_set_rm_protocol">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="311">Sets the RM protocol to use in the CDMA connection.</doc>
        <source-position filename="mm-bearer-properties.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="313">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="314">a #MMModemCdmaRmProtocol.</doc>
            <type name="ModemCdmaRmProtocol" c:type="MMModemCdmaRmProtocol"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="mm_bearer_properties_set_user">
        <doc xml:space="preserve"
             filename="mm-bearer-properties.c"
             line="136">Sets the username used to authenticate with the access point.</doc>
        <source-position filename="mm-bearer-properties.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="138">a #MMBearerProperties.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-properties.c"
                 line="139">the username</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BearerPropertiesPrivate"
              c:type="MMBearerPropertiesPrivate*"/>
      </field>
    </class>
    <record name="BearerPropertiesClass"
            c:type="MMBearerPropertiesClass"
            glib:is-gtype-struct-for="BearerProperties">
      <source-position filename="mm-bearer-properties.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BearerPropertiesPrivate"
            c:type="MMBearerPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-bearer-properties.h" line="37"/>
    </record>
    <class name="BearerStats"
           c:symbol-prefix="bearer_stats"
           c:type="MMBearerStats"
           parent="GObject.Object"
           glib:type-name="MMBearerStats"
           glib:get-type="mm_bearer_stats_get_type"
           glib:type-struct="BearerStatsClass">
      <doc xml:space="preserve"
           filename="mm-bearer-stats.h"
           line="41">The #MMBearerStats structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-bearer-stats.h" line="56"/>
      <constructor name="new" c:identifier="mm_bearer_stats_new">
        <source-position filename="mm-bearer-stats.h" line="71"/>
        <return-value transfer-ownership="full">
          <type name="BearerStats" c:type="MMBearerStats*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_bearer_stats_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-bearer-stats.h" line="72"/>
        <return-value transfer-ownership="full">
          <type name="BearerStats" c:type="MMBearerStats*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary"
              c:identifier="mm_bearer_stats_get_dictionary">
        <source-position filename="mm-bearer-stats.h" line="79"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration" c:identifier="mm_bearer_stats_get_duration">
        <doc xml:space="preserve"
             filename="mm-bearer-stats.c"
             line="49">Gets the duration of the current connection, in seconds.</doc>
        <source-position filename="mm-bearer-stats.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-stats.c"
               line="55">a #guint.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-stats.c"
                 line="51">a #MMBearerStats.</doc>
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rx_bytes" c:identifier="mm_bearer_stats_get_rx_bytes">
        <doc xml:space="preserve"
             filename="mm-bearer-stats.c"
             line="76">Gets the number of bytes received without error in the connection.</doc>
        <source-position filename="mm-bearer-stats.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-stats.c"
               line="82">a #guint64.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-stats.c"
                 line="78">a #MMBearerStats.</doc>
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tx_bytes" c:identifier="mm_bearer_stats_get_tx_bytes">
        <doc xml:space="preserve"
             filename="mm-bearer-stats.c"
             line="103">Gets the number of bytes transmitted without error in the connection.</doc>
        <source-position filename="mm-bearer-stats.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-bearer-stats.c"
               line="109">a #guint64.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-bearer-stats.c"
                 line="105">a #MMBearerStats.</doc>
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_duration" c:identifier="mm_bearer_stats_set_duration">
        <source-position filename="mm-bearer-stats.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rx_bytes" c:identifier="mm_bearer_stats_set_rx_bytes">
        <source-position filename="mm-bearer-stats.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
          <parameter name="rx_bytes" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tx_bytes" c:identifier="mm_bearer_stats_set_tx_bytes">
        <source-position filename="mm-bearer-stats.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BearerStats" c:type="MMBearerStats*"/>
          </instance-parameter>
          <parameter name="tx_bytes" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BearerStatsPrivate" c:type="MMBearerStatsPrivate*"/>
      </field>
    </class>
    <record name="BearerStatsClass"
            c:type="MMBearerStatsClass"
            glib:is-gtype-struct-for="BearerStats">
      <source-position filename="mm-bearer-stats.h" line="56"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="BearerStatsPrivate"
            c:type="MMBearerStatsPrivate"
            disguised="1">
      <source-position filename="mm-bearer-stats.h" line="39"/>
    </record>
    <enumeration name="BearerType"
                 glib:type-name="MMBearerType"
                 glib:get-type="mm_bearer_type_get_type"
                 c:type="MMBearerType">
      <member name="unknown"
              value="0"
              c:identifier="MM_BEARER_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="default"
              value="1"
              c:identifier="MM_BEARER_TYPE_DEFAULT"
              glib:nick="default">
      </member>
      <member name="default_attach"
              value="2"
              c:identifier="MM_BEARER_TYPE_DEFAULT_ATTACH"
              glib:nick="default-attach">
      </member>
      <member name="dedicated"
              value="3"
              c:identifier="MM_BEARER_TYPE_DEDICATED"
              glib:nick="dedicated">
      </member>
      <function name="get_string" c:identifier="mm_bearer_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2305">Gets the nickname string for the #MMBearerType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="322"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2311">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2307">a MMBearerType.</doc>
            <type name="BearerType" c:type="MMBearerType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <constant name="CALL_METHOD_ACCEPT"
              value="Accept"
              c:type="MM_CALL_METHOD_ACCEPT">
      <source-position filename="../include/ModemManager-names.h" line="133"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_METHOD_HANGUP"
              value="Hangup"
              c:type="MM_CALL_METHOD_HANGUP">
      <source-position filename="../include/ModemManager-names.h" line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_METHOD_SENDDTMF"
              value="SendDtmf"
              c:type="MM_CALL_METHOD_SENDDTMF">
      <source-position filename="../include/ModemManager-names.h" line="135"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_METHOD_START"
              value="Start"
              c:type="MM_CALL_METHOD_START">
      <source-position filename="../include/ModemManager-names.h" line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_AUDIOFORMAT"
              value="AudioFormat"
              c:type="MM_CALL_PROPERTY_AUDIOFORMAT">
      <source-position filename="../include/ModemManager-names.h" line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_AUDIOPORT"
              value="AudioPort"
              c:type="MM_CALL_PROPERTY_AUDIOPORT">
      <source-position filename="../include/ModemManager-names.h" line="142"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_DIRECTION"
              value="Direction"
              c:type="MM_CALL_PROPERTY_DIRECTION">
      <source-position filename="../include/ModemManager-names.h" line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_NUMBER"
              value="Number"
              c:type="MM_CALL_PROPERTY_NUMBER">
      <source-position filename="../include/ModemManager-names.h" line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_STATE"
              value="State"
              c:type="MM_CALL_PROPERTY_STATE">
      <source-position filename="../include/ModemManager-names.h" line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_PROPERTY_STATEREASON"
              value="StateReason"
              c:type="MM_CALL_PROPERTY_STATEREASON">
      <source-position filename="../include/ModemManager-names.h" line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_SIGNAL_DTMFRECEIVED"
              value="DtmfReceived"
              c:type="MM_CALL_SIGNAL_DTMFRECEIVED">
      <source-position filename="../include/ModemManager-names.h" line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CALL_SIGNAL_STATECHANGED"
              value="StateChanged"
              c:type="MM_CALL_SIGNAL_STATECHANGED">
      <source-position filename="../include/ModemManager-names.h" line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Call"
           c:symbol-prefix="call"
           c:type="MMCall"
           parent="Gio.DBusProxy"
           glib:type-name="MMCall"
           glib:get-type="mm_call_get_type"
           glib:type-struct="CallClass">
      <doc xml:space="preserve"
           filename="mm-call.h"
           line="44">The #MMCall structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-call.h" line="59"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <method name="accept" c:identifier="mm_call_accept">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="435">Asynchronously requests to accept the incoming call.

Call objects can only be executed once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_call_accept_finish() to get the result of the operation.

See mm_call_accept_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-call.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="437">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="438">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="439">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="440">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_finish"
              c:identifier="mm_call_accept_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="415">Finishes an operation started with mm_call_accept().</doc>
        <source-position filename="mm-call.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="423">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="417">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="418">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_call_accept().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_sync" c:identifier="mm_call_accept_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="465">Synchronously requests to accept the incoming call.

Call objects can only be sent once.

The calling thread is blocked until an incoming call is ready.
See mm_call_accept() for the asynchronous version of this method.</doc>
        <source-position filename="mm-call.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="478">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="467">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="468">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_audio_port" c:identifier="mm_call_dup_audio_port">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="204">Gets the kernel device used for audio (if any).</doc>
        <source-position filename="mm-call.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="210">The audio port, or %NULL if call audio is not
routed via the host or couldn't be retrieved.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="206">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_number" c:identifier="mm_call_dup_number">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="112">Gets the call number. In outgoing calls contains the dialing number or
the remote number in incoming calls</doc>
        <source-position filename="mm-call.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="119">The number, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="114">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_call_dup_path">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="65">Gets a copy of the DBus path of the #MMCall object.</doc>
        <source-position filename="mm-call.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="71">The DBus path of the #MMCall object. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="67">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_format" c:identifier="mm_call_get_audio_format">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="286">Gets a #MMCallAudioFormat object specifying the audio format used by the
audio port if call audio is routed via the host.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_call_get_audio_format() again to get a new #MMCallAudioFormat with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-call.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="298">A #MMCallAudioFormat that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="288">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_port" c:identifier="mm_call_get_audio_port">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="186">Gets the kernel device used for audio (if any).</doc>
        <source-position filename="mm-call.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="192">The audio port, or %NULL if call audio is not
routed via the host or couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="188">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction" c:identifier="mm_call_get_direction">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="132">Gets the call direction.</doc>
        <source-position filename="mm-call.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="138">a #MMCallDirection.</doc>
          <type name="CallDirection" c:type="MMCallDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="134">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="mm_call_get_number">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="89">Gets the call number. In outgoing calls contains the dialing number or
the remote number in incoming calls

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_call_dup_number() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-call.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="101">The number, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="91">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_call_get_path">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="48">Gets the DBus path of the #MMCall object.</doc>
        <source-position filename="mm-call.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="54">The DBus path of the #MMCall object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="50">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_call_get_state">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="150">Gets the current state of call.</doc>
        <source-position filename="mm-call.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="156">a #MMCallState.</doc>
          <type name="CallState" c:type="MMCallState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="152">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_reason" c:identifier="mm_call_get_state_reason">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="168">Gets the reason of why the call changes its state.</doc>
        <source-position filename="mm-call.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="174">a #MMCallStateReason.</doc>
          <type name="CallStateReason" c:type="MMCallStateReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="170">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hangup" c:identifier="mm_call_hangup">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="514">Asynchronously requests to hangup the call.

Call objects can only be executed once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_call_hangup_finish() to get the result of the operation.

See mm_call_hangup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-call.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="516">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="517">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="518">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="519">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="hangup_finish"
              c:identifier="mm_call_hangup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="494">Finishes an operation started with mm_call_hangup().</doc>
        <source-position filename="mm-call.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="502">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="496">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="497">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_call_hangup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hangup_sync" c:identifier="mm_call_hangup_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="544">Synchronously requests to hangup the call.

Call objects can only be sent once.

The calling thread is blocked until an incoming call is ready.
See mm_call_hangup() for the asynchronous version of this method.</doc>
        <source-position filename="mm-call.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="557">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="546">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="547">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_audio_format"
              c:identifier="mm_call_peek_audio_format">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="311">Gets a #MMCallAudioFormat object specifying the audio format used by the
audio port if call audio is routed via the host.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_call_get_audio_format() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-call.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="323">A #MMCallAudioFormat. Do not free the returned value, it belongs to @self.</doc>
          <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="313">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_dtmf" c:identifier="mm_call_send_dtmf">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="593">Asynchronously requests to send a DTMF tone the call.

Call objects can only be executed once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_call_send_dtmf_finish() to get the result of the operation.

See mm_call_send_dtmf_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-call.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="595">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="dtmf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="596">the DMTF tone.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="597">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="598">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="599">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_dtmf_finish"
              c:identifier="mm_call_send_dtmf_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="573">Finishes an operation started with mm_call_send_dtmf().</doc>
        <source-position filename="mm-call.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="581">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="575">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="576">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_call_send_dtmf().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_dtmf_sync"
              c:identifier="mm_call_send_dtmf_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="626">Synchronously requests to send a DTMF tone the call.

Call objects can only be sent once.

The calling thread is blocked until an incoming call is ready.
See mm_call_send_dtmf() for the asynchronous version of this method.</doc>
        <source-position filename="mm-call.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="640">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="628">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="dtmf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="629">the DMTF tone.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="630">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="mm_call_start">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="356">Asynchronously requests to queue the call.

Call objects can only be executed once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_call_start_finish() to get the result of the operation.

See mm_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-call.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="358">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="360">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="361">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="mm_call_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="336">Finishes an operation started with mm_call_start().</doc>
        <source-position filename="mm-call.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="344">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="338">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="339">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_sync" c:identifier="mm_call_start_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-call.c"
             line="386">Synchronously requests to queue the call for delivery.

Call objects can only be sent once.

The calling thread is blocked until a reply is received.
See mm_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="mm-call.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call.c"
               line="399">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="388">A #MMCall.</doc>
            <type name="Call" c:type="MMCall*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-call.c"
                 line="389">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" introspectable="0" readable="0" private="1">
        <type c:type="MmGdbusCallProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallPrivate" c:type="MMCallPrivate*"/>
      </field>
    </class>
    <class name="CallAudioFormat"
           c:symbol-prefix="call_audio_format"
           c:type="MMCallAudioFormat"
           parent="GObject.Object"
           glib:type-name="MMCallAudioFormat"
           glib:get-type="mm_call_audio_format_get_type"
           glib:type-struct="CallAudioFormatClass">
      <doc xml:space="preserve"
           filename="mm-call-audio-format.h"
           line="39">The #MMCallAudioFormat structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-call-audio-format.h" line="54"/>
      <constructor name="new" c:identifier="mm_call_audio_format_new">
        <source-position filename="mm-call-audio-format.h" line="69"/>
        <return-value transfer-ownership="full">
          <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_call_audio_format_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-call-audio-format.h" line="70"/>
        <return-value transfer-ownership="full">
          <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="mm_call_audio_format_dup">
        <doc xml:space="preserve"
             filename="mm-call-audio-format.c"
             line="215">Creates a copy of @orig.</doc>
        <source-position filename="mm-call-audio-format.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call-audio-format.c"
               line="221">a newly created #MMCallAudioFormat</doc>
          <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-audio-format.c"
                 line="217">a #MMCallAudioFormat</doc>
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_call_audio_format_get_dictionary">
        <source-position filename="mm-call-audio-format.h" line="82"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding"
              c:identifier="mm_call_audio_format_get_encoding">
        <doc xml:space="preserve"
             filename="mm-call-audio-format.c"
             line="47">Gets the encoding of the audio format.  For example, "pcm" for PCM-encoded
audio.</doc>
        <source-position filename="mm-call-audio-format.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-audio-format.c"
               line="54">a string with the encoding, or #NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-audio-format.c"
                 line="49">a #MMCallAudioFormat.</doc>
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate" c:identifier="mm_call_audio_format_get_rate">
        <doc xml:space="preserve"
             filename="mm-call-audio-format.c"
             line="105">Gets the sampling rate of the audio format.  For example, 8000 for an 8000hz
sampling rate.</doc>
        <source-position filename="mm-call-audio-format.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-audio-format.c"
               line="112">the sampling rate, or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-audio-format.c"
                 line="107">a #MMCallAudioFormat.</doc>
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution"
              c:identifier="mm_call_audio_format_get_resolution">
        <doc xml:space="preserve"
             filename="mm-call-audio-format.c"
             line="76">Gets the resolution of the audio format.  For example, "s16le" for signed
16-bit little-endian audio sampling resolution.</doc>
        <source-position filename="mm-call-audio-format.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-audio-format.c"
               line="83">a string with the resolution, or #NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-audio-format.c"
                 line="78">a #MMCallAudioFormat.</doc>
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_encoding"
              c:identifier="mm_call_audio_format_set_encoding">
        <source-position filename="mm-call-audio-format.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate" c:identifier="mm_call_audio_format_set_rate">
        <source-position filename="mm-call-audio-format.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolution"
              c:identifier="mm_call_audio_format_set_resolution">
        <source-position filename="mm-call-audio-format.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallAudioFormat" c:type="MMCallAudioFormat*"/>
          </instance-parameter>
          <parameter name="resolution" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallAudioFormatPrivate"
              c:type="MMCallAudioFormatPrivate*"/>
      </field>
    </class>
    <record name="CallAudioFormatClass"
            c:type="MMCallAudioFormatClass"
            glib:is-gtype-struct-for="CallAudioFormat">
      <source-position filename="mm-call-audio-format.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CallAudioFormatPrivate"
            c:type="MMCallAudioFormatPrivate"
            disguised="1">
      <source-position filename="mm-call-audio-format.h" line="37"/>
    </record>
    <record name="CallClass"
            c:type="MMCallClass"
            glib:is-gtype-struct-for="Call">
      <source-position filename="mm-call.h" line="59"/>
      <field name="parent" introspectable="0" readable="0" private="1">
        <type c:type="MmGdbusCallProxyClass"/>
      </field>
    </record>
    <enumeration name="CallDirection"
                 glib:type-name="MMCallDirection"
                 glib:get-type="mm_call_direction_get_type"
                 c:type="MMCallDirection">
      <member name="unknown"
              value="0"
              c:identifier="MM_CALL_DIRECTION_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="incoming"
              value="1"
              c:identifier="MM_CALL_DIRECTION_INCOMING"
              glib:nick="incoming">
      </member>
      <member name="outgoing"
              value="2"
              c:identifier="MM_CALL_DIRECTION_OUTGOING"
              glib:nick="outgoing">
      </member>
      <function name="get_string" c:identifier="mm_call_direction_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4325">Gets the nickname string for the #MMCallDirection specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="622"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4331">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="4327">a MMCallDirection.</doc>
            <type name="CallDirection" c:type="MMCallDirection"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="CallPrivate" c:type="MMCallPrivate" disguised="1">
      <source-position filename="mm-call.h" line="42"/>
    </record>
    <class name="CallProperties"
           c:symbol-prefix="call_properties"
           c:type="MMCallProperties"
           parent="GObject.Object"
           glib:type-name="MMCallProperties"
           glib:get-type="mm_call_properties_get_type"
           glib:type-struct="CallPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-call-properties.h"
           line="39">The #MMCallProperties structure contains private data and should only be
accessed using the provided API.</doc>
      <source-position filename="mm-call-properties.h" line="54"/>
      <constructor name="new" c:identifier="mm_call_properties_new">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="434">Creates a new empty #MMCallProperties.</doc>
        <source-position filename="mm-call-properties.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="439">a #MMCallProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="CallProperties" c:type="MMCallProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_call_properties_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-call-properties.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="CallProperties" c:type="MMCallProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_call_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-call-properties.h" line="81"/>
        <return-value transfer-ownership="full">
          <type name="CallProperties" c:type="MMCallProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="mm_call_properties_dup">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="407">Returns a copy of @orig.</doc>
        <source-position filename="mm-call-properties.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="413">a #MMCallProperties</doc>
          <type name="CallProperties" c:type="MMCallProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="409">a #MMCallProperties</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_call_properties_get_dictionary">
        <source-position filename="mm-call-properties.h" line="88"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction"
              c:identifier="mm_call_properties_get_direction">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="104">Gets the call direction.</doc>
        <source-position filename="mm-call-properties.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="110">the call direction.</doc>
          <type name="CallDirection" c:type="MMCallDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="106">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="mm_call_properties_get_number">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="70">Gets the number, in UTF-8.</doc>
        <source-position filename="mm-call-properties.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="76">the call number, or %NULL if it doesn't contain any (anonymous caller). Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="72">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_call_properties_get_state">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="138">Gets the call state.</doc>
        <source-position filename="mm-call-properties.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="144">the call state.</doc>
          <type name="CallState" c:type="MMCallState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="140">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_reason"
              c:identifier="mm_call_properties_get_state_reason">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="172">Gets the call state reason.</doc>
        <source-position filename="mm-call-properties.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-call-properties.c"
               line="178">the call state reason.</doc>
          <type name="CallStateReason" c:type="MMCallStateReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="174">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_direction"
              c:identifier="mm_call_properties_set_direction">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="88">Sets the call direction</doc>
        <source-position filename="mm-call-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="90">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="91">the call direction</doc>
            <type name="CallDirection" c:type="MMCallDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number" c:identifier="mm_call_properties_set_number">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="53">Sets the call number.</doc>
        <source-position filename="mm-call-properties.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="55">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="56">The number to set, in UTF-8.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state" c:identifier="mm_call_properties_set_state">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="122">Sets the call state</doc>
        <source-position filename="mm-call-properties.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="124">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="125">the call state</doc>
            <type name="CallState" c:type="MMCallState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state_reason"
              c:identifier="mm_call_properties_set_state_reason">
        <doc xml:space="preserve"
             filename="mm-call-properties.c"
             line="156">Sets the call state reason</doc>
        <source-position filename="mm-call-properties.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="158">A #MMCallProperties.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </instance-parameter>
          <parameter name="state_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-call-properties.c"
                 line="159">the call state_reason</doc>
            <type name="CallStateReason" c:type="MMCallStateReason"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallPropertiesPrivate" c:type="MMCallPropertiesPrivate*"/>
      </field>
    </class>
    <record name="CallPropertiesClass"
            c:type="MMCallPropertiesClass"
            glib:is-gtype-struct-for="CallProperties">
      <source-position filename="mm-call-properties.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CallPropertiesPrivate"
            c:type="MMCallPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-call-properties.h" line="37"/>
    </record>
    <enumeration name="CallState"
                 glib:type-name="MMCallState"
                 glib:get-type="mm_call_state_get_type"
                 c:type="MMCallState">
      <member name="unknown"
              value="0"
              c:identifier="MM_CALL_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="dialing"
              value="1"
              c:identifier="MM_CALL_STATE_DIALING"
              glib:nick="dialing">
      </member>
      <member name="ringing_out"
              value="2"
              c:identifier="MM_CALL_STATE_RINGING_OUT"
              glib:nick="ringing-out">
      </member>
      <member name="ringing_in"
              value="3"
              c:identifier="MM_CALL_STATE_RINGING_IN"
              glib:nick="ringing-in">
      </member>
      <member name="active"
              value="4"
              c:identifier="MM_CALL_STATE_ACTIVE"
              glib:nick="active">
      </member>
      <member name="held"
              value="5"
              c:identifier="MM_CALL_STATE_HELD"
              glib:nick="held">
      </member>
      <member name="waiting"
              value="6"
              c:identifier="MM_CALL_STATE_WAITING"
              glib:nick="waiting">
      </member>
      <member name="terminated"
              value="7"
              c:identifier="MM_CALL_STATE_TERMINATED"
              glib:nick="terminated">
      </member>
      <function name="get_string" c:identifier="mm_call_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4124">Gets the nickname string for the #MMCallState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="592"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4130">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="4126">a MMCallState.</doc>
            <type name="CallState" c:type="MMCallState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="CallStateReason"
                 glib:type-name="MMCallStateReason"
                 glib:get-type="mm_call_state_reason_get_type"
                 c:type="MMCallStateReason">
      <member name="unknown"
              value="0"
              c:identifier="MM_CALL_STATE_REASON_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="outgoing_started"
              value="1"
              c:identifier="MM_CALL_STATE_REASON_OUTGOING_STARTED"
              glib:nick="outgoing-started">
      </member>
      <member name="incoming_new"
              value="2"
              c:identifier="MM_CALL_STATE_REASON_INCOMING_NEW"
              glib:nick="incoming-new">
      </member>
      <member name="accepted"
              value="3"
              c:identifier="MM_CALL_STATE_REASON_ACCEPTED"
              glib:nick="accepted">
      </member>
      <member name="terminated"
              value="4"
              c:identifier="MM_CALL_STATE_REASON_TERMINATED"
              glib:nick="terminated">
      </member>
      <member name="refused_or_busy"
              value="5"
              c:identifier="MM_CALL_STATE_REASON_REFUSED_OR_BUSY"
              glib:nick="refused-or-busy">
      </member>
      <member name="error"
              value="6"
              c:identifier="MM_CALL_STATE_REASON_ERROR"
              glib:nick="error">
      </member>
      <member name="audio_setup_failed"
              value="7"
              c:identifier="MM_CALL_STATE_REASON_AUDIO_SETUP_FAILED"
              glib:nick="audio-setup-failed">
      </member>
      <function name="get_string"
                c:identifier="mm_call_state_reason_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4227">Gets the nickname string for the #MMCallStateReason specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="607"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4233">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="4229">a MMCallStateReason.</doc>
            <type name="CallStateReason" c:type="MMCallStateReason"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="CdmaActivationError"
                 glib:type-name="MMCdmaActivationError"
                 glib:get-type="mm_cdma_activation_error_get_type"
                 c:type="MMCdmaActivationError"
                 glib:error-domain="mm_cdma_activation_error_quark">
      <member name="None"
              value="0"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_NONE"
              glib:nick="None">
      </member>
      <member name="Unknown"
              value="1"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_UNKNOWN"
              glib:nick="Unknown">
      </member>
      <member name="Roaming"
              value="2"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_ROAMING"
              glib:nick="Roaming">
      </member>
      <member name="WrongRadioInterface"
              value="3"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_WRONG_RADIO_INTERFACE"
              glib:nick="WrongRadioInterface">
      </member>
      <member name="CouldNotConnect"
              value="4"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_COULD_NOT_CONNECT"
              glib:nick="CouldNotConnect">
      </member>
      <member name="SecurityAuthenticationFailed"
              value="5"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_SECURITY_AUTHENTICATION_FAILED"
              glib:nick="SecurityAuthenticationFailed">
      </member>
      <member name="ProvisioningFailed"
              value="6"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_PROVISIONING_FAILED"
              glib:nick="ProvisioningFailed">
      </member>
      <member name="NoSignal"
              value="7"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_NO_SIGNAL"
              glib:nick="NoSignal">
      </member>
      <member name="TimedOut"
              value="8"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_TIMED_OUT"
              glib:nick="TimedOut">
      </member>
      <member name="StartFailed"
              value="9"
              c:identifier="MM_CDMA_ACTIVATION_ERROR_START_FAILED"
              glib:nick="StartFailed">
      </member>
      <function name="quark" c:identifier="mm_cdma_activation_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="CdmaManualActivationProperties"
           c:symbol-prefix="cdma_manual_activation_properties"
           c:type="MMCdmaManualActivationProperties"
           parent="GObject.Object"
           glib:type-name="MMCdmaManualActivationProperties"
           glib:get-type="mm_cdma_manual_activation_properties_get_type"
           glib:type-struct="CdmaManualActivationPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-cdma-manual-activation-properties.h"
           line="39">The #MMCdmaManualActivationProperties structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-cdma-manual-activation-properties.h"
                       line="54"/>
      <constructor name="new"
                   c:identifier="mm_cdma_manual_activation_properties_new">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="835">Creates a new #MMCdmaManualActivationProperties object.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="840">A #MMCdmaManualActivationProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="CdmaManualActivationProperties"
                c:type="MMCdmaManualActivationProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_cdma_manual_activation_properties_new_from_dictionary"
                   throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="662">Creates a new #MMCdmaManualActivationProperties object with the properties exposed in
the dictionary.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="670">A #MMCdmaManualActivationProperties or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="CdmaManualActivationProperties"
                c:type="MMCdmaManualActivationProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="664">A variant dictionary with the properties of the image.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_cdma_manual_activation_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="103"/>
        <return-value transfer-ownership="full">
          <type name="CdmaManualActivationProperties"
                c:type="MMCdmaManualActivationProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary"
              c:identifier="mm_cdma_manual_activation_properties_get_dictionary">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="528">Gets a variant dictionary with the contents of @self.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="534">A dictionary with the properties. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="530">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdn"
              c:identifier="mm_cdma_manual_activation_properties_get_mdn">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="160">Gets the Mobile Directory Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="166">The MDN. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="162">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_min"
              c:identifier="mm_cdma_manual_activation_properties_get_min">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="219">Gets the Mobile Indentification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="225">The MIN. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="221">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mn_aaa_key"
              c:identifier="mm_cdma_manual_activation_properties_get_mn_aaa_key">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="337">Gets the MN-AAA key.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="343">The MN-AAA key. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="339">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mn_ha_key"
              c:identifier="mm_cdma_manual_activation_properties_get_mn_ha_key">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="278">Gets the MN-HA key.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="284">The MN-HA key. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="280">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prl"
              c:identifier="mm_cdma_manual_activation_properties_get_prl">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="396">Gets the Preferred Roaming List.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="403">The PRL. Do not free the returned value, it is owned by @self.</doc>
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="398">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="prl_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="399">Size of the returned PRL.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_prl_bytearray"
              c:identifier="mm_cdma_manual_activation_properties_get_prl_bytearray">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="433">Gets the Preferred Roaming List.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="439">A #GByteArray with the PRL, or %NULL if it doesn't contain any. The returned value should be freed with g_byte_array_unref().</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="435">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sid"
              c:identifier="mm_cdma_manual_activation_properties_get_sid">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="126">Gets the System Identification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="132">The SID.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="128">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spc"
              c:identifier="mm_cdma_manual_activation_properties_get_spc">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="55">Gets the Service Programming Code.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="61">The SPC. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="57">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_prl_bytearray"
              c:identifier="mm_cdma_manual_activation_properties_peek_prl_bytearray">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="417">Gets the Preferred Roaming List.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="423">A #GByteArray with the PRL, or %NULL if it doesn't contain any. Do not free the returned value, it is owned by @self.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="419">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mdn"
              c:identifier="mm_cdma_manual_activation_properties_set_mdn"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="192">Sets the Mobile Directory Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="200">%TRUE if the MDN was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="194">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="mdn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="195">The MDN string, maximum 15 characters.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min"
              c:identifier="mm_cdma_manual_activation_properties_set_min"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="251">Sets the Mobile Identification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="259">%TRUE if the MIN was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="253">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="min" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="254">The MIN string, maximum 15 characters.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mn_aaa_key"
              c:identifier="mm_cdma_manual_activation_properties_set_mn_aaa_key"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="369">Sets the Mobile Identification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="377">%TRUE if the MN-AAA key was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="371">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="mn_aaa_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="372">The MN-AAA key string, maximum 16 characters.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mn_ha_key"
              c:identifier="mm_cdma_manual_activation_properties_set_mn_ha_key"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="310">Sets the Mobile Identification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="318">%TRUE if the MN-HA key was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="312">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="mn_ha_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="313">The MN-HA key string, maximum 16 characters.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prl"
              c:identifier="mm_cdma_manual_activation_properties_set_prl"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="465">Sets the Preferred Roaming List.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="474">%TRUE if the PRL was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="467">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="prl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="468">The PRL.</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="prl_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="469">Length of @prl.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prl_bytearray"
              c:identifier="mm_cdma_manual_activation_properties_set_prl_bytearray"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="499">Sets the Preferred Roaming List.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="507">%TRUE if the PRL was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="501">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="prl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="502">A #GByteArray with the PRL to set. This method takes a new reference of @prl.</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_sid"
              c:identifier="mm_cdma_manual_activation_properties_set_sid">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="142">Sets the Service Identification Number.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="144">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="sid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="145">The SID.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spc"
              c:identifier="mm_cdma_manual_activation_properties_set_spc"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-cdma-manual-activation-properties.c"
             line="99">Sets the Service Programming Code.</doc>
        <source-position filename="mm-cdma-manual-activation-properties.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-cdma-manual-activation-properties.c"
               line="107">%TRUE if the SPC was successfully set, or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="101">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </instance-parameter>
          <parameter name="spc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-cdma-manual-activation-properties.c"
                 line="102">The SPC string, exactly 6 digits.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CdmaManualActivationPropertiesPrivate"
              c:type="MMCdmaManualActivationPropertiesPrivate*"/>
      </field>
    </class>
    <record name="CdmaManualActivationPropertiesClass"
            c:type="MMCdmaManualActivationPropertiesClass"
            glib:is-gtype-struct-for="CdmaManualActivationProperties">
      <source-position filename="mm-cdma-manual-activation-properties.h"
                       line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="CdmaManualActivationPropertiesPrivate"
            c:type="MMCdmaManualActivationPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-cdma-manual-activation-properties.h"
                       line="37"/>
    </record>
    <enumeration name="ConnectionError"
                 glib:type-name="MMConnectionError"
                 glib:get-type="mm_connection_error_get_type"
                 c:type="MMConnectionError"
                 glib:error-domain="mm_connection_error_quark">
      <member name="Unknown"
              value="0"
              c:identifier="MM_CONNECTION_ERROR_UNKNOWN"
              glib:nick="Unknown">
      </member>
      <member name="NoCarrier"
              value="1"
              c:identifier="MM_CONNECTION_ERROR_NO_CARRIER"
              glib:nick="NoCarrier">
      </member>
      <member name="NoDialtone"
              value="2"
              c:identifier="MM_CONNECTION_ERROR_NO_DIALTONE"
              glib:nick="NoDialtone">
      </member>
      <member name="Busy"
              value="3"
              c:identifier="MM_CONNECTION_ERROR_BUSY"
              glib:nick="Busy">
      </member>
      <member name="NoAnswer"
              value="4"
              c:identifier="MM_CONNECTION_ERROR_NO_ANSWER"
              glib:nick="NoAnswer">
      </member>
      <function name="quark" c:identifier="mm_connection_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="CoreError"
                 glib:type-name="MMCoreError"
                 glib:get-type="mm_core_error_get_type"
                 c:type="MMCoreError"
                 glib:error-domain="mm_core_error_quark">
      <member name="Failed"
              value="0"
              c:identifier="MM_CORE_ERROR_FAILED"
              glib:nick="Failed">
      </member>
      <member name="Cancelled"
              value="1"
              c:identifier="MM_CORE_ERROR_CANCELLED"
              glib:nick="Cancelled">
      </member>
      <member name="Aborted"
              value="2"
              c:identifier="MM_CORE_ERROR_ABORTED"
              glib:nick="Aborted">
      </member>
      <member name="Unsupported"
              value="3"
              c:identifier="MM_CORE_ERROR_UNSUPPORTED"
              glib:nick="Unsupported">
      </member>
      <member name="NoPlugins"
              value="4"
              c:identifier="MM_CORE_ERROR_NO_PLUGINS"
              glib:nick="NoPlugins">
      </member>
      <member name="Unauthorized"
              value="5"
              c:identifier="MM_CORE_ERROR_UNAUTHORIZED"
              glib:nick="Unauthorized">
      </member>
      <member name="InvalidArgs"
              value="6"
              c:identifier="MM_CORE_ERROR_INVALID_ARGS"
              glib:nick="InvalidArgs">
      </member>
      <member name="InProgress"
              value="7"
              c:identifier="MM_CORE_ERROR_IN_PROGRESS"
              glib:nick="InProgress">
      </member>
      <member name="WrongState"
              value="8"
              c:identifier="MM_CORE_ERROR_WRONG_STATE"
              glib:nick="WrongState">
      </member>
      <member name="Connected"
              value="9"
              c:identifier="MM_CORE_ERROR_CONNECTED"
              glib:nick="Connected">
      </member>
      <member name="TooMany"
              value="10"
              c:identifier="MM_CORE_ERROR_TOO_MANY"
              glib:nick="TooMany">
      </member>
      <member name="NotFound"
              value="11"
              c:identifier="MM_CORE_ERROR_NOT_FOUND"
              glib:nick="NotFound">
      </member>
      <member name="Retry"
              value="12"
              c:identifier="MM_CORE_ERROR_RETRY"
              glib:nick="Retry">
      </member>
      <member name="Exists"
              value="13"
              c:identifier="MM_CORE_ERROR_EXISTS"
              glib:nick="Exists">
      </member>
      <function name="quark" c:identifier="mm_core_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <constant name="DBUS_ERROR_PREFIX"
              value="org.freedesktop.ModemManager1.Error"
              c:type="MM_DBUS_ERROR_PREFIX">
      <source-position filename="../include/ModemManager-names.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE"
              value="org.freedesktop.ModemManager1"
              c:type="MM_DBUS_INTERFACE">
      <source-position filename="../include/ModemManager-names.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_BEARER"
              value="org.freedesktop.ModemManager1.Bearer"
              c:type="MM_DBUS_INTERFACE_BEARER">
      <source-position filename="../include/ModemManager-names.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_CALL"
              value="org.freedesktop.ModemManager1.Call"
              c:type="MM_DBUS_INTERFACE_CALL">
      <source-position filename="../include/ModemManager-names.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM"
              value="org.freedesktop.ModemManager1.Modem"
              c:type="MM_DBUS_INTERFACE_MODEM">
      <source-position filename="../include/ModemManager-names.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_FIRMWARE"
              value="org.freedesktop.ModemManager1.Modem.Firmware"
              c:type="MM_DBUS_INTERFACE_MODEM_FIRMWARE">
      <source-position filename="../include/ModemManager-names.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_LOCATION"
              value="org.freedesktop.ModemManager1.Modem.Location"
              c:type="MM_DBUS_INTERFACE_MODEM_LOCATION">
      <source-position filename="../include/ModemManager-names.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_MESSAGING"
              value="org.freedesktop.ModemManager1.Modem.Messaging"
              c:type="MM_DBUS_INTERFACE_MODEM_MESSAGING">
      <source-position filename="../include/ModemManager-names.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_MODEM3GPP"
              value="org.freedesktop.ModemManager1.Modem.Modem3gpp"
              c:type="MM_DBUS_INTERFACE_MODEM_MODEM3GPP">
      <source-position filename="../include/ModemManager-names.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_MODEM3GPP_USSD"
              value="org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd"
              c:type="MM_DBUS_INTERFACE_MODEM_MODEM3GPP_USSD">
      <source-position filename="../include/ModemManager-names.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_MODEMCDMA"
              value="org.freedesktop.ModemManager1.Modem.ModemCdma"
              c:type="MM_DBUS_INTERFACE_MODEM_MODEMCDMA">
      <source-position filename="../include/ModemManager-names.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_OMA"
              value="org.freedesktop.ModemManager1.Modem.Oma"
              c:type="MM_DBUS_INTERFACE_MODEM_OMA">
      <source-position filename="../include/ModemManager-names.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_SIGNAL"
              value="org.freedesktop.ModemManager1.Modem.Signal"
              c:type="MM_DBUS_INTERFACE_MODEM_SIGNAL">
      <source-position filename="../include/ModemManager-names.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_TIME"
              value="org.freedesktop.ModemManager1.Modem.Time"
              c:type="MM_DBUS_INTERFACE_MODEM_TIME">
      <source-position filename="../include/ModemManager-names.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_MODEM_VOICE"
              value="org.freedesktop.ModemManager1.Modem.Voice"
              c:type="MM_DBUS_INTERFACE_MODEM_VOICE">
      <source-position filename="../include/ModemManager-names.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_SIM"
              value="org.freedesktop.ModemManager1.Sim"
              c:type="MM_DBUS_INTERFACE_SIM">
      <source-position filename="../include/ModemManager-names.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_INTERFACE_SMS"
              value="org.freedesktop.ModemManager1.Sms"
              c:type="MM_DBUS_INTERFACE_SMS">
      <source-position filename="../include/ModemManager-names.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_PATH"
              value="/org/freedesktop/ModemManager1"
              c:type="MM_DBUS_PATH">
      <source-position filename="../include/ModemManager-names.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DBUS_SERVICE"
              value="org.freedesktop.ModemManager1"
              c:type="MM_DBUS_SERVICE">
      <source-position filename="../include/ModemManager-names.h" line="34"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="FirmwareImageType"
                 glib:type-name="MMFirmwareImageType"
                 glib:get-type="mm_firmware_image_type_get_type"
                 c:type="MMFirmwareImageType">
      <member name="unknown"
              value="0"
              c:identifier="MM_FIRMWARE_IMAGE_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="generic"
              value="1"
              c:identifier="MM_FIRMWARE_IMAGE_TYPE_GENERIC"
              glib:nick="generic">
      </member>
      <member name="gobi"
              value="2"
              c:identifier="MM_FIRMWARE_IMAGE_TYPE_GOBI"
              glib:nick="gobi">
      </member>
      <function name="get_string"
                c:identifier="mm_firmware_image_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3611">Gets the nickname string for the #MMFirmwareImageType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="517"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3617">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3613">a MMFirmwareImageType.</doc>
            <type name="FirmwareImageType" c:type="MMFirmwareImageType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="FirmwareProperties"
           c:symbol-prefix="firmware_properties"
           c:type="MMFirmwareProperties"
           parent="GObject.Object"
           glib:type-name="MMFirmwareProperties"
           glib:get-type="mm_firmware_properties_get_type"
           glib:type-struct="FirmwarePropertiesClass">
      <doc xml:space="preserve"
           filename="mm-firmware-properties.h"
           line="39">The #MMFirmwareProperties structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-firmware-properties.h" line="54"/>
      <constructor name="new" c:identifier="mm_firmware_properties_new">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="423">Creates a new #MMFirmwareProperties object with the properties specified.</doc>
        <source-position filename="mm-firmware-properties.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="430">A #MMFirmwareProperties or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
        </return-value>
        <parameters>
          <parameter name="image_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="425">A #MMFirmwareImageType specifying the type of the image.</doc>
            <type name="FirmwareImageType" c:type="MMFirmwareImageType"/>
          </parameter>
          <parameter name="unique_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="426">The unique ID of the image.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_firmware_properties_new_from_dictionary"
                   throws="1">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="349">Creates a new #MMFirmwareProperties object with the properties exposed in
the dictionary.</doc>
        <source-position filename="mm-firmware-properties.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="357">A #MMFirmwareProperties or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="351">A variant dictionary with the properties of the image.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary"
              c:identifier="mm_firmware_properties_get_dictionary">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="245">Gets a variant dictionary with the contents of @self.</doc>
        <source-position filename="mm-firmware-properties.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="251">A dictionary with the image properties. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="247">A #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gobi_boot_version"
              c:identifier="mm_firmware_properties_get_gobi_boot_version">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="155">Gets the boot version of a firmware image of type %MM_FIRMWARE_IMAGE_TYPE_GOBI.</doc>
        <source-position filename="mm-firmware-properties.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="161">The boot version, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="157">a #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gobi_modem_unique_id"
              c:identifier="mm_firmware_properties_get_gobi_modem_unique_id">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="215">Gets the MODEM unique ID of a firmware image of type %MM_FIRMWARE_IMAGE_TYPE_GOBI.</doc>
        <source-position filename="mm-firmware-properties.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="221">The PRI unique ID, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="217">a #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gobi_pri_info"
              c:identifier="mm_firmware_properties_get_gobi_pri_info">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="127">Gets the PRI info of a firmware image of type %MM_FIRMWARE_IMAGE_TYPE_GOBI.</doc>
        <source-position filename="mm-firmware-properties.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="133">The PRI info, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="129">a #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gobi_pri_unique_id"
              c:identifier="mm_firmware_properties_get_gobi_pri_unique_id">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="185">Gets the PRI unique ID of a firmware image of type %MM_FIRMWARE_IMAGE_TYPE_GOBI.</doc>
        <source-position filename="mm-firmware-properties.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="191">The PRI unique ID, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="187">a #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gobi_pri_version"
              c:identifier="mm_firmware_properties_get_gobi_pri_version">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="97">Gets the PRI version of a firmware image of type %MM_FIRMWARE_IMAGE_TYPE_GOBI.</doc>
        <source-position filename="mm-firmware-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="103">The PRI version, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="99">a #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image_type"
              c:identifier="mm_firmware_properties_get_image_type">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="79">Gets the type of the firmare image.</doc>
        <source-position filename="mm-firmware-properties.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="85">A #MMFirmwareImageType specifying The type of the image.</doc>
          <type name="FirmwareImageType" c:type="MMFirmwareImageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="81">A #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unique_id"
              c:identifier="mm_firmware_properties_get_unique_id">
        <doc xml:space="preserve"
             filename="mm-firmware-properties.c"
             line="61">Gets the unique ID of the firmare image.</doc>
        <source-position filename="mm-firmware-properties.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-firmware-properties.c"
               line="67">The ID of the image. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-firmware-properties.c"
                 line="63">A #MMFirmwareProperties.</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gobi_boot_version"
              c:identifier="mm_firmware_properties_set_gobi_boot_version">
        <source-position filename="mm-firmware-properties.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gobi_modem_unique_id"
              c:identifier="mm_firmware_properties_set_gobi_modem_unique_id">
        <source-position filename="mm-firmware-properties.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gobi_pri_info"
              c:identifier="mm_firmware_properties_set_gobi_pri_info">
        <source-position filename="mm-firmware-properties.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gobi_pri_unique_id"
              c:identifier="mm_firmware_properties_set_gobi_pri_unique_id">
        <source-position filename="mm-firmware-properties.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gobi_pri_version"
              c:identifier="mm_firmware_properties_set_gobi_pri_version">
        <source-position filename="mm-firmware-properties.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FirmwareProperties" c:type="MMFirmwareProperties*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FirmwarePropertiesPrivate"
              c:type="MMFirmwarePropertiesPrivate*"/>
      </field>
    </class>
    <record name="FirmwarePropertiesClass"
            c:type="MMFirmwarePropertiesClass"
            glib:is-gtype-struct-for="FirmwareProperties">
      <source-position filename="mm-firmware-properties.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FirmwarePropertiesPrivate"
            c:type="MMFirmwarePropertiesPrivate"
            disguised="1">
      <source-position filename="mm-firmware-properties.h" line="37"/>
    </record>
    <interface name="GdbusBearer"
               c:symbol-prefix="gdbus_bearer"
               c:type="MmGdbusBearer"
               glib:type-name="MmGdbusBearer"
               glib:get-type="mm_gdbus_bearer_get_type"
               glib:type-struct="GdbusBearerIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="385">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="59"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_bearer_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="345">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="350">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_bearer_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="358">Overrides all #GObject properties in the #MmGdbusBearer interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="366">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="360">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="361">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_bearer_type"
                      invoker="get_bearer_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="841">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.BearerType"&gt;"BearerType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="849">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="843">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_connected"
                      invoker="get_connected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="595">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Connected"&gt;"Connected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="603">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="597">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_interface"
                      invoker="get_interface"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="544">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Interface"&gt;"Interface"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_interface() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="554">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="546">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ip4_config"
                      invoker="get_ip4_config"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="657">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip4Config"&gt;"Ip4Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_ip4_config() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="659">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ip6_config"
                      invoker="get_ip6_config"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="708">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip6Config"&gt;"Ip6Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_ip6_config() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="718">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="710">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ip_timeout"
                      invoker="get_ip_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="810">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.IpTimeout"&gt;"IpTimeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="818">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="812">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_properties"
                      invoker="get_properties"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="872">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Properties"&gt;"Properties"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_properties() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="882">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="874">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stats" invoker="get_stats" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="759">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Stats"&gt;"Stats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_stats() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="769">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="761">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_suspended"
                      invoker="get_suspended"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="626">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Suspended"&gt;"Suspended"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="634">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="628">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_connect">
        <source-position filename="generated/mm-gdbus-bearer.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_disconnect">
        <source-position filename="generated/mm-gdbus-bearer.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_connect" c:identifier="mm_gdbus_bearer_call_connect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="923">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_bearer_call_connect_finish() to get the result of the operation.

See mm_gdbus_bearer_call_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="925">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="926">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="927">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="928">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_finish"
              c:identifier="mm_gdbus_bearer_call_connect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="953">Finishes an operation started with mm_gdbus_bearer_call_connect().</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="85"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="961">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="955">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="956">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_bearer_call_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_sync"
              c:identifier="mm_gdbus_bearer_call_connect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="980">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_bearer_call_connect() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="90"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="990">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="982">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="983">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect"
              c:identifier="mm_gdbus_bearer_call_disconnect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1015">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_bearer_call_disconnect_finish() to get the result of the operation.

See mm_gdbus_bearer_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1017">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1018">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1019">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1020">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="mm_gdbus_bearer_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1045">Finishes an operation started with mm_gdbus_bearer_call_disconnect().</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="101"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1053">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1047">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1048">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_bearer_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="mm_gdbus_bearer_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1072">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_bearer_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="106"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1082">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1074">A #MmGdbusBearerProxy.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1075">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_connect"
              c:identifier="mm_gdbus_bearer_complete_connect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1107">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Connect"&gt;Connect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1109">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1110">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="mm_gdbus_bearer_complete_disconnect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1125">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1127">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1128">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_interface"
              c:identifier="mm_gdbus_bearer_dup_interface"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="562">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Interface"&gt;"Interface"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="570">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="564">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ip4_config"
              c:identifier="mm_gdbus_bearer_dup_ip4_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="675">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip4Config"&gt;"Ip4Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="683">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="677">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ip6_config"
              c:identifier="mm_gdbus_bearer_dup_ip6_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="726">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip6Config"&gt;"Ip6Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="129"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="734">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="728">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_properties"
              c:identifier="mm_gdbus_bearer_dup_properties"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="890">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Properties"&gt;"Properties"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="898">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="892">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_stats"
              c:identifier="mm_gdbus_bearer_dup_stats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="777">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Stats"&gt;"Stats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="785">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="779">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bearer_type"
              c:identifier="mm_gdbus_bearer_get_bearer_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="841">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.BearerType"&gt;"BearerType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="849">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="843">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connected"
              c:identifier="mm_gdbus_bearer_get_connected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="595">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Connected"&gt;"Connected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="603">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="597">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="mm_gdbus_bearer_get_interface"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="544">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Interface"&gt;"Interface"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_interface() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="554">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="546">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip4_config"
              c:identifier="mm_gdbus_bearer_get_ip4_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="657">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip4Config"&gt;"Ip4Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_ip4_config() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="659">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_config"
              c:identifier="mm_gdbus_bearer_get_ip6_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="708">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip6Config"&gt;"Ip6Config"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_ip6_config() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="718">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="710">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_timeout"
              c:identifier="mm_gdbus_bearer_get_ip_timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="810">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.IpTimeout"&gt;"IpTimeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="818">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="812">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_properties"
              c:identifier="mm_gdbus_bearer_get_properties"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="872">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Properties"&gt;"Properties"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_properties() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="882">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="874">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stats"
              c:identifier="mm_gdbus_bearer_get_stats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="759">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Stats"&gt;"Stats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_bearer_dup_stats() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="769">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="761">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suspended"
              c:identifier="mm_gdbus_bearer_get_suspended"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="626">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Suspended"&gt;"Suspended"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="634">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="628">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bearer_type"
              c:identifier="mm_gdbus_bearer_set_bearer_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="857">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.BearerType"&gt;"BearerType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="859">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="860">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connected"
              c:identifier="mm_gdbus_bearer_set_connected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="611">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Connected"&gt;"Connected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="613">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="614">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interface"
              c:identifier="mm_gdbus_bearer_set_interface"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="580">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Interface"&gt;"Interface"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="582">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="583">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip4_config"
              c:identifier="mm_gdbus_bearer_set_ip4_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="693">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip4Config"&gt;"Ip4Config"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="695">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="696">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip6_config"
              c:identifier="mm_gdbus_bearer_set_ip6_config"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="744">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip6Config"&gt;"Ip6Config"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="746">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="747">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip_timeout"
              c:identifier="mm_gdbus_bearer_set_ip_timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="826">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.IpTimeout"&gt;"IpTimeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="828">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="829">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_properties"
              c:identifier="mm_gdbus_bearer_set_properties"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="908">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Properties"&gt;"Properties"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="910">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="911">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stats"
              c:identifier="mm_gdbus_bearer_set_stats"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="795">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Stats"&gt;"Stats"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="797">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="798">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_suspended"
              c:identifier="mm_gdbus_bearer_set_suspended"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="642">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Suspended"&gt;"Suspended"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="644">A #MmGdbusBearer.</doc>
            <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="645">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="bearer-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="524">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.BearerType"&gt;"BearerType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="connected" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="470">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Connected"&gt;"Connected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interface" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="461">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Interface"&gt;"Interface"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip-timeout" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="515">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.IpTimeout"&gt;"IpTimeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ip4-config" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="488">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip4Config"&gt;"Ip4Config"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="ip6-config" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="497">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Ip6Config"&gt;"Ip6Config"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="properties" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="533">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Properties"&gt;"Properties"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="stats" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="506">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Stats"&gt;"Stats"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="suspended" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="479">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Bearer.Suspended"&gt;"Suspended"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-connect" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="416">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Connect"&gt;Connect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_bearer_complete_connect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="425">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="419">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="438">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Bearer.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_bearer_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="447">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="441">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusBearerIface"
            c:type="MmGdbusBearerIface"
            glib:is-gtype-struct-for="GdbusBearer">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="391">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="59"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="393">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_connect">
        <callback name="handle_connect">
          <source-position filename="generated/mm-gdbus-bearer.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="generated/mm-gdbus-bearer.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bearer_type">
        <callback name="get_bearer_type">
          <source-position filename="generated/mm-gdbus-bearer.h" line="41"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="849">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="843">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connected">
        <callback name="get_connected">
          <source-position filename="generated/mm-gdbus-bearer.h" line="43"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="603">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="597">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_interface">
        <callback name="get_interface">
          <source-position filename="generated/mm-gdbus-bearer.h" line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="554">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="546">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ip4_config">
        <callback name="get_ip4_config">
          <source-position filename="generated/mm-gdbus-bearer.h" line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="659">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ip6_config">
        <callback name="get_ip6_config">
          <source-position filename="generated/mm-gdbus-bearer.h" line="49"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="718">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="710">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ip_timeout">
        <callback name="get_ip_timeout">
          <source-position filename="generated/mm-gdbus-bearer.h" line="51"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="818">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="812">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_properties">
        <callback name="get_properties">
          <source-position filename="generated/mm-gdbus-bearer.h" line="53"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="882">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="874">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stats">
        <callback name="get_stats">
          <source-position filename="generated/mm-gdbus-bearer.h" line="55"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="769">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="761">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_suspended">
        <callback name="get_suspended">
          <source-position filename="generated/mm-gdbus-bearer.h" line="57"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="634">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-bearer.c"
                   line="628">A #MmGdbusBearer.</doc>
              <type name="GdbusBearer" c:type="MmGdbusBearer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusBearerProxy"
           c:symbol-prefix="gdbus_bearer_proxy"
           c:type="MmGdbusBearerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusBearerProxy"
           glib:get-type="mm_gdbus_bearer_proxy_get_type"
           glib:type-struct="GdbusBearerProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="1145">The #MmGdbusBearerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="170"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusBearer"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_bearer_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1525">Finishes an operation started with mm_gdbus_bearer_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1532">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusBearerProxy" c:type="MmGdbusBearer*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1527">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_bearer_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_bearer_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1615">Finishes an operation started with mm_gdbus_bearer_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1622">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusBearerProxy" c:type="MmGdbusBearer*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1617">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_bearer_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_bearer_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1640">Like mm_gdbus_bearer_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_bearer_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1655">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusBearerProxy" c:type="MmGdbusBearer*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1642">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1643">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1644">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1645">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1646">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_bearer_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1550">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_bearer_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="1565">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusBearerProxy" c:type="MmGdbusBearer*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1552">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1553">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1554">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1555">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1556">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_bearer_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1495">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_bearer_proxy_new_finish() to get the result of the operation.

See mm_gdbus_bearer_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1497">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1498">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1499">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1500">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1502">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1503">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_bearer_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1585">Like mm_gdbus_bearer_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_bearer_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_bearer_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1587">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1588">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1589">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1590">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1591">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1592">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-bearer.c"
                 line="1593">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusBearerProxyPrivate"
              c:type="MmGdbusBearerProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusBearerProxyClass"
            c:type="MmGdbusBearerProxyClass"
            glib:is-gtype-struct-for="GdbusBearerProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="1151">Class structure for #MmGdbusBearerProxy.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="170"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1153">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusBearerProxyPrivate"
            c:type="MmGdbusBearerProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-bearer.h" line="158"/>
    </record>
    <class name="GdbusBearerSkeleton"
           c:symbol-prefix="gdbus_bearer_skeleton"
           c:type="MmGdbusBearerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusBearerSkeleton"
           glib:get-type="mm_gdbus_bearer_skeleton_get_type"
           glib:type-struct="GdbusBearerSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="1677">The #MmGdbusBearerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="240"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusBearer"/>
      <constructor name="new" c:identifier="mm_gdbus_bearer_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="2231">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-bearer.h" line="248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="2236">The skeleton object.</doc>
          <type name="GdbusBearerSkeleton" c:type="MmGdbusBearer*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusBearerSkeletonPrivate"
              c:type="MmGdbusBearerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusBearerSkeletonClass"
            c:type="MmGdbusBearerSkeletonClass"
            glib:is-gtype-struct-for="GdbusBearerSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="1683">Class structure for #MmGdbusBearerSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="240"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="1685">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusBearerSkeletonPrivate"
            c:type="MmGdbusBearerSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-bearer.h" line="228"/>
    </record>
    <interface name="GdbusModem"
               c:symbol-prefix="gdbus_modem"
               c:type="MmGdbusModem"
               glib:type-name="MmGdbusModem"
               glib:get-type="mm_gdbus_modem_get_type"
               glib:type-struct="GdbusModemIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="1100">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="154"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1039">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1044">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1052">Overrides all #GObject properties in the #MmGdbusModem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1060">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1054">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1055">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_access_technologies"
                      invoker="get_access_technologies"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2660">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.AccessTechnologies"&gt;"AccessTechnologies"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2668">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2662">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bearers"
                      invoker="get_bearers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1760">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Bearers"&gt;"Bearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_bearers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1770">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1762">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_current_bands"
                      invoker="get_current_bands"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2977">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentBands"&gt;"CurrentBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_current_bands() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2987">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2979">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_current_capabilities"
                      invoker="get_current_capabilities"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentCapabilities"&gt;"CurrentCapabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1870">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1864">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_current_modes"
                      invoker="get_current_modes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2875">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentModes"&gt;"CurrentModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_current_modes() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2885">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2877">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device"
                      invoker="get_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2210">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_device() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2220">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2212">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device_identifier"
                      invoker="get_device_identifier"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2159">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.DeviceIdentifier"&gt;"DeviceIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_device_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2161">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_drivers"
                      invoker="get_drivers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2261">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Drivers"&gt;"Drivers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_drivers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2271">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2263">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_equipment_identifier"
                      invoker="get_equipment_identifier"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.EquipmentIdentifier"&gt;"EquipmentIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_equipment_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2467">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hardware_revision"
                      invoker="get_hardware_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2108">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.HardwareRevision"&gt;"HardwareRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_hardware_revision() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2118">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2110">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_manufacturer"
                      invoker="get_manufacturer"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1955">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Manufacturer"&gt;"Manufacturer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_manufacturer() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1965">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1957">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_max_active_bearers"
                      invoker="get_max_active_bearers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxActiveBearers"&gt;"MaxActiveBearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1932">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1926">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_max_bearers"
                      invoker="get_max_bearers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1893">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxBearers"&gt;"MaxBearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1901">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1895">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2006">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2016">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2008">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_own_numbers"
                      invoker="get_own_numbers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2742">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.OwnNumbers"&gt;"OwnNumbers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_own_numbers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2752">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2744">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_plugin"
                      invoker="get_plugin"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2312">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Plugin"&gt;"Plugin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_plugin() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2322">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2314">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ports" invoker="get_ports" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Ports"&gt;"Ports"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_ports() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2416">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_power_state"
                      invoker="get_power_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2793">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PowerState"&gt;"PowerState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2801">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2795">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_primary_port"
                      invoker="get_primary_port"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PrimaryPort"&gt;"PrimaryPort"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_primary_port() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2365">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_revision"
                      invoker="get_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2057">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_revision() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2059">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_signal_quality"
                      invoker="get_signal_quality"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2691">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SignalQuality"&gt;"SignalQuality"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_signal_quality() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2701">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2693">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sim" invoker="get_sim" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1709">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Sim"&gt;"Sim"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_sim() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1719">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1711">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2598">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2606">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2600">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state_failed_reason"
                      invoker="get_state_failed_reason"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2629">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.StateFailedReason"&gt;"StateFailedReason"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2637">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2631">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_bands"
                      invoker="get_supported_bands"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2926">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedBands"&gt;"SupportedBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_bands() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2936">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2928">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_capabilities"
                      invoker="get_supported_capabilities"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1811">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedCapabilities"&gt;"SupportedCapabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_capabilities() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1813">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_ip_families"
                      invoker="get_supported_ip_families"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedIpFamilies"&gt;"SupportedIpFamilies"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3036">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3030">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_modes"
                      invoker="get_supported_modes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2824">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedModes"&gt;"SupportedModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_modes() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2826">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_unlock_required"
                      invoker="get_unlock_required"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2516">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRequired"&gt;"UnlockRequired"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2524">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2518">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_unlock_retries"
                      invoker="get_unlock_retries"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRetries"&gt;"UnlockRetries"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_unlock_retries() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2549">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_command">
        <source-position filename="generated/mm-gdbus-modem.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_cmd" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timeout" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_bearer">
        <source-position filename="generated/mm-gdbus-modem.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete_bearer">
        <source-position filename="generated/mm-gdbus-modem.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable">
        <source-position filename="generated/mm-gdbus-modem.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_factory_reset">
        <source-position filename="generated/mm-gdbus-modem.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_code" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_list_bearers">
        <source-position filename="generated/mm-gdbus-modem.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_reset">
        <source-position filename="generated/mm-gdbus-modem.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_current_bands">
        <source-position filename="generated/mm-gdbus-modem.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_bands" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_current_capabilities">
        <source-position filename="generated/mm-gdbus-modem.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_capabilities" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_current_modes">
        <source-position filename="generated/mm-gdbus-modem.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_modes" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_power_state">
        <source-position filename="generated/mm-gdbus-modem.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_state" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <source-position filename="generated/mm-gdbus-modem.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_old" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_command" c:identifier="mm_gdbus_modem_call_command">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4058">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Command"&gt;Command()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_command_finish() to get the result of the operation.

See mm_gdbus_modem_call_command_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4060">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4061">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4062">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4063">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4064">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4065">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_command_finish"
              c:identifier="mm_gdbus_modem_call_command_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4094">Finishes an operation started with mm_gdbus_modem_call_command().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="410"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="4103">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4096">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4097">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4098">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_command().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_command_sync"
              c:identifier="mm_gdbus_modem_call_command_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4124">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Command"&gt;Command()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_command() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="416"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="4137">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4126">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4127">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4128">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4129">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4130">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_bearer"
              c:identifier="mm_gdbus_modem_call_create_bearer">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3274">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_create_bearer_finish() to get the result of the operation.

See mm_gdbus_modem_call_create_bearer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3276">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3277">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3278">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3279">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3280">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_bearer_finish"
              c:identifier="mm_gdbus_modem_call_create_bearer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3307">Finishes an operation started with mm_gdbus_modem_call_create_bearer().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="265"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3316">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3309">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3310">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3311">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_create_bearer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_bearer_sync"
              c:identifier="mm_gdbus_modem_call_create_bearer_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3337">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_create_bearer() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="271"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3349">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3339">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3340">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3341">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3342">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_bearer"
              c:identifier="mm_gdbus_modem_call_delete_bearer">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3378">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.DeleteBearer"&gt;DeleteBearer()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_delete_bearer_finish() to get the result of the operation.

See mm_gdbus_modem_call_delete_bearer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3380">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3381">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3382">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3383">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3384">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_bearer_finish"
              c:identifier="mm_gdbus_modem_call_delete_bearer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3411">Finishes an operation started with mm_gdbus_modem_call_delete_bearer().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="285"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3419">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3413">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3414">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_delete_bearer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_bearer_sync"
              c:identifier="mm_gdbus_modem_call_delete_bearer_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3438">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.DeleteBearer"&gt;DeleteBearer()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_delete_bearer() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="290"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3449">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3440">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3441">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3442">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable" c:identifier="mm_gdbus_modem_call_enable">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3078">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Enable"&gt;Enable()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_enable_finish() to get the result of the operation.

See mm_gdbus_modem_call_enable_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3080">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3081">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3082">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3083">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3084">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_finish"
              c:identifier="mm_gdbus_modem_call_enable_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3111">Finishes an operation started with mm_gdbus_modem_call_enable().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="229"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3119">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3113">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3114">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_enable().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_sync"
              c:identifier="mm_gdbus_modem_call_enable_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3138">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Enable"&gt;Enable()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_enable() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="234"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3149">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3140">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3141">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3142">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_factory_reset"
              c:identifier="mm_gdbus_modem_call_factory_reset">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3568">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.FactoryReset"&gt;FactoryReset()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_factory_reset_finish() to get the result of the operation.

See mm_gdbus_modem_call_factory_reset_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3570">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3571">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3572">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3573">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3574">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_factory_reset_finish"
              c:identifier="mm_gdbus_modem_call_factory_reset_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3601">Finishes an operation started with mm_gdbus_modem_call_factory_reset().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="319"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3609">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3603">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3604">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_factory_reset().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_factory_reset_sync"
              c:identifier="mm_gdbus_modem_call_factory_reset_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3628">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.FactoryReset"&gt;FactoryReset()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_factory_reset() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="324"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3639">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3630">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3631">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3632">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_bearers"
              c:identifier="mm_gdbus_modem_call_list_bearers">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3176">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.ListBearers"&gt;ListBearers()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_list_bearers_finish() to get the result of the operation.

See mm_gdbus_modem_call_list_bearers_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3178">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3179">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3180">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3181">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_bearers_finish"
              c:identifier="mm_gdbus_modem_call_list_bearers_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3206">Finishes an operation started with mm_gdbus_modem_call_list_bearers().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="246"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3215">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3208">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="out_bearers"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3209">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3210">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_list_bearers().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_bearers_sync"
              c:identifier="mm_gdbus_modem_call_list_bearers_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3236">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.ListBearers"&gt;ListBearers()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_list_bearers() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="252"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3247">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3238">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="out_bearers"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3239">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3240">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reset" c:identifier="mm_gdbus_modem_call_reset">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3476">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Reset"&gt;Reset()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_reset_finish() to get the result of the operation.

See mm_gdbus_modem_call_reset_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3478">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3479">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3480">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3481">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reset_finish"
              c:identifier="mm_gdbus_modem_call_reset_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3506">Finishes an operation started with mm_gdbus_modem_call_reset().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="302"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3514">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3508">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3509">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_reset().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reset_sync"
              c:identifier="mm_gdbus_modem_call_reset_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3533">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Reset"&gt;Reset()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_reset() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="307"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3543">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3535">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_bands"
              c:identifier="mm_gdbus_modem_call_set_current_bands">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3960">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentBands"&gt;SetCurrentBands()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_set_current_bands_finish() to get the result of the operation.

See mm_gdbus_modem_call_set_current_bands_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3962">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3963">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3964">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3965">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3966">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_bands_finish"
              c:identifier="mm_gdbus_modem_call_set_current_bands_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3993">Finishes an operation started with mm_gdbus_modem_call_set_current_bands().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="391"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="4001">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3995">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3996">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_set_current_bands().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_bands_sync"
              c:identifier="mm_gdbus_modem_call_set_current_bands_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4020">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentBands"&gt;SetCurrentBands()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_set_current_bands() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="396"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="4031">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4022">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4023">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4024">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_capabilities"
              c:identifier="mm_gdbus_modem_call_set_current_capabilities">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3764">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentCapabilities"&gt;SetCurrentCapabilities()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_set_current_capabilities_finish() to get the result of the operation.

See mm_gdbus_modem_call_set_current_capabilities_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="348"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3766">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3767">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3768">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3769">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3770">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_capabilities_finish"
              c:identifier="mm_gdbus_modem_call_set_current_capabilities_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3797">Finishes an operation started with mm_gdbus_modem_call_set_current_capabilities().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="355"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3805">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3799">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_set_current_capabilities().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_capabilities_sync"
              c:identifier="mm_gdbus_modem_call_set_current_capabilities_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3824">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentCapabilities"&gt;SetCurrentCapabilities()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_set_current_capabilities() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="360"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3835">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3826">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3827">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3828">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_modes"
              c:identifier="mm_gdbus_modem_call_set_current_modes">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3862">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentModes"&gt;SetCurrentModes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_set_current_modes_finish() to get the result of the operation.

See mm_gdbus_modem_call_set_current_modes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="366"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3864">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3865">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3866">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3867">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3868">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_modes_finish"
              c:identifier="mm_gdbus_modem_call_set_current_modes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3895">Finishes an operation started with mm_gdbus_modem_call_set_current_modes().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="373"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3903">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3897">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3898">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_set_current_modes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_current_modes_sync"
              c:identifier="mm_gdbus_modem_call_set_current_modes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3922">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentModes"&gt;SetCurrentModes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_set_current_modes() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="378"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3933">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3924">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3925">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3926">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_power_state"
              c:identifier="mm_gdbus_modem_call_set_power_state">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3666">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetPowerState"&gt;SetPowerState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_call_set_power_state_finish() to get the result of the operation.

See mm_gdbus_modem_call_set_power_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3668">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3669">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3670">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3671">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3672">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_power_state_finish"
              c:identifier="mm_gdbus_modem_call_set_power_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3699">Finishes an operation started with mm_gdbus_modem_call_set_power_state().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="337"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3707">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3701">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3702">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_call_set_power_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_power_state_sync"
              c:identifier="mm_gdbus_modem_call_set_power_state_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3726">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetPowerState"&gt;SetPowerState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_call_set_power_state() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="342"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3737">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3728">A #MmGdbusModemProxy.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3729">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3730">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_command"
              c:identifier="mm_gdbus_modem_complete_command">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4354">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Command"&gt;Command()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4356">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4357">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4358">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_bearer"
              c:identifier="mm_gdbus_modem_complete_create_bearer">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4207">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4209">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4210">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4211">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete_bearer"
              c:identifier="mm_gdbus_modem_complete_delete_bearer">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4228">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.DeleteBearer"&gt;DeleteBearer()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4230">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4231">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable"
              c:identifier="mm_gdbus_modem_complete_enable">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4168">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Enable"&gt;Enable()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4170">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4171">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_factory_reset"
              c:identifier="mm_gdbus_modem_complete_factory_reset">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4264">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.FactoryReset"&gt;FactoryReset()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4266">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4267">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_list_bearers"
              c:identifier="mm_gdbus_modem_complete_list_bearers">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4186">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.ListBearers"&gt;ListBearers()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4188">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4189">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="bearers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4190">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_reset"
              c:identifier="mm_gdbus_modem_complete_reset">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4246">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Reset"&gt;Reset()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4248">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4249">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_current_bands"
              c:identifier="mm_gdbus_modem_complete_set_current_bands">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4336">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentBands"&gt;SetCurrentBands()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4338">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4339">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_current_capabilities"
              c:identifier="mm_gdbus_modem_complete_set_current_capabilities">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4300">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentCapabilities"&gt;SetCurrentCapabilities()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4302">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4303">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_current_modes"
              c:identifier="mm_gdbus_modem_complete_set_current_modes">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4318">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentModes"&gt;SetCurrentModes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4320">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4321">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_power_state"
              c:identifier="mm_gdbus_modem_complete_set_power_state">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4282">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetPowerState"&gt;SetPowerState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4284">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="4285">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_bearers"
              c:identifier="mm_gdbus_modem_dup_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1778">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Bearers"&gt;"Bearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="432"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1786">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1780">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_current_bands"
              c:identifier="mm_gdbus_modem_dup_current_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2995">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentBands"&gt;"CurrentBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="532"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3003">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2997">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_current_modes"
              c:identifier="mm_gdbus_modem_dup_current_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2893">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentModes"&gt;"CurrentModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="524"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2901">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2895">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device"
              c:identifier="mm_gdbus_modem_dup_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2228">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="469"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2236">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2230">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device_identifier"
              c:identifier="mm_gdbus_modem_dup_device_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2177">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.DeviceIdentifier"&gt;"DeviceIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="465"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2185">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2179">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drivers"
              c:identifier="mm_gdbus_modem_dup_drivers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2279">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Drivers"&gt;"Drivers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="473"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2287">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2281">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_equipment_identifier"
              c:identifier="mm_gdbus_modem_dup_equipment_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2483">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.EquipmentIdentifier"&gt;"EquipmentIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="489"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2491">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2485">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hardware_revision"
              c:identifier="mm_gdbus_modem_dup_hardware_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2126">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.HardwareRevision"&gt;"HardwareRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="461"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2134">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2128">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_manufacturer"
              c:identifier="mm_gdbus_modem_dup_manufacturer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1973">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Manufacturer"&gt;"Manufacturer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="449"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1981">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1975">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="mm_gdbus_modem_dup_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2024">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="453"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2032">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2026">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_own_numbers"
              c:identifier="mm_gdbus_modem_dup_own_numbers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2760">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.OwnNumbers"&gt;"OwnNumbers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="513"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2768">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2762">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_plugin"
              c:identifier="mm_gdbus_modem_dup_plugin"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2330">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Plugin"&gt;"Plugin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="477"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2338">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2332">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ports"
              c:identifier="mm_gdbus_modem_dup_ports"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2432">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Ports"&gt;"Ports"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="485"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2440">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2434">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_primary_port"
              c:identifier="mm_gdbus_modem_dup_primary_port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2381">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PrimaryPort"&gt;"PrimaryPort"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="481"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2389">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2383">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision"
              c:identifier="mm_gdbus_modem_dup_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2075">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2083">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2077">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_signal_quality"
              c:identifier="mm_gdbus_modem_dup_signal_quality"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2709">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SignalQuality"&gt;"SignalQuality"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="509"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2717">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2711">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sim"
              c:identifier="mm_gdbus_modem_dup_sim"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1727">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Sim"&gt;"Sim"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="428"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1735">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1729">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_bands"
              c:identifier="mm_gdbus_modem_dup_supported_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2944">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedBands"&gt;"SupportedBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="528"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2952">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2946">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_capabilities"
              c:identifier="mm_gdbus_modem_dup_supported_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1829">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedCapabilities"&gt;"SupportedCapabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="436"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1837">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1831">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_modes"
              c:identifier="mm_gdbus_modem_dup_supported_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2842">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedModes"&gt;"SupportedModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="520"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2850">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2844">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_unlock_retries"
              c:identifier="mm_gdbus_modem_dup_unlock_retries"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2565">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRetries"&gt;"UnlockRetries"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="496"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2573">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2567">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_state_changed"
              c:identifier="mm_gdbus_modem_emit_state_changed">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3059">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem.StateChanged"&gt;"StateChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3061">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="arg_old" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3062">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3063">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3064">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_access_technologies"
              c:identifier="mm_gdbus_modem_get_access_technologies"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2660">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.AccessTechnologies"&gt;"AccessTechnologies"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="505"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2668">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2662">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bearers"
              c:identifier="mm_gdbus_modem_get_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1760">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Bearers"&gt;"Bearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_bearers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="431"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1770">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1762">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_bands"
              c:identifier="mm_gdbus_modem_get_current_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2977">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentBands"&gt;"CurrentBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_current_bands() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2987">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2979">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_capabilities"
              c:identifier="mm_gdbus_modem_get_current_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentCapabilities"&gt;"CurrentCapabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="439"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1870">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1864">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_modes"
              c:identifier="mm_gdbus_modem_get_current_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2875">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentModes"&gt;"CurrentModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_current_modes() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="523"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2885">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2877">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="mm_gdbus_modem_get_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2210">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_device() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="468"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2220">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2212">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_identifier"
              c:identifier="mm_gdbus_modem_get_device_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2159">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.DeviceIdentifier"&gt;"DeviceIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_device_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="464"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2161">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drivers"
              c:identifier="mm_gdbus_modem_get_drivers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2261">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Drivers"&gt;"Drivers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_drivers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="472"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2271">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2263">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_equipment_identifier"
              c:identifier="mm_gdbus_modem_get_equipment_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.EquipmentIdentifier"&gt;"EquipmentIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_equipment_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="488"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2467">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hardware_revision"
              c:identifier="mm_gdbus_modem_get_hardware_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2108">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.HardwareRevision"&gt;"HardwareRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_hardware_revision() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="460"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2118">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2110">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer"
              c:identifier="mm_gdbus_modem_get_manufacturer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1955">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Manufacturer"&gt;"Manufacturer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_manufacturer() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="448"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1965">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1957">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_active_bearers"
              c:identifier="mm_gdbus_modem_get_max_active_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxActiveBearers"&gt;"MaxActiveBearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="445"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1932">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1926">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_bearers"
              c:identifier="mm_gdbus_modem_get_max_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1893">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxBearers"&gt;"MaxBearers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="442"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1901">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1895">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="mm_gdbus_modem_get_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2006">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="452"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2016">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2008">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_own_numbers"
              c:identifier="mm_gdbus_modem_get_own_numbers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2742">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.OwnNumbers"&gt;"OwnNumbers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_own_numbers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="512"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2752">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2744">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin"
              c:identifier="mm_gdbus_modem_get_plugin"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2312">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Plugin"&gt;"Plugin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_plugin() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="476"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2322">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2314">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ports"
              c:identifier="mm_gdbus_modem_get_ports"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Ports"&gt;"Ports"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_ports() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="484"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2416">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_power_state"
              c:identifier="mm_gdbus_modem_get_power_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2793">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PowerState"&gt;"PowerState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="516"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2801">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2795">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_port"
              c:identifier="mm_gdbus_modem_get_primary_port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PrimaryPort"&gt;"PrimaryPort"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_primary_port() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="480"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2365">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="mm_gdbus_modem_get_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2057">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_revision() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="456"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2059">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="mm_gdbus_modem_get_signal_quality"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2691">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SignalQuality"&gt;"SignalQuality"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_signal_quality() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="508"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2701">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2693">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sim"
              c:identifier="mm_gdbus_modem_get_sim"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1709">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Sim"&gt;"Sim"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_sim() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1719">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1711">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="mm_gdbus_modem_get_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2598">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="499"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2606">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2600">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_failed_reason"
              c:identifier="mm_gdbus_modem_get_state_failed_reason"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2629">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.StateFailedReason"&gt;"StateFailedReason"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="502"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2637">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2631">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_bands"
              c:identifier="mm_gdbus_modem_get_supported_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2926">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedBands"&gt;"SupportedBands"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_bands() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2936">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2928">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_capabilities"
              c:identifier="mm_gdbus_modem_get_supported_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1811">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedCapabilities"&gt;"SupportedCapabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_capabilities() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="435"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1813">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_ip_families"
              c:identifier="mm_gdbus_modem_get_supported_ip_families"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedIpFamilies"&gt;"SupportedIpFamilies"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="3036">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3030">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_modes"
              c:identifier="mm_gdbus_modem_get_supported_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2824">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedModes"&gt;"SupportedModes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_supported_modes() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2826">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unlock_required"
              c:identifier="mm_gdbus_modem_get_unlock_required"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2516">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRequired"&gt;"UnlockRequired"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="492"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2524">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2518">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unlock_retries"
              c:identifier="mm_gdbus_modem_get_unlock_retries"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRetries"&gt;"UnlockRetries"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_dup_unlock_retries() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="495"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="2557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2549">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_access_technologies"
              c:identifier="mm_gdbus_modem_set_access_technologies"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2676">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.AccessTechnologies"&gt;"AccessTechnologies"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="506"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2678">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2679">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bearers"
              c:identifier="mm_gdbus_modem_set_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1796">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Bearers"&gt;"Bearers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="433"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1798">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1799">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_bands"
              c:identifier="mm_gdbus_modem_set_current_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3013">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentBands"&gt;"CurrentBands"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="533"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3015">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3016">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_capabilities"
              c:identifier="mm_gdbus_modem_set_current_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1878">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentCapabilities"&gt;"CurrentCapabilities"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1880">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1881">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_modes"
              c:identifier="mm_gdbus_modem_set_current_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2911">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentModes"&gt;"CurrentModes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="525"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2913">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2914">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="mm_gdbus_modem_set_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2246">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Device"&gt;"Device"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2248">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2249">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_identifier"
              c:identifier="mm_gdbus_modem_set_device_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2195">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.DeviceIdentifier"&gt;"DeviceIdentifier"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2197">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2198">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drivers"
              c:identifier="mm_gdbus_modem_set_drivers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2297">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Drivers"&gt;"Drivers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="474"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2299">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2300">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_equipment_identifier"
              c:identifier="mm_gdbus_modem_set_equipment_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2501">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.EquipmentIdentifier"&gt;"EquipmentIdentifier"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="490"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2503">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2504">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hardware_revision"
              c:identifier="mm_gdbus_modem_set_hardware_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2144">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.HardwareRevision"&gt;"HardwareRevision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="462"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2146">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2147">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manufacturer"
              c:identifier="mm_gdbus_modem_set_manufacturer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1991">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Manufacturer"&gt;"Manufacturer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="450"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1993">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1994">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_active_bearers"
              c:identifier="mm_gdbus_modem_set_max_active_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1940">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxActiveBearers"&gt;"MaxActiveBearers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="446"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1942">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1943">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_bearers"
              c:identifier="mm_gdbus_modem_set_max_bearers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1909">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxBearers"&gt;"MaxBearers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="443"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1911">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1912">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="mm_gdbus_modem_set_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2042">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="454"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2044">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2045">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_own_numbers"
              c:identifier="mm_gdbus_modem_set_own_numbers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2778">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.OwnNumbers"&gt;"OwnNumbers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2780">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2781">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_plugin"
              c:identifier="mm_gdbus_modem_set_plugin"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2348">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Plugin"&gt;"Plugin"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="478"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2350">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2351">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ports"
              c:identifier="mm_gdbus_modem_set_ports"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2450">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Ports"&gt;"Ports"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2452">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2453">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_state"
              c:identifier="mm_gdbus_modem_set_power_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2809">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PowerState"&gt;"PowerState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="517"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2811">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2812">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary_port"
              c:identifier="mm_gdbus_modem_set_primary_port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2399">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PrimaryPort"&gt;"PrimaryPort"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="482"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2401">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2402">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="mm_gdbus_modem_set_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2093">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="458"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2095">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2096">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signal_quality"
              c:identifier="mm_gdbus_modem_set_signal_quality"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2727">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SignalQuality"&gt;"SignalQuality"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="510"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2729">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2730">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sim"
              c:identifier="mm_gdbus_modem_set_sim"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1745">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Sim"&gt;"Sim"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="429"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1747">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1748">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="mm_gdbus_modem_set_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2614">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="500"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2616">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2617">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state_failed_reason"
              c:identifier="mm_gdbus_modem_set_state_failed_reason"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2645">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.StateFailedReason"&gt;"StateFailedReason"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2647">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2648">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_bands"
              c:identifier="mm_gdbus_modem_set_supported_bands"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2962">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedBands"&gt;"SupportedBands"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2964">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2965">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_capabilities"
              c:identifier="mm_gdbus_modem_set_supported_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1847">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedCapabilities"&gt;"SupportedCapabilities"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1849">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1850">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_ip_families"
              c:identifier="mm_gdbus_modem_set_supported_ip_families"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="3044">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedIpFamilies"&gt;"SupportedIpFamilies"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3046">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3047">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_modes"
              c:identifier="mm_gdbus_modem_set_supported_modes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2860">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedModes"&gt;"SupportedModes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="521"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2862">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2863">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unlock_required"
              c:identifier="mm_gdbus_modem_set_unlock_required"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2532">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRequired"&gt;"UnlockRequired"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="493"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2534">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2535">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unlock_retries"
              c:identifier="mm_gdbus_modem_set_unlock_retries"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="2583">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRetries"&gt;"UnlockRetries"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="497"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2585">A #MmGdbusModem.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2586">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="access-technologies"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1626">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.AccessTechnologies"&gt;"AccessTechnologies"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="bearers" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1446">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Bearers"&gt;"Bearers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="current-bands" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1689">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentBands"&gt;"CurrentBands"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="current-capabilities"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1464">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentCapabilities"&gt;"CurrentCapabilities"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-modes" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1671">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.CurrentModes"&gt;"CurrentModes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="device" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1536">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Device"&gt;"Device"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-identifier"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1527">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.DeviceIdentifier"&gt;"DeviceIdentifier"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="drivers" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1545">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Drivers"&gt;"Drivers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="equipment-identifier"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1581">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.EquipmentIdentifier"&gt;"EquipmentIdentifier"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hardware-revision"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1518">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.HardwareRevision"&gt;"HardwareRevision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="manufacturer" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1491">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Manufacturer"&gt;"Manufacturer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="max-active-bearers"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1482">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxActiveBearers"&gt;"MaxActiveBearers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="max-bearers" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1473">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.MaxBearers"&gt;"MaxBearers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1500">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="own-numbers" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1644">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.OwnNumbers"&gt;"OwnNumbers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="plugin" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1554">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Plugin"&gt;"Plugin"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ports" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1572">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Ports"&gt;"Ports"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="power-state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1653">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PowerState"&gt;"PowerState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="primary-port" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1563">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.PrimaryPort"&gt;"PrimaryPort"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="revision" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1509">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Revision"&gt;"Revision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="signal-quality" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1635">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SignalQuality"&gt;"SignalQuality"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="sim" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1437">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.Sim"&gt;"Sim"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1608">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="state-failed-reason"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1617">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.StateFailedReason"&gt;"StateFailedReason"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="supported-bands" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1680">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedBands"&gt;"SupportedBands"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="supported-capabilities"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1455">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedCapabilities"&gt;"SupportedCapabilities"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="supported-ip-families"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1698">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedIpFamilies"&gt;"SupportedIpFamilies"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="supported-modes" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1662">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.SupportedModes"&gt;"SupportedModes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="unlock-required" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1590">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRequired"&gt;"UnlockRequired"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="unlock-retries" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1599">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem.UnlockRetries"&gt;"UnlockRetries"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="handle-command" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1390">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Command"&gt;Command()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_command() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1401">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1393">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1394">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1395">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-bearer" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1207">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_create_bearer() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1217">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1210">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1211">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete-bearer" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1230">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.DeleteBearer"&gt;DeleteBearer()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_delete_bearer() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1240">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1233">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1234">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1162">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Enable"&gt;Enable()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_enable() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1172">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1165">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1166">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-factory-reset" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1275">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.FactoryReset"&gt;FactoryReset()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_factory_reset() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1285">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1278">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1279">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-list-bearers" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1185">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.ListBearers"&gt;ListBearers()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_list_bearers() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1194">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1188">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-reset" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1253">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.Reset"&gt;Reset()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_reset() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1262">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1256">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-current-bands" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1367">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentBands"&gt;SetCurrentBands()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_set_current_bands() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1377">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1370">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1371">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-current-capabilities" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1321">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentCapabilities"&gt;SetCurrentCapabilities()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_set_current_capabilities() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1331">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1324">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1325">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-current-modes" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1344">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetCurrentModes"&gt;SetCurrentModes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_set_current_modes() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1354">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1347">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1348">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-power-state" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1298">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.SetPowerState"&gt;SetPowerState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_complete_set_power_state() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1308">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1301">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1302">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1415">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem.StateChanged"&gt;"StateChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_old" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1418">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1419">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1420">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="GdbusModem3gpp"
               c:symbol-prefix="gdbus_modem3gpp"
               c:type="MmGdbusModem3gpp"
               glib:type-name="MmGdbusModem3gpp"
               glib:get-type="mm_gdbus_modem3gpp_get_type"
               glib:type-struct="GdbusModem3gppIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="19323">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2423"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem3gpp_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19282">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19287">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem3gpp_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19295">Overrides all #GObject properties in the #MmGdbusModem3gpp interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2428"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19303">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19297">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19298">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_enabled_facility_locks"
                      invoker="get_enabled_facility_locks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EnabledFacilityLocks"&gt;"EnabledFacilityLocks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2403"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19733">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19727">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_eps_ue_mode_operation"
                      invoker="get_eps_ue_mode_operation"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19787">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EpsUeModeOperation"&gt;"EpsUeModeOperation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2405"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19795">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19789">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_imei" invoker="get_imei" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19541">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Imei"&gt;"Imei"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_imei() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2407"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19543">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_initial_eps_bearer"
                      invoker="get_initial_eps_bearer"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19869">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearer"&gt;"InitialEpsBearer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_initial_eps_bearer() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2409"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19879">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19871">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_initial_eps_bearer_settings"
                      invoker="get_initial_eps_bearer_settings"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19920">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearerSettings"&gt;"InitialEpsBearerSettings"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_initial_eps_bearer_settings() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2411"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19930">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19922">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operator_code"
                      invoker="get_operator_code"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19623">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorCode"&gt;"OperatorCode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_operator_code() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2413"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19633">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19625">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operator_name"
                      invoker="get_operator_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19674">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_operator_name() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2415"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19684">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19676">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pco" invoker="get_pco" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Pco"&gt;"Pco"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_pco() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2417"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19820">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_registration_state"
                      invoker="get_registration_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19592">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.RegistrationState"&gt;"RegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2419"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19600">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19594">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_subscription_state"
                      invoker="get_subscription_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19756">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.SubscriptionState"&gt;"SubscriptionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2421"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19764">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19758">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register">
        <source-position filename="generated/mm-gdbus-modem.h" line="2384"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_operator_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_scan">
        <source-position filename="generated/mm-gdbus-modem.h" line="2389"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_eps_ue_mode_operation">
        <source-position filename="generated/mm-gdbus-modem.h" line="2393"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_initial_eps_bearer_settings">
        <source-position filename="generated/mm-gdbus-modem.h" line="2398"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_settings" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_register"
              c:identifier="mm_gdbus_modem3gpp_call_register">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19971">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Register"&gt;Register()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_call_register_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_call_register_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19973">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_operator_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19974">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19975">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19976">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19977">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_finish"
              c:identifier="mm_gdbus_modem3gpp_call_register_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20004">Finishes an operation started with mm_gdbus_modem3gpp_call_register().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2459"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20012">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20006">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20007">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_call_register().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_sync"
              c:identifier="mm_gdbus_modem3gpp_call_register_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20031">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Register"&gt;Register()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_call_register() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2464"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20042">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20033">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_operator_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20034">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20035">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan" c:identifier="mm_gdbus_modem3gpp_call_scan">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20069">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Scan"&gt;Scan()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_call_scan_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_call_scan_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20071">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20072">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20073">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20074">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan_finish"
              c:identifier="mm_gdbus_modem3gpp_call_scan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20099">Finishes an operation started with mm_gdbus_modem3gpp_call_scan().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2476"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20108">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20101">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="out_results"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20102">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20103">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_call_scan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan_sync"
              c:identifier="mm_gdbus_modem3gpp_call_scan_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20129">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Scan"&gt;Scan()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_call_scan() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2482"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20140">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20131">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="out_results"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20132">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20133">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_eps_ue_mode_operation"
              c:identifier="mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20167">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetEpsUeModeOperation"&gt;SetEpsUeModeOperation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2488"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20169">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20170">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20171">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20172">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20173">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_eps_ue_mode_operation_finish"
              c:identifier="mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20200">Finishes an operation started with mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2495"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20208">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20202">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20203">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_eps_ue_mode_operation_sync"
              c:identifier="mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20227">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetEpsUeModeOperation"&gt;SetEpsUeModeOperation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_call_set_eps_ue_mode_operation() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2500"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20238">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20229">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20230">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20231">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initial_eps_bearer_settings"
              c:identifier="mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20265">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetInitialEpsBearerSettings"&gt;SetInitialEpsBearerSettings()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2506"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20267">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20268">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20269">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20270">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20271">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initial_eps_bearer_settings_finish"
              c:identifier="mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20298">Finishes an operation started with mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2513"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20306">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20300">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20301">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initial_eps_bearer_settings_sync"
              c:identifier="mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20325">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetInitialEpsBearerSettings"&gt;SetInitialEpsBearerSettings()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_call_set_initial_eps_bearer_settings() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2518"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20336">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20327">A #MmGdbusModem3gppProxy.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="arg_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20328">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20329">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register"
              c:identifier="mm_gdbus_modem3gpp_complete_register">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20363">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Register"&gt;Register()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2432"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20365">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20366">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_scan"
              c:identifier="mm_gdbus_modem3gpp_complete_scan">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20381">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Scan"&gt;Scan()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20383">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20384">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20385">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_eps_ue_mode_operation"
              c:identifier="mm_gdbus_modem3gpp_complete_set_eps_ue_mode_operation">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20402">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetEpsUeModeOperation"&gt;SetEpsUeModeOperation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2441"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20404">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20405">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_initial_eps_bearer_settings"
              c:identifier="mm_gdbus_modem3gpp_complete_set_initial_eps_bearer_settings">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20420">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetInitialEpsBearerSettings"&gt;SetInitialEpsBearerSettings()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2445"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20422">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20423">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_imei"
              c:identifier="mm_gdbus_modem3gpp_dup_imei"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19559">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Imei"&gt;"Imei"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2528"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19567">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19561">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_initial_eps_bearer"
              c:identifier="mm_gdbus_modem3gpp_dup_initial_eps_bearer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19887">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearer"&gt;"InitialEpsBearer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2556"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19895">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19889">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_initial_eps_bearer_settings"
              c:identifier="mm_gdbus_modem3gpp_dup_initial_eps_bearer_settings"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19938">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearerSettings"&gt;"InitialEpsBearerSettings"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2560"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19946">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19940">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_code"
              c:identifier="mm_gdbus_modem3gpp_dup_operator_code"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19641">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorCode"&gt;"OperatorCode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2535"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19649">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19643">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_name"
              c:identifier="mm_gdbus_modem3gpp_dup_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19692">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2539"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19700">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19694">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_pco"
              c:identifier="mm_gdbus_modem3gpp_dup_pco"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19836">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Pco"&gt;"Pco"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2552"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19844">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19838">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled_facility_locks"
              c:identifier="mm_gdbus_modem3gpp_get_enabled_facility_locks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EnabledFacilityLocks"&gt;"EnabledFacilityLocks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2542"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19733">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19727">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eps_ue_mode_operation"
              c:identifier="mm_gdbus_modem3gpp_get_eps_ue_mode_operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19787">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EpsUeModeOperation"&gt;"EpsUeModeOperation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2548"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19795">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19789">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_imei"
              c:identifier="mm_gdbus_modem3gpp_get_imei"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19541">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Imei"&gt;"Imei"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_imei() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19543">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer"
              c:identifier="mm_gdbus_modem3gpp_get_initial_eps_bearer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19869">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearer"&gt;"InitialEpsBearer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_initial_eps_bearer() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2555"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19879">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19871">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer_settings"
              c:identifier="mm_gdbus_modem3gpp_get_initial_eps_bearer_settings"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19920">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearerSettings"&gt;"InitialEpsBearerSettings"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_initial_eps_bearer_settings() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2559"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19930">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19922">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_code"
              c:identifier="mm_gdbus_modem3gpp_get_operator_code"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19623">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorCode"&gt;"OperatorCode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_operator_code() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19633">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19625">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_name"
              c:identifier="mm_gdbus_modem3gpp_get_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19674">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_operator_name() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2538"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19684">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19676">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pco"
              c:identifier="mm_gdbus_modem3gpp_get_pco"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Pco"&gt;"Pco"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_dup_pco() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2551"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19820">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_registration_state"
              c:identifier="mm_gdbus_modem3gpp_get_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19592">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.RegistrationState"&gt;"RegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19600">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19594">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscription_state"
              c:identifier="mm_gdbus_modem3gpp_get_subscription_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19756">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.SubscriptionState"&gt;"SubscriptionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2545"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19764">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19758">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled_facility_locks"
              c:identifier="mm_gdbus_modem3gpp_set_enabled_facility_locks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19741">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EnabledFacilityLocks"&gt;"EnabledFacilityLocks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2543"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19743">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19744">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eps_ue_mode_operation"
              c:identifier="mm_gdbus_modem3gpp_set_eps_ue_mode_operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19803">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EpsUeModeOperation"&gt;"EpsUeModeOperation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2549"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19805">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19806">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_imei"
              c:identifier="mm_gdbus_modem3gpp_set_imei"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19577">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Imei"&gt;"Imei"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19579">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19580">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_eps_bearer"
              c:identifier="mm_gdbus_modem3gpp_set_initial_eps_bearer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19905">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearer"&gt;"InitialEpsBearer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2557"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19907">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19908">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_eps_bearer_settings"
              c:identifier="mm_gdbus_modem3gpp_set_initial_eps_bearer_settings"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19956">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearerSettings"&gt;"InitialEpsBearerSettings"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2561"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19958">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19959">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator_code"
              c:identifier="mm_gdbus_modem3gpp_set_operator_code"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19659">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorCode"&gt;"OperatorCode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2536"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19661">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19662">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator_name"
              c:identifier="mm_gdbus_modem3gpp_set_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19710">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2540"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19712">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19713">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pco"
              c:identifier="mm_gdbus_modem3gpp_set_pco"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19854">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Pco"&gt;"Pco"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19856">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19857">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_registration_state"
              c:identifier="mm_gdbus_modem3gpp_set_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19608">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.RegistrationState"&gt;"RegistrationState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2532"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19610">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19611">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subscription_state"
              c:identifier="mm_gdbus_modem3gpp_set_subscription_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19772">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.SubscriptionState"&gt;"SubscriptionState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2546"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19774">A #MmGdbusModem3gpp.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19775">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled-facility-locks"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19485">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EnabledFacilityLocks"&gt;"EnabledFacilityLocks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="eps-ue-mode-operation"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19503">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.EpsUeModeOperation"&gt;"EpsUeModeOperation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="imei" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19449">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Imei"&gt;"Imei"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initial-eps-bearer"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19521">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearer"&gt;"InitialEpsBearer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initial-eps-bearer-settings"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19530">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.InitialEpsBearerSettings"&gt;"InitialEpsBearerSettings"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="operator-code" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19467">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorCode"&gt;"OperatorCode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operator-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19476">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.OperatorName"&gt;"OperatorName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pco" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19512">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.Pco"&gt;"Pco"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="registration-state"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19458">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.RegistrationState"&gt;"RegistrationState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="subscription-state"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19494">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp.SubscriptionState"&gt;"SubscriptionState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-register" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19357">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Register"&gt;Register()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_complete_register() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19367">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19360">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_operator_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19361">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-scan" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19380">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.Scan"&gt;Scan()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_complete_scan() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19389">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19383">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-eps-ue-mode-operation" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19402">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetEpsUeModeOperation"&gt;SetEpsUeModeOperation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_complete_set_eps_ue_mode_operation() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19412">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19405">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19406">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-initial-eps-bearer-settings" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19425">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp.SetInitialEpsBearerSettings"&gt;SetInitialEpsBearerSettings()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_complete_set_initial_eps_bearer_settings() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19435">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19428">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19429">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModem3gppIface"
            c:type="MmGdbusModem3gppIface"
            glib:is-gtype-struct-for="GdbusModem3gpp">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="19329">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2423"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19331">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_register">
        <callback name="handle_register">
          <source-position filename="generated/mm-gdbus-modem.h" line="2384"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_operator_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_scan">
        <callback name="handle_scan">
          <source-position filename="generated/mm-gdbus-modem.h" line="2389"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_eps_ue_mode_operation">
        <callback name="handle_set_eps_ue_mode_operation">
          <source-position filename="generated/mm-gdbus-modem.h" line="2393"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_initial_eps_bearer_settings">
        <callback name="handle_set_initial_eps_bearer_settings">
          <source-position filename="generated/mm-gdbus-modem.h" line="2398"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_settings" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_enabled_facility_locks">
        <callback name="get_enabled_facility_locks">
          <source-position filename="generated/mm-gdbus-modem.h" line="2403"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19733">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19727">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_eps_ue_mode_operation">
        <callback name="get_eps_ue_mode_operation">
          <source-position filename="generated/mm-gdbus-modem.h" line="2405"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19795">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19789">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_imei">
        <callback name="get_imei">
          <source-position filename="generated/mm-gdbus-modem.h" line="2407"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19543">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_initial_eps_bearer">
        <callback name="get_initial_eps_bearer">
          <source-position filename="generated/mm-gdbus-modem.h" line="2409"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19879">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19871">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_initial_eps_bearer_settings">
        <callback name="get_initial_eps_bearer_settings">
          <source-position filename="generated/mm-gdbus-modem.h" line="2411"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19930">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19922">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operator_code">
        <callback name="get_operator_code">
          <source-position filename="generated/mm-gdbus-modem.h" line="2413"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19633">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19625">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operator_name">
        <callback name="get_operator_name">
          <source-position filename="generated/mm-gdbus-modem.h" line="2415"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19684">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19676">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pco">
        <callback name="get_pco">
          <source-position filename="generated/mm-gdbus-modem.h" line="2417"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19820">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_registration_state">
        <callback name="get_registration_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2419"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19600">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19594">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_subscription_state">
        <callback name="get_subscription_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2421"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="19764">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="19758">A #MmGdbusModem3gpp.</doc>
              <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModem3gppProxy"
           c:symbol-prefix="gdbus_modem3gpp_proxy"
           c:type="MmGdbusModem3gppProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModem3gppProxy"
           glib:get-type="mm_gdbus_modem3gpp_proxy_get_type"
           glib:type-struct="GdbusModem3gppProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="20440">The #MmGdbusModem3gppProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2587"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem3gpp"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem3gpp_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20840">Finishes an operation started with mm_gdbus_modem3gpp_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2603"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20847">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppProxy" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20842">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem3gpp_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20930">Finishes an operation started with mm_gdbus_modem3gpp_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2622"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20937">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppProxy" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20932">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem3gpp_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20955">Like mm_gdbus_modem3gpp_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2625"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20970">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppProxy" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20957">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20958">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20959">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20960">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20961">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem3gpp_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20865">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2606"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="20880">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppProxy" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20867">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20868">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20869">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20870">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20871">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem3gpp_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20810">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2595"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20812">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20813">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20814">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20815">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20816">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20817">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20818">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem3gpp_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20900">Like mm_gdbus_modem3gpp_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2614"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20902">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20903">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20904">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20905">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20906">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20907">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="20908">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModem3gppProxyPrivate"
              c:type="MmGdbusModem3gppProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModem3gppProxyClass"
            c:type="MmGdbusModem3gppProxyClass"
            glib:is-gtype-struct-for="GdbusModem3gppProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="20446">Class structure for #MmGdbusModem3gppProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2587"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="20448">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModem3gppProxyPrivate"
            c:type="MmGdbusModem3gppProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2575"/>
    </record>
    <class name="GdbusModem3gppSkeleton"
           c:symbol-prefix="gdbus_modem3gpp_skeleton"
           c:type="MmGdbusModem3gppSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModem3gppSkeleton"
           glib:get-type="mm_gdbus_modem3gpp_skeleton_get_type"
           glib:type-struct="GdbusModem3gppSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="20992">The #MmGdbusModem3gppSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2657"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModem3gpp"/>
      <constructor name="new" c:identifier="mm_gdbus_modem3gpp_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21559">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2665"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21564">The skeleton object.</doc>
          <type name="GdbusModem3gppSkeleton" c:type="MmGdbusModem3gpp*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModem3gppSkeletonPrivate"
              c:type="MmGdbusModem3gppSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModem3gppSkeletonClass"
            c:type="MmGdbusModem3gppSkeletonClass"
            glib:is-gtype-struct-for="GdbusModem3gppSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="20998">Class structure for #MmGdbusModem3gppSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2657"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21000">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModem3gppSkeletonPrivate"
            c:type="MmGdbusModem3gppSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2645"/>
    </record>
    <interface name="GdbusModem3gppUssd"
               c:symbol-prefix="gdbus_modem3gpp_ussd"
               c:type="MmGdbusModem3gppUssd"
               glib:type-name="MmGdbusModem3gppUssd"
               glib:get-type="mm_gdbus_modem3gpp_ussd_get_type"
               glib:type-struct="GdbusModem3gppUssdIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="21797">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2705"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem3gpp_ussd_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21763">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2709"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21768">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem3gpp_ussd_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21776">Overrides all #GObject properties in the #MmGdbusModem3gppUssd interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2710"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21784">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21778">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21779">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_network_notification"
                      invoker="get_network_notification"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21952">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkNotification"&gt;"NetworkNotification"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_ussd_dup_network_notification() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2699"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21954">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_network_request"
                      invoker="get_network_request"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22003">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkRequest"&gt;"NetworkRequest"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_ussd_dup_network_request() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2701"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22005">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21921">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2703"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21929">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21923">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="generated/mm-gdbus-modem.h" line="2685"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_initiate">
        <source-position filename="generated/mm-gdbus-modem.h" line="2689"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_respond">
        <source-position filename="generated/mm-gdbus-modem.h" line="2694"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_response" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_cancel"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_cancel">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22262">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_ussd_call_cancel_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_ussd_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2771"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22264">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22265">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22266">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22267">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22292">Finishes an operation started with mm_gdbus_modem3gpp_ussd_call_cancel().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2777"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22300">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22294">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22295">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_ussd_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22319">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_ussd_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2782"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22329">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22321">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_initiate"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_initiate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22054">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Initiate"&gt;Initiate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_ussd_call_initiate_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_ussd_call_initiate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2731"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22056">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="arg_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22057">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22058">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22059">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22060">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_initiate_finish"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_initiate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22087">Finishes an operation started with mm_gdbus_modem3gpp_ussd_call_initiate().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2738"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22096">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22089">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="out_reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22090">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22091">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_ussd_call_initiate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_initiate_sync"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_initiate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22117">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Initiate"&gt;Initiate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_ussd_call_initiate() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2744"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22129">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22119">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="arg_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22120">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22121">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22122">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_respond"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_respond">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22158">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Respond"&gt;Respond()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_ussd_call_respond_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_ussd_call_respond_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2751"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22160">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="arg_response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22161">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22162">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22163">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22164">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_respond_finish"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_respond_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22191">Finishes an operation started with mm_gdbus_modem3gpp_ussd_call_respond().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2758"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22200">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22193">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="out_reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22194">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22195">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_ussd_call_respond().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_respond_sync"
              c:identifier="mm_gdbus_modem3gpp_ussd_call_respond_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22221">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Respond"&gt;Respond()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_ussd_call_respond() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2764"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22233">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22223">A #MmGdbusModem3gppUssdProxy.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="arg_response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22224">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22225">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22226">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="mm_gdbus_modem3gpp_ussd_complete_cancel">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22396">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2724"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22398">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22399">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_initiate"
              c:identifier="mm_gdbus_modem3gpp_ussd_complete_initiate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22354">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Initiate"&gt;Initiate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2714"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22356">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22357">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="reply" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22358">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_respond"
              c:identifier="mm_gdbus_modem3gpp_ussd_complete_respond">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22375">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Respond"&gt;Respond()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2719"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22377">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22378">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="reply" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22379">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_network_notification"
              c:identifier="mm_gdbus_modem3gpp_ussd_dup_network_notification"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21970">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkNotification"&gt;"NetworkNotification"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2794"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21978">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21972">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_network_request"
              c:identifier="mm_gdbus_modem3gpp_ussd_dup_network_request"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22021">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkRequest"&gt;"NetworkRequest"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2798"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22029">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22023">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_notification"
              c:identifier="mm_gdbus_modem3gpp_ussd_get_network_notification"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21952">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkNotification"&gt;"NetworkNotification"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_ussd_dup_network_notification() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2793"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21954">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_request"
              c:identifier="mm_gdbus_modem3gpp_ussd_get_network_request"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22003">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkRequest"&gt;"NetworkRequest"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem3gpp_ussd_dup_network_request() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2797"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22005">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="mm_gdbus_modem3gpp_ussd_get_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21921">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2790"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21929">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21923">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_network_notification"
              c:identifier="mm_gdbus_modem3gpp_ussd_set_network_notification"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21988">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkNotification"&gt;"NetworkNotification"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2795"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21990">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21991">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_network_request"
              c:identifier="mm_gdbus_modem3gpp_ussd_set_network_request"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22039">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkRequest"&gt;"NetworkRequest"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2799"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22041">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22042">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="mm_gdbus_modem3gpp_ussd_set_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21937">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2791"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21939">A #MmGdbusModem3gppUssd.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21940">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="network-notification"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21901">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkNotification"&gt;"NetworkNotification"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="network-request" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21910">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.NetworkRequest"&gt;"NetworkRequest"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21892">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21869">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_ussd_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21878">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21872">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-initiate" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21823">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Initiate"&gt;Initiate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_ussd_complete_initiate() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21833">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21826">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21827">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-respond" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21846">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.Respond"&gt;Respond()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem3gpp_ussd_complete_respond() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21856">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21849">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21850">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModem3gppUssdIface"
            c:type="MmGdbusModem3gppUssdIface"
            glib:is-gtype-struct-for="GdbusModem3gppUssd">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="21803">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2705"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21805">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="generated/mm-gdbus-modem.h" line="2685"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_initiate">
        <callback name="handle_initiate">
          <source-position filename="generated/mm-gdbus-modem.h" line="2689"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_command" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_respond">
        <callback name="handle_respond">
          <source-position filename="generated/mm-gdbus-modem.h" line="2694"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_response" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_network_notification">
        <callback name="get_network_notification">
          <source-position filename="generated/mm-gdbus-modem.h" line="2699"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="21954">A #MmGdbusModem3gppUssd.</doc>
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_network_request">
        <callback name="get_network_request">
          <source-position filename="generated/mm-gdbus-modem.h" line="2701"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="22005">A #MmGdbusModem3gppUssd.</doc>
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2703"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="21929">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="21923">A #MmGdbusModem3gppUssd.</doc>
              <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModem3gppUssdProxy"
           c:symbol-prefix="gdbus_modem3gpp_ussd_proxy"
           c:type="MmGdbusModem3gppUssdProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModem3gppUssdProxy"
           glib:get-type="mm_gdbus_modem3gpp_ussd_proxy_get_type"
           glib:type-struct="GdbusModem3gppUssdProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="22416">The #MmGdbusModem3gppUssdProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2825"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem3gppUssd"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22708">Finishes an operation started with mm_gdbus_modem3gpp_ussd_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2841"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22715">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppUssdProxy" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22710">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_ussd_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22798">Finishes an operation started with mm_gdbus_modem3gpp_ussd_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2860"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22805">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppUssdProxy" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem3gpp_ussd_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22823">Like mm_gdbus_modem3gpp_ussd_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_ussd_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2863"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22838">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppUssdProxy" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22825">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22826">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22827">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22828">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22733">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem3gpp_ussd_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2844"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="22748">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModem3gppUssdProxy" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22735">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22736">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22737">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22738">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22739">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22678">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_ussd_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_ussd_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2833"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22680">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22681">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22682">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22683">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22684">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22685">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22686">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem3gpp_ussd_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22768">Like mm_gdbus_modem3gpp_ussd_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem3gpp_ussd_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem3gpp_ussd_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2852"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22770">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22771">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22772">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22773">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22774">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22775">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="22776">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModem3gppUssdProxyPrivate"
              c:type="MmGdbusModem3gppUssdProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModem3gppUssdProxyClass"
            c:type="MmGdbusModem3gppUssdProxyClass"
            glib:is-gtype-struct-for="GdbusModem3gppUssdProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="22422">Class structure for #MmGdbusModem3gppUssdProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2825"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22424">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModem3gppUssdProxyPrivate"
            c:type="MmGdbusModem3gppUssdProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2813"/>
    </record>
    <class name="GdbusModem3gppUssdSkeleton"
           c:symbol-prefix="gdbus_modem3gpp_ussd_skeleton"
           c:type="MmGdbusModem3gppUssdSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModem3gppUssdSkeleton"
           glib:get-type="mm_gdbus_modem3gpp_ussd_skeleton_get_type"
           glib:type-struct="GdbusModem3gppUssdSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="22860">The #MmGdbusModem3gppUssdSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2895"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModem3gppUssd"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem3gpp_ussd_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23336">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2903"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23341">The skeleton object.</doc>
          <type name="GdbusModem3gppUssdSkeleton"
                c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModem3gppUssdSkeletonPrivate"
              c:type="MmGdbusModem3gppUssdSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModem3gppUssdSkeletonClass"
            c:type="MmGdbusModem3gppUssdSkeletonClass"
            glib:is-gtype-struct-for="GdbusModem3gppUssdSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="22866">Class structure for #MmGdbusModem3gppUssdSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2895"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="22868">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModem3gppUssdSkeletonPrivate"
            c:type="MmGdbusModem3gppUssdSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2883"/>
    </record>
    <interface name="GdbusModemCdma"
               c:symbol-prefix="gdbus_modem_cdma"
               c:type="MmGdbusModemCdma"
               glib:type-name="MmGdbusModemCdma"
               glib:get-type="mm_gdbus_modem_cdma_get_type"
               glib:type-struct="GdbusModemCdmaIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17227">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2171"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_cdma_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17189">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17194">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_cdma_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17202">Overrides all #GObject properties in the #MmGdbusModemCdma interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17210">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17204">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17205">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="activation_state_changed">
        <source-position filename="generated/mm-gdbus-modem.h" line="2165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_activation_state" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_activation_error" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_status_changes" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_activation_state"
                      invoker="get_activation_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17391">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationState"&gt;"ActivationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17399">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17393">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cdma1x_registration_state"
                      invoker="get_cdma1x_registration_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17586">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Cdma1xRegistrationState"&gt;"Cdma1xRegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17594">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17588">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_esn" invoker="get_esn" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17473">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Esn"&gt;"Esn"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_cdma_dup_esn() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17483">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17475">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_evdo_registration_state"
                      invoker="get_evdo_registration_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17617">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.EvdoRegistrationState"&gt;"EvdoRegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17625">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17619">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_meid" invoker="get_meid" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17422">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Meid"&gt;"Meid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_cdma_dup_meid() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17432">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17424">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nid" invoker="get_nid" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17555">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Nid"&gt;"Nid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17563">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17557">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sid" invoker="get_sid" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17524">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Sid"&gt;"Sid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17532">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17526">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_activate">
        <source-position filename="generated/mm-gdbus-modem.h" line="2141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_carrier_code" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_activate_manual">
        <source-position filename="generated/mm-gdbus-modem.h" line="2146"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_activate"
              c:identifier="mm_gdbus_modem_cdma_call_activate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17667">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_cdma_call_activate_finish() to get the result of the operation.

See mm_gdbus_modem_cdma_call_activate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17669">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_carrier_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17670">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17671">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17672">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17673">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_finish"
              c:identifier="mm_gdbus_modem_cdma_call_activate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17700">Finishes an operation started with mm_gdbus_modem_cdma_call_activate().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2207"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17708">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17702">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17703">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_cdma_call_activate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_manual"
              c:identifier="mm_gdbus_modem_cdma_call_activate_manual">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17765">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivateManual"&gt;ActivateManual()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_cdma_call_activate_manual_finish() to get the result of the operation.

See mm_gdbus_modem_cdma_call_activate_manual_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17767">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17768">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17769">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17770">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17771">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_manual_finish"
              c:identifier="mm_gdbus_modem_cdma_call_activate_manual_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17798">Finishes an operation started with mm_gdbus_modem_cdma_call_activate_manual().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2225"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17806">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17800">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17801">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_cdma_call_activate_manual().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_manual_sync"
              c:identifier="mm_gdbus_modem_cdma_call_activate_manual_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17825">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivateManual"&gt;ActivateManual()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_cdma_call_activate_manual() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2230"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17836">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17827">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17828">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_sync"
              c:identifier="mm_gdbus_modem_cdma_call_activate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17727">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_cdma_call_activate() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17738">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17729">A #MmGdbusModemCdmaProxy.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_carrier_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17730">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17731">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_activate"
              c:identifier="mm_gdbus_modem_cdma_complete_activate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17863">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.Activate"&gt;Activate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17865">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17866">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_activate_manual"
              c:identifier="mm_gdbus_modem_cdma_complete_activate_manual">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17881">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivateManual"&gt;ActivateManual()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17883">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17884">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_esn"
              c:identifier="mm_gdbus_modem_cdma_dup_esn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17491">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Esn"&gt;"Esn"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2247"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17499">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17493">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_meid"
              c:identifier="mm_gdbus_modem_cdma_dup_meid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17440">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Meid"&gt;"Meid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2243"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17448">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17442">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_activation_state_changed"
              c:identifier="mm_gdbus_modem_cdma_emit_activation_state_changed">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17648">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationStateChanged"&gt;"ActivationStateChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17650">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="arg_activation_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17651">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_activation_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17652">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_status_changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17653">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activation_state"
              c:identifier="mm_gdbus_modem_cdma_get_activation_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17391">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationState"&gt;"ActivationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17399">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17393">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma1x_registration_state"
              c:identifier="mm_gdbus_modem_cdma_get_cdma1x_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17586">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Cdma1xRegistrationState"&gt;"Cdma1xRegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2256"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17594">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17588">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_esn"
              c:identifier="mm_gdbus_modem_cdma_get_esn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17473">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Esn"&gt;"Esn"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_cdma_dup_esn() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17483">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17475">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_evdo_registration_state"
              c:identifier="mm_gdbus_modem_cdma_get_evdo_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17617">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.EvdoRegistrationState"&gt;"EvdoRegistrationState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17625">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17619">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_meid"
              c:identifier="mm_gdbus_modem_cdma_get_meid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17422">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Meid"&gt;"Meid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_cdma_dup_meid() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17432">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17424">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nid"
              c:identifier="mm_gdbus_modem_cdma_get_nid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17555">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Nid"&gt;"Nid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17563">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17557">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sid"
              c:identifier="mm_gdbus_modem_cdma_get_sid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17524">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Sid"&gt;"Sid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17532">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17526">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_activation_state"
              c:identifier="mm_gdbus_modem_cdma_set_activation_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17407">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationState"&gt;"ActivationState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17409">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17410">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cdma1x_registration_state"
              c:identifier="mm_gdbus_modem_cdma_set_cdma1x_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17602">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Cdma1xRegistrationState"&gt;"Cdma1xRegistrationState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17604">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17605">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_esn"
              c:identifier="mm_gdbus_modem_cdma_set_esn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17509">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Esn"&gt;"Esn"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17511">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17512">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_evdo_registration_state"
              c:identifier="mm_gdbus_modem_cdma_set_evdo_registration_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17633">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.EvdoRegistrationState"&gt;"EvdoRegistrationState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17635">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17636">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_meid"
              c:identifier="mm_gdbus_modem_cdma_set_meid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17458">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Meid"&gt;"Meid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17460">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17461">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nid"
              c:identifier="mm_gdbus_modem_cdma_set_nid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17571">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Nid"&gt;"Nid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17573">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17574">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sid"
              c:identifier="mm_gdbus_modem_cdma_set_sid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17540">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Sid"&gt;"Sid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17542">A #MmGdbusModemCdma.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17543">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="activation-state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17326">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationState"&gt;"ActivationState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cdma1x-registration-state"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17371">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Cdma1xRegistrationState"&gt;"Cdma1xRegistrationState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="esn" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17344">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Esn"&gt;"Esn"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="evdo-registration-state"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17380">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.EvdoRegistrationState"&gt;"EvdoRegistrationState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="meid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17335">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Meid"&gt;"Meid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17362">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Nid"&gt;"Nid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sid" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17353">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-ModemCdma.Sid"&gt;"Sid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="activation-state-changed" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17304">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivationStateChanged"&gt;"ActivationStateChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_activation_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17307">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_activation_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17308">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_status_changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17309">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-activate" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17257">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.Activate"&gt;Activate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_cdma_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17267">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17260">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_carrier_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17261">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-activate-manual" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17280">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-ModemCdma.ActivateManual"&gt;ActivateManual()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_cdma_complete_activate_manual() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17290">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17283">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17284">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemCdmaIface"
            c:type="MmGdbusModemCdmaIface"
            glib:is-gtype-struct-for="GdbusModemCdma">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17233">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2171"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17235">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_activate">
        <callback name="handle_activate">
          <source-position filename="generated/mm-gdbus-modem.h" line="2141"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_carrier_code" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_activate_manual">
        <callback name="handle_activate_manual">
          <source-position filename="generated/mm-gdbus-modem.h" line="2146"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_activation_state">
        <callback name="get_activation_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2151"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17399">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17393">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cdma1x_registration_state">
        <callback name="get_cdma1x_registration_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2153"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17594">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17588">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_esn">
        <callback name="get_esn">
          <source-position filename="generated/mm-gdbus-modem.h" line="2155"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17483">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17475">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_evdo_registration_state">
        <callback name="get_evdo_registration_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="2157"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17625">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17619">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_meid">
        <callback name="get_meid">
          <source-position filename="generated/mm-gdbus-modem.h" line="2159"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17432">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17424">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nid">
        <callback name="get_nid">
          <source-position filename="generated/mm-gdbus-modem.h" line="2161"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17563">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17557">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sid">
        <callback name="get_sid">
          <source-position filename="generated/mm-gdbus-modem.h" line="2163"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="17532">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="17526">A #MmGdbusModemCdma.</doc>
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activation_state_changed">
        <callback name="activation_state_changed">
          <source-position filename="generated/mm-gdbus-modem.h" line="2165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
            </parameter>
            <parameter name="arg_activation_state" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_activation_error" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_status_changes" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemCdmaProxy"
           c:symbol-prefix="gdbus_modem_cdma_proxy"
           c:type="MmGdbusModemCdmaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemCdmaProxy"
           glib:get-type="mm_gdbus_modem_cdma_proxy_get_type"
           glib:type-struct="GdbusModemCdmaProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17901">The #MmGdbusModemCdmaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2286"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemCdma"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_cdma_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18257">Finishes an operation started with mm_gdbus_modem_cdma_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2302"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="18264">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemCdmaProxy" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18259">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_cdma_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_cdma_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18347">Finishes an operation started with mm_gdbus_modem_cdma_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2321"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="18354">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemCdmaProxy" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18349">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_cdma_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_cdma_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18372">Like mm_gdbus_modem_cdma_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_cdma_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2324"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="18387">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemCdmaProxy" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18374">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18375">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18376">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18377">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18378">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_cdma_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18282">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_cdma_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2305"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="18297">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemCdmaProxy" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18284">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18285">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18286">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18287">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18288">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_cdma_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18227">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_cdma_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_cdma_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18229">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18230">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18231">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18232">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18233">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18234">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18235">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_cdma_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18317">Like mm_gdbus_modem_cdma_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_cdma_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_cdma_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18319">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18320">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18321">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18322">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18324">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="18325">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemCdmaProxyPrivate"
              c:type="MmGdbusModemCdmaProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemCdmaProxyClass"
            c:type="MmGdbusModemCdmaProxyClass"
            glib:is-gtype-struct-for="GdbusModemCdmaProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17907">Class structure for #MmGdbusModemCdmaProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2286"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17909">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemCdmaProxyPrivate"
            c:type="MmGdbusModemCdmaProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2274"/>
    </record>
    <class name="GdbusModemCdmaSkeleton"
           c:symbol-prefix="gdbus_modem_cdma_skeleton"
           c:type="MmGdbusModemCdmaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemCdmaSkeleton"
           glib:get-type="mm_gdbus_modem_cdma_skeleton_get_type"
           glib:type-struct="GdbusModemCdmaSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="18409">The #MmGdbusModemCdmaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2356"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemCdma"/>
      <constructor name="new" c:identifier="mm_gdbus_modem_cdma_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18966">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2364"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="18971">The skeleton object.</doc>
          <type name="GdbusModemCdmaSkeleton" c:type="MmGdbusModemCdma*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemCdmaSkeletonPrivate"
              c:type="MmGdbusModemCdmaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemCdmaSkeletonClass"
            c:type="MmGdbusModemCdmaSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemCdmaSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="18415">Class structure for #MmGdbusModemCdmaSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2356"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="18417">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemCdmaSkeletonPrivate"
            c:type="MmGdbusModemCdmaSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2344"/>
    </record>
    <interface name="GdbusModemFirmware"
               c:symbol-prefix="gdbus_modem_firmware"
               c:type="MmGdbusModemFirmware"
               glib:type-name="MmGdbusModemFirmware"
               glib:get-type="mm_gdbus_modem_firmware_get_type"
               glib:type-struct="GdbusModemFirmwareIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13883">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1675"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_firmware_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13852">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1679"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13857">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_firmware_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13865">Overrides all #GObject properties in the #MmGdbusModemFirmware interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1680"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13873">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13867">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13868">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_list">
        <source-position filename="generated/mm-gdbus-modem.h" line="1666"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select">
        <source-position filename="generated/mm-gdbus-modem.h" line="1670"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uniqueid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_list"
              c:identifier="mm_gdbus_modem_firmware_call_list">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13952">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.List"&gt;List()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_firmware_call_list_finish() to get the result of the operation.

See mm_gdbus_modem_firmware_call_list_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1697"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13954">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13956">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13957">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_finish"
              c:identifier="mm_gdbus_modem_firmware_call_list_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13982">Finishes an operation started with mm_gdbus_modem_firmware_call_list().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1703"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13992">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13984">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="out_selected"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13985">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_installed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13986">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13987">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_firmware_call_list().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_sync"
              c:identifier="mm_gdbus_modem_firmware_call_list_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14015">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.List"&gt;List()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_firmware_call_list() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1710"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14027">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14017">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="out_selected"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14018">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_installed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14019">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14020">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select"
              c:identifier="mm_gdbus_modem_firmware_call_select">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14056">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.Select"&gt;Select()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_firmware_call_select_finish() to get the result of the operation.

See mm_gdbus_modem_firmware_call_select_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1717"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14058">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="arg_uniqueid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14059">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14060">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14061">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14062">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_finish"
              c:identifier="mm_gdbus_modem_firmware_call_select_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14089">Finishes an operation started with mm_gdbus_modem_firmware_call_select().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1724"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14097">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14091">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14092">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_firmware_call_select().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_sync"
              c:identifier="mm_gdbus_modem_firmware_call_select_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14116">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.Select"&gt;Select()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_firmware_call_select() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1729"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14127">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14118">A #MmGdbusModemFirmwareProxy.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="arg_uniqueid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14119">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14120">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_list"
              c:identifier="mm_gdbus_modem_firmware_complete_list">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14154">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.List"&gt;List()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1684"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14156">A #MmGdbusModemFirmware.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14157">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="selected" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14158">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="installed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14159">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select"
              c:identifier="mm_gdbus_modem_firmware_complete_select">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14178">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.Select"&gt;Select()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1690"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14180">A #MmGdbusModemFirmware.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14181">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-list" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13905">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.List"&gt;List()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_firmware_complete_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13914">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13908">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13927">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Firmware.Select"&gt;Select()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_firmware_complete_select() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13937">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13930">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uniqueid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13931">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemFirmwareIface"
            c:type="MmGdbusModemFirmwareIface"
            glib:is-gtype-struct-for="GdbusModemFirmware">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13889">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1675"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13891">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_list">
        <callback name="handle_list">
          <source-position filename="generated/mm-gdbus-modem.h" line="1666"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select">
        <callback name="handle_select">
          <source-position filename="generated/mm-gdbus-modem.h" line="1670"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uniqueid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemFirmwareProxy"
           c:symbol-prefix="gdbus_modem_firmware_proxy"
           c:type="MmGdbusModemFirmwareProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemFirmwareProxy"
           glib:get-type="mm_gdbus_modem_firmware_proxy_get_type"
           glib:type-struct="GdbusModemFirmwareProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="14198">The #MmGdbusModemFirmwareProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1760"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemFirmware"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_firmware_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14389">Finishes an operation started with mm_gdbus_modem_firmware_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1776"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14396">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemFirmwareProxy" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14391">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_firmware_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_firmware_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14479">Finishes an operation started with mm_gdbus_modem_firmware_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1795"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14486">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemFirmwareProxy" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14481">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_firmware_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_firmware_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14504">Like mm_gdbus_modem_firmware_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_firmware_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1798"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14519">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemFirmwareProxy" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14506">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14507">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14508">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14509">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14510">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_firmware_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14414">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_firmware_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1779"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14429">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemFirmwareProxy" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14416">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14417">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14418">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14419">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14420">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_firmware_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14359">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_firmware_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_firmware_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1768"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14361">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14362">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14363">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14364">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14365">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14366">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14367">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_firmware_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14449">Like mm_gdbus_modem_firmware_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_firmware_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_firmware_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1787"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14451">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14452">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14453">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14454">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14455">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14456">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="14457">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemFirmwareProxyPrivate"
              c:type="MmGdbusModemFirmwareProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemFirmwareProxyClass"
            c:type="MmGdbusModemFirmwareProxyClass"
            glib:is-gtype-struct-for="GdbusModemFirmwareProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="14204">Class structure for #MmGdbusModemFirmwareProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1760"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14206">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemFirmwareProxyPrivate"
            c:type="MmGdbusModemFirmwareProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1748"/>
    </record>
    <class name="GdbusModemFirmwareSkeleton"
           c:symbol-prefix="gdbus_modem_firmware_skeleton"
           c:type="MmGdbusModemFirmwareSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemFirmwareSkeleton"
           glib:get-type="mm_gdbus_modem_firmware_skeleton_get_type"
           glib:type-struct="GdbusModemFirmwareSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="14541">The #MmGdbusModemFirmwareSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1830"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemFirmware"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem_firmware_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14812">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1838"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="14817">The skeleton object.</doc>
          <type name="GdbusModemFirmwareSkeleton"
                c:type="MmGdbusModemFirmware*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemFirmwareSkeletonPrivate"
              c:type="MmGdbusModemFirmwareSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemFirmwareSkeletonClass"
            c:type="MmGdbusModemFirmwareSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemFirmwareSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="14547">Class structure for #MmGdbusModemFirmwareSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1830"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="14549">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemFirmwareSkeletonPrivate"
            c:type="MmGdbusModemFirmwareSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1818"/>
    </record>
    <record name="GdbusModemIface"
            c:type="MmGdbusModemIface"
            glib:is-gtype-struct-for="GdbusModem">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="1106">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="154"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1108">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_command">
        <callback name="handle_command">
          <source-position filename="generated/mm-gdbus-modem.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_cmd" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_timeout" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_bearer">
        <callback name="handle_create_bearer">
          <source-position filename="generated/mm-gdbus-modem.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete_bearer">
        <callback name="handle_delete_bearer">
          <source-position filename="generated/mm-gdbus-modem.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_bearer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable">
        <callback name="handle_enable">
          <source-position filename="generated/mm-gdbus-modem.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_factory_reset">
        <callback name="handle_factory_reset">
          <source-position filename="generated/mm-gdbus-modem.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_code" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_list_bearers">
        <callback name="handle_list_bearers">
          <source-position filename="generated/mm-gdbus-modem.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_reset">
        <callback name="handle_reset">
          <source-position filename="generated/mm-gdbus-modem.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_current_bands">
        <callback name="handle_set_current_bands">
          <source-position filename="generated/mm-gdbus-modem.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_bands" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_current_capabilities">
        <callback name="handle_set_current_capabilities">
          <source-position filename="generated/mm-gdbus-modem.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_capabilities" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_current_modes">
        <callback name="handle_set_current_modes">
          <source-position filename="generated/mm-gdbus-modem.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_modes" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_power_state">
        <callback name="handle_set_power_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_state" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_access_technologies">
        <callback name="get_access_technologies">
          <source-position filename="generated/mm-gdbus-modem.h" line="88"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2668">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2662">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bearers">
        <callback name="get_bearers">
          <source-position filename="generated/mm-gdbus-modem.h" line="90"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1770">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1762">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_current_bands">
        <callback name="get_current_bands">
          <source-position filename="generated/mm-gdbus-modem.h" line="92"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2987">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2979">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_current_capabilities">
        <callback name="get_current_capabilities">
          <source-position filename="generated/mm-gdbus-modem.h" line="94"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1870">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1864">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_current_modes">
        <callback name="get_current_modes">
          <source-position filename="generated/mm-gdbus-modem.h" line="96"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2885">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2877">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device">
        <callback name="get_device">
          <source-position filename="generated/mm-gdbus-modem.h" line="98"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2220">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2212">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device_identifier">
        <callback name="get_device_identifier">
          <source-position filename="generated/mm-gdbus-modem.h" line="100"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2161">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_drivers">
        <callback name="get_drivers">
          <source-position filename="generated/mm-gdbus-modem.h" line="102"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2271">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2263">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_equipment_identifier">
        <callback name="get_equipment_identifier">
          <source-position filename="generated/mm-gdbus-modem.h" line="104"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2475">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2467">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hardware_revision">
        <callback name="get_hardware_revision">
          <source-position filename="generated/mm-gdbus-modem.h" line="106"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2118">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2110">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_manufacturer">
        <callback name="get_manufacturer">
          <source-position filename="generated/mm-gdbus-modem.h" line="108"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1965">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1957">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_max_active_bearers">
        <callback name="get_max_active_bearers">
          <source-position filename="generated/mm-gdbus-modem.h" line="110"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1932">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1926">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_max_bearers">
        <callback name="get_max_bearers">
          <source-position filename="generated/mm-gdbus-modem.h" line="112"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1901">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1895">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <source-position filename="generated/mm-gdbus-modem.h" line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2016">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2008">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_own_numbers">
        <callback name="get_own_numbers">
          <source-position filename="generated/mm-gdbus-modem.h" line="116"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2752">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2744">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_plugin">
        <callback name="get_plugin">
          <source-position filename="generated/mm-gdbus-modem.h" line="118"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2322">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2314">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ports">
        <callback name="get_ports">
          <source-position filename="generated/mm-gdbus-modem.h" line="120"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2416">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_power_state">
        <callback name="get_power_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="122"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2801">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2795">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_primary_port">
        <callback name="get_primary_port">
          <source-position filename="generated/mm-gdbus-modem.h" line="124"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2365">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_revision">
        <callback name="get_revision">
          <source-position filename="generated/mm-gdbus-modem.h" line="126"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2059">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_signal_quality">
        <callback name="get_signal_quality">
          <source-position filename="generated/mm-gdbus-modem.h" line="128"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2701">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2693">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sim">
        <callback name="get_sim">
          <source-position filename="generated/mm-gdbus-modem.h" line="130"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1719">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1711">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="132"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2606">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2600">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state_failed_reason">
        <callback name="get_state_failed_reason">
          <source-position filename="generated/mm-gdbus-modem.h" line="134"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2637">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2631">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_bands">
        <callback name="get_supported_bands">
          <source-position filename="generated/mm-gdbus-modem.h" line="136"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2936">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2928">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_capabilities">
        <callback name="get_supported_capabilities">
          <source-position filename="generated/mm-gdbus-modem.h" line="138"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="1821">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="1813">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_ip_families">
        <callback name="get_supported_ip_families">
          <source-position filename="generated/mm-gdbus-modem.h" line="140"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="3036">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="3030">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_modes">
        <callback name="get_supported_modes">
          <source-position filename="generated/mm-gdbus-modem.h" line="142"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2826">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_unlock_required">
        <callback name="get_unlock_required">
          <source-position filename="generated/mm-gdbus-modem.h" line="144"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2524">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2518">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_unlock_retries">
        <callback name="get_unlock_retries">
          <source-position filename="generated/mm-gdbus-modem.h" line="146"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="2557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="2549">A #MmGdbusModem.</doc>
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <source-position filename="generated/mm-gdbus-modem.h" line="148"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModem" c:type="MmGdbusModem*"/>
            </parameter>
            <parameter name="arg_old" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_new" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_reason" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="GdbusModemLocation"
               c:symbol-prefix="gdbus_modem_location"
               c:type="MmGdbusModemLocation"
               glib:type-name="MmGdbusModemLocation"
               glib:get-type="mm_gdbus_modem_location_get_type"
               glib:type-struct="GdbusModemLocationIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="10230">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1208"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_location_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10191">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10196">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_location_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10204">Overrides all #GObject properties in the #MmGdbusModemLocation interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1213"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10212">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10206">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10207">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_assistance_data_servers"
                      invoker="get_assistance_data_servers"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10679">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.AssistanceDataServers"&gt;"AssistanceDataServers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_assistance_data_servers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10689">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10681">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_capabilities"
                      invoker="get_capabilities"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10453">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Capabilities"&gt;"Capabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10461">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10455">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_enabled"
                      invoker="get_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10515">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Enabled"&gt;"Enabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10523">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10517">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_gps_refresh_rate"
                      invoker="get_gps_refresh_rate"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10730">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.GpsRefreshRate"&gt;"GpsRefreshRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10738">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10732">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_location"
                      invoker="get_location"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10577">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Location"&gt;"Location"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_location() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10587">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10579">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_signals_location"
                      invoker="get_signals_location"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10546">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SignalsLocation"&gt;"SignalsLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10554">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10548">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supl_server"
                      invoker="get_supl_server"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10628">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SuplServer"&gt;"SuplServer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_supl_server() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10638">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10630">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_assistance_data"
                      invoker="get_supported_assistance_data"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10484">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SupportedAssistanceData"&gt;"SupportedAssistanceData"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10492">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10486">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_location">
        <source-position filename="generated/mm-gdbus-modem.h" line="1167"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_inject_assistance_data">
        <source-position filename="generated/mm-gdbus-modem.h" line="1171"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_data" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_gps_refresh_rate">
        <source-position filename="generated/mm-gdbus-modem.h" line="1176"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_supl_server">
        <source-position filename="generated/mm-gdbus-modem.h" line="1181"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_supl" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_setup">
        <source-position filename="generated/mm-gdbus-modem.h" line="1186"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_sources" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_signal_location" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_location"
              c:identifier="mm_gdbus_modem_location_call_get_location">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10865">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.GetLocation"&gt;GetLocation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_call_get_location_finish() to get the result of the operation.

See mm_gdbus_modem_location_call_get_location_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10867">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10868">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10869">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10870">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_location_finish"
              c:identifier="mm_gdbus_modem_location_call_get_location_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10895">Finishes an operation started with mm_gdbus_modem_location_call_get_location().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1267"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10904">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10897">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="out_Location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10898">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10899">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_call_get_location().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_location_sync"
              c:identifier="mm_gdbus_modem_location_call_get_location_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10925">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.GetLocation"&gt;GetLocation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_call_get_location() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1273"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10936">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10927">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="out_Location"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10928">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10929">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inject_assistance_data"
              c:identifier="mm_gdbus_modem_location_call_inject_assistance_data">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11061">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.InjectAssistanceData"&gt;InjectAssistanceData()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_call_inject_assistance_data_finish() to get the result of the operation.

See mm_gdbus_modem_location_call_inject_assistance_data_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11063">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11064">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11065">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11066">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11067">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inject_assistance_data_finish"
              c:identifier="mm_gdbus_modem_location_call_inject_assistance_data_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11094">Finishes an operation started with mm_gdbus_modem_location_call_inject_assistance_data().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1304"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11102">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11096">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11097">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_call_inject_assistance_data().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_inject_assistance_data_sync"
              c:identifier="mm_gdbus_modem_location_call_inject_assistance_data_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11121">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.InjectAssistanceData"&gt;InjectAssistanceData()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_call_inject_assistance_data() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1309"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11132">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11123">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11124">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11125">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_gps_refresh_rate"
              c:identifier="mm_gdbus_modem_location_call_set_gps_refresh_rate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11159">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetGpsRefreshRate"&gt;SetGpsRefreshRate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_call_set_gps_refresh_rate_finish() to get the result of the operation.

See mm_gdbus_modem_location_call_set_gps_refresh_rate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1315"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11161">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11162">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11164">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_gps_refresh_rate_finish"
              c:identifier="mm_gdbus_modem_location_call_set_gps_refresh_rate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11192">Finishes an operation started with mm_gdbus_modem_location_call_set_gps_refresh_rate().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1322"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11200">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11194">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11195">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_call_set_gps_refresh_rate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_gps_refresh_rate_sync"
              c:identifier="mm_gdbus_modem_location_call_set_gps_refresh_rate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11219">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetGpsRefreshRate"&gt;SetGpsRefreshRate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_call_set_gps_refresh_rate() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1327"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11230">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11221">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11222">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11223">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_supl_server"
              c:identifier="mm_gdbus_modem_location_call_set_supl_server">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10963">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetSuplServer"&gt;SetSuplServer()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_call_set_supl_server_finish() to get the result of the operation.

See mm_gdbus_modem_location_call_set_supl_server_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10965">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_supl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10966">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10967">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10968">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10969">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_supl_server_finish"
              c:identifier="mm_gdbus_modem_location_call_set_supl_server_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10996">Finishes an operation started with mm_gdbus_modem_location_call_set_supl_server().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1286"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11004">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10998">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10999">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_call_set_supl_server().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_supl_server_sync"
              c:identifier="mm_gdbus_modem_location_call_set_supl_server_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11023">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetSuplServer"&gt;SetSuplServer()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_call_set_supl_server() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1291"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11034">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11025">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_supl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11026">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11027">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup"
              c:identifier="mm_gdbus_modem_location_call_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10761">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_call_setup_finish() to get the result of the operation.

See mm_gdbus_modem_location_call_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10763">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10764">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_signal_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10765">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10766">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10767">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10768">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_finish"
              c:identifier="mm_gdbus_modem_location_call_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10797">Finishes an operation started with mm_gdbus_modem_location_call_setup().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1249"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10805">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10799">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_call_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_sync"
              c:identifier="mm_gdbus_modem_location_call_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10824">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_call_setup() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1254"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10836">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10826">A #MmGdbusModemLocationProxy.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="arg_sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10827">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_signal_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10828">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_location"
              c:identifier="mm_gdbus_modem_location_complete_get_location">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11275">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.GetLocation"&gt;GetLocation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11277">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11278">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="Location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11279">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_inject_assistance_data"
              c:identifier="mm_gdbus_modem_location_complete_inject_assistance_data">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11314">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.InjectAssistanceData"&gt;InjectAssistanceData()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11316">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11317">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_gps_refresh_rate"
              c:identifier="mm_gdbus_modem_location_complete_set_gps_refresh_rate">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11332">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetGpsRefreshRate"&gt;SetGpsRefreshRate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11334">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11335">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_supl_server"
              c:identifier="mm_gdbus_modem_location_complete_set_supl_server">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11296">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetSuplServer"&gt;SetSuplServer()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11298">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11299">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_setup"
              c:identifier="mm_gdbus_modem_location_complete_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11257">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.Setup"&gt;Setup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11259">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11260">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_assistance_data_servers"
              c:identifier="mm_gdbus_modem_location_dup_assistance_data_servers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10697">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.AssistanceDataServers"&gt;"AssistanceDataServers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1357"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10705">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10699">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_location"
              c:identifier="mm_gdbus_modem_location_dup_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10595">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Location"&gt;"Location"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1349"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10603">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10597">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supl_server"
              c:identifier="mm_gdbus_modem_location_dup_supl_server"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10646">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SuplServer"&gt;"SuplServer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1353"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10654">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10648">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_assistance_data_servers"
              c:identifier="mm_gdbus_modem_location_get_assistance_data_servers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10679">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.AssistanceDataServers"&gt;"AssistanceDataServers"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_assistance_data_servers() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10689">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10681">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="mm_gdbus_modem_location_get_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10453">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Capabilities"&gt;"Capabilities"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1336"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10461">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10455">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="mm_gdbus_modem_location_get_enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10515">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Enabled"&gt;"Enabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1342"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10523">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10517">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gps_refresh_rate"
              c:identifier="mm_gdbus_modem_location_get_gps_refresh_rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10730">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.GpsRefreshRate"&gt;"GpsRefreshRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1360"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10738">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10732">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="mm_gdbus_modem_location_get_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10577">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Location"&gt;"Location"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_location() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1348"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10587">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10579">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signals_location"
              c:identifier="mm_gdbus_modem_location_get_signals_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10546">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SignalsLocation"&gt;"SignalsLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1345"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10554">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10548">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supl_server"
              c:identifier="mm_gdbus_modem_location_get_supl_server"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10628">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SuplServer"&gt;"SuplServer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_location_dup_supl_server() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1352"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10638">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10630">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_assistance_data"
              c:identifier="mm_gdbus_modem_location_get_supported_assistance_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10484">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SupportedAssistanceData"&gt;"SupportedAssistanceData"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10492">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10486">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_assistance_data_servers"
              c:identifier="mm_gdbus_modem_location_set_assistance_data_servers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10715">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.AssistanceDataServers"&gt;"AssistanceDataServers"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1358"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10717">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10718">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_capabilities"
              c:identifier="mm_gdbus_modem_location_set_capabilities"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10469">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Capabilities"&gt;"Capabilities"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10471">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10472">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="mm_gdbus_modem_location_set_enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10531">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Enabled"&gt;"Enabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1343"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10533">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10534">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gps_refresh_rate"
              c:identifier="mm_gdbus_modem_location_set_gps_refresh_rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10746">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.GpsRefreshRate"&gt;"GpsRefreshRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10748">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10749">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="mm_gdbus_modem_location_set_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10613">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Location"&gt;"Location"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1350"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10615">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10616">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signals_location"
              c:identifier="mm_gdbus_modem_location_set_signals_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10562">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SignalsLocation"&gt;"SignalsLocation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1346"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10564">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10565">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supl_server"
              c:identifier="mm_gdbus_modem_location_set_supl_server"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10664">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SuplServer"&gt;"SuplServer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10666">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10667">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_assistance_data"
              c:identifier="mm_gdbus_modem_location_set_supported_assistance_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10500">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SupportedAssistanceData"&gt;"SupportedAssistanceData"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1340"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10502">A #MmGdbusModemLocation.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10503">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="assistance-data-servers"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10433">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.AssistanceDataServers"&gt;"AssistanceDataServers"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="capabilities" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10379">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Capabilities"&gt;"Capabilities"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10397">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Enabled"&gt;"Enabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="gps-refresh-rate" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10442">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.GpsRefreshRate"&gt;"GpsRefreshRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="location" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10415">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.Location"&gt;"Location"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="signals-location" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10406">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SignalsLocation"&gt;"SignalsLocation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supl-server" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10424">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SuplServer"&gt;"SuplServer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supported-assistance-data"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10388">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Location.SupportedAssistanceData"&gt;"SupportedAssistanceData"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-get-location" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10287">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.GetLocation"&gt;GetLocation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_location_complete_get_location() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10296">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10290">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-inject-assistance-data" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10332">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.InjectAssistanceData"&gt;InjectAssistanceData()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_location_complete_inject_assistance_data() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10342">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10335">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10336">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-gps-refresh-rate" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10355">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetGpsRefreshRate"&gt;SetGpsRefreshRate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_location_complete_set_gps_refresh_rate() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10365">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10358">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10359">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-supl-server" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10309">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.SetSuplServer"&gt;SetSuplServer()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_location_complete_set_supl_server() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10319">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10312">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_supl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10313">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-setup" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10263">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Location.Setup"&gt;Setup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_location_complete_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10274">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10266">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10267">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_signal_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10268">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemLocationIface"
            c:type="MmGdbusModemLocationIface"
            glib:is-gtype-struct-for="GdbusModemLocation">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="10236">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1208"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10238">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_location">
        <callback name="handle_get_location">
          <source-position filename="generated/mm-gdbus-modem.h" line="1167"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_inject_assistance_data">
        <callback name="handle_inject_assistance_data">
          <source-position filename="generated/mm-gdbus-modem.h" line="1171"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_data" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_gps_refresh_rate">
        <callback name="handle_set_gps_refresh_rate">
          <source-position filename="generated/mm-gdbus-modem.h" line="1176"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_rate" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_supl_server">
        <callback name="handle_set_supl_server">
          <source-position filename="generated/mm-gdbus-modem.h" line="1181"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_supl" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_setup">
        <callback name="handle_setup">
          <source-position filename="generated/mm-gdbus-modem.h" line="1186"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_sources" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_signal_location" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_assistance_data_servers">
        <callback name="get_assistance_data_servers">
          <source-position filename="generated/mm-gdbus-modem.h" line="1192"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10689">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10681">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_capabilities">
        <callback name="get_capabilities">
          <source-position filename="generated/mm-gdbus-modem.h" line="1194"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10461">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10455">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_enabled">
        <callback name="get_enabled">
          <source-position filename="generated/mm-gdbus-modem.h" line="1196"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10523">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10517">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_gps_refresh_rate">
        <callback name="get_gps_refresh_rate">
          <source-position filename="generated/mm-gdbus-modem.h" line="1198"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10738">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10732">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_location">
        <callback name="get_location">
          <source-position filename="generated/mm-gdbus-modem.h" line="1200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10587">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10579">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_signals_location">
        <callback name="get_signals_location">
          <source-position filename="generated/mm-gdbus-modem.h" line="1202"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10554">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10548">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supl_server">
        <callback name="get_supl_server">
          <source-position filename="generated/mm-gdbus-modem.h" line="1204"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10638">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10630">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_assistance_data">
        <callback name="get_supported_assistance_data">
          <source-position filename="generated/mm-gdbus-modem.h" line="1206"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="10492">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="10486">A #MmGdbusModemLocation.</doc>
              <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemLocationProxy"
           c:symbol-prefix="gdbus_modem_location_proxy"
           c:type="MmGdbusModemLocationProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemLocationProxy"
           glib:get-type="mm_gdbus_modem_location_proxy_get_type"
           glib:type-struct="GdbusModemLocationProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="11352">The #MmGdbusModemLocationProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1387"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemLocation"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_location_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11726">Finishes an operation started with mm_gdbus_modem_location_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1403"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11733">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemLocationProxy" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11728">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_location_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11816">Finishes an operation started with mm_gdbus_modem_location_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1422"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11823">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemLocationProxy" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11818">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_location_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_location_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11841">Like mm_gdbus_modem_location_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1425"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11856">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemLocationProxy" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11843">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11844">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11845">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11846">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11847">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_location_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11751">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_location_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1406"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="11766">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemLocationProxy" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11753">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11754">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11755">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11756">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11757">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_location_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11696">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_location_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1395"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11698">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11699">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11700">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11701">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11702">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11703">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11704">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_location_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11786">Like mm_gdbus_modem_location_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_location_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_location_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11788">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11789">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11790">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11791">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11792">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11793">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="11794">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemLocationProxyPrivate"
              c:type="MmGdbusModemLocationProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemLocationProxyClass"
            c:type="MmGdbusModemLocationProxyClass"
            glib:is-gtype-struct-for="GdbusModemLocationProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="11358">Class structure for #MmGdbusModemLocationProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1387"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11360">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemLocationProxyPrivate"
            c:type="MmGdbusModemLocationProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1375"/>
    </record>
    <class name="GdbusModemLocationSkeleton"
           c:symbol-prefix="gdbus_modem_location_skeleton"
           c:type="MmGdbusModemLocationSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemLocationSkeleton"
           glib:get-type="mm_gdbus_modem_location_skeleton_get_type"
           glib:type-struct="GdbusModemLocationSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="11878">The #MmGdbusModemLocationSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1457"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemLocation"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem_location_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12419">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1465"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12424">The skeleton object.</doc>
          <type name="GdbusModemLocationSkeleton"
                c:type="MmGdbusModemLocation*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemLocationSkeletonPrivate"
              c:type="MmGdbusModemLocationSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemLocationSkeletonClass"
            c:type="MmGdbusModemLocationSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemLocationSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="11884">Class structure for #MmGdbusModemLocationSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1457"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="11886">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemLocationSkeletonPrivate"
            c:type="MmGdbusModemLocationSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1445"/>
    </record>
    <interface name="GdbusModemMessaging"
               c:symbol-prefix="gdbus_modem_messaging"
               c:type="MmGdbusModemMessaging"
               glib:type-name="MmGdbusModemMessaging"
               glib:get-type="mm_gdbus_modem_messaging_get_type"
               glib:type-struct="GdbusModemMessagingIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="6418">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="690"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_messaging_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6384">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="694"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6389">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_messaging_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6397">Overrides all #GObject properties in the #MmGdbusModemMessaging interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="695"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6405">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6399">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6400">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="added">
        <source-position filename="generated/mm-gdbus-modem.h" line="681"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_received" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deleted">
        <source-position filename="generated/mm-gdbus-modem.h" line="686"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_default_storage"
                      invoker="get_default_storage"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.DefaultStorage"&gt;"DefaultStorage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="675"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6694">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6688">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_messages"
                      invoker="get_messages"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.Messages"&gt;"Messages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_messaging_dup_messages() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="677"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6594">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6586">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_storages"
                      invoker="get_supported_storages"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6635">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.SupportedStorages"&gt;"SupportedStorages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_messaging_dup_supported_storages() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="679"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6645">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6637">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create">
        <source-position filename="generated/mm-gdbus-modem.h" line="661"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="generated/mm-gdbus-modem.h" line="666"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_list">
        <source-position filename="generated/mm-gdbus-modem.h" line="671"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create"
              c:identifier="mm_gdbus_modem_messaging_call_create">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6945">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Create"&gt;Create()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_messaging_call_create_finish() to get the result of the operation.

See mm_gdbus_modem_messaging_call_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="764"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6947">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6948">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6949">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6950">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6951">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_finish"
              c:identifier="mm_gdbus_modem_messaging_call_create_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6978">Finishes an operation started with mm_gdbus_modem_messaging_call_create().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="771"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6987">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6980">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6981">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6982">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_messaging_call_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_sync"
              c:identifier="mm_gdbus_modem_messaging_call_create_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7008">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Create"&gt;Create()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_messaging_call_create() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="777"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="7020">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7010">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7011">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7012">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7013">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="mm_gdbus_modem_messaging_call_delete">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6847">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_messaging_call_delete_finish() to get the result of the operation.

See mm_gdbus_modem_messaging_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="746"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6849">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6850">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6851">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6852">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6853">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="mm_gdbus_modem_messaging_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6880">Finishes an operation started with mm_gdbus_modem_messaging_call_delete().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="753"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6888">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6882">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6883">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_messaging_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="mm_gdbus_modem_messaging_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6907">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_messaging_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="758"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6918">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6909">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6910">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6911">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list"
              c:identifier="mm_gdbus_modem_messaging_call_list">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6749">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.List"&gt;List()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_messaging_call_list_finish() to get the result of the operation.

See mm_gdbus_modem_messaging_call_list_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="728"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6751">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6752">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6753">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6754">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_finish"
              c:identifier="mm_gdbus_modem_messaging_call_list_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6779">Finishes an operation started with mm_gdbus_modem_messaging_call_list().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="734"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6788">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6781">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6782">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6783">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_messaging_call_list().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_sync"
              c:identifier="mm_gdbus_modem_messaging_call_list_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6809">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.List"&gt;List()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_messaging_call_list() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="740"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6820">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6811">A #MmGdbusModemMessagingProxy.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6812">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6813">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create"
              c:identifier="mm_gdbus_modem_messaging_complete_create">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7088">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Create"&gt;Create()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="708"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7090">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7091">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7092">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="mm_gdbus_modem_messaging_complete_delete">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7070">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="704"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7072">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7073">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_list"
              c:identifier="mm_gdbus_modem_messaging_complete_list">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7049">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.List"&gt;List()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="699"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7051">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7052">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7053">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_messages"
              c:identifier="mm_gdbus_modem_messaging_dup_messages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6602">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.Messages"&gt;"Messages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="788"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6610">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6604">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_storages"
              c:identifier="mm_gdbus_modem_messaging_dup_supported_storages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6653">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.SupportedStorages"&gt;"SupportedStorages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="792"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6661">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6655">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_added"
              c:identifier="mm_gdbus_modem_messaging_emit_added">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6717">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Messaging.Added"&gt;"Added"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="716"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6719">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6720">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_received" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6721">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_deleted"
              c:identifier="mm_gdbus_modem_messaging_emit_deleted">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6734">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Messaging.Deleted"&gt;"Deleted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="721"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6736">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6737">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_storage"
              c:identifier="mm_gdbus_modem_messaging_get_default_storage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.DefaultStorage"&gt;"DefaultStorage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="795"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6694">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6688">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_messages"
              c:identifier="mm_gdbus_modem_messaging_get_messages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.Messages"&gt;"Messages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_messaging_dup_messages() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="787"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6594">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6586">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_storages"
              c:identifier="mm_gdbus_modem_messaging_get_supported_storages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6635">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.SupportedStorages"&gt;"SupportedStorages"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_messaging_dup_supported_storages() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="791"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6645">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6637">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_storage"
              c:identifier="mm_gdbus_modem_messaging_set_default_storage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6702">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.DefaultStorage"&gt;"DefaultStorage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="796"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6704">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6705">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_messages"
              c:identifier="mm_gdbus_modem_messaging_set_messages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6620">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.Messages"&gt;"Messages"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="789"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6622">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6623">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_storages"
              c:identifier="mm_gdbus_modem_messaging_set_supported_storages"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6671">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.SupportedStorages"&gt;"SupportedStorages"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="793"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6673">A #MmGdbusModemMessaging.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6674">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-storage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6573">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.DefaultStorage"&gt;"DefaultStorage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="messages" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6555">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.Messages"&gt;"Messages"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="supported-storages"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6564">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Messaging.SupportedStorages"&gt;"SupportedStorages"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="added" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6515">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Messaging.Added"&gt;"Added"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6518">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_received" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6519">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="deleted" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6535">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Messaging.Deleted"&gt;"Deleted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6538">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6491">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Create"&gt;Create()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_messaging_complete_create() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6501">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6494">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6495">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6468">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_messaging_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6478">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6471">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6472">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-list" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6446">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Messaging.List"&gt;List()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_messaging_complete_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6455">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6449">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemMessagingIface"
            c:type="MmGdbusModemMessagingIface"
            glib:is-gtype-struct-for="GdbusModemMessaging">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="6424">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="690"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6426">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create">
        <callback name="handle_create">
          <source-position filename="generated/mm-gdbus-modem.h" line="661"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="generated/mm-gdbus-modem.h" line="666"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_list">
        <callback name="handle_list">
          <source-position filename="generated/mm-gdbus-modem.h" line="671"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_storage">
        <callback name="get_default_storage">
          <source-position filename="generated/mm-gdbus-modem.h" line="675"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6694">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="6688">A #MmGdbusModemMessaging.</doc>
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_messages">
        <callback name="get_messages">
          <source-position filename="generated/mm-gdbus-modem.h" line="677"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6594">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="6586">A #MmGdbusModemMessaging.</doc>
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_storages">
        <callback name="get_supported_storages">
          <source-position filename="generated/mm-gdbus-modem.h" line="679"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="6645">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="6637">A #MmGdbusModemMessaging.</doc>
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="added">
        <callback name="added">
          <source-position filename="generated/mm-gdbus-modem.h" line="681"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_received" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deleted">
        <callback name="deleted">
          <source-position filename="generated/mm-gdbus-modem.h" line="686"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemMessaging"
                    c:type="MmGdbusModemMessaging*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemMessagingProxy"
           c:symbol-prefix="gdbus_modem_messaging_proxy"
           c:type="MmGdbusModemMessagingProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemMessagingProxy"
           glib:get-type="mm_gdbus_modem_messaging_proxy_get_type"
           glib:type-struct="GdbusModemMessagingProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="7111">The #MmGdbusModemMessagingProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="822"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemMessaging"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_messaging_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7405">Finishes an operation started with mm_gdbus_modem_messaging_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="838"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="7412">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemMessagingProxy"
                c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7407">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_messaging_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_messaging_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7495">Finishes an operation started with mm_gdbus_modem_messaging_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="857"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="7502">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemMessagingProxy"
                c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7497">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_messaging_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_messaging_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7520">Like mm_gdbus_modem_messaging_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_messaging_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="860"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="7535">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemMessagingProxy"
                c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7522">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7523">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7524">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7525">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7526">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_messaging_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7430">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_messaging_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="841"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="7445">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemMessagingProxy"
                c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7432">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7433">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7434">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7435">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7436">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_messaging_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7375">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_messaging_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_messaging_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7377">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7378">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7379">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7380">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7381">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7382">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7383">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_messaging_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7465">Like mm_gdbus_modem_messaging_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_messaging_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_messaging_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="849"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7467">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7468">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7469">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7470">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7472">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="7473">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemMessagingProxyPrivate"
              c:type="MmGdbusModemMessagingProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemMessagingProxyClass"
            c:type="MmGdbusModemMessagingProxyClass"
            glib:is-gtype-struct-for="GdbusModemMessagingProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="7117">Class structure for #MmGdbusModemMessagingProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="822"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7119">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemMessagingProxyPrivate"
            c:type="MmGdbusModemMessagingProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="810"/>
    </record>
    <class name="GdbusModemMessagingSkeleton"
           c:symbol-prefix="gdbus_modem_messaging_skeleton"
           c:type="MmGdbusModemMessagingSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemMessagingSkeleton"
           glib:get-type="mm_gdbus_modem_messaging_skeleton_get_type"
           glib:type-struct="GdbusModemMessagingSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="7557">The #MmGdbusModemMessagingSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="892"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemMessaging"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem_messaging_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8085">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="900"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8090">The skeleton object.</doc>
          <type name="GdbusModemMessagingSkeleton"
                c:type="MmGdbusModemMessaging*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemMessagingSkeletonPrivate"
              c:type="MmGdbusModemMessagingSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemMessagingSkeletonClass"
            c:type="MmGdbusModemMessagingSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemMessagingSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="7563">Class structure for #MmGdbusModemMessagingSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="892"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="7565">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemMessagingSkeletonPrivate"
            c:type="MmGdbusModemMessagingSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="880"/>
    </record>
    <interface name="GdbusModemOma"
               c:symbol-prefix="gdbus_modem_oma"
               c:type="MmGdbusModemOma"
               glib:type-name="MmGdbusModemOma"
               glib:get-type="mm_gdbus_modem_oma_get_type"
               glib:type-struct="GdbusModemOmaIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15132">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1893"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_oma_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15097">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1897"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15102">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_oma_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15110">Overrides all #GObject properties in the #MmGdbusModemOma interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1898"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15118">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15112">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15113">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_features"
                      invoker="get_features"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15314">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.Features"&gt;"Features"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1879"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15322">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15316">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pending_network_initiated_sessions"
                      invoker="get_pending_network_initiated_sessions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15345">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.PendingNetworkInitiatedSessions"&gt;"PendingNetworkInitiatedSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_oma_dup_pending_network_initiated_sessions() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1881"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15355">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15347">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_session_state"
                      invoker="get_session_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15427">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionState"&gt;"SessionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1883"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15435">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15429">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_session_type"
                      invoker="get_session_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15396">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionType"&gt;"SessionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1885"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15404">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15398">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_accept_network_initiated_session">
        <source-position filename="generated/mm-gdbus-modem.h" line="1859"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_accept" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel_session">
        <source-position filename="generated/mm-gdbus-modem.h" line="1865"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_setup">
        <source-position filename="generated/mm-gdbus-modem.h" line="1869"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_features" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_client_initiated_session">
        <source-position filename="generated/mm-gdbus-modem.h" line="1874"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session_type" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_state_changed">
        <source-position filename="generated/mm-gdbus-modem.h" line="1887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_old_session_state" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new_session_state" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_session_state_failed_reason"
                     transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_accept_network_initiated_session"
              c:identifier="mm_gdbus_modem_oma_call_accept_network_initiated_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15673">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.AcceptNetworkInitiatedSession"&gt;AcceptNetworkInitiatedSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_call_accept_network_initiated_session_finish() to get the result of the operation.

See mm_gdbus_modem_oma_call_accept_network_initiated_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1966"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15675">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15676">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_accept" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15677">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15678">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15679">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15680">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_accept_network_initiated_session_finish"
              c:identifier="mm_gdbus_modem_oma_call_accept_network_initiated_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15709">Finishes an operation started with mm_gdbus_modem_oma_call_accept_network_initiated_session().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1974"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15717">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15711">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15712">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_call_accept_network_initiated_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_accept_network_initiated_session_sync"
              c:identifier="mm_gdbus_modem_oma_call_accept_network_initiated_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15736">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.AcceptNetworkInitiatedSession"&gt;AcceptNetworkInitiatedSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_call_accept_network_initiated_session() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1979"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15748">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15738">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15739">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_accept" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15740">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15741">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_session"
              c:identifier="mm_gdbus_modem_oma_call_cancel_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15777">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.CancelSession"&gt;CancelSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_call_cancel_session_finish() to get the result of the operation.

See mm_gdbus_modem_oma_call_cancel_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15779">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15780">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15781">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15782">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_session_finish"
              c:identifier="mm_gdbus_modem_oma_call_cancel_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15807">Finishes an operation started with mm_gdbus_modem_oma_call_cancel_session().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1992"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15815">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15809">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15810">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_call_cancel_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_session_sync"
              c:identifier="mm_gdbus_modem_oma_call_cancel_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15834">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.CancelSession"&gt;CancelSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_call_cancel_session() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1997"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15844">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15836">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15837">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup" c:identifier="mm_gdbus_modem_oma_call_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15477">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_call_setup_finish() to get the result of the operation.

See mm_gdbus_modem_oma_call_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1930"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15479">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15480">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15481">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15482">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15483">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_finish"
              c:identifier="mm_gdbus_modem_oma_call_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15510">Finishes an operation started with mm_gdbus_modem_oma_call_setup().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1937"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15518">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15512">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15513">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_call_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_sync"
              c:identifier="mm_gdbus_modem_oma_call_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15537">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_call_setup() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1942"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15548">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15539">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15540">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15541">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_client_initiated_session"
              c:identifier="mm_gdbus_modem_oma_call_start_client_initiated_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15575">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.StartClientInitiatedSession"&gt;StartClientInitiatedSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_call_start_client_initiated_session_finish() to get the result of the operation.

See mm_gdbus_modem_oma_call_start_client_initiated_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1948"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15577">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_session_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15578">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15579">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15580">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15581">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_client_initiated_session_finish"
              c:identifier="mm_gdbus_modem_oma_call_start_client_initiated_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15608">Finishes an operation started with mm_gdbus_modem_oma_call_start_client_initiated_session().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1955"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15616">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15610">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15611">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_call_start_client_initiated_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_client_initiated_session_sync"
              c:identifier="mm_gdbus_modem_oma_call_start_client_initiated_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15635">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.StartClientInitiatedSession"&gt;StartClientInitiatedSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_call_start_client_initiated_session() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1960"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15646">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15637">A #MmGdbusModemOmaProxy.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_session_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15638">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15639">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_accept_network_initiated_session"
              c:identifier="mm_gdbus_modem_oma_complete_accept_network_initiated_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15905">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.AcceptNetworkInitiatedSession"&gt;AcceptNetworkInitiatedSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1910"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15907">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15908">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel_session"
              c:identifier="mm_gdbus_modem_oma_complete_cancel_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15923">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.CancelSession"&gt;CancelSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1914"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15925">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15926">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_setup"
              c:identifier="mm_gdbus_modem_oma_complete_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15869">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.Setup"&gt;Setup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1902"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15871">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15872">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_client_initiated_session"
              c:identifier="mm_gdbus_modem_oma_complete_start_client_initiated_session">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15887">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.StartClientInitiatedSession"&gt;StartClientInitiatedSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1906"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15889">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15890">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_pending_network_initiated_sessions"
              c:identifier="mm_gdbus_modem_oma_dup_pending_network_initiated_sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15363">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.PendingNetworkInitiatedSessions"&gt;"PendingNetworkInitiatedSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2009"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15371">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15365">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_session_state_changed"
              c:identifier="mm_gdbus_modem_oma_emit_session_state_changed">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15458">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Oma.SessionStateChanged"&gt;"SessionStateChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1921"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15460">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="arg_old_session_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15461">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new_session_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15462">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_session_state_failed_reason"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15463">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_features"
              c:identifier="mm_gdbus_modem_oma_get_features"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15314">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.Features"&gt;"Features"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2005"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15322">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15316">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pending_network_initiated_sessions"
              c:identifier="mm_gdbus_modem_oma_get_pending_network_initiated_sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15345">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.PendingNetworkInitiatedSessions"&gt;"PendingNetworkInitiatedSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_oma_dup_pending_network_initiated_sessions() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2008"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15355">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15347">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_state"
              c:identifier="mm_gdbus_modem_oma_get_session_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15427">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionState"&gt;"SessionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2015"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15435">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15429">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_type"
              c:identifier="mm_gdbus_modem_oma_get_session_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15396">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionType"&gt;"SessionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2012"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15404">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15398">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_features"
              c:identifier="mm_gdbus_modem_oma_set_features"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15330">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.Features"&gt;"Features"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2006"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15332">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15333">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pending_network_initiated_sessions"
              c:identifier="mm_gdbus_modem_oma_set_pending_network_initiated_sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15381">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.PendingNetworkInitiatedSessions"&gt;"PendingNetworkInitiatedSessions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15383">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15384">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_state"
              c:identifier="mm_gdbus_modem_oma_set_session_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15443">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionState"&gt;"SessionState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2016"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15445">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15446">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_type"
              c:identifier="mm_gdbus_modem_oma_set_session_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15412">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionType"&gt;"SessionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2013"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15414">A #MmGdbusModemOma.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15415">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="features" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15276">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.Features"&gt;"Features"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pending-network-initiated-sessions"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15285">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.PendingNetworkInitiatedSessions"&gt;"PendingNetworkInitiatedSessions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="session-state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15303">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionState"&gt;"SessionState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="session-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15294">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Oma.SessionType"&gt;"SessionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-accept-network-initiated-session" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15207">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.AcceptNetworkInitiatedSession"&gt;AcceptNetworkInitiatedSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_oma_complete_accept_network_initiated_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15218">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15210">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15211">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_accept" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15212">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel-session" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15231">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.CancelSession"&gt;CancelSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_oma_complete_cancel_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15240">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15234">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-setup" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15161">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.Setup"&gt;Setup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_oma_complete_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15171">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15164">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15165">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-client-initiated-session" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15184">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Oma.StartClientInitiatedSession"&gt;StartClientInitiatedSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_oma_complete_start_client_initiated_session() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15194">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15187">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15188">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-state-changed" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15254">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Oma.SessionStateChanged"&gt;"SessionStateChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_old_session_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15257">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_new_session_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15258">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_session_state_failed_reason"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15259">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemOmaIface"
            c:type="MmGdbusModemOmaIface"
            glib:is-gtype-struct-for="GdbusModemOma">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15138">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1893"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15140">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_accept_network_initiated_session">
        <callback name="handle_accept_network_initiated_session">
          <source-position filename="generated/mm-gdbus-modem.h" line="1859"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session_id" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_accept" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel_session">
        <callback name="handle_cancel_session">
          <source-position filename="generated/mm-gdbus-modem.h" line="1865"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_setup">
        <callback name="handle_setup">
          <source-position filename="generated/mm-gdbus-modem.h" line="1869"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_features" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_client_initiated_session">
        <callback name="handle_start_client_initiated_session">
          <source-position filename="generated/mm-gdbus-modem.h" line="1874"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session_type" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_features">
        <callback name="get_features">
          <source-position filename="generated/mm-gdbus-modem.h" line="1879"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15322">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="15316">A #MmGdbusModemOma.</doc>
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pending_network_initiated_sessions">
        <callback name="get_pending_network_initiated_sessions">
          <source-position filename="generated/mm-gdbus-modem.h" line="1881"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15355">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="15347">A #MmGdbusModemOma.</doc>
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_session_state">
        <callback name="get_session_state">
          <source-position filename="generated/mm-gdbus-modem.h" line="1883"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15435">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="15429">A #MmGdbusModemOma.</doc>
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_session_type">
        <callback name="get_session_type">
          <source-position filename="generated/mm-gdbus-modem.h" line="1885"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="15404">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="15398">A #MmGdbusModemOma.</doc>
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_state_changed">
        <callback name="session_state_changed">
          <source-position filename="generated/mm-gdbus-modem.h" line="1887"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
            </parameter>
            <parameter name="arg_old_session_state" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_new_session_state" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_session_state_failed_reason"
                       transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemOmaProxy"
           c:symbol-prefix="gdbus_modem_oma_proxy"
           c:type="MmGdbusModemOmaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemOmaProxy"
           glib:get-type="mm_gdbus_modem_oma_proxy_get_type"
           glib:type-struct="GdbusModemOmaProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15943">The #MmGdbusModemOmaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2042"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemOma"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_oma_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16249">Finishes an operation started with mm_gdbus_modem_oma_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2058"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="16256">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemOmaProxy" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16251">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_oma_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16339">Finishes an operation started with mm_gdbus_modem_oma_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2077"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="16346">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemOmaProxy" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16341">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_oma_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_oma_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16364">Like mm_gdbus_modem_oma_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2080"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="16379">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemOmaProxy" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16366">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16367">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16368">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16369">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16370">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_oma_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16274">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_oma_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2061"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="16289">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemOmaProxy" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16276">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16277">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16278">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16279">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16280">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_oma_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16219">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_oma_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2050"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16221">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16222">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16223">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16224">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16225">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16226">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16227">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_oma_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16309">Like mm_gdbus_modem_oma_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_oma_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_oma_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2069"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16311">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16312">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16313">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16314">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16315">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16316">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="16317">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemOmaProxyPrivate"
              c:type="MmGdbusModemOmaProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemOmaProxyClass"
            c:type="MmGdbusModemOmaProxyClass"
            glib:is-gtype-struct-for="GdbusModemOmaProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15949">Class structure for #MmGdbusModemOmaProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2042"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15951">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemOmaProxyPrivate"
            c:type="MmGdbusModemOmaProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2030"/>
    </record>
    <class name="GdbusModemOmaSkeleton"
           c:symbol-prefix="gdbus_modem_oma_skeleton"
           c:type="MmGdbusModemOmaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemOmaSkeleton"
           glib:get-type="mm_gdbus_modem_oma_skeleton_get_type"
           glib:type-struct="GdbusModemOmaSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="16401">The #MmGdbusModemOmaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2112"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemOma"/>
      <constructor name="new" c:identifier="mm_gdbus_modem_oma_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16919">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="16924">The skeleton object.</doc>
          <type name="GdbusModemOmaSkeleton" c:type="MmGdbusModemOma*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemOmaSkeletonPrivate"
              c:type="MmGdbusModemOmaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemOmaSkeletonClass"
            c:type="MmGdbusModemOmaSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemOmaSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="16407">Class structure for #MmGdbusModemOmaSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2112"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="16409">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemOmaSkeletonPrivate"
            c:type="MmGdbusModemOmaSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="2100"/>
    </record>
    <class name="GdbusModemProxy"
           c:symbol-prefix="gdbus_modem_proxy"
           c:type="MmGdbusModemProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemProxy"
           glib:get-type="mm_gdbus_modem_proxy_get_type"
           glib:type-struct="GdbusModemProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="4377">The #MmGdbusModemProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="562"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5097">Finishes an operation started with mm_gdbus_modem_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="578"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="5104">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemProxy" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5099">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5187">Finishes an operation started with mm_gdbus_modem_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="597"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="5194">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemProxy" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5189">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5212">Like mm_gdbus_modem_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="600"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="5227">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemProxy" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5214">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5215">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5216">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5217">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5218">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5122">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="581"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="5137">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemProxy" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5124">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5125">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5126">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5127">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5128">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5067">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="570"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5069">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5070">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5071">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5072">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5073">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5074">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5075">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5157">Like mm_gdbus_modem_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="589"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5159">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5160">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5161">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5162">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5164">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="5165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemProxyPrivate"
              c:type="MmGdbusModemProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemProxyClass"
            c:type="MmGdbusModemProxyClass"
            glib:is-gtype-struct-for="GdbusModemProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="4383">Class structure for #MmGdbusModemProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="562"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="4385">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemProxyPrivate"
            c:type="MmGdbusModemProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="550"/>
    </record>
    <interface name="GdbusModemSignal"
               c:symbol-prefix="gdbus_modem_signal"
               c:type="MmGdbusModemSignal"
               glib:type-name="MmGdbusModemSignal"
               glib:get-type="mm_gdbus_modem_signal_get_type"
               glib:type-struct="GdbusModemSignalIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24797">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3158"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_signal_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24760">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24765">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_signal_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24773">Overrides all #GObject properties in the #MmGdbusModemSignal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24781">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24775">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24776">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_cdma" invoker="get_cdma" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24935">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Cdma"&gt;"Cdma"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_cdma() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24945">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24937">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_evdo" invoker="get_evdo" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24986">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Evdo"&gt;"Evdo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_evdo() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24996">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24988">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_gsm" invoker="get_gsm" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25037">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Gsm"&gt;"Gsm"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_gsm() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25047">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25039">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lte" invoker="get_lte" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Lte"&gt;"Lte"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_lte() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25141">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rate" invoker="get_rate" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24904">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24912">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24906">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_umts" invoker="get_umts" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25088">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Umts"&gt;"Umts"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_umts() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25098">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25090">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_setup">
        <source-position filename="generated/mm-gdbus-modem.h" line="3141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_setup"
              c:identifier="mm_gdbus_modem_signal_call_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25190">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Signal.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_signal_call_setup_finish() to get the result of the operation.

See mm_gdbus_modem_signal_call_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25192">A #MmGdbusModemSignalProxy.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25193">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25194">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25195">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25196">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_finish"
              c:identifier="mm_gdbus_modem_signal_call_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25223">Finishes an operation started with mm_gdbus_modem_signal_call_setup().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3181"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25231">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25225">A #MmGdbusModemSignalProxy.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25226">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_signal_call_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_setup_sync"
              c:identifier="mm_gdbus_modem_signal_call_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25250">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Signal.Setup"&gt;Setup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_signal_call_setup() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3186"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25261">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25252">A #MmGdbusModemSignalProxy.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25253">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25254">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_setup"
              c:identifier="mm_gdbus_modem_signal_complete_setup">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25288">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Signal.Setup"&gt;Setup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25290">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25291">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_cdma"
              c:identifier="mm_gdbus_modem_signal_dup_cdma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24953">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Cdma"&gt;"Cdma"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24961">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24955">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_evdo"
              c:identifier="mm_gdbus_modem_signal_dup_evdo"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25004">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Evdo"&gt;"Evdo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25012">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25006">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_gsm"
              c:identifier="mm_gdbus_modem_signal_dup_gsm"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25055">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Gsm"&gt;"Gsm"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3207"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25063">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25057">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_lte"
              c:identifier="mm_gdbus_modem_signal_dup_lte"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25157">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Lte"&gt;"Lte"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25165">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25159">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_umts"
              c:identifier="mm_gdbus_modem_signal_dup_umts"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25106">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Umts"&gt;"Umts"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25114">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25108">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma"
              c:identifier="mm_gdbus_modem_signal_get_cdma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24935">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Cdma"&gt;"Cdma"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_cdma() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24945">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24937">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_evdo"
              c:identifier="mm_gdbus_modem_signal_get_evdo"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24986">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Evdo"&gt;"Evdo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_evdo() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24996">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24988">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gsm"
              c:identifier="mm_gdbus_modem_signal_get_gsm"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25037">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Gsm"&gt;"Gsm"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_gsm() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25047">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25039">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lte"
              c:identifier="mm_gdbus_modem_signal_get_lte"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Lte"&gt;"Lte"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_lte() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25141">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate"
              c:identifier="mm_gdbus_modem_signal_get_rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24904">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24912">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24906">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_umts"
              c:identifier="mm_gdbus_modem_signal_get_umts"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25088">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Umts"&gt;"Umts"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_signal_dup_umts() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25098">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25090">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cdma"
              c:identifier="mm_gdbus_modem_signal_set_cdma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24971">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Cdma"&gt;"Cdma"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24973">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24974">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_evdo"
              c:identifier="mm_gdbus_modem_signal_set_evdo"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25022">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Evdo"&gt;"Evdo"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25024">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25025">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gsm"
              c:identifier="mm_gdbus_modem_signal_set_gsm"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25073">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Gsm"&gt;"Gsm"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25075">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25076">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lte"
              c:identifier="mm_gdbus_modem_signal_set_lte"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25175">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Lte"&gt;"Lte"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25177">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25178">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate"
              c:identifier="mm_gdbus_modem_signal_set_rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24920">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24922">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24923">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_umts"
              c:identifier="mm_gdbus_modem_signal_set_umts"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25124">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Umts"&gt;"Umts"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25126">A #MmGdbusModemSignal.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25127">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="cdma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24857">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Cdma"&gt;"Cdma"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="evdo" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24866">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Evdo"&gt;"Evdo"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="gsm" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24875">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Gsm"&gt;"Gsm"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="lte" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24893">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Lte"&gt;"Lte"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="rate" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24848">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Rate"&gt;"Rate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="umts" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24884">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Signal.Umts"&gt;"Umts"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="handle-setup" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24824">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Signal.Setup"&gt;Setup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_signal_complete_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24834">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24827">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24828">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemSignalIface"
            c:type="MmGdbusModemSignalIface"
            glib:is-gtype-struct-for="GdbusModemSignal">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24803">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3158"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24805">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_setup">
        <callback name="handle_setup">
          <source-position filename="generated/mm-gdbus-modem.h" line="3141"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_rate" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cdma">
        <callback name="get_cdma">
          <source-position filename="generated/mm-gdbus-modem.h" line="3146"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24945">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="24937">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_evdo">
        <callback name="get_evdo">
          <source-position filename="generated/mm-gdbus-modem.h" line="3148"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24996">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="24988">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_gsm">
        <callback name="get_gsm">
          <source-position filename="generated/mm-gdbus-modem.h" line="3150"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25047">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="25039">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lte">
        <callback name="get_lte">
          <source-position filename="generated/mm-gdbus-modem.h" line="3152"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="25141">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rate">
        <callback name="get_rate">
          <source-position filename="generated/mm-gdbus-modem.h" line="3154"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24912">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="24906">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_umts">
        <callback name="get_umts">
          <source-position filename="generated/mm-gdbus-modem.h" line="3156"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25098">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="25090">A #MmGdbusModemSignal.</doc>
              <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemSignalProxy"
           c:symbol-prefix="gdbus_modem_signal_proxy"
           c:type="MmGdbusModemSignalProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemSignalProxy"
           glib:get-type="mm_gdbus_modem_signal_proxy_get_type"
           glib:type-struct="GdbusModemSignalProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="25308">The #MmGdbusModemSignalProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3242"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemSignal"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_signal_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25638">Finishes an operation started with mm_gdbus_modem_signal_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3258"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25645">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSignalProxy" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25640">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_signal_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_signal_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25728">Finishes an operation started with mm_gdbus_modem_signal_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3277"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25735">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSignalProxy" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25730">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_signal_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_signal_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25753">Like mm_gdbus_modem_signal_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_signal_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3280"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25768">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSignalProxy" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25755">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25756">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25757">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25758">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25759">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_signal_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25663">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_signal_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3261"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="25678">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSignalProxy" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25665">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25666">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25667">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25668">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25669">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_signal_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25608">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_signal_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_signal_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25610">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25611">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25612">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25613">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25614">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25615">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25616">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_signal_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25698">Like mm_gdbus_modem_signal_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_signal_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_signal_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25700">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25701">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25702">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25703">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25704">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25705">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="25706">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemSignalProxyPrivate"
              c:type="MmGdbusModemSignalProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemSignalProxyClass"
            c:type="MmGdbusModemSignalProxyClass"
            glib:is-gtype-struct-for="GdbusModemSignalProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="25314">Class structure for #MmGdbusModemSignalProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3242"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25316">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemSignalProxyPrivate"
            c:type="MmGdbusModemSignalProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3230"/>
    </record>
    <class name="GdbusModemSignalSkeleton"
           c:symbol-prefix="gdbus_modem_signal_skeleton"
           c:type="MmGdbusModemSignalSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemSignalSkeleton"
           glib:get-type="mm_gdbus_modem_signal_skeleton_get_type"
           glib:type-struct="GdbusModemSignalSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="25790">The #MmGdbusModemSignalSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3312"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemSignal"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem_signal_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26305">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3320"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26310">The skeleton object.</doc>
          <type name="GdbusModemSignalSkeleton" c:type="MmGdbusModemSignal*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemSignalSkeletonPrivate"
              c:type="MmGdbusModemSignalSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemSignalSkeletonClass"
            c:type="MmGdbusModemSignalSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemSignalSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="25796">Class structure for #MmGdbusModemSignalSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3312"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="25798">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemSignalSkeletonPrivate"
            c:type="MmGdbusModemSignalSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3300"/>
    </record>
    <interface name="GdbusModemSimple"
               c:symbol-prefix="gdbus_modem_simple"
               c:type="MmGdbusModemSimple"
               glib:type-name="MmGdbusModemSimple"
               glib:get-type="mm_gdbus_modem_simple_get_type"
               glib:type-struct="GdbusModemSimpleIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23524">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2936"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_simple_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23493">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2940"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23498">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_simple_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23506">Overrides all #GObject properties in the #MmGdbusModemSimple interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2941"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23514">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23508">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23509">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_connect">
        <source-position filename="generated/mm-gdbus-modem.h" line="2922"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_disconnect">
        <source-position filename="generated/mm-gdbus-modem.h" line="2927"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_status">
        <source-position filename="generated/mm-gdbus-modem.h" line="2932"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_connect"
              c:identifier="mm_gdbus_modem_simple_call_connect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23617">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_simple_call_connect_finish() to get the result of the operation.

See mm_gdbus_modem_simple_call_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2962"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23619">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23620">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23621">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23622">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23623">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_finish"
              c:identifier="mm_gdbus_modem_simple_call_connect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23650">Finishes an operation started with mm_gdbus_modem_simple_call_connect().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2969"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23659">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23652">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="out_bearer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23653">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23654">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_simple_call_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_sync"
              c:identifier="mm_gdbus_modem_simple_call_connect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23680">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_simple_call_connect() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2975"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23692">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23682">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23683">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_bearer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23684">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23685">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect"
              c:identifier="mm_gdbus_modem_simple_call_disconnect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23721">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_simple_call_disconnect_finish() to get the result of the operation.

See mm_gdbus_modem_simple_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23723">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23724">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23725">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23726">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23727">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="mm_gdbus_modem_simple_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23754">Finishes an operation started with mm_gdbus_modem_simple_call_disconnect().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2989"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23762">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23756">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23757">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_simple_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="mm_gdbus_modem_simple_call_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23781">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_simple_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2994"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23792">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23783">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23784">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23785">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_status"
              c:identifier="mm_gdbus_modem_simple_call_get_status">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23819">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.GetStatus"&gt;GetStatus()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_simple_call_get_status_finish() to get the result of the operation.

See mm_gdbus_modem_simple_call_get_status_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23821">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23822">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23823">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23824">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_status_finish"
              c:identifier="mm_gdbus_modem_simple_call_get_status_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23849">Finishes an operation started with mm_gdbus_modem_simple_call_get_status().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3006"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23858">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23851">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23852">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23853">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_simple_call_get_status().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_status_sync"
              c:identifier="mm_gdbus_modem_simple_call_get_status_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23879">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.GetStatus"&gt;GetStatus()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_simple_call_get_status() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3012"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23890">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23881">A #MmGdbusModemSimpleProxy.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="out_properties"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23882">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23883">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_connect"
              c:identifier="mm_gdbus_modem_simple_complete_connect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23917">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Connect"&gt;Connect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2945"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23919">A #MmGdbusModemSimple.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23920">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23921">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="mm_gdbus_modem_simple_complete_disconnect">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23938">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2950"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23940">A #MmGdbusModemSimple.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23941">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_status"
              c:identifier="mm_gdbus_modem_simple_complete_get_status">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23956">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.GetStatus"&gt;GetStatus()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="2954"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23958">A #MmGdbusModemSimple.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23959">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23960">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-connect" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23547">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Connect"&gt;Connect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_simple_complete_connect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23557">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23550">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23551">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23570">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_simple_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23580">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23573">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23574">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-status" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23593">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Simple.GetStatus"&gt;GetStatus()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_simple_complete_get_status() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23602">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="23596">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemSimpleIface"
            c:type="MmGdbusModemSimpleIface"
            glib:is-gtype-struct-for="GdbusModemSimple">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23530">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2936"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23532">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_connect">
        <callback name="handle_connect">
          <source-position filename="generated/mm-gdbus-modem.h" line="2922"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="generated/mm-gdbus-modem.h" line="2927"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_bearer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_status">
        <callback name="handle_get_status">
          <source-position filename="generated/mm-gdbus-modem.h" line="2932"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemSimpleProxy"
           c:symbol-prefix="gdbus_modem_simple_proxy"
           c:type="MmGdbusModemSimpleProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemSimpleProxy"
           glib:get-type="mm_gdbus_modem_simple_proxy_get_type"
           glib:type-struct="GdbusModemSimpleProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23979">The #MmGdbusModemSimpleProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3043"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemSimple"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_simple_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24170">Finishes an operation started with mm_gdbus_modem_simple_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3059"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24177">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSimpleProxy" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24172">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_simple_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_simple_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24260">Finishes an operation started with mm_gdbus_modem_simple_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3078"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24267">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSimpleProxy" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24262">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_simple_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_simple_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24285">Like mm_gdbus_modem_simple_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_simple_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3081"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24300">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSimpleProxy" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24287">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24288">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24289">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24290">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24291">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_simple_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24195">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_simple_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3062"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24210">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemSimpleProxy" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24197">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24198">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24199">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24200">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24201">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_simple_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24140">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_simple_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_simple_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3051"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24142">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24143">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24144">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24145">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24146">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24147">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24148">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_simple_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24230">Like mm_gdbus_modem_simple_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_simple_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_simple_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3070"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24232">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24233">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24234">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24235">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24236">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24237">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="24238">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemSimpleProxyPrivate"
              c:type="MmGdbusModemSimpleProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemSimpleProxyClass"
            c:type="MmGdbusModemSimpleProxyClass"
            glib:is-gtype-struct-for="GdbusModemSimpleProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23985">Class structure for #MmGdbusModemSimpleProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3043"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23987">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemSimpleProxyPrivate"
            c:type="MmGdbusModemSimpleProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3031"/>
    </record>
    <class name="GdbusModemSimpleSkeleton"
           c:symbol-prefix="gdbus_modem_simple_skeleton"
           c:type="MmGdbusModemSimpleSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemSimpleSkeleton"
           glib:get-type="mm_gdbus_modem_simple_skeleton_get_type"
           glib:type-struct="GdbusModemSimpleSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24322">The #MmGdbusModemSimpleSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3113"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemSimple"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_modem_simple_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24593">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24598">The skeleton object.</doc>
          <type name="GdbusModemSimpleSkeleton" c:type="MmGdbusModemSimple*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemSimpleSkeletonPrivate"
              c:type="MmGdbusModemSimpleSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemSimpleSkeletonClass"
            c:type="MmGdbusModemSimpleSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemSimpleSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24328">Class structure for #MmGdbusModemSimpleSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3113"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24330">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemSimpleSkeletonPrivate"
            c:type="MmGdbusModemSimpleSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3101"/>
    </record>
    <class name="GdbusModemSkeleton"
           c:symbol-prefix="gdbus_modem_skeleton"
           c:type="MmGdbusModemSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemSkeleton"
           glib:get-type="mm_gdbus_modem_skeleton_get_type"
           glib:type-struct="GdbusModemSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="5249">The #MmGdbusModemSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="632"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModem"/>
      <constructor name="new" c:identifier="mm_gdbus_modem_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6105">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="640"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6110">The skeleton object.</doc>
          <type name="GdbusModemSkeleton" c:type="MmGdbusModem*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemSkeletonPrivate"
              c:type="MmGdbusModemSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemSkeletonClass"
            c:type="MmGdbusModemSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="5255">Class structure for #MmGdbusModemSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="632"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="5257">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemSkeletonPrivate"
            c:type="MmGdbusModemSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="620"/>
    </record>
    <interface name="GdbusModemTime"
               c:symbol-prefix="gdbus_modem_time"
               c:type="MmGdbusModemTime"
               glib:type-name="MmGdbusModemTime"
               glib:get-type="mm_gdbus_modem_time_get_type"
               glib:type-struct="GdbusModemTimeIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12582">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1496"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_time_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12550">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1500"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12555">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_time_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12563">Overrides all #GObject properties in the #MmGdbusModemTime interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1501"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12571">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12565">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12566">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_network_timezone"
                      invoker="get_network_timezone"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12659">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Time.NetworkTimezone"&gt;"NetworkTimezone"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_time_dup_network_timezone() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12669">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12661">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_network_time">
        <source-position filename="generated/mm-gdbus-modem.h" line="1486"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="network_time_changed">
        <source-position filename="generated/mm-gdbus-modem.h" line="1492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_network_time"
              c:identifier="mm_gdbus_modem_time_call_get_network_time">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12725">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Time.GetNetworkTime"&gt;GetNetworkTime()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_time_call_get_network_time_finish() to get the result of the operation.

See mm_gdbus_modem_time_call_get_network_time_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1520"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12727">A #MmGdbusModemTimeProxy.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12728">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12729">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12730">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_network_time_finish"
              c:identifier="mm_gdbus_modem_time_call_get_network_time_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12755">Finishes an operation started with mm_gdbus_modem_time_call_get_network_time().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1526"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12764">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12757">A #MmGdbusModemTimeProxy.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="out_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12758">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12759">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_time_call_get_network_time().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_network_time_sync"
              c:identifier="mm_gdbus_modem_time_call_get_network_time_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12785">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Time.GetNetworkTime"&gt;GetNetworkTime()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_time_call_get_network_time() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1532"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12796">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12787">A #MmGdbusModemTimeProxy.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="out_time"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12788">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12789">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_network_time"
              c:identifier="mm_gdbus_modem_time_complete_get_network_time">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12823">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Time.GetNetworkTime"&gt;GetNetworkTime()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1505"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12825">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12826">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12827">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_network_timezone"
              c:identifier="mm_gdbus_modem_time_dup_network_timezone"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12677">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Time.NetworkTimezone"&gt;"NetworkTimezone"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1542"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12685">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12679">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_network_time_changed"
              c:identifier="mm_gdbus_modem_time_emit_network_time_changed">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12710">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Time.NetworkTimeChanged"&gt;"NetworkTimeChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1513"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12712">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12713">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_timezone"
              c:identifier="mm_gdbus_modem_time_get_network_timezone"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12659">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Time.NetworkTimezone"&gt;"NetworkTimezone"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_time_dup_network_timezone() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1541"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12669">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12661">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_network_timezone"
              c:identifier="mm_gdbus_modem_time_set_network_timezone"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12695">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Time.NetworkTimezone"&gt;"NetworkTimezone"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1543"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12697">A #MmGdbusModemTime.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12698">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="network-timezone" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12648">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Time.NetworkTimezone"&gt;"NetworkTimezone"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="handle-get-network-time" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12605">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Time.GetNetworkTime"&gt;GetNetworkTime()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_time_complete_get_network_time() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12614">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12608">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="network-time-changed" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12628">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Time.NetworkTimeChanged"&gt;"NetworkTimeChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12631">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemTimeIface"
            c:type="MmGdbusModemTimeIface"
            glib:is-gtype-struct-for="GdbusModemTime">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12588">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1496"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12590">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_network_time">
        <callback name="handle_get_network_time">
          <source-position filename="generated/mm-gdbus-modem.h" line="1486"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_network_timezone">
        <callback name="get_network_timezone">
          <source-position filename="generated/mm-gdbus-modem.h" line="1490"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="12669">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="12661">A #MmGdbusModemTime.</doc>
              <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="network_time_changed">
        <callback name="network_time_changed">
          <source-position filename="generated/mm-gdbus-modem.h" line="1492"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
            </parameter>
            <parameter name="arg_time" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemTimeProxy"
           c:symbol-prefix="gdbus_modem_time_proxy"
           c:type="MmGdbusModemTimeProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemTimeProxy"
           glib:get-type="mm_gdbus_modem_time_proxy_get_type"
           glib:type-struct="GdbusModemTimeProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12846">The #MmGdbusModemTimeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1569"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemTime"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_time_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13104">Finishes an operation started with mm_gdbus_modem_time_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1585"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13111">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemTimeProxy" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13106">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_time_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_time_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13194">Finishes an operation started with mm_gdbus_modem_time_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1604"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13201">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemTimeProxy" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13196">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_time_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_time_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13219">Like mm_gdbus_modem_time_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_time_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13234">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemTimeProxy" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13221">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13222">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13223">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13224">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13225">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_time_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13129">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_time_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1588"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13144">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemTimeProxy" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13131">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13132">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13133">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13134">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13135">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_time_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13074">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_time_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_time_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1577"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13076">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13077">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13078">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13079">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13080">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13081">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13082">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_time_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13164">Like mm_gdbus_modem_time_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_time_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_time_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13166">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13167">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13168">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13169">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13170">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13171">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="13172">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemTimeProxyPrivate"
              c:type="MmGdbusModemTimeProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemTimeProxyClass"
            c:type="MmGdbusModemTimeProxyClass"
            glib:is-gtype-struct-for="GdbusModemTimeProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12852">Class structure for #MmGdbusModemTimeProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1569"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12854">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemTimeProxyPrivate"
            c:type="MmGdbusModemTimeProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1557"/>
    </record>
    <class name="GdbusModemTimeSkeleton"
           c:symbol-prefix="gdbus_modem_time_skeleton"
           c:type="MmGdbusModemTimeSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemTimeSkeleton"
           glib:get-type="mm_gdbus_modem_time_skeleton_get_type"
           glib:type-struct="GdbusModemTimeSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13256">The #MmGdbusModemTimeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1639"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemTime"/>
      <constructor name="new" c:identifier="mm_gdbus_modem_time_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13731">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1647"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13736">The skeleton object.</doc>
          <type name="GdbusModemTimeSkeleton" c:type="MmGdbusModemTime*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemTimeSkeletonPrivate"
              c:type="MmGdbusModemTimeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemTimeSkeletonClass"
            c:type="MmGdbusModemTimeSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemTimeSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13262">Class structure for #MmGdbusModemTimeSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1639"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13264">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemTimeSkeletonPrivate"
            c:type="MmGdbusModemTimeSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1627"/>
    </record>
    <interface name="GdbusModemVoice"
               c:symbol-prefix="gdbus_modem_voice"
               c:type="MmGdbusModemVoice"
               glib:type-name="MmGdbusModemVoice"
               glib:get-type="mm_gdbus_modem_voice_get_type"
               glib:type-struct="GdbusModemVoiceIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8356">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="945"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_modem_voice_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8324">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="949"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8329">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_modem_voice_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8337">Overrides all #GObject properties in the #MmGdbusModemVoice interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="950"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8345">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8339">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8340">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="call_added">
        <source-position filename="generated/mm-gdbus-modem.h" line="937"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="call_deleted">
        <source-position filename="generated/mm-gdbus-modem.h" line="941"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_calls" invoker="get_calls" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8501">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Voice.Calls"&gt;"Calls"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_voice_dup_calls() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="935"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8511">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8503">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_call">
        <source-position filename="generated/mm-gdbus-modem.h" line="921"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete_call">
        <source-position filename="generated/mm-gdbus-modem.h" line="926"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_list_calls">
        <source-position filename="generated/mm-gdbus-modem.h" line="931"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_call"
              c:identifier="mm_gdbus_modem_voice_call_create_call">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8778">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.CreateCall"&gt;CreateCall()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_voice_call_create_call_finish() to get the result of the operation.

See mm_gdbus_modem_voice_call_create_call_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1018"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8780">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8781">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8782">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8783">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8784">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_call_finish"
              c:identifier="mm_gdbus_modem_voice_call_create_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8811">Finishes an operation started with mm_gdbus_modem_voice_call_create_call().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1025"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8820">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8813">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8814">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8815">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_voice_call_create_call().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_call_sync"
              c:identifier="mm_gdbus_modem_voice_call_create_call_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8841">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.CreateCall"&gt;CreateCall()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_voice_call_create_call() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1031"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8853">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8843">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8844">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8845">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8846">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_call"
              c:identifier="mm_gdbus_modem_voice_call_delete_call">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8680">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.DeleteCall"&gt;DeleteCall()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_voice_call_delete_call_finish() to get the result of the operation.

See mm_gdbus_modem_voice_call_delete_call_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8682">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8683">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8684">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8685">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8686">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_call_finish"
              c:identifier="mm_gdbus_modem_voice_call_delete_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8713">Finishes an operation started with mm_gdbus_modem_voice_call_delete_call().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1007"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8721">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8715">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8716">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_voice_call_delete_call().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_call_sync"
              c:identifier="mm_gdbus_modem_voice_call_delete_call_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8740">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.DeleteCall"&gt;DeleteCall()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_voice_call_delete_call() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1012"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8751">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8742">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8743">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8744">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_calls"
              c:identifier="mm_gdbus_modem_voice_call_list_calls">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8582">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.ListCalls"&gt;ListCalls()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_voice_call_list_calls_finish() to get the result of the operation.

See mm_gdbus_modem_voice_call_list_calls_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8584">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8585">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8586">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8587">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_calls_finish"
              c:identifier="mm_gdbus_modem_voice_call_list_calls_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8612">Finishes an operation started with mm_gdbus_modem_voice_call_list_calls().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="988"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8621">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8614">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8615">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8616">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_voice_call_list_calls().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_list_calls_sync"
              c:identifier="mm_gdbus_modem_voice_call_list_calls_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8642">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.ListCalls"&gt;ListCalls()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_modem_voice_call_list_calls() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="994"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8653">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8644">A #MmGdbusModemVoiceProxy.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8645">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8646">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_call"
              c:identifier="mm_gdbus_modem_voice_complete_create_call">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8921">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.CreateCall"&gt;CreateCall()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="963"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8923">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8924">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8925">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete_call"
              c:identifier="mm_gdbus_modem_voice_complete_delete_call">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8903">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.DeleteCall"&gt;DeleteCall()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="959"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8905">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8906">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_list_calls"
              c:identifier="mm_gdbus_modem_voice_complete_list_calls">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8882">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.ListCalls"&gt;ListCalls()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="954"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8884">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8885">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8886">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_calls"
              c:identifier="mm_gdbus_modem_voice_dup_calls"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8519">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Voice.Calls"&gt;"Calls"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1042"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8527">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8521">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_call_added"
              c:identifier="mm_gdbus_modem_voice_emit_call_added">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8552">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Voice.CallAdded"&gt;"CallAdded"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="971"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8554">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8555">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_call_deleted"
              c:identifier="mm_gdbus_modem_voice_emit_call_deleted">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8567">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Voice.CallDeleted"&gt;"CallDeleted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="975"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8569">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8570">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_calls"
              c:identifier="mm_gdbus_modem_voice_get_calls"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8501">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Voice.Calls"&gt;"Calls"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_modem_voice_dup_calls() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1041"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8511">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8503">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_calls"
              c:identifier="mm_gdbus_modem_voice_set_calls"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8537">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Voice.Calls"&gt;"Calls"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1043"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8539">A #MmGdbusModemVoice.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8540">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="calls" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8490">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Modem-Voice.Calls"&gt;"Calls"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="call-added" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8451">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Voice.CallAdded"&gt;"CallAdded"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8454">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="call-deleted" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8470">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-ModemManager1-Modem-Voice.CallDeleted"&gt;"CallDeleted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8473">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-call" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8427">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.CreateCall"&gt;CreateCall()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_voice_complete_create_call() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8437">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8430">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8431">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete-call" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8404">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.DeleteCall"&gt;DeleteCall()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_voice_complete_delete_call() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8414">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8407">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8408">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-list-calls" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8382">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem-Voice.ListCalls"&gt;ListCalls()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_modem_voice_complete_list_calls() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8391">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8385">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusModemVoiceIface"
            c:type="MmGdbusModemVoiceIface"
            glib:is-gtype-struct-for="GdbusModemVoice">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8362">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="945"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8364">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_call">
        <callback name="handle_create_call">
          <source-position filename="generated/mm-gdbus-modem.h" line="921"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete_call">
        <callback name="handle_delete_call">
          <source-position filename="generated/mm-gdbus-modem.h" line="926"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_list_calls">
        <callback name="handle_list_calls">
          <source-position filename="generated/mm-gdbus-modem.h" line="931"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_calls">
        <callback name="get_calls">
          <source-position filename="generated/mm-gdbus-modem.h" line="935"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="8511">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-modem.c"
                   line="8503">A #MmGdbusModemVoice.</doc>
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="call_added">
        <callback name="call_added">
          <source-position filename="generated/mm-gdbus-modem.h" line="937"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="call_deleted">
        <callback name="call_deleted">
          <source-position filename="generated/mm-gdbus-modem.h" line="941"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
            </parameter>
            <parameter name="arg_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusModemVoiceProxy"
           c:symbol-prefix="gdbus_modem_voice_proxy"
           c:type="MmGdbusModemVoiceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusModemVoiceProxy"
           glib:get-type="mm_gdbus_modem_voice_proxy_get_type"
           glib:type-struct="GdbusModemVoiceProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8944">The #MmGdbusModemVoiceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1069"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemVoice"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_modem_voice_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9208">Finishes an operation started with mm_gdbus_modem_voice_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1085"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="9215">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemVoiceProxy" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9210">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_voice_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_modem_voice_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9298">Finishes an operation started with mm_gdbus_modem_voice_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="9305">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemVoiceProxy" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9300">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_modem_voice_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_modem_voice_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9323">Like mm_gdbus_modem_voice_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_voice_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="9338">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemVoiceProxy" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9325">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9326">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9327">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9328">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9329">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_modem_voice_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9233">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_modem_voice_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1088"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="9248">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusModemVoiceProxy" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9235">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9236">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9237">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9238">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9239">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_modem_voice_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9178">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_voice_proxy_new_finish() to get the result of the operation.

See mm_gdbus_modem_voice_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1077"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9180">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9181">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9182">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9183">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9184">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9185">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9186">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_modem_voice_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9268">Like mm_gdbus_modem_voice_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_modem_voice_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_modem_voice_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1096"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9270">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9271">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9272">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9273">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9274">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9275">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="9276">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemVoiceProxyPrivate"
              c:type="MmGdbusModemVoiceProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemVoiceProxyClass"
            c:type="MmGdbusModemVoiceProxyClass"
            glib:is-gtype-struct-for="GdbusModemVoiceProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8950">Class structure for #MmGdbusModemVoiceProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1069"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8952">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusModemVoiceProxyPrivate"
            c:type="MmGdbusModemVoiceProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1057"/>
    </record>
    <class name="GdbusModemVoiceSkeleton"
           c:symbol-prefix="gdbus_modem_voice_skeleton"
           c:type="MmGdbusModemVoiceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusModemVoiceSkeleton"
           glib:get-type="mm_gdbus_modem_voice_skeleton_get_type"
           glib:type-struct="GdbusModemVoiceSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="9360">The #MmGdbusModemVoiceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1139"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusModemVoice"/>
      <constructor name="new" c:identifier="mm_gdbus_modem_voice_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9860">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="1147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="9865">The skeleton object.</doc>
          <type name="GdbusModemVoiceSkeleton" c:type="MmGdbusModemVoice*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusModemVoiceSkeletonPrivate"
              c:type="MmGdbusModemVoiceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusModemVoiceSkeletonClass"
            c:type="MmGdbusModemVoiceSkeletonClass"
            glib:is-gtype-struct-for="GdbusModemVoiceSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="9366">Class structure for #MmGdbusModemVoiceSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1139"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="9368">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusModemVoiceSkeletonPrivate"
            c:type="MmGdbusModemVoiceSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="1127"/>
    </record>
    <interface name="GdbusObject"
               c:symbol-prefix="gdbus_object"
               c:type="MmGdbusObject"
               glib:type-name="MmGdbusObject"
               glib:get-type="mm_gdbus_object_get_type"
               glib:type-struct="GdbusObjectIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="26331">The #MmGdbusObject type is a specialized container of interfaces.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3337"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_modem" c:identifier="mm_gdbus_object_get_modem">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26460">Gets the #MmGdbusModem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3341"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26466">A #MmGdbusModem that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModem" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26462">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem3gpp"
              c:identifier="mm_gdbus_object_get_modem3gpp">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26596">Gets the #MmGdbusModem3gpp instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3349"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26602">A #MmGdbusModem3gpp that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26598">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem3gpp_ussd"
              c:identifier="mm_gdbus_object_get_modem3gpp_ussd">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26613">Gets the #MmGdbusModem3gppUssd instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3350"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26619">A #MmGdbusModem3gppUssd that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26615">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_cdma"
              c:identifier="mm_gdbus_object_get_modem_cdma">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26579">Gets the #MmGdbusModemCdma instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3348"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26585">A #MmGdbusModemCdma that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26581">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_firmware"
              c:identifier="mm_gdbus_object_get_modem_firmware">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26545">Gets the #MmGdbusModemFirmware instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3346"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26551">A #MmGdbusModemFirmware that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26547">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_location"
              c:identifier="mm_gdbus_object_get_modem_location">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26511">Gets the #MmGdbusModemLocation instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3344"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26517">A #MmGdbusModemLocation that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26513">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_messaging"
              c:identifier="mm_gdbus_object_get_modem_messaging">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26477">Gets the #MmGdbusModemMessaging instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3342"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26483">A #MmGdbusModemMessaging that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26479">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_oma"
              c:identifier="mm_gdbus_object_get_modem_oma">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26562">Gets the #MmGdbusModemOma instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3347"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26568">A #MmGdbusModemOma that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26564">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_signal"
              c:identifier="mm_gdbus_object_get_modem_signal">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26647">Gets the #MmGdbusModemSignal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3352"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26653">A #MmGdbusModemSignal that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26649">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_simple"
              c:identifier="mm_gdbus_object_get_modem_simple">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26630">Gets the #MmGdbusModemSimple instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3351"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26636">A #MmGdbusModemSimple that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26632">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_time"
              c:identifier="mm_gdbus_object_get_modem_time">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26528">Gets the #MmGdbusModemTime instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3345"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26534">A #MmGdbusModemTime that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26530">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_voice"
              c:identifier="mm_gdbus_object_get_modem_voice">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26494">Gets the #MmGdbusModemVoice instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3343"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26500">A #MmGdbusModemVoice that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26496">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem"
              c:identifier="mm_gdbus_object_peek_modem"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26665">Like mm_gdbus_object_get_modem() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26673">A #MmGdbusModem or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModem" c:type="MmGdbusModem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26667">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem3gpp"
              c:identifier="mm_gdbus_object_peek_modem3gpp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26825">Like mm_gdbus_object_get_modem3gpp() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3361"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26833">A #MmGdbusModem3gpp or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26827">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem3gpp_ussd"
              c:identifier="mm_gdbus_object_peek_modem3gpp_ussd"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26845">Like mm_gdbus_object_get_modem3gpp_ussd() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3362"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26853">A #MmGdbusModem3gppUssd or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26847">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_cdma"
              c:identifier="mm_gdbus_object_peek_modem_cdma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26805">Like mm_gdbus_object_get_modem_cdma() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3360"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26813">A #MmGdbusModemCdma or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26807">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_firmware"
              c:identifier="mm_gdbus_object_peek_modem_firmware"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26765">Like mm_gdbus_object_get_modem_firmware() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26773">A #MmGdbusModemFirmware or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26767">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_location"
              c:identifier="mm_gdbus_object_peek_modem_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26725">Like mm_gdbus_object_get_modem_location() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26733">A #MmGdbusModemLocation or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26727">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_messaging"
              c:identifier="mm_gdbus_object_peek_modem_messaging"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26685">Like mm_gdbus_object_get_modem_messaging() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3354"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26693">A #MmGdbusModemMessaging or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26687">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_oma"
              c:identifier="mm_gdbus_object_peek_modem_oma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26785">Like mm_gdbus_object_get_modem_oma() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26793">A #MmGdbusModemOma or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26787">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_signal"
              c:identifier="mm_gdbus_object_peek_modem_signal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26885">Like mm_gdbus_object_get_modem_signal() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3364"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26893">A #MmGdbusModemSignal or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26887">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_simple"
              c:identifier="mm_gdbus_object_peek_modem_simple"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26865">Like mm_gdbus_object_get_modem_simple() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26873">A #MmGdbusModemSimple or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26867">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_time"
              c:identifier="mm_gdbus_object_peek_modem_time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26745">Like mm_gdbus_object_get_modem_time() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3357"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26753">A #MmGdbusModemTime or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26747">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_voice"
              c:identifier="mm_gdbus_object_peek_modem_voice"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26705">Like mm_gdbus_object_get_modem_voice() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3355"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="26713">A #MmGdbusModemVoice or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="26707">A #MmGdbusObject.</doc>
            <type name="GdbusObject" c:type="MmGdbusObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="modem" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26350">The #MmGdbusModem instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModem"/>
      </property>
      <property name="modem-cdma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26413">The #MmGdbusModemCdma instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemCdma"/>
      </property>
      <property name="modem-firmware" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26395">The #MmGdbusModemFirmware instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemFirmware"/>
      </property>
      <property name="modem-location" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26377">The #MmGdbusModemLocation instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemLocation"/>
      </property>
      <property name="modem-messaging" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26359">The #MmGdbusModemMessaging instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemMessaging"/>
      </property>
      <property name="modem-oma" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26404">The #MmGdbusModemOma instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemOma"/>
      </property>
      <property name="modem-signal" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26449">The #MmGdbusModemSignal instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemSignal"/>
      </property>
      <property name="modem-simple" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26440">The #MmGdbusModemSimple instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemSimple"/>
      </property>
      <property name="modem-time" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26386">The #MmGdbusModemTime instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemTime"/>
      </property>
      <property name="modem-voice" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26368">The #MmGdbusModemVoice instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModemVoice"/>
      </property>
      <property name="modem3gpp" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26422">The #MmGdbusModem3gpp instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModem3gpp"/>
      </property>
      <property name="modem3gpp-ussd" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26431">The #MmGdbusModem3gppUssd instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="GdbusModem3gppUssd"/>
      </property>
    </interface>
    <record name="GdbusObjectIface"
            c:type="MmGdbusObjectIface"
            glib:is-gtype-struct-for="GdbusObject">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="26337">Virtual table for the #MmGdbusObject interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3337"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26339">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="GdbusObjectManagerClient"
           c:symbol-prefix="gdbus_object_manager_client"
           c:type="MmGdbusObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="MmGdbusObjectManagerClient"
           glib:get-type="mm_gdbus_object_manager_client_get_type"
           glib:type-struct="GdbusObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="27558">The #MmGdbusObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3463"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27656">Finishes an operation started with mm_gdbus_object_manager_client_new().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3481"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27663">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="GdbusObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27658">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27746">Finishes an operation started with mm_gdbus_object_manager_client_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27753">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="GdbusObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27748">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27771">Like mm_gdbus_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3503"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27786">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="GdbusObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27773">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27774">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27775">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27776">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27777">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27681">Synchronously creates #GDBusObjectManagerClient using mm_gdbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3484"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27696">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="GdbusObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27683">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27684">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27685">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27686">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27687">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="mm_gdbus_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27583">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3471"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27592">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #MmGdbusObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27585">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27586">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27587">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27588">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="mm_gdbus_object_manager_client_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27626">Asynchronously creates #GDBusObjectManagerClient using mm_gdbus_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_object_manager_client_new_finish() to get the result of the operation.

See mm_gdbus_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3473"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27628">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27629">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27630">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27631">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27632">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27633">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27634">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_object_manager_client_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27716">Like mm_gdbus_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_object_manager_client_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27718">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27719">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27720">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27721">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27722">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27723">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27724">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusObjectManagerClientPrivate"
              c:type="MmGdbusObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="GdbusObjectManagerClientClass"
            c:type="MmGdbusObjectManagerClientClass"
            glib:is-gtype-struct-for="GdbusObjectManagerClient">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="27564">Class structure for #MmGdbusObjectManagerClient.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3463"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27566">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="GdbusObjectManagerClientPrivate"
            c:type="MmGdbusObjectManagerClientPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3451"/>
    </record>
    <class name="GdbusObjectProxy"
           c:symbol-prefix="gdbus_object_proxy"
           c:type="MmGdbusObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="MmGdbusObjectProxy"
           glib:get-type="mm_gdbus_object_proxy_get_type"
           glib:type-struct="GdbusObjectProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="26917">The #MmGdbusObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3387"/>
      <implements name="Gio.DBusObject"/>
      <implements name="GdbusObject"/>
      <constructor name="new" c:identifier="mm_gdbus_object_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27060">Creates a new proxy object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3395"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27067">The proxy object.</doc>
          <type name="GdbusObjectProxy" c:type="MmGdbusObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27062">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27063">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusObjectProxyPrivate"
              c:type="MmGdbusObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusObjectProxyClass"
            c:type="MmGdbusObjectProxyClass"
            glib:is-gtype-struct-for="GdbusObjectProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="26923">Class structure for #MmGdbusObjectProxy.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3387"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="26925">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="GdbusObjectProxyPrivate"
            c:type="MmGdbusObjectProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3375"/>
    </record>
    <class name="GdbusObjectSkeleton"
           c:symbol-prefix="gdbus_object_skeleton"
           c:type="MmGdbusObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="MmGdbusObjectSkeleton"
           glib:get-type="mm_gdbus_object_skeleton_get_type"
           glib:type-struct="GdbusObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="27078">The #MmGdbusObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3418"/>
      <implements name="Gio.DBusObject"/>
      <implements name="GdbusObject"/>
      <constructor name="new" c:identifier="mm_gdbus_object_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27385">Creates a new skeleton object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3426"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="27391">The skeleton object.</doc>
          <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27387">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_modem"
              c:identifier="mm_gdbus_object_skeleton_set_modem">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27400">Sets the #MmGdbusModem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27402">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27403">A #MmGdbusModem or %NULL to clear the interface.</doc>
            <type name="GdbusModem" c:type="MmGdbusModem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem3gpp"
              c:identifier="mm_gdbus_object_skeleton_set_modem3gpp">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27496">Sets the #MmGdbusModem3gpp instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3435"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27498">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27499">A #MmGdbusModem3gpp or %NULL to clear the interface.</doc>
            <type name="GdbusModem3gpp" c:type="MmGdbusModem3gpp*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem3gpp_ussd"
              c:identifier="mm_gdbus_object_skeleton_set_modem3gpp_ussd">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27508">Sets the #MmGdbusModem3gppUssd instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27510">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27511">A #MmGdbusModem3gppUssd or %NULL to clear the interface.</doc>
            <type name="GdbusModem3gppUssd" c:type="MmGdbusModem3gppUssd*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_cdma"
              c:identifier="mm_gdbus_object_skeleton_set_modem_cdma">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27484">Sets the #MmGdbusModemCdma instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3434"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27486">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27487">A #MmGdbusModemCdma or %NULL to clear the interface.</doc>
            <type name="GdbusModemCdma" c:type="MmGdbusModemCdma*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_firmware"
              c:identifier="mm_gdbus_object_skeleton_set_modem_firmware">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27460">Sets the #MmGdbusModemFirmware instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3432"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27462">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27463">A #MmGdbusModemFirmware or %NULL to clear the interface.</doc>
            <type name="GdbusModemFirmware" c:type="MmGdbusModemFirmware*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_location"
              c:identifier="mm_gdbus_object_skeleton_set_modem_location">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27436">Sets the #MmGdbusModemLocation instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27438">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27439">A #MmGdbusModemLocation or %NULL to clear the interface.</doc>
            <type name="GdbusModemLocation" c:type="MmGdbusModemLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_messaging"
              c:identifier="mm_gdbus_object_skeleton_set_modem_messaging">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27412">Sets the #MmGdbusModemMessaging instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27414">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27415">A #MmGdbusModemMessaging or %NULL to clear the interface.</doc>
            <type name="GdbusModemMessaging" c:type="MmGdbusModemMessaging*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_oma"
              c:identifier="mm_gdbus_object_skeleton_set_modem_oma">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27472">Sets the #MmGdbusModemOma instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3433"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27474">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27475">A #MmGdbusModemOma or %NULL to clear the interface.</doc>
            <type name="GdbusModemOma" c:type="MmGdbusModemOma*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_signal"
              c:identifier="mm_gdbus_object_skeleton_set_modem_signal">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27532">Sets the #MmGdbusModemSignal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3438"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27534">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27535">A #MmGdbusModemSignal or %NULL to clear the interface.</doc>
            <type name="GdbusModemSignal" c:type="MmGdbusModemSignal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_simple"
              c:identifier="mm_gdbus_object_skeleton_set_modem_simple">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27520">Sets the #MmGdbusModemSimple instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27522">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27523">A #MmGdbusModemSimple or %NULL to clear the interface.</doc>
            <type name="GdbusModemSimple" c:type="MmGdbusModemSimple*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_time"
              c:identifier="mm_gdbus_object_skeleton_set_modem_time">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27448">Sets the #MmGdbusModemTime instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27450">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27451">A #MmGdbusModemTime or %NULL to clear the interface.</doc>
            <type name="GdbusModemTime" c:type="MmGdbusModemTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_modem_voice"
              c:identifier="mm_gdbus_object_skeleton_set_modem_voice">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27424">Sets the #MmGdbusModemVoice instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt; on @object.</doc>
        <source-position filename="generated/mm-gdbus-modem.h" line="3429"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27426">A #MmGdbusObjectSkeleton.</doc>
            <type name="GdbusObjectSkeleton" c:type="MmGdbusObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-modem.c"
                 line="27427">A #MmGdbusModemVoice or %NULL to clear the interface.</doc>
            <type name="GdbusModemVoice" c:type="MmGdbusModemVoice*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusObjectSkeletonPrivate"
              c:type="MmGdbusObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusObjectSkeletonClass"
            c:type="MmGdbusObjectSkeletonClass"
            glib:is-gtype-struct-for="GdbusObjectSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="27084">Class structure for #MmGdbusObjectSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3418"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="27086">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusObjectSkeletonPrivate"
            c:type="MmGdbusObjectSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-modem.h" line="3406"/>
    </record>
    <interface name="GdbusOrgFreedesktopModemManager1"
               c:symbol-prefix="gdbus_org_freedesktop_modem_manager1"
               c:type="MmGdbusOrgFreedesktopModemManager1"
               glib:type-name="MmGdbusOrgFreedesktopModemManager1"
               glib:get-type="mm_gdbus_org_freedesktop_modem_manager1_get_type"
               glib:type-struct="GdbusOrgFreedesktopModemManager1Iface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="313">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="49"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_org_freedesktop_modem_manager1_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="281">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="286">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_org_freedesktop_modem_manager1_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="294">Overrides all #GObject properties in the #MmGdbusOrgFreedesktopModemManager1 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="302">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="296">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="297">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="417">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_org_freedesktop_modem_manager1_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="427">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="419">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_report_kernel_event">
        <source-position filename="generated/mm-gdbus-manager.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_scan_devices">
        <source-position filename="generated/mm-gdbus-manager.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_logging">
        <source-position filename="generated/mm-gdbus-manager.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_report_kernel_event"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="658">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ReportKernelEvent"&gt;ReportKernelEvent()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event_finish() to get the result of the operation.

See mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="660">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="661">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="662">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="663">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="664">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_report_kernel_event_finish"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="691">Finishes an operation started with mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event().</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="114"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="699">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="693">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="694">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_report_kernel_event_sync"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="718">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ReportKernelEvent"&gt;ReportKernelEvent()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_org_freedesktop_modem_manager1_call_report_kernel_event() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="119"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="729">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="720">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="721">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="722">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan_devices"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="468">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ScanDevices"&gt;ScanDevices()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices_finish() to get the result of the operation.

See mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="470">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="472">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="473">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan_devices_finish"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="498">Finishes an operation started with mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices().</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="79"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="506">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="500">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="501">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_scan_devices_sync"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="525">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ScanDevices"&gt;ScanDevices()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_org_freedesktop_modem_manager1_call_scan_devices() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="84"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="535">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="527">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="528">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_logging"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_set_logging">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="560">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.SetLogging"&gt;SetLogging()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_org_freedesktop_modem_manager1_call_set_logging_finish() to get the result of the operation.

See mm_gdbus_org_freedesktop_modem_manager1_call_set_logging_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="562">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="563">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="564">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="565">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="566">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_logging_finish"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_set_logging_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="593">Finishes an operation started with mm_gdbus_org_freedesktop_modem_manager1_call_set_logging().</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="96"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="601">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="595">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="596">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_org_freedesktop_modem_manager1_call_set_logging().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_logging_sync"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_call_set_logging_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="620">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.SetLogging"&gt;SetLogging()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_org_freedesktop_modem_manager1_call_set_logging() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="101"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="631">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="622">A #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="623">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="624">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_report_kernel_event"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_complete_report_kernel_event">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="792">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ReportKernelEvent"&gt;ReportKernelEvent()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="794">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="795">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_scan_devices"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_complete_scan_devices">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="756">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ScanDevices"&gt;ScanDevices()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="758">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="759">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_logging"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_complete_set_logging">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="774">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.SetLogging"&gt;SetLogging()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="776">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="777">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="435">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="129"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="443">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="437">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_get_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="417">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_org_freedesktop_modem_manager1_dup_version() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="427">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="419">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_set_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="453">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="455">A #MmGdbusOrgFreedesktopModemManager1.</doc>
            <type name="GdbusOrgFreedesktopModemManager1"
                  c:type="MmGdbusOrgFreedesktopModemManager1*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="456">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="406">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-report-kernel-event" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="382">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ReportKernelEvent"&gt;ReportKernelEvent()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_org_freedesktop_modem_manager1_complete_report_kernel_event() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="392">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="385">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="386">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-scan-devices" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="337">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.ScanDevices"&gt;ScanDevices()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_org_freedesktop_modem_manager1_complete_scan_devices() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="346">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="340">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-logging" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="359">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1.SetLogging"&gt;SetLogging()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_org_freedesktop_modem_manager1_complete_set_logging() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="369">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="362">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="363">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusOrgFreedesktopModemManager1Iface"
            c:type="MmGdbusOrgFreedesktopModemManager1Iface"
            glib:is-gtype-struct-for="GdbusOrgFreedesktopModemManager1">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="319">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="49"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="321">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_report_kernel_event">
        <callback name="handle_report_kernel_event">
          <source-position filename="generated/mm-gdbus-manager.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusOrgFreedesktopModemManager1"
                    c:type="MmGdbusOrgFreedesktopModemManager1*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_properties" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_scan_devices">
        <callback name="handle_scan_devices">
          <source-position filename="generated/mm-gdbus-manager.h" line="38"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusOrgFreedesktopModemManager1"
                    c:type="MmGdbusOrgFreedesktopModemManager1*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_logging">
        <callback name="handle_set_logging">
          <source-position filename="generated/mm-gdbus-manager.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusOrgFreedesktopModemManager1"
                    c:type="MmGdbusOrgFreedesktopModemManager1*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="generated/mm-gdbus-manager.h" line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="427">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-manager.c"
                   line="419">A #MmGdbusOrgFreedesktopModemManager1.</doc>
              <type name="GdbusOrgFreedesktopModemManager1"
                    c:type="MmGdbusOrgFreedesktopModemManager1*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusOrgFreedesktopModemManager1Proxy"
           c:symbol-prefix="gdbus_org_freedesktop_modem_manager1_proxy"
           c:type="MmGdbusOrgFreedesktopModemManager1Proxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusOrgFreedesktopModemManager1Proxy"
           glib:get-type="mm_gdbus_org_freedesktop_modem_manager1_proxy_get_type"
           glib:type-struct="GdbusOrgFreedesktopModemManager1ProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="812">The #MmGdbusOrgFreedesktopModemManager1Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="156"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusOrgFreedesktopModemManager1"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1072">Finishes an operation started with mm_gdbus_org_freedesktop_modem_manager1_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="1079">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusOrgFreedesktopModemManager1Proxy"
                c:type="MmGdbusOrgFreedesktopModemManager1*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1074">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_org_freedesktop_modem_manager1_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1162">Finishes an operation started with mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="191"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="1169">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusOrgFreedesktopModemManager1Proxy"
                c:type="MmGdbusOrgFreedesktopModemManager1*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1164">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1187">Like mm_gdbus_org_freedesktop_modem_manager1_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="1202">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusOrgFreedesktopModemManager1Proxy"
                c:type="MmGdbusOrgFreedesktopModemManager1*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1189">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1190">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1191">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1192">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1193">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1097">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_org_freedesktop_modem_manager1_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="1112">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusOrgFreedesktopModemManager1Proxy"
                c:type="MmGdbusOrgFreedesktopModemManager1*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1099">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1100">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1101">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1102">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1103">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1042">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_org_freedesktop_modem_manager1_proxy_new_finish() to get the result of the operation.

See mm_gdbus_org_freedesktop_modem_manager1_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1044">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1045">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1046">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1047">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1048">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1049">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1050">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1132">Like mm_gdbus_org_freedesktop_modem_manager1_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_org_freedesktop_modem_manager1_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1134">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1135">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1136">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1137">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1138">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1139">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-manager.c"
                 line="1140">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusOrgFreedesktopModemManager1ProxyPrivate"
              c:type="MmGdbusOrgFreedesktopModemManager1ProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusOrgFreedesktopModemManager1ProxyClass"
            c:type="MmGdbusOrgFreedesktopModemManager1ProxyClass"
            glib:is-gtype-struct-for="GdbusOrgFreedesktopModemManager1Proxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="818">Class structure for #MmGdbusOrgFreedesktopModemManager1Proxy.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="156"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="820">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusOrgFreedesktopModemManager1ProxyPrivate"
            c:type="MmGdbusOrgFreedesktopModemManager1ProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-manager.h" line="144"/>
    </record>
    <class name="GdbusOrgFreedesktopModemManager1Skeleton"
           c:symbol-prefix="gdbus_org_freedesktop_modem_manager1_skeleton"
           c:type="MmGdbusOrgFreedesktopModemManager1Skeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusOrgFreedesktopModemManager1Skeleton"
           glib:get-type="mm_gdbus_org_freedesktop_modem_manager1_skeleton_get_type"
           glib:type-struct="GdbusOrgFreedesktopModemManager1SkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="1224">The #MmGdbusOrgFreedesktopModemManager1Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="226"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusOrgFreedesktopModemManager1"/>
      <constructor name="new"
                   c:identifier="mm_gdbus_org_freedesktop_modem_manager1_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1674">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-manager.h" line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="1679">The skeleton object.</doc>
          <type name="GdbusOrgFreedesktopModemManager1Skeleton"
                c:type="MmGdbusOrgFreedesktopModemManager1*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusOrgFreedesktopModemManager1SkeletonPrivate"
              c:type="MmGdbusOrgFreedesktopModemManager1SkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusOrgFreedesktopModemManager1SkeletonClass"
            c:type="MmGdbusOrgFreedesktopModemManager1SkeletonClass"
            glib:is-gtype-struct-for="GdbusOrgFreedesktopModemManager1Skeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="1230">Class structure for #MmGdbusOrgFreedesktopModemManager1Skeleton.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="226"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="1232">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusOrgFreedesktopModemManager1SkeletonPrivate"
            c:type="MmGdbusOrgFreedesktopModemManager1SkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-manager.h" line="214"/>
    </record>
    <interface name="GdbusSim"
               c:symbol-prefix="gdbus_sim"
               c:type="MmGdbusSim"
               glib:type-name="MmGdbusSim"
               glib:get-type="mm_gdbus_sim_get_type"
               glib:type-struct="GdbusSimIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="442">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="64"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_sim_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="407">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="412">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_sim_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="420">Overrides all #GObject properties in the #MmGdbusSim interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="428">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="422">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="423">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_imsi" invoker="get_imsi" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="655">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.Imsi"&gt;"Imsi"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_imsi() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="665">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="657">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operator_identifier"
                      invoker="get_operator_identifier"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="706">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorIdentifier"&gt;"OperatorIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_operator_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="716">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="708">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operator_name"
                      invoker="get_operator_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_operator_name() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="759">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sim_identifier"
                      invoker="get_sim_identifier"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="604">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.SimIdentifier"&gt;"SimIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_sim_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="606">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_pin">
        <source-position filename="generated/mm-gdbus-sim.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_old_pin" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_pin" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_pin">
        <source-position filename="generated/mm-gdbus-sim.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_send_pin">
        <source-position filename="generated/mm-gdbus-sim.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_send_puk">
        <source-position filename="generated/mm-gdbus-sim.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_puk" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_change_pin"
              c:identifier="mm_gdbus_sim_call_change_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1114">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.ChangePin"&gt;ChangePin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_call_change_pin_finish() to get the result of the operation.

See mm_gdbus_sim_call_change_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1116">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1117">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1118">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1119">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1120">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1121">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_pin_finish"
              c:identifier="mm_gdbus_sim_call_change_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1150">Finishes an operation started with mm_gdbus_sim_call_change_pin().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="158"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1158">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1152">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1153">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_call_change_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_pin_sync"
              c:identifier="mm_gdbus_sim_call_change_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1177">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.ChangePin"&gt;ChangePin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sim_call_change_pin() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="163"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1189">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1179">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1180">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1181">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1182">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_pin"
              c:identifier="mm_gdbus_sim_call_enable_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1010">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.EnablePin"&gt;EnablePin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_call_enable_pin_finish() to get the result of the operation.

See mm_gdbus_sim_call_enable_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1012">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1013">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1014">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1015">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1016">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1017">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_pin_finish"
              c:identifier="mm_gdbus_sim_call_enable_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1046">Finishes an operation started with mm_gdbus_sim_call_enable_pin().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="138"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1054">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1048">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1049">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_call_enable_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_pin_sync"
              c:identifier="mm_gdbus_sim_call_enable_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1073">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.EnablePin"&gt;EnablePin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sim_call_enable_pin() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="143"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1085">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1075">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1076">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1077">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1078">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_pin" c:identifier="mm_gdbus_sim_call_send_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="808">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPin"&gt;SendPin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_call_send_pin_finish() to get the result of the operation.

See mm_gdbus_sim_call_send_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="810">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="811">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="812">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="813">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="814">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_pin_finish"
              c:identifier="mm_gdbus_sim_call_send_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="841">Finishes an operation started with mm_gdbus_sim_call_send_pin().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="99"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="849">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="843">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="844">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_call_send_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_pin_sync"
              c:identifier="mm_gdbus_sim_call_send_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="868">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPin"&gt;SendPin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sim_call_send_pin() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="104"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="879">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="870">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="871">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="872">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_puk" c:identifier="mm_gdbus_sim_call_send_puk">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="906">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPuk"&gt;SendPuk()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_call_send_puk_finish() to get the result of the operation.

See mm_gdbus_sim_call_send_puk_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="908">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_puk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="909">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="910">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="911">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="912">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="913">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_puk_finish"
              c:identifier="mm_gdbus_sim_call_send_puk_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="942">Finishes an operation started with mm_gdbus_sim_call_send_puk().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="118"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="950">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="944">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="945">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_call_send_puk().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_puk_sync"
              c:identifier="mm_gdbus_sim_call_send_puk_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="969">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPuk"&gt;SendPuk()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sim_call_send_puk() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="981">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="971">A #MmGdbusSimProxy.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="arg_puk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="972">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="973">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="974">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_pin"
              c:identifier="mm_gdbus_sim_complete_change_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1272">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.ChangePin"&gt;ChangePin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1274">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1275">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_pin"
              c:identifier="mm_gdbus_sim_complete_enable_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1254">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.EnablePin"&gt;EnablePin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1256">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1257">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_send_pin"
              c:identifier="mm_gdbus_sim_complete_send_pin">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1218">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPin"&gt;SendPin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1220">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1221">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_send_puk"
              c:identifier="mm_gdbus_sim_complete_send_puk">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1236">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPuk"&gt;SendPuk()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1238">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1239">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_imsi"
              c:identifier="mm_gdbus_sim_dup_imsi"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="673">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.Imsi"&gt;"Imsi"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="681">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="675">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_identifier"
              c:identifier="mm_gdbus_sim_dup_operator_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="724">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorIdentifier"&gt;"OperatorIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="732">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="726">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_name"
              c:identifier="mm_gdbus_sim_dup_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="775">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="783">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="777">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sim_identifier"
              c:identifier="mm_gdbus_sim_dup_sim_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="622">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.SimIdentifier"&gt;"SimIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="630">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="624">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_imsi"
              c:identifier="mm_gdbus_sim_get_imsi"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="655">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.Imsi"&gt;"Imsi"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_imsi() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="665">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="657">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_identifier"
              c:identifier="mm_gdbus_sim_get_operator_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="706">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorIdentifier"&gt;"OperatorIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_operator_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="716">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="708">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_name"
              c:identifier="mm_gdbus_sim_get_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_operator_name() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="759">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sim_identifier"
              c:identifier="mm_gdbus_sim_get_sim_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="604">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.SimIdentifier"&gt;"SimIdentifier"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sim_dup_sim_identifier() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="606">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_imsi"
              c:identifier="mm_gdbus_sim_set_imsi"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="691">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.Imsi"&gt;"Imsi"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="693">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="694">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator_identifier"
              c:identifier="mm_gdbus_sim_set_operator_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="742">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorIdentifier"&gt;"OperatorIdentifier"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="744">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="745">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator_name"
              c:identifier="mm_gdbus_sim_set_operator_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="793">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorName"&gt;"OperatorName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="795">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="796">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sim_identifier"
              c:identifier="mm_gdbus_sim_set_sim_identifier"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="640">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.SimIdentifier"&gt;"SimIdentifier"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="642">A #MmGdbusSim.</doc>
            <type name="GdbusSim" c:type="MmGdbusSim*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="643">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="imsi" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="575">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.Imsi"&gt;"Imsi"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operator-identifier"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="584">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorIdentifier"&gt;"OperatorIdentifier"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operator-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="593">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.OperatorName"&gt;"OperatorName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sim-identifier" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="566">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sim.SimIdentifier"&gt;"SimIdentifier"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-change-pin" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="541">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.ChangePin"&gt;ChangePin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sim_complete_change_pin() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="552">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="544">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="545">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="546">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-pin" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="517">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.EnablePin"&gt;EnablePin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sim_complete_enable_pin() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="528">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="520">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="521">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="522">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-send-pin" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="470">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPin"&gt;SendPin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sim_complete_send_pin() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="480">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="473">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="474">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-send-puk" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="493">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sim.SendPuk"&gt;SendPuk()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sim_complete_send_puk() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="504">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="496">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_puk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="497">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="498">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusSimIface"
            c:type="MmGdbusSimIface"
            glib:is-gtype-struct-for="GdbusSim">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="448">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="64"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="450">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_change_pin">
        <callback name="handle_change_pin">
          <source-position filename="generated/mm-gdbus-sim.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_old_pin" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_new_pin" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_pin">
        <callback name="handle_enable_pin">
          <source-position filename="generated/mm-gdbus-sim.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_pin" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_enabled" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_send_pin">
        <callback name="handle_send_pin">
          <source-position filename="generated/mm-gdbus-sim.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_pin" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_send_puk">
        <callback name="handle_send_puk">
          <source-position filename="generated/mm-gdbus-sim.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_puk" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pin" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_imsi">
        <callback name="get_imsi">
          <source-position filename="generated/mm-gdbus-sim.h" line="56"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="665">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sim.c"
                   line="657">A #MmGdbusSim.</doc>
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operator_identifier">
        <callback name="get_operator_identifier">
          <source-position filename="generated/mm-gdbus-sim.h" line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="716">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sim.c"
                   line="708">A #MmGdbusSim.</doc>
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operator_name">
        <callback name="get_operator_name">
          <source-position filename="generated/mm-gdbus-sim.h" line="60"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sim.c"
                   line="759">A #MmGdbusSim.</doc>
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sim_identifier">
        <callback name="get_sim_identifier">
          <source-position filename="generated/mm-gdbus-sim.h" line="62"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sim.c"
                   line="606">A #MmGdbusSim.</doc>
              <type name="GdbusSim" c:type="MmGdbusSim*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusSimProxy"
           c:symbol-prefix="gdbus_sim_proxy"
           c:type="MmGdbusSimProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusSimProxy"
           glib:get-type="mm_gdbus_sim_proxy_get_type"
           glib:type-struct="GdbusSimProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="1292">The #MmGdbusSimProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="213"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusSim"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_sim_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1600">Finishes an operation started with mm_gdbus_sim_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="229"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1607">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSimProxy" c:type="MmGdbusSim*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1602">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_sim_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1690">Finishes an operation started with mm_gdbus_sim_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1697">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSimProxy" c:type="MmGdbusSim*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1692">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sim_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_sim_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1715">Like mm_gdbus_sim_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_sim_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="251"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1730">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSimProxy" c:type="MmGdbusSim*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1717">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1718">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1719">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1720">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1721">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_sim_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1625">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_sim_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="1640">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSimProxy" c:type="MmGdbusSim*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1627">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1628">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1629">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1630">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1631">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_sim_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1570">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_proxy_new_finish() to get the result of the operation.

See mm_gdbus_sim_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1572">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1573">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1574">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1575">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1576">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1577">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1578">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_sim_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1660">Like mm_gdbus_sim_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sim_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_sim_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1662">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1663">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1664">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1665">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1666">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1667">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sim.c"
                 line="1668">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusSimProxyPrivate" c:type="MmGdbusSimProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusSimProxyClass"
            c:type="MmGdbusSimProxyClass"
            glib:is-gtype-struct-for="GdbusSimProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="1298">Class structure for #MmGdbusSimProxy.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="213"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1300">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusSimProxyPrivate"
            c:type="MmGdbusSimProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-sim.h" line="201"/>
    </record>
    <class name="GdbusSimSkeleton"
           c:symbol-prefix="gdbus_sim_skeleton"
           c:type="MmGdbusSimSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusSimSkeleton"
           glib:get-type="mm_gdbus_sim_skeleton_get_type"
           glib:type-struct="GdbusSimSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="1752">The #MmGdbusSimSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="283"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusSim"/>
      <constructor name="new" c:identifier="mm_gdbus_sim_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="2241">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-sim.h" line="291"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="2246">The skeleton object.</doc>
          <type name="GdbusSimSkeleton" c:type="MmGdbusSim*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusSimSkeletonPrivate"
              c:type="MmGdbusSimSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusSimSkeletonClass"
            c:type="MmGdbusSimSkeletonClass"
            glib:is-gtype-struct-for="GdbusSimSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="1758">Class structure for #MmGdbusSimSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="283"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="1760">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusSimSkeletonPrivate"
            c:type="MmGdbusSimSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-sim.h" line="271"/>
    </record>
    <interface name="GdbusSms"
               c:symbol-prefix="gdbus_sms"
               c:type="MmGdbusSms"
               glib:type-name="MmGdbusSms"
               glib:get-type="mm_gdbus_sms_get_type"
               glib:type-struct="GdbusSmsIface">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="507">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="74"/>
      <function name="interface_info"
                c:identifier="mm_gdbus_sms_interface_info">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="460">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="465">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="mm_gdbus_sms_override_properties">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="473">Overrides all #GObject properties in the #MmGdbusSms interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="481">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="475">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="476">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_class" invoker="get_class" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1054">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Class"&gt;"Class"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1062">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1056">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data" invoker="get_data" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="901">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Data"&gt;"Data"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_data() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="911">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="903">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_delivery_report_request"
                      invoker="get_delivery_report_request"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1147">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryReportRequest"&gt;"DeliveryReportRequest"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1155">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1149">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_delivery_state"
                      invoker="get_delivery_state"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryState"&gt;"DeliveryState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1319">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1313">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_discharge_timestamp"
                      invoker="get_discharge_timestamp"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DischargeTimestamp"&gt;"DischargeTimestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_discharge_timestamp() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1262">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_message_reference"
                      invoker="get_message_reference"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1178">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.MessageReference"&gt;"MessageReference"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1186">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1180">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number"
                      invoker="get_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="799">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_number() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="801">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pdu_type"
                      invoker="get_pdu_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="768">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.PduType"&gt;"PduType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="776">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="770">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_service_category"
                      invoker="get_service_category"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1116">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.ServiceCategory"&gt;"ServiceCategory"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1124">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1118">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smsc" invoker="get_smsc" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="952">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.SMSC"&gt;"SMSC"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_smsc() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="954">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="737">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="745">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="739">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_storage"
                      invoker="get_storage"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1342">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Storage"&gt;"Storage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1350">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1344">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_teleservice_id"
                      invoker="get_teleservice_id"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1085">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.TeleserviceId"&gt;"TeleserviceId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1093">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1087">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_text" invoker="get_text" introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="850">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Text"&gt;"Text"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_text() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="860">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="852">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_timestamp"
                      invoker="get_timestamp"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1209">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Timestamp"&gt;"Timestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_timestamp() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1219">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1211">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_validity"
                      invoker="get_validity"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1003">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Validity"&gt;"Validity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_validity() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1005">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_send">
        <source-position filename="generated/mm-gdbus-sms.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_store">
        <source-position filename="generated/mm-gdbus-sms.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_storage" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_send" c:identifier="mm_gdbus_sms_call_send">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1373">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Send"&gt;Send()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sms_call_send_finish() to get the result of the operation.

See mm_gdbus_sms_call_send_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1375">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1377">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1378">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_finish"
              c:identifier="mm_gdbus_sms_call_send_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1403">Finishes an operation started with mm_gdbus_sms_call_send().</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="100"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1411">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1405">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1406">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sms_call_send().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_send_sync"
              c:identifier="mm_gdbus_sms_call_send_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1430">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Send"&gt;Send()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sms_call_send() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="105"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1440">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1432">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1433">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_store" c:identifier="mm_gdbus_sms_call_store">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1465">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Store"&gt;Store()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sms_call_store_finish() to get the result of the operation.

See mm_gdbus_sms_call_store_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1467">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="arg_storage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1468">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1469">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1470">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1471">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_store_finish"
              c:identifier="mm_gdbus_sms_call_store_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1498">Finishes an operation started with mm_gdbus_sms_call_store().</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="117"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1506">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1500">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1501">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sms_call_store().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_store_sync"
              c:identifier="mm_gdbus_sms_call_store_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1525">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Store"&gt;Store()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See mm_gdbus_sms_call_store() for the asynchronous version of this method.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="122"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1536">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1527">A #MmGdbusSmsProxy.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="arg_storage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1528">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1529">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_send" c:identifier="mm_gdbus_sms_complete_send">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1563">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Send"&gt;Send()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1565">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1566">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_store" c:identifier="mm_gdbus_sms_complete_store">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1581">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Store"&gt;Store()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1583">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1584">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_data"
              c:identifier="mm_gdbus_sms_dup_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="919">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Data"&gt;"Data"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="927">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="921">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_discharge_timestamp"
              c:identifier="mm_gdbus_sms_dup_discharge_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1278">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DischargeTimestamp"&gt;"DischargeTimestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="177"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1286">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1280">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_number"
              c:identifier="mm_gdbus_sms_dup_number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="817">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="825">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="819">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smsc"
              c:identifier="mm_gdbus_sms_dup_smsc"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="970">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.SMSC"&gt;"SMSC"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="978">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="972">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_text"
              c:identifier="mm_gdbus_sms_dup_text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="868">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Text"&gt;"Text"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="142"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="876">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="870">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_timestamp"
              c:identifier="mm_gdbus_sms_dup_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1227">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Timestamp"&gt;"Timestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="173"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1235">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1229">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_validity"
              c:identifier="mm_gdbus_sms_dup_validity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1021">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Validity"&gt;"Validity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1029">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1023">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_class"
              c:identifier="mm_gdbus_sms_get_class"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1054">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Class"&gt;"Class"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1062">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1056">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data"
              c:identifier="mm_gdbus_sms_get_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="901">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Data"&gt;"Data"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_data() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="911">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="903">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delivery_report_request"
              c:identifier="mm_gdbus_sms_get_delivery_report_request"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1147">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryReportRequest"&gt;"DeliveryReportRequest"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1155">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1149">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delivery_state"
              c:identifier="mm_gdbus_sms_get_delivery_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryState"&gt;"DeliveryState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1319">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1313">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_discharge_timestamp"
              c:identifier="mm_gdbus_sms_get_discharge_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DischargeTimestamp"&gt;"DischargeTimestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_discharge_timestamp() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1262">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_reference"
              c:identifier="mm_gdbus_sms_get_message_reference"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1178">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.MessageReference"&gt;"MessageReference"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1186">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1180">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="mm_gdbus_sms_get_number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="799">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_number() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="801">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pdu_type"
              c:identifier="mm_gdbus_sms_get_pdu_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="768">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.PduType"&gt;"PduType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="776">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="770">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_category"
              c:identifier="mm_gdbus_sms_get_service_category"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1116">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.ServiceCategory"&gt;"ServiceCategory"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1124">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1118">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smsc"
              c:identifier="mm_gdbus_sms_get_smsc"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="952">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.SMSC"&gt;"SMSC"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_smsc() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="954">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="mm_gdbus_sms_get_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="737">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="745">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="739">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage"
              c:identifier="mm_gdbus_sms_get_storage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1342">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Storage"&gt;"Storage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1350">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1344">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_teleservice_id"
              c:identifier="mm_gdbus_sms_get_teleservice_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1085">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.TeleserviceId"&gt;"TeleserviceId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1093">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1087">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="mm_gdbus_sms_get_text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="850">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Text"&gt;"Text"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_text() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="860">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="852">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="mm_gdbus_sms_get_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1209">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Timestamp"&gt;"Timestamp"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_timestamp() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1219">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1211">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validity"
              c:identifier="mm_gdbus_sms_get_validity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1003">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Validity"&gt;"Validity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use mm_gdbus_sms_dup_validity() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="1013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1005">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_class"
              c:identifier="mm_gdbus_sms_set_class"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1070">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Class"&gt;"Class"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1072">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1073">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data"
              c:identifier="mm_gdbus_sms_set_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="937">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Data"&gt;"Data"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="939">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="940">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delivery_report_request"
              c:identifier="mm_gdbus_sms_set_delivery_report_request"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1163">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryReportRequest"&gt;"DeliveryReportRequest"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1165">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1166">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delivery_state"
              c:identifier="mm_gdbus_sms_set_delivery_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1327">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryState"&gt;"DeliveryState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1329">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1330">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_discharge_timestamp"
              c:identifier="mm_gdbus_sms_set_discharge_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1296">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DischargeTimestamp"&gt;"DischargeTimestamp"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1298">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1299">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message_reference"
              c:identifier="mm_gdbus_sms_set_message_reference"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1194">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.MessageReference"&gt;"MessageReference"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1196">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1197">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="mm_gdbus_sms_set_number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="835">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Number"&gt;"Number"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="837">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="838">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pdu_type"
              c:identifier="mm_gdbus_sms_set_pdu_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="784">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.PduType"&gt;"PduType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="786">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="787">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service_category"
              c:identifier="mm_gdbus_sms_set_service_category"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1132">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.ServiceCategory"&gt;"ServiceCategory"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1134">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1135">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smsc"
              c:identifier="mm_gdbus_sms_set_smsc"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="988">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.SMSC"&gt;"SMSC"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="990">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="991">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="mm_gdbus_sms_set_state"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="753">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="755">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="756">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_storage"
              c:identifier="mm_gdbus_sms_set_storage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1358">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Storage"&gt;"Storage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1360">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1361">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_teleservice_id"
              c:identifier="mm_gdbus_sms_set_teleservice_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1101">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.TeleserviceId"&gt;"TeleserviceId"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1103">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1104">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="mm_gdbus_sms_set_text"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="886">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Text"&gt;"Text"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="888">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="889">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp"
              c:identifier="mm_gdbus_sms_set_timestamp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1245">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Timestamp"&gt;"Timestamp"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1247">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1248">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_validity"
              c:identifier="mm_gdbus_sms_set_validity"
              introspectable="0">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1039">Sets the &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Validity"&gt;"Validity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1041">A #MmGdbusSms.</doc>
            <type name="GdbusSms" c:type="MmGdbusSms*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1042">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="class" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="654">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Class"&gt;"Class"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="data" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="627">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Data"&gt;"Data"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="delivery-report-request"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="681">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryReportRequest"&gt;"DeliveryReportRequest"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="delivery-state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="717">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DeliveryState"&gt;"DeliveryState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="discharge-timestamp"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="708">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.DischargeTimestamp"&gt;"DischargeTimestamp"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message-reference"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="690">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.MessageReference"&gt;"MessageReference"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="number" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="609">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Number"&gt;"Number"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pdu-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="600">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.PduType"&gt;"PduType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="service-category" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="672">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.ServiceCategory"&gt;"ServiceCategory"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="smsc" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="636">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.SMSC"&gt;"SMSC"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="591">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="storage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="726">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Storage"&gt;"Storage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="teleservice-id" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="663">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.TeleserviceId"&gt;"TeleserviceId"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="text" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="618">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Text"&gt;"Text"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timestamp" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="699">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Timestamp"&gt;"Timestamp"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="validity" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="645">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-ModemManager1-Sms.Validity"&gt;"Validity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <glib:signal name="handle-send" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="545">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Send"&gt;Send()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sms_complete_send() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="554">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="548">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-store" when="last">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="567">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Sms.Store"&gt;Store()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call mm_gdbus_sms_complete_store() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="577">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="570">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_storage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="571">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GdbusSmsIface"
            c:type="MmGdbusSmsIface"
            glib:is-gtype-struct-for="GdbusSms">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="513">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt;.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="74"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="515">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_send">
        <callback name="handle_send">
          <source-position filename="generated/mm-gdbus-sms.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_store">
        <callback name="handle_store">
          <source-position filename="generated/mm-gdbus-sms.h" line="37"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_storage" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_class">
        <callback name="get_class">
          <source-position filename="generated/mm-gdbus-sms.h" line="42"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1062">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1056">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data">
        <callback name="get_data">
          <source-position filename="generated/mm-gdbus-sms.h" line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="911">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="903">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_delivery_report_request">
        <callback name="get_delivery_report_request">
          <source-position filename="generated/mm-gdbus-sms.h" line="46"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1155">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1149">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_delivery_state">
        <callback name="get_delivery_state">
          <source-position filename="generated/mm-gdbus-sms.h" line="48"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1319">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1313">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_discharge_timestamp">
        <callback name="get_discharge_timestamp">
          <source-position filename="generated/mm-gdbus-sms.h" line="50"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1262">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_message_reference">
        <callback name="get_message_reference">
          <source-position filename="generated/mm-gdbus-sms.h" line="52"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1186">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1180">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <source-position filename="generated/mm-gdbus-sms.h" line="54"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="809">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="801">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pdu_type">
        <callback name="get_pdu_type">
          <source-position filename="generated/mm-gdbus-sms.h" line="56"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="776">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="770">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_service_category">
        <callback name="get_service_category">
          <source-position filename="generated/mm-gdbus-sms.h" line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1124">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1118">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smsc">
        <callback name="get_smsc">
          <source-position filename="generated/mm-gdbus-sms.h" line="60"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="962">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="954">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <source-position filename="generated/mm-gdbus-sms.h" line="62"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="745">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="739">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_storage">
        <callback name="get_storage">
          <source-position filename="generated/mm-gdbus-sms.h" line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1350">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1344">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_teleservice_id">
        <callback name="get_teleservice_id">
          <source-position filename="generated/mm-gdbus-sms.h" line="66"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1093">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1087">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_text">
        <callback name="get_text">
          <source-position filename="generated/mm-gdbus-sms.h" line="68"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="860">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="852">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_timestamp">
        <callback name="get_timestamp">
          <source-position filename="generated/mm-gdbus-sms.h" line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1219">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1211">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_validity">
        <callback name="get_validity">
          <source-position filename="generated/mm-gdbus-sms.h" line="72"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="1013">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="generated/mm-gdbus-sms.c"
                   line="1005">A #MmGdbusSms.</doc>
              <type name="GdbusSms" c:type="MmGdbusSms*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GdbusSmsProxy"
           c:symbol-prefix="gdbus_sms_proxy"
           c:type="MmGdbusSmsProxy"
           parent="Gio.DBusProxy"
           glib:type-name="MmGdbusSmsProxy"
           glib:get-type="mm_gdbus_sms_proxy_get_type"
           glib:type-struct="GdbusSmsProxyClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="1601">The #MmGdbusSmsProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="210"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusSms"/>
      <constructor name="new_finish"
                   c:identifier="mm_gdbus_sms_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2097">Finishes an operation started with mm_gdbus_sms_proxy_new().</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="226"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="2104">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSmsProxy" c:type="MmGdbusSms*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2099">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sms_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="mm_gdbus_sms_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2187">Finishes an operation started with mm_gdbus_sms_proxy_new_for_bus().</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="245"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="2194">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSmsProxy" c:type="MmGdbusSms*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2189">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_gdbus_sms_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="mm_gdbus_sms_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2212">Like mm_gdbus_sms_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See mm_gdbus_sms_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="2227">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSmsProxy" c:type="MmGdbusSms*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2214">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2215">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2216">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2217">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2218">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_gdbus_sms_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2122">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See mm_gdbus_sms_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="229"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="2137">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GdbusSmsProxy" c:type="MmGdbusSms*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2124">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2125">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2126">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2127">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2128">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_gdbus_sms_proxy_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2067">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sms_proxy_new_finish() to get the result of the operation.

See mm_gdbus_sms_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2069">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2070">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2071">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2072">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2073">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2074">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2075">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="mm_gdbus_sms_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2157">Like mm_gdbus_sms_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_gdbus_sms_proxy_new_for_bus_finish() to get the result of the operation.

See mm_gdbus_sms_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2159">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2160">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2161">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2162">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2164">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="generated/mm-gdbus-sms.c"
                 line="2165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusSmsProxyPrivate" c:type="MmGdbusSmsProxyPrivate*"/>
      </field>
    </class>
    <record name="GdbusSmsProxyClass"
            c:type="MmGdbusSmsProxyClass"
            glib:is-gtype-struct-for="GdbusSmsProxy">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="1607">Class structure for #MmGdbusSmsProxy.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="210"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="1609">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GdbusSmsProxyPrivate"
            c:type="MmGdbusSmsProxyPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-sms.h" line="198"/>
    </record>
    <class name="GdbusSmsSkeleton"
           c:symbol-prefix="gdbus_sms_skeleton"
           c:type="MmGdbusSmsSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="MmGdbusSmsSkeleton"
           glib:get-type="mm_gdbus_sms_skeleton_get_type"
           glib:type-struct="GdbusSmsSkeletonClass">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="2249">The #MmGdbusSmsSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="280"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="GdbusSms"/>
      <constructor name="new" c:identifier="mm_gdbus_sms_skeleton_new">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2894">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt;.</doc>
        <source-position filename="generated/mm-gdbus-sms.h" line="288"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="2899">The skeleton object.</doc>
          <type name="GdbusSmsSkeleton" c:type="MmGdbusSms*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GdbusSmsSkeletonPrivate"
              c:type="MmGdbusSmsSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GdbusSmsSkeletonClass"
            c:type="MmGdbusSmsSkeletonClass"
            glib:is-gtype-struct-for="GdbusSmsSkeleton">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="2255">Class structure for #MmGdbusSmsSkeleton.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="280"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="2257">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GdbusSmsSkeletonPrivate"
            c:type="MmGdbusSmsSkeletonPrivate"
            disguised="1">
      <source-position filename="generated/mm-gdbus-sms.h" line="268"/>
    </record>
    <class name="KernelEventProperties"
           c:symbol-prefix="kernel_event_properties"
           c:type="MMKernelEventProperties"
           parent="GObject.Object"
           glib:type-name="MMKernelEventProperties"
           glib:get-type="mm_kernel_event_properties_get_type"
           glib:type-struct="KernelEventPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-kernel-event-properties.h"
           line="39">The #MMKernelEventProperties structure contains private data and should only be
accessed using the provided API.</doc>
      <source-position filename="mm-kernel-event-properties.h" line="54"/>
      <constructor name="new" c:identifier="mm_kernel_event_properties_new">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="412">Creates a new empty #MMKernelEventProperties.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="417">a #MMKernelEventProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="KernelEventProperties"
                c:type="MMKernelEventProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_kernel_event_properties_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-kernel-event-properties.h" line="86"/>
        <return-value transfer-ownership="full">
          <type name="KernelEventProperties"
                c:type="MMKernelEventProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_kernel_event_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-kernel-event-properties.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="KernelEventProperties"
                c:type="MMKernelEventProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="mm_kernel_event_properties_dup">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="385">Returns a copy of @orig.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="391">a #MMKernelEventProperties</doc>
          <type name="KernelEventProperties"
                c:type="MMKernelEventProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="387">a #MMKernelEventProperties</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action"
              c:identifier="mm_kernel_event_properties_get_action">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="70">Gets the action.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="76">The action. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="72">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_kernel_event_properties_get_dictionary">
        <source-position filename="mm-kernel-event-properties.h" line="91"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="mm_kernel_event_properties_get_name">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="140">Gets the name.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="146">The name. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="142">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subsystem"
              c:identifier="mm_kernel_event_properties_get_subsystem">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="105">Gets the subsystem.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="111">The subsystem. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="107">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid" c:identifier="mm_kernel_event_properties_get_uid">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="175">Gets the unique ID of the physical device.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-kernel-event-properties.c"
               line="181">The uid. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="177">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_action"
              c:identifier="mm_kernel_event_properties_set_action">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="53">Sets the action.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="55">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="56">The action to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="mm_kernel_event_properties_set_name">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="123">Sets the name.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="125">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="126">The name to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subsystem"
              c:identifier="mm_kernel_event_properties_set_subsystem">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="88">Sets the subsystem.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="90">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
          <parameter name="subsystem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="91">The subsystem to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uid" c:identifier="mm_kernel_event_properties_set_uid">
        <doc xml:space="preserve"
             filename="mm-kernel-event-properties.c"
             line="158">Sets the unique ID of the physical device.</doc>
        <source-position filename="mm-kernel-event-properties.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="160">A #MMKernelEventProperties.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-kernel-event-properties.c"
                 line="161">The uid to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="KernelEventPropertiesPrivate"
              c:type="MMKernelEventPropertiesPrivate*"/>
      </field>
    </class>
    <record name="KernelEventPropertiesClass"
            c:type="MMKernelEventPropertiesClass"
            glib:is-gtype-struct-for="KernelEventProperties">
      <source-position filename="mm-kernel-event-properties.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="KernelEventPropertiesPrivate"
            c:type="MMKernelEventPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-kernel-event-properties.h" line="37"/>
    </record>
    <class name="Location3gpp"
           c:symbol-prefix="location_3gpp"
           c:type="MMLocation3gpp"
           parent="GObject.Object"
           glib:type-name="MMLocation3gpp"
           glib:get-type="mm_location_3gpp_get_type"
           glib:type-struct="Location3gppClass">
      <doc xml:space="preserve"
           filename="mm-location-3gpp.h"
           line="39">The #MMLocation3gpp structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-location-3gpp.h" line="54"/>
      <constructor name="new" c:identifier="mm_location_3gpp_new">
        <source-position filename="mm-location-3gpp.h" line="73"/>
        <return-value transfer-ownership="full">
          <type name="Location3gpp" c:type="MMLocation3gpp*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_string_variant"
                   c:identifier="mm_location_3gpp_new_from_string_variant"
                   throws="1">
        <source-position filename="mm-location-3gpp.h" line="74"/>
        <return-value transfer-ownership="full">
          <type name="Location3gpp" c:type="MMLocation3gpp*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_cell_id" c:identifier="mm_location_3gpp_get_cell_id">
        <doc xml:space="preserve"
             filename="mm-location-3gpp.c"
             line="155">Gets the cell ID of the 3GPP network.</doc>
        <source-position filename="mm-location-3gpp.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-3gpp.c"
               line="161">the cell ID, or 0 if unknown.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-3gpp.c"
                 line="157">a #MMLocation3gpp.</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location_area_code"
              c:identifier="mm_location_3gpp_get_location_area_code">
        <doc xml:space="preserve"
             filename="mm-location-3gpp.c"
             line="123">Gets the location area code of the 3GPP network.</doc>
        <source-position filename="mm-location-3gpp.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-3gpp.c"
               line="129">the location area code, or 0 if unknown.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-3gpp.c"
                 line="125">a #MMLocation3gpp.</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mobile_country_code"
              c:identifier="mm_location_3gpp_get_mobile_country_code">
        <doc xml:space="preserve"
             filename="mm-location-3gpp.c"
             line="54">Gets the Mobile Country Code of the 3GPP network.</doc>
        <source-position filename="mm-location-3gpp.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-3gpp.c"
               line="60">the MCC, or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-3gpp.c"
                 line="56">a #MMLocation3gpp.</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mobile_network_code"
              c:identifier="mm_location_3gpp_get_mobile_network_code">
        <doc xml:space="preserve"
             filename="mm-location-3gpp.c"
             line="86">Gets the Mobile Network Code of the 3GPP network.

Note that 0 may actually be a valid MNC. In general, the MNC should be
considered valid just if the reported MCC is valid, as MCC should never
be 0.</doc>
        <source-position filename="mm-location-3gpp.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-3gpp.c"
               line="96">the MNC, or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-3gpp.c"
                 line="88">a #MMLocation3gpp.</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string_variant"
              c:identifier="mm_location_3gpp_get_string_variant">
        <source-position filename="mm-location-3gpp.h" line="71"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracking_area_code"
              c:identifier="mm_location_3gpp_get_tracking_area_code">
        <doc xml:space="preserve"
             filename="mm-location-3gpp.c"
             line="187">Gets the location area code of the 3GPP network.</doc>
        <source-position filename="mm-location-3gpp.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-3gpp.c"
               line="193">the location area code, or 0 if unknown.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-3gpp.c"
                 line="189">a #MMLocation3gpp.</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="mm_location_3gpp_reset">
        <source-position filename="mm-location-3gpp.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cell_id" c:identifier="mm_location_3gpp_set_cell_id">
        <source-position filename="mm-location-3gpp.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
          <parameter name="cell_id" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location_area_code"
              c:identifier="mm_location_3gpp_set_location_area_code">
        <source-position filename="mm-location-3gpp.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
          <parameter name="location_area_code" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mobile_country_code"
              c:identifier="mm_location_3gpp_set_mobile_country_code">
        <source-position filename="mm-location-3gpp.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
          <parameter name="mobile_country_code" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mobile_network_code"
              c:identifier="mm_location_3gpp_set_mobile_network_code">
        <source-position filename="mm-location-3gpp.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
          <parameter name="mobile_network_code" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tracking_area_code"
              c:identifier="mm_location_3gpp_set_tracking_area_code">
        <source-position filename="mm-location-3gpp.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location3gpp" c:type="MMLocation3gpp*"/>
          </instance-parameter>
          <parameter name="tracking_area_code" transfer-ownership="none">
            <type name="gulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Location3gppPrivate" c:type="MMLocation3gppPrivate*"/>
      </field>
    </class>
    <record name="Location3gppClass"
            c:type="MMLocation3gppClass"
            glib:is-gtype-struct-for="Location3gpp">
      <source-position filename="mm-location-3gpp.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="Location3gppPrivate"
            c:type="MMLocation3gppPrivate"
            disguised="1">
      <source-position filename="mm-location-3gpp.h" line="37"/>
    </record>
    <class name="LocationCdmaBs"
           c:symbol-prefix="location_cdma_bs"
           c:type="MMLocationCdmaBs"
           parent="GObject.Object"
           glib:type-name="MMLocationCdmaBs"
           glib:get-type="mm_location_cdma_bs_get_type"
           glib:type-struct="LocationCdmaBsClass">
      <doc xml:space="preserve"
           filename="mm-location-cdma-bs.h"
           line="41">The #MMLocationCdmaBs structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-location-cdma-bs.h" line="56"/>
      <constructor name="new" c:identifier="mm_location_cdma_bs_new">
        <source-position filename="mm-location-cdma-bs.h" line="70"/>
        <return-value transfer-ownership="full">
          <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_location_cdma_bs_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-location-cdma-bs.h" line="71"/>
        <return-value transfer-ownership="full">
          <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary"
              c:identifier="mm_location_cdma_bs_get_dictionary">
        <source-position filename="mm-location-cdma-bs.h" line="78"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_latitude"
              c:identifier="mm_location_cdma_bs_get_latitude">
        <doc xml:space="preserve"
             filename="mm-location-cdma-bs.c"
             line="68">Gets the latitude, in the [-90,90] range.</doc>
        <source-position filename="mm-location-cdma-bs.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-cdma-bs.c"
               line="74">the latitude, or %MM_LOCATION_LATITUDE_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-cdma-bs.c"
                 line="70">a #MMLocationCdmaBs.</doc>
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_longitude"
              c:identifier="mm_location_cdma_bs_get_longitude">
        <doc xml:space="preserve"
             filename="mm-location-cdma-bs.c"
             line="49">Gets the longitude, in the [-180,180] range.</doc>
        <source-position filename="mm-location-cdma-bs.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-cdma-bs.c"
               line="55">the longitude, or %MM_LOCATION_LONGITUDE_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-cdma-bs.c"
                 line="51">a #MMLocationCdmaBs.</doc>
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="mm_location_cdma_bs_set">
        <source-position filename="mm-location-cdma-bs.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
          </instance-parameter>
          <parameter name="longitude" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="latitude" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocationCdmaBsPrivate" c:type="MMLocationCdmaBsPrivate*"/>
      </field>
    </class>
    <record name="LocationCdmaBsClass"
            c:type="MMLocationCdmaBsClass"
            glib:is-gtype-struct-for="LocationCdmaBs">
      <source-position filename="mm-location-cdma-bs.h" line="56"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="LocationCdmaBsPrivate"
            c:type="MMLocationCdmaBsPrivate"
            disguised="1">
      <source-position filename="mm-location-cdma-bs.h" line="39"/>
    </record>
    <class name="LocationGpsNmea"
           c:symbol-prefix="location_gps_nmea"
           c:type="MMLocationGpsNmea"
           parent="GObject.Object"
           glib:type-name="MMLocationGpsNmea"
           glib:get-type="mm_location_gps_nmea_get_type"
           glib:type-struct="LocationGpsNmeaClass">
      <doc xml:space="preserve"
           filename="mm-location-gps-nmea.h"
           line="39">The #MMLocationGpsNmea structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-location-gps-nmea.h" line="54"/>
      <constructor name="new" c:identifier="mm_location_gps_nmea_new">
        <source-position filename="mm-location-gps-nmea.h" line="69"/>
        <return-value transfer-ownership="full">
          <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_string_variant"
                   c:identifier="mm_location_gps_nmea_new_from_string_variant"
                   throws="1">
        <source-position filename="mm-location-gps-nmea.h" line="70"/>
        <return-value transfer-ownership="full">
          <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_trace" c:identifier="mm_location_gps_nmea_add_trace">
        <source-position filename="mm-location-gps-nmea.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
          </instance-parameter>
          <parameter name="trace" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_full" c:identifier="mm_location_gps_nmea_build_full">
        <doc xml:space="preserve"
             filename="mm-location-gps-nmea.c"
             line="160">Gets a compilation of all cached traces.</doc>
        <source-position filename="mm-location-gps-nmea.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-location-gps-nmea.c"
               line="166">a string containing all traces, or #NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-nmea.c"
                 line="162">a #MMLocationGpsNmea.</doc>
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string_variant"
              c:identifier="mm_location_gps_nmea_get_string_variant">
        <source-position filename="mm-location-gps-nmea.h" line="76"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trace" c:identifier="mm_location_gps_nmea_get_trace">
        <doc xml:space="preserve"
             filename="mm-location-gps-nmea.c"
             line="131">Gets the last cached value of the specific @trace_type given.</doc>
        <source-position filename="mm-location-gps-nmea.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-gps-nmea.c"
               line="138">the NMEA trace, or %NULL if not available. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-nmea.c"
                 line="133">a #MMLocationGpsNmea.</doc>
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
          </instance-parameter>
          <parameter name="trace_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-nmea.c"
                 line="134">specific NMEA trace type to gather.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocationGpsNmeaPrivate"
              c:type="MMLocationGpsNmeaPrivate*"/>
      </field>
    </class>
    <record name="LocationGpsNmeaClass"
            c:type="MMLocationGpsNmeaClass"
            glib:is-gtype-struct-for="LocationGpsNmea">
      <source-position filename="mm-location-gps-nmea.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="LocationGpsNmeaPrivate"
            c:type="MMLocationGpsNmeaPrivate"
            disguised="1">
      <source-position filename="mm-location-gps-nmea.h" line="37"/>
    </record>
    <class name="LocationGpsRaw"
           c:symbol-prefix="location_gps_raw"
           c:type="MMLocationGpsRaw"
           parent="GObject.Object"
           glib:type-name="MMLocationGpsRaw"
           glib:get-type="mm_location_gps_raw_get_type"
           glib:type-struct="LocationGpsRawClass">
      <doc xml:space="preserve"
           filename="mm-location-gps-raw.h"
           line="41">The #MMLocationGpsRaw structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-location-gps-raw.h" line="56"/>
      <constructor name="new" c:identifier="mm_location_gps_raw_new">
        <source-position filename="mm-location-gps-raw.h" line="72"/>
        <return-value transfer-ownership="full">
          <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_location_gps_raw_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-location-gps-raw.h" line="73"/>
        <return-value transfer-ownership="full">
          <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_trace" c:identifier="mm_location_gps_raw_add_trace">
        <source-position filename="mm-location-gps-raw.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
          <parameter name="trace" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_altitude"
              c:identifier="mm_location_gps_raw_get_altitude">
        <doc xml:space="preserve"
             filename="mm-location-gps-raw.c"
             line="112">Gets the altitude, in the [-90,90] range.</doc>
        <source-position filename="mm-location-gps-raw.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-gps-raw.c"
               line="118">the altitude, or %MM_LOCATION_ALTITUDE_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-raw.c"
                 line="114">a #MMLocationGpsRaw.</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_location_gps_raw_get_dictionary">
        <source-position filename="mm-location-gps-raw.h" line="79"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_latitude"
              c:identifier="mm_location_gps_raw_get_latitude">
        <doc xml:space="preserve"
             filename="mm-location-gps-raw.c"
             line="93">Gets the latitude, in the [-90,90] range.</doc>
        <source-position filename="mm-location-gps-raw.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-gps-raw.c"
               line="99">the latitude, or %MM_LOCATION_LATITUDE_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-raw.c"
                 line="95">a #MMLocationGpsRaw.</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_longitude"
              c:identifier="mm_location_gps_raw_get_longitude">
        <doc xml:space="preserve"
             filename="mm-location-gps-raw.c"
             line="74">Gets the longitude, in the [-180,180] range.</doc>
        <source-position filename="mm-location-gps-raw.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-gps-raw.c"
               line="80">the longitude, or %MM_LOCATION_LONGITUDE_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-raw.c"
                 line="76">a #MMLocationGpsRaw.</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_utc_time"
              c:identifier="mm_location_gps_raw_get_utc_time">
        <doc xml:space="preserve"
             filename="mm-location-gps-raw.c"
             line="56">Gets the UTC time of the location being reported.</doc>
        <source-position filename="mm-location-gps-raw.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-location-gps-raw.c"
               line="62">a string with the UTC time, or #NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-location-gps-raw.c"
                 line="58">a #MMLocationGpsRaw.</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocationGpsRawPrivate" c:type="MMLocationGpsRawPrivate*"/>
      </field>
    </class>
    <record name="LocationGpsRawClass"
            c:type="MMLocationGpsRawClass"
            glib:is-gtype-struct-for="LocationGpsRaw">
      <source-position filename="mm-location-gps-raw.h" line="56"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="LocationGpsRawPrivate"
            c:type="MMLocationGpsRawPrivate"
            disguised="1">
      <source-position filename="mm-location-gps-raw.h" line="39"/>
    </record>
    <constant name="MAJOR_VERSION" value="1" c:type="MM_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="../include/ModemManager-version.h"
           line="31">Evaluates to the major version number of ModemManager which this source
is compiled against.</doc>
      <source-position filename="../include/ModemManager-version.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MANAGER_METHOD_REPORTKERNELEVENT"
              value="ReportKernelEvent"
              c:type="MM_MANAGER_METHOD_REPORTKERNELEVENT">
      <source-position filename="../include/ModemManager-names.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MANAGER_METHOD_SCANDEVICES"
              value="ScanDevices"
              c:type="MM_MANAGER_METHOD_SCANDEVICES">
      <source-position filename="../include/ModemManager-names.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MANAGER_METHOD_SETLOGGING"
              value="SetLogging"
              c:type="MM_MANAGER_METHOD_SETLOGGING">
      <source-position filename="../include/ModemManager-names.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MANAGER_PROPERTY_VERSION"
              value="Version"
              c:type="MM_MANAGER_PROPERTY_VERSION">
      <source-position filename="../include/ModemManager-names.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MICRO_VERSION" value="1" c:type="MM_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="../include/ModemManager-version.h"
           line="47">Evaluates to the micro version number of ModemManager which this source
compiled against.</doc>
      <source-position filename="../include/ModemManager-version.h" line="53"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="9" c:type="MM_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="../include/ModemManager-version.h"
           line="39">Evaluates to the minor version number of ModemManager which this source
is compiled against.</doc>
      <source-position filename="../include/ModemManager-version.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MODEM_CDMA_NID_UNKNOWN"
              value="99999"
              c:type="MM_MODEM_CDMA_NID_UNKNOWN">
      <doc xml:space="preserve"
           filename="mm-modem-cdma.h"
           line="84">Identifier for an unknown NID.</doc>
      <source-position filename="mm-modem-cdma.h" line="89"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MODEM_CDMA_SID_UNKNOWN"
              value="99999"
              c:type="MM_MODEM_CDMA_SID_UNKNOWN">
      <doc xml:space="preserve"
           filename="mm-modem-cdma.h"
           line="76">Identifier for an unknown SID.</doc>
      <source-position filename="mm-modem-cdma.h" line="81"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MODEM_FIRMWARE_METHOD_LIST"
              value="List"
              c:type="MM_MODEM_FIRMWARE_METHOD_LIST">
      <source-position filename="../include/ModemManager-names.h" line="282"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_FIRMWARE_METHOD_SELECT"
              value="Select"
              c:type="MM_MODEM_FIRMWARE_METHOD_SELECT">
      <source-position filename="../include/ModemManager-names.h" line="283"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_METHOD_GETLOCATION"
              value="GetLocation"
              c:type="MM_MODEM_LOCATION_METHOD_GETLOCATION">
      <source-position filename="../include/ModemManager-names.h" line="259"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_METHOD_INJECTASSISTANCEDATA"
              value="InjectAssistanceData"
              c:type="MM_MODEM_LOCATION_METHOD_INJECTASSISTANCEDATA">
      <source-position filename="../include/ModemManager-names.h" line="261"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_METHOD_SETGPSREFRESHRATE"
              value="SetGpsRefreshRate"
              c:type="MM_MODEM_LOCATION_METHOD_SETGPSREFRESHRATE">
      <source-position filename="../include/ModemManager-names.h" line="262"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_METHOD_SETSUPLSERVER"
              value="SetSuplServer"
              c:type="MM_MODEM_LOCATION_METHOD_SETSUPLSERVER">
      <source-position filename="../include/ModemManager-names.h" line="260"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_METHOD_SETUP"
              value="Setup"
              c:type="MM_MODEM_LOCATION_METHOD_SETUP">
      <source-position filename="../include/ModemManager-names.h" line="258"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_ASSISTANCEDATASERVERS"
              value="AssistanceDataServers"
              c:type="MM_MODEM_LOCATION_PROPERTY_ASSISTANCEDATASERVERS">
      <source-position filename="../include/ModemManager-names.h" line="269"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_CAPABILITIES"
              value="Capabilities"
              c:type="MM_MODEM_LOCATION_PROPERTY_CAPABILITIES">
      <source-position filename="../include/ModemManager-names.h" line="263"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_ENABLED"
              value="Enabled"
              c:type="MM_MODEM_LOCATION_PROPERTY_ENABLED">
      <source-position filename="../include/ModemManager-names.h" line="265"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_GPSREFRESHRATE"
              value="GpsRefreshRate"
              c:type="MM_MODEM_LOCATION_PROPERTY_GPSREFRESHRATE">
      <source-position filename="../include/ModemManager-names.h" line="270"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_LOCATION"
              value="Location"
              c:type="MM_MODEM_LOCATION_PROPERTY_LOCATION">
      <source-position filename="../include/ModemManager-names.h" line="267"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_SIGNALSLOCATION"
              value="SignalsLocation"
              c:type="MM_MODEM_LOCATION_PROPERTY_SIGNALSLOCATION">
      <source-position filename="../include/ModemManager-names.h" line="266"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_SUPLSERVER"
              value="SuplServer"
              c:type="MM_MODEM_LOCATION_PROPERTY_SUPLSERVER">
      <source-position filename="../include/ModemManager-names.h" line="268"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_LOCATION_PROPERTY_SUPPORTEDASSISTANCEDATA"
              value="SupportedAssistanceData"
              c:type="MM_MODEM_LOCATION_PROPERTY_SUPPORTEDASSISTANCEDATA">
      <source-position filename="../include/ModemManager-names.h" line="264"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_METHOD_CREATE"
              value="Create"
              c:type="MM_MODEM_MESSAGING_METHOD_CREATE">
      <source-position filename="../include/ModemManager-names.h" line="248"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_METHOD_DELETE"
              value="Delete"
              c:type="MM_MODEM_MESSAGING_METHOD_DELETE">
      <source-position filename="../include/ModemManager-names.h" line="247"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_METHOD_LIST"
              value="List"
              c:type="MM_MODEM_MESSAGING_METHOD_LIST">
      <source-position filename="../include/ModemManager-names.h" line="246"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE"
              value="DefaultStorage"
              c:type="MM_MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE">
      <source-position filename="../include/ModemManager-names.h" line="253"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_PROPERTY_MESSAGES"
              value="Messages"
              c:type="MM_MODEM_MESSAGING_PROPERTY_MESSAGES">
      <source-position filename="../include/ModemManager-names.h" line="251"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES"
              value="SupportedStorages"
              c:type="MM_MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES">
      <source-position filename="../include/ModemManager-names.h" line="252"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_SIGNAL_ADDED"
              value="Added"
              c:type="MM_MODEM_MESSAGING_SIGNAL_ADDED">
      <source-position filename="../include/ModemManager-names.h" line="249"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MESSAGING_SIGNAL_DELETED"
              value="Deleted"
              c:type="MM_MODEM_MESSAGING_SIGNAL_DELETED">
      <source-position filename="../include/ModemManager-names.h" line="250"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_COMMAND"
              value="Command"
              c:type="MM_MODEM_METHOD_COMMAND">
      <source-position filename="../include/ModemManager-names.h" line="158"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_CREATEBEARER"
              value="CreateBearer"
              c:type="MM_MODEM_METHOD_CREATEBEARER">
      <source-position filename="../include/ModemManager-names.h" line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_DELETEBEARER"
              value="DeleteBearer"
              c:type="MM_MODEM_METHOD_DELETEBEARER">
      <source-position filename="../include/ModemManager-names.h" line="151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_ENABLE"
              value="Enable"
              c:type="MM_MODEM_METHOD_ENABLE">
      <source-position filename="../include/ModemManager-names.h" line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_FACTORYRESET"
              value="FactoryReset"
              c:type="MM_MODEM_METHOD_FACTORYRESET">
      <source-position filename="../include/ModemManager-names.h" line="153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_LISTBEARERS"
              value="ListBearers"
              c:type="MM_MODEM_METHOD_LISTBEARERS">
      <source-position filename="../include/ModemManager-names.h" line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_RESET"
              value="Reset"
              c:type="MM_MODEM_METHOD_RESET">
      <source-position filename="../include/ModemManager-names.h" line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_SETCURRENTBANDS"
              value="SetCurrentBands"
              c:type="MM_MODEM_METHOD_SETCURRENTBANDS">
      <source-position filename="../include/ModemManager-names.h" line="157"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_SETCURRENTCAPABILITIES"
              value="SetCurrentCapabilities"
              c:type="MM_MODEM_METHOD_SETCURRENTCAPABILITIES">
      <source-position filename="../include/ModemManager-names.h" line="155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_SETCURRENTMODES"
              value="SetCurrentModes"
              c:type="MM_MODEM_METHOD_SETCURRENTMODES">
      <source-position filename="../include/ModemManager-names.h" line="156"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_METHOD_SETPOWERSTATE"
              value="SetPowerState"
              c:type="MM_MODEM_METHOD_SETPOWERSTATE">
      <source-position filename="../include/ModemManager-names.h" line="154"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_METHOD_REGISTER"
              value="Register"
              c:type="MM_MODEM_MODEM3GPP_METHOD_REGISTER">
      <source-position filename="../include/ModemManager-names.h" line="204"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_METHOD_SCAN"
              value="Scan"
              c:type="MM_MODEM_MODEM3GPP_METHOD_SCAN">
      <source-position filename="../include/ModemManager-names.h" line="205"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_METHOD_SETEPSUEMODEOPERATION"
              value="SetEpsUeModeOperation"
              c:type="MM_MODEM_MODEM3GPP_METHOD_SETEPSUEMODEOPERATION">
      <source-position filename="../include/ModemManager-names.h" line="206"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_METHOD_SETINITIALEPSBEARERSETTINGS"
              value="SetInitialEpsBearerSettings"
              c:type="MM_MODEM_MODEM3GPP_METHOD_SETINITIALEPSBEARERSETTINGS">
      <source-position filename="../include/ModemManager-names.h" line="207"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS"
              value="EnabledFacilityLocks"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS">
      <source-position filename="../include/ModemManager-names.h" line="212"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_EPSUEMODEOPERATION"
              value="EpsUeModeOperation"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_EPSUEMODEOPERATION">
      <source-position filename="../include/ModemManager-names.h" line="214"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_IMEI"
              value="Imei"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_IMEI">
      <source-position filename="../include/ModemManager-names.h" line="208"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARER"
              value="InitialEpsBearer"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARER">
      <source-position filename="../include/ModemManager-names.h" line="216"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARERSETTINGS"
              value="InitialEpsBearerSettings"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARERSETTINGS">
      <source-position filename="../include/ModemManager-names.h" line="217"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_OPERATORCODE"
              value="OperatorCode"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_OPERATORCODE">
      <source-position filename="../include/ModemManager-names.h" line="210"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_OPERATORNAME"
              value="OperatorName"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_OPERATORNAME">
      <source-position filename="../include/ModemManager-names.h" line="211"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_PCO"
              value="Pco"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_PCO">
      <source-position filename="../include/ModemManager-names.h" line="215"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE"
              value="RegistrationState"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="209"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE"
              value="SubscriptionState"
              c:type="MM_MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="213"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_METHOD_CANCEL"
              value="Cancel"
              c:type="MM_MODEM_MODEM3GPP_USSD_METHOD_CANCEL">
      <source-position filename="../include/ModemManager-names.h" line="224"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_METHOD_INITIATE"
              value="Initiate"
              c:type="MM_MODEM_MODEM3GPP_USSD_METHOD_INITIATE">
      <source-position filename="../include/ModemManager-names.h" line="222"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_METHOD_RESPOND"
              value="Respond"
              c:type="MM_MODEM_MODEM3GPP_USSD_METHOD_RESPOND">
      <source-position filename="../include/ModemManager-names.h" line="223"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION"
              value="NetworkNotification"
              c:type="MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION">
      <source-position filename="../include/ModemManager-names.h" line="226"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST"
              value="NetworkRequest"
              c:type="MM_MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST">
      <source-position filename="../include/ModemManager-names.h" line="227"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEM3GPP_USSD_PROPERTY_STATE"
              value="State"
              c:type="MM_MODEM_MODEM3GPP_USSD_PROPERTY_STATE">
      <source-position filename="../include/ModemManager-names.h" line="225"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_METHOD_ACTIVATE"
              value="Activate"
              c:type="MM_MODEM_MODEMCDMA_METHOD_ACTIVATE">
      <source-position filename="../include/ModemManager-names.h" line="232"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL"
              value="ActivateManual"
              c:type="MM_MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL">
      <source-position filename="../include/ModemManager-names.h" line="233"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE"
              value="ActivationState"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="235"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE"
              value="Cdma1xRegistrationState"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="240"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_ESN"
              value="Esn"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_ESN">
      <source-position filename="../include/ModemManager-names.h" line="237"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE"
              value="EvdoRegistrationState"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="241"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_MEID"
              value="Meid"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_MEID">
      <source-position filename="../include/ModemManager-names.h" line="236"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_NID"
              value="Nid"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_NID">
      <source-position filename="../include/ModemManager-names.h" line="239"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_PROPERTY_SID"
              value="Sid"
              c:type="MM_MODEM_MODEMCDMA_PROPERTY_SID">
      <source-position filename="../include/ModemManager-names.h" line="238"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED"
              value="ActivationStateChanged"
              c:type="MM_MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED">
      <source-position filename="../include/ModemManager-names.h" line="234"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION"
              value="AcceptNetworkInitiatedSession"
              c:type="MM_MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION">
      <source-position filename="../include/ModemManager-names.h" line="301"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_METHOD_CANCELSESSION"
              value="CancelSession"
              c:type="MM_MODEM_OMA_METHOD_CANCELSESSION">
      <source-position filename="../include/ModemManager-names.h" line="302"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_METHOD_SETUP"
              value="Setup"
              c:type="MM_MODEM_OMA_METHOD_SETUP">
      <source-position filename="../include/ModemManager-names.h" line="299"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION"
              value="StartClientInitiatedSession"
              c:type="MM_MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION">
      <source-position filename="../include/ModemManager-names.h" line="300"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_PROPERTY_FEATURES"
              value="Features"
              c:type="MM_MODEM_OMA_PROPERTY_FEATURES">
      <source-position filename="../include/ModemManager-names.h" line="304"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS"
              value="PendingNetworkInitiatedSessions"
              c:type="MM_MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS">
      <source-position filename="../include/ModemManager-names.h" line="305"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_PROPERTY_SESSIONSTATE"
              value="SessionState"
              c:type="MM_MODEM_OMA_PROPERTY_SESSIONSTATE">
      <source-position filename="../include/ModemManager-names.h" line="307"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_PROPERTY_SESSIONTYPE"
              value="SessionType"
              c:type="MM_MODEM_OMA_PROPERTY_SESSIONTYPE">
      <source-position filename="../include/ModemManager-names.h" line="306"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_OMA_SIGNAL_SESSIONSTATECHANGED"
              value="SessionStateChanged"
              c:type="MM_MODEM_OMA_SIGNAL_SESSIONSTATECHANGED">
      <source-position filename="../include/ModemManager-names.h" line="303"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_ACCESSTECHNOLOGIES"
              value="AccessTechnologies"
              c:type="MM_MODEM_PROPERTY_ACCESSTECHNOLOGIES">
      <source-position filename="../include/ModemManager-names.h" line="181"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_BEARERS"
              value="Bearers"
              c:type="MM_MODEM_PROPERTY_BEARERS">
      <source-position filename="../include/ModemManager-names.h" line="161"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_CURRENTBANDS"
              value="CurrentBands"
              c:type="MM_MODEM_PROPERTY_CURRENTBANDS">
      <source-position filename="../include/ModemManager-names.h" line="188"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_CURRENTCAPABILITIES"
              value="CurrentCapabilities"
              c:type="MM_MODEM_PROPERTY_CURRENTCAPABILITIES">
      <source-position filename="../include/ModemManager-names.h" line="163"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_CURRENTMODES"
              value="CurrentModes"
              c:type="MM_MODEM_PROPERTY_CURRENTMODES">
      <source-position filename="../include/ModemManager-names.h" line="186"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_DEVICE"
              value="Device"
              c:type="MM_MODEM_PROPERTY_DEVICE">
      <source-position filename="../include/ModemManager-names.h" line="171"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_DEVICEIDENTIFIER"
              value="DeviceIdentifier"
              c:type="MM_MODEM_PROPERTY_DEVICEIDENTIFIER">
      <source-position filename="../include/ModemManager-names.h" line="170"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_DRIVERS"
              value="Drivers"
              c:type="MM_MODEM_PROPERTY_DRIVERS">
      <source-position filename="../include/ModemManager-names.h" line="172"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_EQUIPMENTIDENTIFIER"
              value="EquipmentIdentifier"
              c:type="MM_MODEM_PROPERTY_EQUIPMENTIDENTIFIER">
      <source-position filename="../include/ModemManager-names.h" line="176"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_HARDWAREREVISION"
              value="HardwareRevision"
              c:type="MM_MODEM_PROPERTY_HARDWAREREVISION">
      <source-position filename="../include/ModemManager-names.h" line="169"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_MANUFACTURER"
              value="Manufacturer"
              c:type="MM_MODEM_PROPERTY_MANUFACTURER">
      <source-position filename="../include/ModemManager-names.h" line="166"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_MAXACTIVEBEARERS"
              value="MaxActiveBearers"
              c:type="MM_MODEM_PROPERTY_MAXACTIVEBEARERS">
      <source-position filename="../include/ModemManager-names.h" line="165"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_MAXBEARERS"
              value="MaxBearers"
              c:type="MM_MODEM_PROPERTY_MAXBEARERS">
      <source-position filename="../include/ModemManager-names.h" line="164"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_MODEL"
              value="Model"
              c:type="MM_MODEM_PROPERTY_MODEL">
      <source-position filename="../include/ModemManager-names.h" line="167"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_OWNNUMBERS"
              value="OwnNumbers"
              c:type="MM_MODEM_PROPERTY_OWNNUMBERS">
      <source-position filename="../include/ModemManager-names.h" line="183"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_PLUGIN"
              value="Plugin"
              c:type="MM_MODEM_PROPERTY_PLUGIN">
      <source-position filename="../include/ModemManager-names.h" line="173"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_PORTS"
              value="Ports"
              c:type="MM_MODEM_PROPERTY_PORTS">
      <source-position filename="../include/ModemManager-names.h" line="175"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_POWERSTATE"
              value="PowerState"
              c:type="MM_MODEM_PROPERTY_POWERSTATE">
      <source-position filename="../include/ModemManager-names.h" line="184"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_PRIMARYPORT"
              value="PrimaryPort"
              c:type="MM_MODEM_PROPERTY_PRIMARYPORT">
      <source-position filename="../include/ModemManager-names.h" line="174"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_REVISION"
              value="Revision"
              c:type="MM_MODEM_PROPERTY_REVISION">
      <source-position filename="../include/ModemManager-names.h" line="168"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SIGNALQUALITY"
              value="SignalQuality"
              c:type="MM_MODEM_PROPERTY_SIGNALQUALITY">
      <source-position filename="../include/ModemManager-names.h" line="182"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SIM"
              value="Sim"
              c:type="MM_MODEM_PROPERTY_SIM">
      <source-position filename="../include/ModemManager-names.h" line="160"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_STATE"
              value="State"
              c:type="MM_MODEM_PROPERTY_STATE">
      <source-position filename="../include/ModemManager-names.h" line="179"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_STATEFAILEDREASON"
              value="StateFailedReason"
              c:type="MM_MODEM_PROPERTY_STATEFAILEDREASON">
      <source-position filename="../include/ModemManager-names.h" line="180"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SUPPORTEDBANDS"
              value="SupportedBands"
              c:type="MM_MODEM_PROPERTY_SUPPORTEDBANDS">
      <source-position filename="../include/ModemManager-names.h" line="187"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SUPPORTEDCAPABILITIES"
              value="SupportedCapabilities"
              c:type="MM_MODEM_PROPERTY_SUPPORTEDCAPABILITIES">
      <source-position filename="../include/ModemManager-names.h" line="162"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SUPPORTEDIPFAMILIES"
              value="SupportedIpFamilies"
              c:type="MM_MODEM_PROPERTY_SUPPORTEDIPFAMILIES">
      <source-position filename="../include/ModemManager-names.h" line="189"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_SUPPORTEDMODES"
              value="SupportedModes"
              c:type="MM_MODEM_PROPERTY_SUPPORTEDMODES">
      <source-position filename="../include/ModemManager-names.h" line="185"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_UNLOCKREQUIRED"
              value="UnlockRequired"
              c:type="MM_MODEM_PROPERTY_UNLOCKREQUIRED">
      <source-position filename="../include/ModemManager-names.h" line="177"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_PROPERTY_UNLOCKRETRIES"
              value="UnlockRetries"
              c:type="MM_MODEM_PROPERTY_UNLOCKRETRIES">
      <source-position filename="../include/ModemManager-names.h" line="178"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_METHOD_SETUP"
              value="Setup"
              c:type="MM_MODEM_SIGNAL_METHOD_SETUP">
      <source-position filename="../include/ModemManager-names.h" line="288"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_CDMA"
              value="Cdma"
              c:type="MM_MODEM_SIGNAL_PROPERTY_CDMA">
      <source-position filename="../include/ModemManager-names.h" line="290"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_EVDO"
              value="Evdo"
              c:type="MM_MODEM_SIGNAL_PROPERTY_EVDO">
      <source-position filename="../include/ModemManager-names.h" line="291"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_GSM"
              value="Gsm"
              c:type="MM_MODEM_SIGNAL_PROPERTY_GSM">
      <source-position filename="../include/ModemManager-names.h" line="292"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_LTE"
              value="Lte"
              c:type="MM_MODEM_SIGNAL_PROPERTY_LTE">
      <source-position filename="../include/ModemManager-names.h" line="294"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_RATE"
              value="Rate"
              c:type="MM_MODEM_SIGNAL_PROPERTY_RATE">
      <source-position filename="../include/ModemManager-names.h" line="289"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_PROPERTY_UMTS"
              value="Umts"
              c:type="MM_MODEM_SIGNAL_PROPERTY_UMTS">
      <source-position filename="../include/ModemManager-names.h" line="293"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_SIGNAL_STATECHANGED"
              value="StateChanged"
              c:type="MM_MODEM_SIGNAL_STATECHANGED">
      <source-position filename="../include/ModemManager-names.h" line="159"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_TIME_METHOD_GETNETWORKTIME"
              value="GetNetworkTime"
              c:type="MM_MODEM_TIME_METHOD_GETNETWORKTIME">
      <source-position filename="../include/ModemManager-names.h" line="275"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_TIME_PROPERTY_NETWORKTIMEZONE"
              value="NetworkTimezone"
              c:type="MM_MODEM_TIME_PROPERTY_NETWORKTIMEZONE">
      <source-position filename="../include/ModemManager-names.h" line="277"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_TIME_SIGNAL_NETWORKTIMECHANGED"
              value="NetworkTimeChanged"
              c:type="MM_MODEM_TIME_SIGNAL_NETWORKTIMECHANGED">
      <source-position filename="../include/ModemManager-names.h" line="276"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_METHOD_CREATECALL"
              value="CreateCall"
              c:type="MM_MODEM_VOICE_METHOD_CREATECALL">
      <source-position filename="../include/ModemManager-names.h" line="196"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_METHOD_DELETECALL"
              value="DeleteCall"
              c:type="MM_MODEM_VOICE_METHOD_DELETECALL">
      <source-position filename="../include/ModemManager-names.h" line="195"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_METHOD_LISTCALLS"
              value="ListCalls"
              c:type="MM_MODEM_VOICE_METHOD_LISTCALLS">
      <source-position filename="../include/ModemManager-names.h" line="194"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_PROPERTY_CALLS"
              value="Calls"
              c:type="MM_MODEM_VOICE_PROPERTY_CALLS">
      <source-position filename="../include/ModemManager-names.h" line="199"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_SIGNAL_CALLADDED"
              value="CallAdded"
              c:type="MM_MODEM_VOICE_SIGNAL_CALLADDED">
      <source-position filename="../include/ModemManager-names.h" line="197"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MODEM_VOICE_SIGNAL_CALLDELETED"
              value="CallDeleted"
              c:type="MM_MODEM_VOICE_SIGNAL_CALLDELETED">
      <source-position filename="../include/ModemManager-names.h" line="198"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Manager"
           c:symbol-prefix="manager"
           c:type="MMManager"
           parent="GdbusObjectManagerClient"
           glib:type-name="MMManager"
           glib:get-type="mm_manager_get_type"
           glib:type-struct="ManagerClass">
      <doc xml:space="preserve"
           filename="mm-manager.h"
           line="51">The #MMManager structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-manager.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="mm_manager_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="132">Finishes an operation started with mm_manager_new().</doc>
        <source-position filename="mm-manager.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="139">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="Manager" c:type="MMManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="134">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_manager_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="mm_manager_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="189">Synchronously creates a #MMManager.

The calling thread is blocked until a reply is received.

See mm_manager_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="mm-manager.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="202">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="Manager" c:type="MMManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="191">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="192">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="193">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="mm_manager_new">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="151">Asynchronously creates a #MMManager.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from.

You can then call mm_manager_new_finish() to get the result of the operation.

See mm_manager_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="mm-manager.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="153">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="154">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="155">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="156">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="157">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_proxy" c:identifier="mm_manager_get_proxy">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="246">Gets the #GDBusProxy interface of the @manager.</doc>
        <source-position filename="mm-manager.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="252">The #GDBusProxy interface of @manager, or #NULL if none. The returned object must be freed with g_object_unref().</doc>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="248">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="mm_manager_get_version">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="267">Gets the ModemManager version, as reported by the daemon.

It is safe to assume this value never changes during runtime.</doc>
        <source-position filename="mm-manager.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="275">The version, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="269">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_proxy" c:identifier="mm_manager_peek_proxy">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="227">Gets the #GDBusProxy interface of the @manager.</doc>
        <source-position filename="mm-manager.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="233">The #GDBusProxy interface of @manager, or #NULL if none. Do not free the returned object, it is owned by @manager.</doc>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="229">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="report_kernel_event"
              c:identifier="mm_manager_report_kernel_event">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="552">Asynchronously report kernel event.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
mm_manager_report_kernel_event_finish() to get the result of the operation.

See mm_manager_report_kernel_event_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-manager.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="554">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="555">the properties of the kernel event.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="556">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="557">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="558">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="report_kernel_event_finish"
              c:identifier="mm_manager_report_kernel_event_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="517">Finishes an operation started with mm_manager_report_kernel_event().</doc>
        <source-position filename="mm-manager.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="525">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="519">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="520">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_manager_report_kernel_event().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="report_kernel_event_sync"
              c:identifier="mm_manager_report_kernel_event_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="600">Synchronously report kernel event.

The calling thread is blocked until a reply is received.

See mm_manager_report_kernel_event() for the asynchronous version of this method.</doc>
        <source-position filename="mm-manager.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="613">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="602">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="603">the properties of the kernel event.</doc>
            <type name="KernelEventProperties"
                  c:type="MMKernelEventProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="604">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_devices" c:identifier="mm_manager_scan_devices">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="443">Asynchronously requests to scan looking for devices.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
mm_manager_scan_devices_finish() to get the result of the operation.

See mm_manager_scan_devices_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-manager.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="445">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="446">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="447">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="448">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_devices_finish"
              c:identifier="mm_manager_scan_devices_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="407">Finishes an operation started with mm_manager_scan_devices().</doc>
        <source-position filename="mm-manager.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="415">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="409">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="410">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_manager_scan_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_devices_sync"
              c:identifier="mm_manager_scan_devices_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="485">Synchronously requests to scan looking for devices.

The calling thread is blocked until a reply is received.

See mm_manager_scan_devices() for the asynchronous version of this method.</doc>
        <source-position filename="mm-manager.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="497">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="487">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="488">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logging" c:identifier="mm_manager_set_logging">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="327">Asynchronously requests to set the specified logging level in the daemon.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
mm_manager_set_logging_finish() to get the result of the operation.

See mm_manager_set_logging_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-manager.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="329">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="330">the login level to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="331">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="332">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="333">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logging_finish"
              c:identifier="mm_manager_set_logging_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="291">Finishes an operation started with mm_manager_set_logging().</doc>
        <source-position filename="mm-manager.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="299">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="293">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="294">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_manager_set_logging().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logging_sync"
              c:identifier="mm_manager_set_logging_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-manager.c"
             line="372">Synchronously requests to set the specified logging level in the daemon..

The calling thread is blocked until a reply is received.

See mm_manager_set_logging() for the asynchronous version of this method.</doc>
        <source-position filename="mm-manager.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-manager.c"
               line="385">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="374">A #MMManager.</doc>
            <type name="Manager" c:type="MMManager*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="375">the login level to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-manager.c"
                 line="376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusObjectManagerClient"
              c:type="MmGdbusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerPrivate" c:type="MMManagerPrivate*"/>
      </field>
    </class>
    <record name="ManagerClass"
            c:type="MMManagerClass"
            glib:is-gtype-struct-for="Manager">
      <source-position filename="mm-manager.h" line="66"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusObjectManagerClientClass"
              c:type="MmGdbusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ManagerPrivate" c:type="MMManagerPrivate" disguised="1">
      <source-position filename="mm-manager.h" line="49"/>
    </record>
    <enumeration name="MessageError"
                 glib:type-name="MMMessageError"
                 glib:get-type="mm_message_error_get_type"
                 c:type="MMMessageError"
                 glib:error-domain="mm_message_error_quark">
      <member name="MeFailure"
              value="300"
              c:identifier="MM_MESSAGE_ERROR_ME_FAILURE"
              glib:nick="MeFailure">
      </member>
      <member name="SmsServiceReserved"
              value="301"
              c:identifier="MM_MESSAGE_ERROR_SMS_SERVICE_RESERVED"
              glib:nick="SmsServiceReserved">
      </member>
      <member name="NotAllowed"
              value="302"
              c:identifier="MM_MESSAGE_ERROR_NOT_ALLOWED"
              glib:nick="NotAllowed">
      </member>
      <member name="NotSupported"
              value="303"
              c:identifier="MM_MESSAGE_ERROR_NOT_SUPPORTED"
              glib:nick="NotSupported">
      </member>
      <member name="InvalidPduParameter"
              value="304"
              c:identifier="MM_MESSAGE_ERROR_INVALID_PDU_PARAMETER"
              glib:nick="InvalidPduParameter">
      </member>
      <member name="InvalidTextParameter"
              value="305"
              c:identifier="MM_MESSAGE_ERROR_INVALID_TEXT_PARAMETER"
              glib:nick="InvalidTextParameter">
      </member>
      <member name="SimNotInserted"
              value="310"
              c:identifier="MM_MESSAGE_ERROR_SIM_NOT_INSERTED"
              glib:nick="SimNotInserted">
      </member>
      <member name="SimPin"
              value="311"
              c:identifier="MM_MESSAGE_ERROR_SIM_PIN"
              glib:nick="SimPin">
      </member>
      <member name="PhSimPin"
              value="312"
              c:identifier="MM_MESSAGE_ERROR_PH_SIM_PIN"
              glib:nick="PhSimPin">
      </member>
      <member name="SimFailure"
              value="313"
              c:identifier="MM_MESSAGE_ERROR_SIM_FAILURE"
              glib:nick="SimFailure">
      </member>
      <member name="SimBusy"
              value="314"
              c:identifier="MM_MESSAGE_ERROR_SIM_BUSY"
              glib:nick="SimBusy">
      </member>
      <member name="SimWrong"
              value="315"
              c:identifier="MM_MESSAGE_ERROR_SIM_WRONG"
              glib:nick="SimWrong">
      </member>
      <member name="SimPuk"
              value="316"
              c:identifier="MM_MESSAGE_ERROR_SIM_PUK"
              glib:nick="SimPuk">
      </member>
      <member name="SimPin2"
              value="317"
              c:identifier="MM_MESSAGE_ERROR_SIM_PIN2"
              glib:nick="SimPin2">
      </member>
      <member name="SimPuk2"
              value="318"
              c:identifier="MM_MESSAGE_ERROR_SIM_PUK2"
              glib:nick="SimPuk2">
      </member>
      <member name="MemoryFailure"
              value="320"
              c:identifier="MM_MESSAGE_ERROR_MEMORY_FAILURE"
              glib:nick="MemoryFailure">
      </member>
      <member name="InvalidIndex"
              value="321"
              c:identifier="MM_MESSAGE_ERROR_INVALID_INDEX"
              glib:nick="InvalidIndex">
      </member>
      <member name="MemoryFull"
              value="322"
              c:identifier="MM_MESSAGE_ERROR_MEMORY_FULL"
              glib:nick="MemoryFull">
      </member>
      <member name="SmscAddressUnknown"
              value="330"
              c:identifier="MM_MESSAGE_ERROR_SMSC_ADDRESS_UNKNOWN"
              glib:nick="SmscAddressUnknown">
      </member>
      <member name="NoNetwork"
              value="331"
              c:identifier="MM_MESSAGE_ERROR_NO_NETWORK"
              glib:nick="NoNetwork">
      </member>
      <member name="NetworkTimeout"
              value="332"
              c:identifier="MM_MESSAGE_ERROR_NETWORK_TIMEOUT"
              glib:nick="NetworkTimeout">
      </member>
      <member name="NoCnmaAckExpected"
              value="340"
              c:identifier="MM_MESSAGE_ERROR_NO_CNMA_ACK_EXPECTED"
              glib:nick="NoCnmaAckExpected">
      </member>
      <member name="Unknown"
              value="500"
              c:identifier="MM_MESSAGE_ERROR_UNKNOWN"
              glib:nick="Unknown">
      </member>
      <function name="quark" c:identifier="mm_message_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="MobileEquipmentError"
                 glib:type-name="MMMobileEquipmentError"
                 glib:get-type="mm_mobile_equipment_error_get_type"
                 c:type="MMMobileEquipmentError"
                 glib:error-domain="mm_mobile_equipment_error_quark">
      <member name="PhoneFailure"
              value="0"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_PHONE_FAILURE"
              glib:nick="PhoneFailure">
      </member>
      <member name="NoConnection"
              value="1"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NO_CONNECTION"
              glib:nick="NoConnection">
      </member>
      <member name="LinkReserved"
              value="2"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_LINK_RESERVED"
              glib:nick="LinkReserved">
      </member>
      <member name="NotAllowed"
              value="3"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NOT_ALLOWED"
              glib:nick="NotAllowed">
      </member>
      <member name="NotSupported"
              value="4"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NOT_SUPPORTED"
              glib:nick="NotSupported">
      </member>
      <member name="PhSimPin"
              value="5"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_PH_SIM_PIN"
              glib:nick="PhSimPin">
      </member>
      <member name="PhFsimPin"
              value="6"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PIN"
              glib:nick="PhFsimPin">
      </member>
      <member name="PhFsimPuk"
              value="7"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_PH_FSIM_PUK"
              glib:nick="PhFsimPuk">
      </member>
      <member name="SimNotInserted"
              value="10"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_NOT_INSERTED"
              glib:nick="SimNotInserted">
      </member>
      <member name="SimPin"
              value="11"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN"
              glib:nick="SimPin">
      </member>
      <member name="SimPuk"
              value="12"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK"
              glib:nick="SimPuk">
      </member>
      <member name="SimFailure"
              value="13"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_FAILURE"
              glib:nick="SimFailure">
      </member>
      <member name="SimBusy"
              value="14"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_BUSY"
              glib:nick="SimBusy">
      </member>
      <member name="SimWrong"
              value="15"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_WRONG"
              glib:nick="SimWrong">
      </member>
      <member name="IncorrectPassword"
              value="16"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_INCORRECT_PASSWORD"
              glib:nick="IncorrectPassword">
      </member>
      <member name="SimPin2"
              value="17"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_PIN2"
              glib:nick="SimPin2">
      </member>
      <member name="SimPuk2"
              value="18"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SIM_PUK2"
              glib:nick="SimPuk2">
      </member>
      <member name="MemoryFull"
              value="20"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FULL"
              glib:nick="MemoryFull">
      </member>
      <member name="InvalidIndex"
              value="21"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_INVALID_INDEX"
              glib:nick="InvalidIndex">
      </member>
      <member name="NotFound"
              value="22"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NOT_FOUND"
              glib:nick="NotFound">
      </member>
      <member name="MemoryFailure"
              value="23"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_MEMORY_FAILURE"
              glib:nick="MemoryFailure">
      </member>
      <member name="TextTooLong"
              value="24"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_TEXT_TOO_LONG"
              glib:nick="TextTooLong">
      </member>
      <member name="InvalidChars"
              value="25"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_INVALID_CHARS"
              glib:nick="InvalidChars">
      </member>
      <member name="DialStringTooLong"
              value="26"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_TOO_LONG"
              glib:nick="DialStringTooLong">
      </member>
      <member name="DialStringInvalid"
              value="27"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_DIAL_STRING_INVALID"
              glib:nick="DialStringInvalid">
      </member>
      <member name="NoNetwork"
              value="30"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NO_NETWORK"
              glib:nick="NoNetwork">
      </member>
      <member name="NetworkTimeout"
              value="31"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_TIMEOUT"
              glib:nick="NetworkTimeout">
      </member>
      <member name="NetworkNotAllowed"
              value="32"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_NOT_ALLOWED"
              glib:nick="NetworkNotAllowed">
      </member>
      <member name="NetworkPin"
              value="40"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PIN"
              glib:nick="NetworkPin">
      </member>
      <member name="NetworkPuk"
              value="41"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_PUK"
              glib:nick="NetworkPuk">
      </member>
      <member name="NetworkSubsetPin"
              value="42"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PIN"
              glib:nick="NetworkSubsetPin">
      </member>
      <member name="NetworkSubsetPuk"
              value="43"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_NETWORK_SUBSET_PUK"
              glib:nick="NetworkSubsetPuk">
      </member>
      <member name="ServicePin"
              value="44"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PIN"
              glib:nick="ServicePin">
      </member>
      <member name="ServicePuk"
              value="45"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_SERVICE_PUK"
              glib:nick="ServicePuk">
      </member>
      <member name="CorpPin"
              value="46"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_CORP_PIN"
              glib:nick="CorpPin">
      </member>
      <member name="CorpPuk"
              value="47"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_CORP_PUK"
              glib:nick="CorpPuk">
      </member>
      <member name="HiddenKeyRequired"
              value="48"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_HIDDEN_KEY_REQUIRED"
              glib:nick="HiddenKeyRequired">
      </member>
      <member name="EapMethodNotSupported"
              value="49"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_EAP_METHOD_NOT_SUPPORTED"
              glib:nick="EapMethodNotSupported">
      </member>
      <member name="IncorrectParameters"
              value="50"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_INCORRECT_PARAMETERS"
              glib:nick="IncorrectParameters">
      </member>
      <member name="Unknown"
              value="100"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_UNKNOWN"
              glib:nick="Unknown">
      </member>
      <member name="GprsImsiUnknownInHlr"
              value="102"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_IMSI_UNKNOWN_IN_HLR"
              glib:nick="GprsImsiUnknownInHlr">
      </member>
      <member name="GprsIllegalMs"
              value="103"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_ILLEGAL_MS"
              glib:nick="GprsIllegalMs">
      </member>
      <member name="GprsImsiUnknownInVlr"
              value="104"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_IMSI_UNKNOWN_IN_VLR"
              glib:nick="GprsImsiUnknownInVlr">
      </member>
      <member name="GprsIllegalMe"
              value="106"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_ILLEGAL_ME"
              glib:nick="GprsIllegalMe">
      </member>
      <member name="GprsServiceNotAllowed"
              value="107"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_NOT_ALLOWED"
              glib:nick="GprsServiceNotAllowed">
      </member>
      <member name="GprsAndNonGprsServicesNotAllowed"
              value="108"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_AND_NON_GPRS_SERVICES_NOT_ALLOWED"
              glib:nick="GprsAndNonGprsServicesNotAllowed">
      </member>
      <member name="GprsPlmnNotAllowed"
              value="111"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_PLMN_NOT_ALLOWED"
              glib:nick="GprsPlmnNotAllowed">
      </member>
      <member name="GprsLocationNotAllowed"
              value="112"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_LOCATION_NOT_ALLOWED"
              glib:nick="GprsLocationNotAllowed">
      </member>
      <member name="GprsRomaingNotAllowed"
              value="113"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_ROAMING_NOT_ALLOWED"
              glib:nick="GprsRomaingNotAllowed">
      </member>
      <member name="GprsNoCellsInLocationArea"
              value="115"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_NO_CELLS_IN_LOCATION_AREA"
              glib:nick="GprsNoCellsInLocationArea">
      </member>
      <member name="GprsNetworkFailure"
              value="117"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_NETWORK_FAILURE"
              glib:nick="GprsNetworkFailure">
      </member>
      <member name="GprsCongestion"
              value="122"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_CONGESTION"
              glib:nick="GprsCongestion">
      </member>
      <member name="NotAuthorizedForCsg"
              value="125"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_NOT_AUTHORIZED_FOR_CSG"
              glib:nick="NotAuthorizedForCsg">
      </member>
      <member name="GprsInsufficientResources"
              value="126"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_INSUFFICIENT_RESOURCES"
              glib:nick="GprsInsufficientResources">
      </member>
      <member name="GprsMissingOrUnknownApn"
              value="127"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_MISSING_OR_UNKNOWN_APN"
              glib:nick="GprsMissingOrUnknownApn">
      </member>
      <member name="GprsUnknownPdpAddressOrType"
              value="128"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNKNOWN_PDP_ADDRESS_OR_TYPE"
              glib:nick="GprsUnknownPdpAddressOrType">
      </member>
      <member name="GprsUserAuthenticationFailed"
              value="129"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_USER_AUTHENTICATION_FAILED"
              glib:nick="GprsUserAuthenticationFailed">
      </member>
      <member name="GprsActivationRejectedByGgsnOrGw"
              value="130"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_ACTIVATION_REJECTED_BY_GGSN_OR_GW"
              glib:nick="GprsActivationRejectedByGgsnOrGw">
      </member>
      <member name="GprsActivationRejectedUnspecified"
              value="131"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_ACTIVATION_REJECTED_UNSPECIFIED"
              glib:nick="GprsActivationRejectedUnspecified">
      </member>
      <member name="GprsServiceOptionNotSupported"
              value="132"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_NOT_SUPPORTED"
              glib:nick="GprsServiceOptionNotSupported">
      </member>
      <member name="GprsServiceOptionNotSubscribed"
              value="133"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_NOT_SUBSCRIBED"
              glib:nick="GprsServiceOptionNotSubscribed">
      </member>
      <member name="GprsServiceOptionOutOfOrder"
              value="134"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SERVICE_OPTION_OUT_OF_ORDER"
              glib:nick="GprsServiceOptionOutOfOrder">
      </member>
      <member name="GprsFeatureNotSupported"
              value="140"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_FEATURE_NOT_SUPPORTED"
              glib:nick="GprsFeatureNotSupported">
      </member>
      <member name="GprsSemanticErrorInTftOperation"
              value="141"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SEMANTIC_ERROR_IN_TFT_OPERATION"
              glib:nick="GprsSemanticErrorInTftOperation">
      </member>
      <member name="GprsSyntacticalErrorInTftOperation"
              value="142"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SYNTACTICAL_ERROR_IN_TFT_OPERATION"
              glib:nick="GprsSyntacticalErrorInTftOperation">
      </member>
      <member name="GprsUnknownPdpContext"
              value="143"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNKNOWN_PDP_CONTEXT"
              glib:nick="GprsUnknownPdpContext">
      </member>
      <member name="GprsSemanticErrorsInPacketFilter"
              value="144"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SEMANTIC_ERRORS_IN_PACKET_FILTER"
              glib:nick="GprsSemanticErrorsInPacketFilter">
      </member>
      <member name="GprsSyntacticalErrorsInPacketFilter"
              value="145"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SYNTACTICAL_ERROR_IN_PACKET_FILTER"
              glib:nick="GprsSyntacticalErrorsInPacketFilter">
      </member>
      <member name="GprsPdpContextWithoutTftAlreadyActivated"
              value="146"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_PDP_CONTEXT_WITHOUT_TFT_ALREADY_ACTIVATED"
              glib:nick="GprsPdpContextWithoutTftAlreadyActivated">
      </member>
      <member name="GprsUnknown"
              value="148"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNKNOWN"
              glib:nick="GprsUnknown">
      </member>
      <member name="GprsPdpAuthFailure"
              value="149"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_PDP_AUTH_FAILURE"
              glib:nick="GprsPdpAuthFailure">
      </member>
      <member name="GprsInvalidMobileClass"
              value="150"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_INVALID_MOBILE_CLASS"
              glib:nick="GprsInvalidMobileClass">
      </member>
      <member name="GprsLastPdnDisconnectionNotAllowed"
              value="171"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_LAST_PDN_DISCONNECTION_NOT_ALLOWED"
              glib:nick="GprsLastPdnDisconnectionNotAllowed">
      </member>
      <member name="GprsSemanticallyIncorrectMessage"
              value="172"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_SEMANTICALLY_INCORRECT_MESSAGE"
              glib:nick="GprsSemanticallyIncorrectMessage">
      </member>
      <member name="GprsMandatoryIeError"
              value="173"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_MANDATORY_IE_ERROR"
              glib:nick="GprsMandatoryIeError">
      </member>
      <member name="GprsIeNotImplemented"
              value="174"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_IE_NOT_IMPLEMENTED"
              glib:nick="GprsIeNotImplemented">
      </member>
      <member name="GprsConditionalIeError"
              value="175"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_CONDITIONAL_IE_ERROR"
              glib:nick="GprsConditionalIeError">
      </member>
      <member name="GprsUnspecifiedProtocolError"
              value="176"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_UNSPECIFIED_PROTOCOL_ERROR"
              glib:nick="GprsUnspecifiedProtocolError">
      </member>
      <member name="GprsOperatorDeterminedBarring"
              value="177"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_OPERATOR_DETERMINED_BARRING"
              glib:nick="GprsOperatorDeterminedBarring">
      </member>
      <member name="GprsMaximumNumberOfPdpContextsReached"
              value="178"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_MAXIMUM_NUMBER_OF_PDP_CONTEXTS_REACHED"
              glib:nick="GprsMaximumNumberOfPdpContextsReached">
      </member>
      <member name="GprsRequestedApnNotSupported"
              value="179"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_REQUESTED_APN_NOT_SUPPORTED"
              glib:nick="GprsRequestedApnNotSupported">
      </member>
      <member name="GprsRequestRejectedBcmViolation"
              value="180"
              c:identifier="MM_MOBILE_EQUIPMENT_ERROR_GPRS_REQUEST_REJECTED_BCM_VIOLATION"
              glib:nick="GprsRequestRejectedBcmViolation">
      </member>
      <function name="quark" c:identifier="mm_mobile_equipment_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Modem"
           c:symbol-prefix="modem"
           c:type="MMModem"
           parent="GdbusModemProxy"
           glib:type-name="MMModem"
           glib:get-type="mm_modem_get_type"
           glib:type-struct="ModemClass">
      <doc xml:space="preserve"
           filename="mm-modem.h"
           line="52">The #MMModem structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem.h" line="67"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem"/>
      <function name="get_pending_network_initiated_sessions"
                c:identifier="mm_modem_get_pending_network_initiated_sessions">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="510">Gets the list of pending network-initiated OMA sessions.</doc>
        <source-position filename="mm-modem-oma.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="518">%TRUE if @sessions and @n_sessions are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="512">A #MMModem.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </parameter>
          <parameter name="sessions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="513">Return location for the array of #MMOmaPendingNetworkInitiatedSession structs. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="MMOmaPendingNetworkInitiatedSession**">
              <type name="OmaPendingNetworkInitiatedSession"
                    c:type="MMOmaPendingNetworkInitiatedSession*"/>
            </array>
          </parameter>
          <parameter name="n_sessions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="514">Return location for the number of values in @sessions.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="peek_pending_network_initiated_sessions"
                c:identifier="mm_modem_peek_pending_network_initiated_sessions">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="532">Gets the list of pending network-initiated OMA sessions.</doc>
        <source-position filename="mm-modem-oma.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="540">%TRUE if @sessions and @n_sessions are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="534">A #MMModem.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </parameter>
          <parameter name="sessions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="535">Return location for the array of #MMOmaPendingNetworkInitiatedSession values. Do not free the returned array, it is owned by @self.</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="const MMOmaPendingNetworkInitiatedSession**">
              <type name="OmaPendingNetworkInitiatedSession"
                    c:type="MMOmaPendingNetworkInitiatedSession*"/>
            </array>
          </parameter>
          <parameter name="n_sessions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="536">Return location for the number of values in @sessions.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <method name="command" c:identifier="mm_modem_command">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2429">Asynchronously runs an AT command in the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_command_finish() to get the result of the operation.

See mm_modem_command_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2431">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2432">AT command to run.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2433">Maximum time to wait for the response, in seconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2434">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2435">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2436">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="command_finish"
              c:identifier="mm_modem_command_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2404">Finishes an operation started with mm_modem_command().</doc>
        <source-position filename="mm-modem.h" line="265"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2412">A newly allocated string with the reply to the command, or #NULL if @error is set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2406">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2407">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_command().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="command_sync"
              c:identifier="mm_modem_command_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2461">Synchronously runs an AT command in the modem.

The calling thread is blocked until a reply is received. See mm_modem_command()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="268"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2474">A newly allocated string with the reply to the command, or #NULL if @error is set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2463">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2464">AT command to run.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2465">Maximum time to wait for the response, in seconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2466">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_bearer" c:identifier="mm_modem_create_bearer">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2079">Asynchronously creates a new packet data bearer in the #MMModem.

This request may fail if the modem does not support additional bearers,
if too many bearers are already defined, or if @properties are invalid.

See &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer&lt;/link&gt; to check which properties may be passed.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_create_bearer_finish() to get the result of the operation.

See mm_modem_create_bearer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2081">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2082">A #MMBearerProperties object with the properties to use.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2083">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2084">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2085">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_bearer_finish"
              c:identifier="mm_modem_create_bearer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2006">Finishes an operation started with mm_modem_create_bearer().</doc>
        <source-position filename="mm-modem.h" line="214"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2014">A newly created #MMBearer, or %NULL if @error is set.</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2008">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2009">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_create_bearer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_bearer_sync"
              c:identifier="mm_modem_create_bearer_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2125">Synchronously creates a new packet data bearer in the #MMModem.

This request may fail if the modem does not support additional bearers,
if too many bearers are already defined, or if @properties are invalid.

See &lt;link linkend="gdbus-method-org-freedesktop-ModemManager1-Modem.CreateBearer"&gt;CreateBearer&lt;/link&gt; to check which properties may be passed.

The calling thread is blocked until a reply is received. See mm_modem_create_bearer()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="217"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2142">A newly created #MMBearer, or %NULL if @error is set.</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2127">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2128">A #MMBearerProperties object with the properties to use.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_bearer" c:identifier="mm_modem_delete_bearer">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2202">Asynchronously deletes a given bearer from the #MMModem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_delete_bearer_finish() to get the result of the operation.

See mm_modem_delete_bearer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2204">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2205">Path of the bearer to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2207">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2208">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_bearer_finish"
              c:identifier="mm_modem_delete_bearer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2182">Finishes an operation started with mm_modem_delete_bearer().</doc>
        <source-position filename="mm-modem.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2190">%TRUE if the bearer was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2184">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2185">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_delete_bearer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_bearer_sync"
              c:identifier="mm_modem_delete_bearer_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2229">Synchronously deletes a given bearer from the #MMModem.

The calling thread is blocked until a reply is received. See mm_modem_delete_bearer()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2241">%TRUE if the bearer was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2231">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2232">Path of the bearer to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2233">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable" c:identifier="mm_modem_disable">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1743">Asynchronously tries to disable the #MMModem. When disabled, the modem enters
low-power state and no network-related operations are available.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_disable_finish() to get the result of the operation.

See mm_modem_disable_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1745">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1746">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1747">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1748">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_finish"
              c:identifier="mm_modem_disable_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1723">Finishes an operation started with mm_modem_disable().</doc>
        <source-position filename="mm-modem.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1731">%TRUE if the modem was properly disabled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1725">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1726">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_disable().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_sync"
              c:identifier="mm_modem_disable_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1769">Synchronously tries to disable the #MMModem. When disabled, the modem enters
low-power state and no network-related operations are available.

The calling thread is blocked until a reply is received. See mm_modem_disable()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1781">%TRUE if the modem was properly disabled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1771">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1772">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_bearer_paths" c:identifier="mm_modem_dup_bearer_paths">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="364">Gets a copy of the DBus paths of the #MMBearer handled in this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="370">The DBus paths of the #MMBearer handled in this #MMModem, or %NULL if none available. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="366">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device" c:identifier="mm_modem_dup_device">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="628">Gets a copy of the physical modem device reference (ie, USB, PCI, PCMCIA device), which
may be dependent upon the operating system.</doc>
        <source-position filename="mm-modem.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="635">The device, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="630">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device_identifier"
              c:identifier="mm_modem_dup_device_identifier">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="577">Gets a copy of a best-effort device identifier based on various device information
like model name, firmware revision, USB/PCI/PCMCIA IDs, and other properties.

This ID is not guaranteed to be unique and may be shared between
identical devices with the same firmware, but is intended to be "unique
enough" for use as a casual device identifier for various user
experience operations.

This is not the device's IMEI or ESN since those may not be available
before unlocking the device via a PIN.</doc>
        <source-position filename="mm-modem.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="592">The device identifier, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="579">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drivers" c:identifier="mm_modem_dup_drivers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="670">Gets a copy of the Operating System device driver handling communication with the modem
hardware.</doc>
        <source-position filename="mm-modem.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="677">The drivers, or %NULL if none available. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="672">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_equipment_identifier"
              c:identifier="mm_modem_dup_equipment_identifier">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="923">Gets a copy of the identity of the #MMModem.

This will be the IMEI number for GSM devices and the hex-format ESN/MEID
for CDMA devices.</doc>
        <source-position filename="mm-modem.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="932">The equipment identifier, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="925">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hardware_revision"
              c:identifier="mm_modem_dup_hardware_revision">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="527">Gets a copy of the equipment hardware revision, as reported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="533">The equipment hardware revision, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="529">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_manufacturer" c:identifier="mm_modem_dup_manufacturer">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="404">Gets a copy of the equipment manufacturer, as reported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="410">The equipment manufacturer, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="406">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model" c:identifier="mm_modem_dup_model">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="445">Gets a copy of the equipment model, as reported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="451">The equipment model, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="447">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_own_numbers" c:identifier="mm_modem_dup_own_numbers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="971">Gets a copy of the list of numbers (e.g. MSISDN in 3GPP) being currently
handled by this modem.</doc>
        <source-position filename="mm-modem.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="978">The list of own numbers or %NULL if none is available. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="973">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="97">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="103">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="99">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_plugin" c:identifier="mm_modem_dup_plugin">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="711">Gets a copy of the name of the plugin handling this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="717">The name of the plugin, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="713">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_primary_port" c:identifier="mm_modem_dup_primary_port">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="752">Gets a copy of the name of the primary port controlling this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="758">The name of the primary port. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="754">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision" c:identifier="mm_modem_dup_revision">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="486">Gets a copy of the equipment revision, as reported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="492">The equipment revision, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="488">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sim_path" c:identifier="mm_modem_dup_sim_path">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="142">Gets a copy of the DBus path of the #MMSim handled in this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="148">The DBus path of the #MMSim handled in this #MMModem, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="144">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable" c:identifier="mm_modem_enable">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1669">Asynchronously tries to enable the #MMModem. When enabled, the modem's radio is
powered on and data sessions, voice calls, location services, and Short Message
Service may be available.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_enable_finish() to get the result of the operation.

See mm_modem_enable_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1671">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1672">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1673">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1674">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_finish"
              c:identifier="mm_modem_enable_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1649">Finishes an operation started with mm_modem_enable().</doc>
        <source-position filename="mm-modem.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1657">%TRUE if the modem was properly enabled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1651">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1652">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_enable().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_sync"
              c:identifier="mm_modem_enable_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1696">Synchronously tries to enable the #MMModem. When enabled, the modem's radio is
powered on and data sessions, voice calls, location services, and Short Message
Service may be available.

The calling thread is blocked until a reply is received. See mm_modem_enable()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1709">%TRUE if the modem was properly enabled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1698">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1699">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_reset" c:identifier="mm_modem_factory_reset">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2348">Asynchronously clears the modem's configuration (including persistent configuration and
state), and returns the device to a factory-default state.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_factory_reset_finish() to get the result of the operation.

See mm_modem_factory_reset_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2350">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2351">Carrier-supplied code required to reset the modem.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2352">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2353">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2354">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_reset_finish"
              c:identifier="mm_modem_factory_reset_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2328">Finishes an operation started with mm_modem_factory_reset().</doc>
        <source-position filename="mm-modem.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2336">%TRUE if the factory_reset was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2330">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2331">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_factory_reset().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="factory_reset_sync"
              c:identifier="mm_modem_factory_reset_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2376">Synchronously clears the modem's configuration (including persistent configuration and
state), and returns the device to a factory-default state.

The calling thread is blocked until a reply is received. See mm_modem_factory_reset()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="254"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2389">%TRUE if the factory reset was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2378">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2379">Carrier-supplied code required to reset the modem.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2380">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_access_technologies"
              c:identifier="mm_modem_get_access_technologies">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1172">Gets the current network access technology used by the #MMModem to communicate
with the network.</doc>
        <source-position filename="mm-modem.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1179">A ##MMModemAccessTechnology value.</doc>
          <type name="ModemAccessTechnology" c:type="MMModemAccessTechnology"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1174">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bearer_paths" c:identifier="mm_modem_get_bearer_paths">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="343">Gets the DBus paths of the #MMBearer handled in this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_bearer_paths() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="354">The DBus paths of the #MMBearer handled in this #MMModem, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="345">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_bands"
              c:identifier="mm_modem_get_current_bands">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1574">Gets the list of radio frequency and technology bands the #MMModem is currently
using when connecting to a network.

For POTS devices, only the #MM_MODEM_BAND_ANY band is supported.</doc>
        <source-position filename="mm-modem.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1585">%TRUE if @bands and @n_bands are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1576">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1577">Return location for the array of #MMModemBand values. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="MMModemBand**">
              <type name="ModemBand" c:type="MMModemBand*"/>
            </array>
          </parameter>
          <parameter name="n_bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1578">Return location for the number of values in @bands.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_capabilities"
              c:identifier="mm_modem_get_current_capabilities">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="277">Gets the list of generic families of access technologies supported by this #MMModem
without a firmware reload or reinitialization.</doc>
        <source-position filename="mm-modem.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="284">A bitmask of #MMModemCapability flags.</doc>
          <type name="ModemCapability" c:type="MMModemCapability"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="279">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_modes"
              c:identifier="mm_modem_get_current_modes">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1347">Gets the list of modes specifying the access technologies (eg 2G/3G/4G)
the #MMModem is currently allowed to use when connecting to a network, as
well as the preferred one, if any.</doc>
        <source-position filename="mm-modem.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1357">%TRUE if @allowed and @preferred are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1349">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="allowed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1350">Return location for a bitmask of #MMModemMode values.</doc>
            <type name="ModemMode" c:type="MMModemMode*"/>
          </parameter>
          <parameter name="preferred"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1351">Return location for a #MMModemMode value.</doc>
            <type name="ModemMode" c:type="MMModemMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="mm_modem_get_device">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="605">Gets the physical modem device reference (ie, USB, PCI, PCMCIA device), which
may be dependent upon the operating system.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_device() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="617">The device, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="607">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_identifier"
              c:identifier="mm_modem_get_device_identifier">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="546">Gets a best-effort device identifier based on various device information like
model name, firmware revision, USB/PCI/PCMCIA IDs, and other properties.

This ID is not guaranteed to be unique and may be shared between
identical devices with the same firmware, but is intended to be "unique
enough" for use as a casual device identifier for various user
experience operations.

This is not the device's IMEI or ESN since those may not be available
before unlocking the device via a PIN.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_device_identifier() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="566">The device identifier, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="548">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drivers" c:identifier="mm_modem_get_drivers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="648">Gets the Operating System device drivers handling communication with the modem
hardware.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_drivers() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="660">The drivers, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="650">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_equipment_identifier"
              c:identifier="mm_modem_get_equipment_identifier">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="898">Gets the identity of the #MMModem.

This will be the IMEI number for GSM devices and the hex-format ESN/MEID
for CDMA devices.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_equipment_identifier() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="912">The equipment identifier, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="900">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hardware_revision"
              c:identifier="mm_modem_get_hardware_revision">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="505">Gets the equipment hardware revision, as reported by this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_hardware_revision() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="516">The equipment hardware revision, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="507">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer" c:identifier="mm_modem_get_manufacturer">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="382">Gets the equipment manufacturer, as reported by this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_manufacturer() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="393">The equipment manufacturer, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="384">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_active_bearers"
              c:identifier="mm_modem_get_max_active_bearers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="321">Gets the maximum number of active packet data bearers this #MMModem supports.

POTS and CDMA2000-only devices support one active bearer, while GSM/UMTS
and LTE-capable devices (including LTE/CDMA devices) typically support
at least two active bearers.</doc>
        <source-position filename="mm-modem.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="331">the maximum number of defined packet data bearers.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="323">a #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_bearers" c:identifier="mm_modem_get_max_bearers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="296">Gets the maximum number of defined packet data bearers this #MMModem supports.

This is not the number of active/connected bearers the modem supports,
but simply the number of bearers that may be defined at any given time.
For example, POTS and CDMA2000-only devices support only one bearer,
while GSM/UMTS devices typically support three or more, and any
LTE-capable device (whether LTE-only, GSM/UMTS-capable, and/or
CDMA2000-capable) also typically support three or more.</doc>
        <source-position filename="mm-modem.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="309">the maximum number of defined packet data bearers.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="298">a #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model" c:identifier="mm_modem_get_model">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="423">Gets the equipment model, as reported by this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_model() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="434">The equipment model, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="425">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_own_numbers"
              c:identifier="mm_modem_get_own_numbers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="945">Gets the list of numbers (e.g. MSISDN in 3GPP) being currently handled by
this modem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_own_numbers() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="957">The list of own numbers or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="947">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="mm_modem_get_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="80">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="86">The DBus path of the #MMObject object. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="82">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugin" c:identifier="mm_modem_get_plugin">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="689">Gets the name of the plugin handling this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_plugin() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="700">The name of the plugin, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="691">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ports" c:identifier="mm_modem_get_ports">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="874">Gets the list of ports in the modem.</doc>
        <source-position filename="mm-modem.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="882">%TRUE if @ports and @n_ports are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="876">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="ports"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="877">Return location for the array of #MMModemPortInfo values. The returned array should be freed with mm_modem_port_info_array_free() when no longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="MMModemPortInfo**">
              <type name="ModemPortInfo" c:type="MMModemPortInfo*"/>
            </array>
          </parameter>
          <parameter name="n_ports"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="878">Return location for the number of values in @ports.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_power_state" c:identifier="mm_modem_get_power_state">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1154">Gets the power state of the #MMModem.</doc>
        <source-position filename="mm-modem.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1160">A #MMModemPowerState value.</doc>
          <type name="ModemPowerState" c:type="MMModemPowerState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1156">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary_port" c:identifier="mm_modem_get_primary_port">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="730">Gets the name of the primary port controlling this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_primary_port() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="741">The name of the primary port. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="732">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision" c:identifier="mm_modem_get_revision">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="464">Gets the equipment revision, as reported by this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_revision() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="475">The equipment revision, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="466">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="mm_modem_get_signal_quality">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1191">Gets the signal quality value in percent (0 - 100) of the dominant access technology
the #MMModem is using to communicate with the network.

Always 0 for POTS devices.</doc>
        <source-position filename="mm-modem.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1201">The signal quality.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1193">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="recent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1194">Return location for the flag specifying if the signal quality value was recent or not.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sim" c:identifier="mm_modem_get_sim">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2872">Asynchronously gets the #MMSim object managed by this #MMModem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_get_sim_finish() to get the result of the operation.

See mm_modem_get_sim_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2874">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2875">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2876">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2877">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sim_finish"
              c:identifier="mm_modem_get_sim_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2831">Finishes an operation started with mm_modem_get_sim().</doc>
        <source-position filename="mm-modem.h" line="334"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2839">a #MMSim or #NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Sim" c:type="MMSim*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2833">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2834">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_get_sim().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sim_path"
              c:identifier="mm_modem_get_sim_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="121">Gets the DBus path of the #MMSim handled in this #MMModem.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_dup_sim_path() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="132">The DBus path of the #MMSim handled in this #MMModem, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="123">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sim_sync"
              c:identifier="mm_modem_get_sim_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2922">Synchronously gets the #MMSim object managed by this #MMModem.

The calling thread is blocked until a reply is received. See mm_modem_get_sim()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2933">a #MMSim or #NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Sim" c:type="MMSim*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2924">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2925">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_modem_get_state">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1118">Gets the overall state of the #MMModem.</doc>
        <source-position filename="mm-modem.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1124">A #MMModemState value.</doc>
          <type name="ModemState" c:type="MMModemState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1120">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_failed_reason"
              c:identifier="mm_modem_get_state_failed_reason">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1136">Gets the reason specifying why the modem is in #MM_MODEM_STATE_FAILED state.</doc>
        <source-position filename="mm-modem.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1142">A #MMModemStateFailedReason value.</doc>
          <type name="ModemStateFailedReason"
                c:type="MMModemStateFailedReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1138">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_bands"
              c:identifier="mm_modem_get_supported_bands">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1452">Gets the list of radio frequency and technology bands supported by the #MMModem.

For POTS devices, only #MM_MODEM_BAND_ANY will be returned in @bands.</doc>
        <source-position filename="mm-modem.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1462">%TRUE if @bands and @n_bands are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1454">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1455">Return location for the array of #MMModemBand values. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="MMModemBand**">
              <type name="ModemBand" c:type="MMModemBand*"/>
            </array>
          </parameter>
          <parameter name="n_bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1456">Return location for the number of values in @bands.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_supported_capabilities"
              c:identifier="mm_modem_get_supported_capabilities">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="228">Gets the list of combinations of generic families of access technologies supported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="236">%TRUE if @capabilities and @n_capabilities are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="230">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="231">Return location for the array of #MMModemCapability values. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="MMModemCapability**">
              <type name="ModemCapability" c:type="MMModemCapability*"/>
            </array>
          </parameter>
          <parameter name="n_capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="232">Return location for the number of values in @capabilities.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_supported_ip_families"
              c:identifier="mm_modem_get_supported_ip_families">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1631">Gets the list of supported IP families.</doc>
        <source-position filename="mm-modem.h" line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1637">A bitmask of #MMBearerIpFamily values.</doc>
          <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1633">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_modes"
              c:identifier="mm_modem_get_supported_modes">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1296">Gets the list of supported mode combinations.</doc>
        <source-position filename="mm-modem.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1304">%TRUE if @modes and @n_modes are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1298">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1299">Return location for the array of #MMModemModeCombination structs. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="MMModemModeCombination**">
              <type name="ModemModeCombination"
                    c:type="MMModemModeCombination*"/>
            </array>
          </parameter>
          <parameter name="n_modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1300">Return location for the number of values in @modes.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_unlock_required"
              c:identifier="mm_modem_get_unlock_required">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="997">Gets current lock state of the #MMModem.</doc>
        <source-position filename="mm-modem.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1003">A #MMModemLock value, specifying the current lock state.</doc>
          <type name="ModemLock" c:type="MMModemLock"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="999">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unlock_retries"
              c:identifier="mm_modem_get_unlock_retries">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1064">Gets a #MMUnlockRetries object, which provides, for each
&lt;link linkend="MMModemLock"&gt;MMModemLock&lt;/link&gt; handled by the modem, the
number of PIN tries remaining before the code becomes blocked (requiring a PUK)
or permanently blocked.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_get_unlock_retries() again to get a new #MMUnlockRetries with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1078">A #MMUnlockRetries that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1066">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_bearers" c:identifier="mm_modem_list_bearers">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1902">Asynchronously lists the packet data bearers in the #MMModem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_list_bearers_finish() to get the result of the operation.

See mm_modem_list_bearers_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="198"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1904">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1905">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1906">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1907">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_bearers_finish"
              c:identifier="mm_modem_list_bearers_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1815">Finishes an operation started with mm_modem_list_bearers().</doc>
        <source-position filename="mm-modem.h" line="202"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1823">The list of #MMBearer objects, or %NULL if either none found or if @error is set.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Bearer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1817">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1818">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_list_bearers().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_bearers_sync"
              c:identifier="mm_modem_list_bearers_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1947">Synchronously lists the packet data bearers in the #MMModem.

The calling thread is blocked until a reply is received. See mm_modem_list_bearers()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1958">The list of #MMBearer objects, or %NULL if either none found or if @error is set.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Bearer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1949">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1950">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_current_bands"
              c:identifier="mm_modem_peek_current_bands">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1599">Gets the list of radio frequency and technology bands the #MMModem is currently
using when connecting to a network.

For POTS devices, only the #MM_MODEM_BAND_ANY band is supported.</doc>
        <source-position filename="mm-modem.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1610">%TRUE if @bands and @n_bands are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1601">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1602">Return location for the array of #MMModemBand values. Do not free the returned value, it is owned by @self.</doc>
            <array length="1" zero-terminated="0" c:type="const MMModemBand**">
              <type name="ModemBand" c:type="MMModemBand*"/>
            </array>
          </parameter>
          <parameter name="n_bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1603">Return location for the number of values in @bands.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_ports" c:identifier="mm_modem_peek_ports">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="847">Gets the list of ports in the modem.</doc>
        <source-position filename="mm-modem.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="855">%TRUE if @ports and @n_ports are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="849">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="ports"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="850">Return location for the array of #MMModemPortInfo values. Do not free the returned value, it is owned by @self.</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const MMModemPortInfo**">
              <type name="ModemPortInfo" c:type="MMModemPortInfo*"/>
            </array>
          </parameter>
          <parameter name="n_ports"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="851">Return location for the number of values in @ports.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_supported_bands"
              c:identifier="mm_modem_peek_supported_bands">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1476">Gets the list of radio frequency and technology bands supported by the #MMModem.

For POTS devices, only #MM_MODEM_BAND_ANY will be returned in @bands.</doc>
        <source-position filename="mm-modem.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1486">%TRUE if @bands and @n_bands are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1478">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1479">Return location for the array of #MMModemBand values. Do not free the returned array, it is owned by @self.</doc>
            <array length="1" zero-terminated="0" c:type="const MMModemBand**">
              <type name="ModemBand" c:type="MMModemBand*"/>
            </array>
          </parameter>
          <parameter name="n_bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1480">Return location for the number of values in @bands.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_supported_capabilities"
              c:identifier="mm_modem_peek_supported_capabilities">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="248">Gets the list of combinations of generic families of access technologies supported by this #MMModem.</doc>
        <source-position filename="mm-modem.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="256">%TRUE if @capabilities and @n_capabilities are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="250">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="251">Return location for the array of #MMModemCapability values. Do not free the returned array, it is owned by @self.</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const MMModemCapability**">
              <type name="ModemCapability" c:type="MMModemCapability*"/>
            </array>
          </parameter>
          <parameter name="n_capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="252">Return location for the number of values in @capabilities.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_supported_modes"
              c:identifier="mm_modem_peek_supported_modes">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1318">Gets the list of supported mode combinations.</doc>
        <source-position filename="mm-modem.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1326">%TRUE if @modes and @n_modes are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1320">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1321">Return location for the array of #MMModemModeCombination values. Do not free the returned array, it is owned by @self.</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const MMModemModeCombination**">
              <type name="ModemModeCombination"
                    c:type="MMModemModeCombination*"/>
            </array>
          </parameter>
          <parameter name="n_modes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1322">Return location for the number of values in @modes.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_unlock_retries"
              c:identifier="mm_modem_peek_unlock_retries">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="1091">Gets a #MMUnlockRetries object, which provides, for each
&lt;link linkend="MMModemLock"&gt;MMModemLock&lt;/link&gt; handled by the modem, the
number of PIN tries remaining before the code becomes blocked (requiring a PUK)
or permanently blocked.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_get_unlock_retries() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="1105">A #MMUnlockRetries. Do not free the returned value, it belongs to @self.</doc>
          <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="1093">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="mm_modem_reset">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2276">Asynchronously clears non-persistent configuration and state, and returns the device to
a newly-powered-on state.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_reset_finish() to get the result of the operation.

See mm_modem_reset_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2278">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2279">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2280">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2281">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_finish"
              c:identifier="mm_modem_reset_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2256">Finishes an operation started with mm_modem_reset().</doc>
        <source-position filename="mm-modem.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2264">%TRUE if the reset was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2258">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2259">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_reset().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_sync" c:identifier="mm_modem_reset_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2302">Synchronously clears non-persistent configuration and state, and returns the device to
a newly-powered-on state.

The calling thread is blocked until a reply is received. See mm_modem_reset()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2314">%TRUE if the reset was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2304">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2305">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_bands"
              c:identifier="mm_modem_set_current_bands">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2763">Asynchronously sets the radio frequency and technology bands the device is currently
allowed to use when connecting to a network.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_set_current_bands_finish() to get the result of the operation.

See mm_modem_set_current_bands_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="315"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2765">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2766">An array of #MMModemBand values specifying which bands are allowed.</doc>
            <type name="ModemBand" c:type="const MMModemBand*"/>
          </parameter>
          <parameter name="n_bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2767">Number of elements in @bands.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2768">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2769">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2770">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_bands_finish"
              c:identifier="mm_modem_set_current_bands_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2743">Finishes an operation started with mm_modem_set_current_bands().</doc>
        <source-position filename="mm-modem.h" line="321"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2751">%TRUE if the bands were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2745">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2746">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_set_current_bands().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_bands_sync"
              c:identifier="mm_modem_set_current_bands_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2797">Synchronously sets the radio frequency and technology bands the device is currently
allowed to use when connecting to a network.

The calling thread is blocked until a reply is received. See mm_modem_set_current_bands()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2811">%TRUE if the bands were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2799">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2800">An array of #MMModemBand values specifying which bands are allowed.</doc>
            <type name="ModemBand" c:type="const MMModemBand*"/>
          </parameter>
          <parameter name="n_bands" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2801">Number of elements in @bands.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2802">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_capabilities"
              c:identifier="mm_modem_set_current_capabilities">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2594">Asynchronously sets the capabilities of the device. A restart of the modem may be required.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_set_current_capabilities_finish() to get the result of the operation.

See mm_modem_set_current_capabilities_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2596">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2597">A #MMModemCapability mask.</doc>
            <type name="ModemCapability" c:type="MMModemCapability"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2598">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2599">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2600">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_capabilities_finish"
              c:identifier="mm_modem_set_current_capabilities_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2574">Finishes an operation started with mm_modem_set_current_capabilities().</doc>
        <source-position filename="mm-modem.h" line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2582">%TRUE if the capabilities were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2576">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2577">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_set_current_capabilities().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_capabilities_sync"
              c:identifier="mm_modem_set_current_capabilities_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2625">Synchronously sets the capabilities of the device. A restart of the modem may be required.

The calling thread is blocked until a reply is received. See mm_modem_set_current_capabilities()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2637">%TRUE if the capabilities were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2627">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="capabilities" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2628">A #MMModemCapability mask.</doc>
            <type name="ModemCapability" c:type="MMModemCapability"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2629">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_modes"
              c:identifier="mm_modem_set_current_modes">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2676">Asynchronously sets the access technologies (e.g. 2G/3G/4G preference) the device is
currently allowed to use when connecting to a network.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_set_current_modes_finish() to get the result of the operation.

See mm_modem_set_current_modes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2678">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2679">Mask of #MMModemMode values specifying which modes are allowed.</doc>
            <type name="ModemMode" c:type="MMModemMode"/>
          </parameter>
          <parameter name="preferred" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2680">A #MMModemMode value specifying which of the modes given in @modes is the preferred one, or #MM_MODEM_MODE_NONE if none.</doc>
            <type name="ModemMode" c:type="MMModemMode"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2681">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2682">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2683">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_modes_finish"
              c:identifier="mm_modem_set_current_modes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2656">Finishes an operation started with mm_modem_set_current_modes().</doc>
        <source-position filename="mm-modem.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2664">%TRUE if the allowed modes were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2658">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2659">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_set_current_modes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current_modes_sync"
              c:identifier="mm_modem_set_current_modes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2710">Synchronously sets the access technologies (e.g. 2G/3G/4G preference) the device is
currently allowed to use when connecting to a network.

The calling thread is blocked until a reply is received. See mm_modem_set_current_modes()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2724">%TRUE if the allowed modes were successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2712">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="modes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2713">Mask of #MMModemMode values specifying which modes are allowed.</doc>
            <type name="ModemMode" c:type="MMModemMode"/>
          </parameter>
          <parameter name="preferred" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2714">A #MMModemMode value specifying which of the modes given in @modes is the preferred one, or #MM_MODEM_MODE_NONE if none.</doc>
            <type name="ModemMode" c:type="MMModemMode"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2715">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_state" c:identifier="mm_modem_set_power_state">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2518">Asynchronously sets the power state of the device. This method can only be
used while the modem is in %MM_MODEM_STATE_DISABLED state.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_set_power_state_finish() to get the result of the operation.

See mm_modem_set_power_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem.h" line="274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2520">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2521">Either %MM_MODEM_POWER_STATE_LOW or %MM_MODEM_POWER_STATE_ON. Every other #MMModemPowerState value is not allowed.</doc>
            <type name="ModemPowerState" c:type="MMModemPowerState"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2522">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2523">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2524">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_state_finish"
              c:identifier="mm_modem_set_power_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2498">Finishes an operation started with mm_modem_set_power_state().</doc>
        <source-position filename="mm-modem.h" line="279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2506">%TRUE if the power state was successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2500">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2501">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_set_power_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_state_sync"
              c:identifier="mm_modem_set_power_state_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem.c"
             line="2546">Synchronously sets the power state of the device. This method can only be
used while the modem is in %MM_MODEM_STATE_DISABLED state.

The calling thread is blocked until a reply is received. See mm_modem_set_power_state()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem.h" line="282"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem.c"
               line="2559">%TRUE if the power state was successfully set, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2548">A #MMModem.</doc>
            <type name="Modem" c:type="MMModem*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2549">Either %MM_MODEM_POWER_STATE_LOW or %MM_MODEM_POWER_STATE_ON. Every other #MMModemPowerState value is not allowed.</doc>
            <type name="ModemPowerState" c:type="MMModemPowerState"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem.c"
                 line="2550">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemProxy" c:type="MmGdbusModemProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemPrivate" c:type="MMModemPrivate*"/>
      </field>
    </class>
    <class name="Modem3gpp"
           c:symbol-prefix="modem_3gpp"
           c:type="MMModem3gpp"
           parent="GdbusModem3gppProxy"
           glib:type-name="MMModem3gpp"
           glib:get-type="mm_modem_3gpp_get_type"
           glib:type-struct="Modem3gppClass">
      <doc xml:space="preserve"
           filename="mm-modem-3gpp.h"
           line="49">The #MMModem3gpp structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-3gpp.h" line="64"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem3gpp"/>
      <function name="network_free" c:identifier="mm_modem_3gpp_network_free">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="477">Frees a #MMModem3gppNetwork.</doc>
        <source-position filename="mm-modem-3gpp.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="479">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <function name="network_get_access_technology"
                c:identifier="mm_modem_3gpp_network_get_access_technology">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="559">Get the technology used to access the 3GPP network.</doc>
        <source-position filename="mm-modem-3gpp.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="565">A #MMModemAccessTechnology.</doc>
          <type name="ModemAccessTechnology" c:type="MMModemAccessTechnology"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="561">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="const MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <function name="network_get_availability"
                c:identifier="mm_modem_3gpp_network_get_availability">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="495">Get availability of the 3GPP network.</doc>
        <source-position filename="mm-modem-3gpp.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="501">A #MMModem3gppNetworkAvailability.</doc>
          <type name="Modem3gppNetworkAvailability"
                c:type="MMModem3gppNetworkAvailability"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="497">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="const MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <function name="network_get_operator_code"
                c:identifier="mm_modem_3gpp_network_get_operator_code">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="543">Get the operator code (MCCMNC) of the 3GPP network.</doc>
        <source-position filename="mm-modem-3gpp.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="549">The operator code, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="545">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="const MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <function name="network_get_operator_long"
                c:identifier="mm_modem_3gpp_network_get_operator_long">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="511">Get the long operator name of the 3GPP network.</doc>
        <source-position filename="mm-modem-3gpp.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="517">The long operator name, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="513">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="const MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <function name="network_get_operator_short"
                c:identifier="mm_modem_3gpp_network_get_operator_short">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="527">Get the short operator name of the 3GPP network.</doc>
        <source-position filename="mm-modem-3gpp.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="533">The long operator name, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="529">A #MMModem3gppNetwork.</doc>
            <type name="Modem3gppNetwork" c:type="const MMModem3gppNetwork*"/>
          </parameter>
        </parameters>
      </function>
      <method name="dup_imei" c:identifier="mm_modem_3gpp_dup_imei">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="118">Gets a copy of the &lt;ulink url="http://en.wikipedia.org/wiki/Imei"&gt;IMEI&lt;/ulink&gt;,
as reported by this #MMModem3gpp.</doc>
        <source-position filename="mm-modem-3gpp.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="125">The IMEI, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="120">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_initial_eps_bearer_path"
              c:identifier="mm_modem_3gpp_dup_initial_eps_bearer_path">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="376">Gets a copy of the DBus path of the initial EPS #MMBearer exposed in this #MMModem3gpp.</doc>
        <source-position filename="mm-modem-3gpp.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="382">The DBus path of the #MMBearer, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="378">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_code"
              c:identifier="mm_modem_3gpp_dup_operator_code">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="170">Gets a copy of the code of the operator to which the mobile is
currently registered.

Returned in the format &lt;literal&gt;"MCCMNC"&lt;/literal&gt;, where
&lt;literal&gt;MCC&lt;/literal&gt; is the three-digit ITU E.212 Mobile Country Code
and &lt;literal&gt;MNC&lt;/literal&gt; is the two- or three-digit GSM Mobile Network
Code. e.g. e&lt;literal&gt;"31026"&lt;/literal&gt; or &lt;literal&gt;"310260"&lt;/literal&gt;.</doc>
        <source-position filename="mm-modem-3gpp.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="182">The operator code, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="172">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_name"
              c:identifier="mm_modem_3gpp_dup_operator_name">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="218">Gets a copy of the name of the operator to which the mobile is
currently registered.</doc>
        <source-position filename="mm-modem-3gpp.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="225">The operator name, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="220">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_3gpp_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="72">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-3gpp.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="78">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="74">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled_facility_locks"
              c:identifier="mm_modem_3gpp_get_enabled_facility_locks">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="282">Get the list of facilities for which PIN locking is enabled.</doc>
        <source-position filename="mm-modem-3gpp.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="288">A bitmask of #MMModem3gppFacility flags, specifying which facilities have locks enabled.</doc>
          <type name="Modem3gppFacility" c:type="MMModem3gppFacility"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="284">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eps_ue_mode_operation"
              c:identifier="mm_modem_3gpp_get_eps_ue_mode_operation">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="298">Get the UE mode of operation for EPS.</doc>
        <source-position filename="mm-modem-3gpp.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="304">A #MMModem3gppEpsUeModeOperation.</doc>
          <type name="Modem3gppEpsUeModeOperation"
                c:type="MMModem3gppEpsUeModeOperation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="300">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_imei" c:identifier="mm_modem_3gpp_get_imei">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="95">Gets the &lt;ulink url="http://en.wikipedia.org/wiki/Imei"&gt;IMEI&lt;/ulink&gt;,
as reported by this #MMModem3gpp.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_dup_imei() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="107">The IMEI, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="97">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer"
              c:identifier="mm_modem_3gpp_get_initial_eps_bearer">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="935">Asynchronously gets the initial EPS #MMBearer object exposed by this #MMModem3gpp.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_get_initial_eps_bearer_finish() to get the result of the operation.

See mm_modem_3gpp_get_initial_eps_bearer_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="937">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="938">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="939">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="940">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer_finish"
              c:identifier="mm_modem_3gpp_get_initial_eps_bearer_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="894">Finishes an operation started with mm_modem_3gpp_get_initial_eps_bearer().</doc>
        <source-position filename="mm-modem-3gpp.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="902">a #MMSim or #NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="896">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="897">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_get_initial_eps_bearer().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer_path"
              c:identifier="mm_modem_3gpp_get_initial_eps_bearer_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="355">Gets the DBus path of the initial EPS #MMBearer exposed in this #MMModem3gpp.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_dup_initial_eps_bearer_path() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="366">The DBus path of the #MMBearer, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="357">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer_settings"
              c:identifier="mm_modem_3gpp_get_initial_eps_bearer_settings">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="638">Gets a #MMBearerProperties object specifying the settings configured in
the device to use when attaching to the LTE network.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_3gpp_get_initial_eps_bearer_settings() again to get a new #MMBearerProperties with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="650">A #MMBearerProperties that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="640">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_eps_bearer_sync"
              c:identifier="mm_modem_3gpp_get_initial_eps_bearer_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="985">Synchronously gets the initial EPS #MMBearer object exposed by this #MMModem3gpp.

The calling thread is blocked until a reply is received. See mm_modem_3gpp_get_initial_eps_bearer()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="996">a #MMBearer or #NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="987">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="988">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_operator_code"
              c:identifier="mm_modem_3gpp_get_operator_code">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="138">Gets the code of the operator to which the mobile is
currently registered.

Returned in the format &lt;literal&gt;"MCCMNC"&lt;/literal&gt;, where
&lt;literal&gt;MCC&lt;/literal&gt; is the three-digit ITU E.212 Mobile Country Code
and &lt;literal&gt;MNC&lt;/literal&gt; is the two- or three-digit GSM Mobile Network
Code. e.g. e&lt;literal&gt;"31026"&lt;/literal&gt; or &lt;literal&gt;"310260"&lt;/literal&gt;.

If the &lt;literal&gt;MCC&lt;/literal&gt; and &lt;literal&gt;MNC&lt;/literal&gt; are not known
or the mobile is not registered to a mobile network, this property will
be a zero-length (blank) string.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_dup_operator_code() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="159">The operator code, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="140">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_name"
              c:identifier="mm_modem_3gpp_get_operator_name">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="195">Gets the name of the operator to which the mobile is
currently registered.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_dup_operator_name() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="207">The operator name, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="197">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_3gpp_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="55">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-3gpp.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="61">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="57">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pco" c:identifier="mm_modem_3gpp_get_pco">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="316">Get the list of #MMPco received from the network.

The caller is responsible for freeing the returned #GList with
mm_pco_list_free().</doc>
        <source-position filename="mm-modem-3gpp.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="325">A list of #MMPco.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Pco"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="318">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_registration_state"
              c:identifier="mm_modem_3gpp_get_registration_state">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="238">Get the the mobile registration status as defined in 3GPP TS 27.007
section 10.1.19.</doc>
        <source-position filename="mm-modem-3gpp.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="245">A #MMModem3gppRegistrationState value, specifying the current registration state.</doc>
          <type name="Modem3gppRegistrationState"
                c:type="MMModem3gppRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="240">A #MMModem.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscription_state"
              c:identifier="mm_modem_3gpp_get_subscription_state"
              deprecated="1"
              deprecated-version="1.10.0.">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="257">Get the current subscription status of the account. This value is only
available after the modem attempts to register with the network.

The value of this property can only be obtained with operator specific logic (e.g.
processing specific PCO info), and therefore it doesn't make sense to expose it in
the ModemManager interface.</doc>
        <doc-deprecated xml:space="preserve">The value of this property can only be obtained with operator
specific logic (e.g. processing specific PCO info), and therefore it doesn't make sense
to expose it in the ModemManager interface.</doc-deprecated>
        <source-position filename="mm-modem-3gpp.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="268">A #MMModem3gppSubscriptionState value, specifying the current subscription state.</doc>
          <type name="Modem3gppSubscriptionState"
                c:type="MMModem3gppSubscriptionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="259">A #MMModem.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_initial_eps_bearer_settings"
              c:identifier="mm_modem_3gpp_peek_initial_eps_bearer_settings">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="663">Gets a #MMBearerProperties object specifying the settings configured in
the device to use when attaching to the LTE network.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_get_initial_eps_bearer_settings() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="675">A #MMBearerProperties. Do not free the returned value, it belongs to @self.</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="665">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="mm_modem_3gpp_register">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="415">Asynchronously requests registration with a given mobile network.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_register_finish() to get the result of the operation.

See mm_modem_3gpp_register_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="417">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="network_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="418">The operator ID to register. An empty string can be used to register to the home network.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="419">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="420">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="421">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_finish"
              c:identifier="mm_modem_3gpp_register_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="395">Finishes an operation started with mm_modem_3gpp_register().</doc>
        <source-position filename="mm-modem-3gpp.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="403">%TRUE if the modem was registered, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="397">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="398">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_register().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_sync"
              c:identifier="mm_modem_3gpp_register_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="442">Synchronously requests registration with a given mobile network.

The calling thread is blocked until a reply is received. See mm_modem_3gpp_register()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="454">%TRUE if the modem was registered, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="444">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="network_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="445">The operator ID to register. An empty string can be used to register to the home network.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="446">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan" c:identifier="mm_modem_3gpp_scan">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="759">Asynchronously requests to scan available 3GPP networks.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_scan_finish() to get the result of the operation.

See mm_modem_3gpp_scan_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="761">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="762">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="763">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="764">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_finish"
              c:identifier="mm_modem_3gpp_scan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="734">Finishes an operation started with mm_modem_3gpp_scan().</doc>
        <source-position filename="mm-modem-3gpp.h" line="126"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="742">a list of #MMModem3gppNetwork structs, or #NULL if @error is set. The returned value should be freed with g_list_free_full() using mm_modem_3gpp_network_free() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Modem3gppNetwork"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="736">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="737">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_scan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scan_sync"
              c:identifier="mm_modem_3gpp_scan_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="784">Synchronously requests to scan available 3GPP networks.

The calling thread is blocked until a reply is received. See mm_modem_3gpp_scan()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="129"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="795">a list of #MMModem3gppNetwork structs, or #NULL if @error is set. The returned value should be freed with g_list_free_full() using mm_modem_3gpp_network_free() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Modem3gppNetwork"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="786">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="787">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eps_ue_mode_operation"
              c:identifier="mm_modem_3gpp_set_eps_ue_mode_operation">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="834">Asynchronously requests to update the EPS UE mode of operation.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
mm_modem_3gpp_set_eps_ue_mode_operation_finish() to get the result of the operation.

See mm_modem_3gpp_set_eps_ue_mode_operation_sync() for the synchronous, blocking
version of this method. The calling thread is blocked until a reply is received.</doc>
        <source-position filename="mm-modem-3gpp.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="836">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="837">A #MMModem3gppEpsUeModeOperation.</doc>
            <type name="Modem3gppEpsUeModeOperation"
                  c:type="MMModem3gppEpsUeModeOperation"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="838">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="839">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="840">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eps_ue_mode_operation_finish"
              c:identifier="mm_modem_3gpp_set_eps_ue_mode_operation_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="814">Finishes an operation started with mm_modem_3gpp_set_eps_ue_mode_operation().</doc>
        <source-position filename="mm-modem-3gpp.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="822">%TRUE if the operation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="816">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="817">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_set_eps_ue_mode_operation().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_eps_ue_mode_operation_sync"
              c:identifier="mm_modem_3gpp_set_eps_ue_mode_operation_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="865">Synchronously requests to update the EPS UE mode of operation.

The calling thread is blocked until a reply is received.
See mm_modem_3gpp_set_eps_ue_mode_operation() for the asynchronous version
of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="878">%TRUE if the operation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="867">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="868">A #MMModem3gppEpsUeModeOperation.</doc>
            <type name="Modem3gppEpsUeModeOperation"
                  c:type="MMModem3gppEpsUeModeOperation"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="869">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_eps_bearer_settings"
              c:identifier="mm_modem_3gpp_set_initial_eps_bearer_settings">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="1050">Asynchronously configures the settings for the initial LTE default bearer.

When the operation is finished, @callback will be invoked in the
&lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt;
of the thread you are calling this method from. You can then call
mm_modem_3gpp_set_initial_eps_bearer_settings_finish() to get the result of the operation.</doc>
        <source-position filename="mm-modem-3gpp.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1052">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1053">A #MMBearerProperties object with the properties to use.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1054">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1055">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1056">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_eps_bearer_settings_finish"
              c:identifier="mm_modem_3gpp_set_initial_eps_bearer_settings_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="1032">Finishes an operation started with mm_modem_3gpp_set_initial_eps_bearer_settings().</doc>
        <source-position filename="mm-modem-3gpp.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="1040">%TRUE if the operation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1034">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1035">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_set_initial_eps_bearer_settings().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_eps_bearer_settings_sync"
              c:identifier="mm_modem_3gpp_set_initial_eps_bearer_settings_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp.c"
             line="1083">Synchronously configures the settings for the initial LTE default bearer.

The calling thread is blocked until a reply is received. See
mm_modem_3gpp_set_initial_eps_bearer_settings() for the asynchronous
version of this method.</doc>
        <source-position filename="mm-modem-3gpp.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp.c"
               line="1096">%TRUE if the operation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1085">A #MMModem3gpp.</doc>
            <type name="Modem3gpp" c:type="MMModem3gpp*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1086">A #MMBearerProperties object with the properties to use.</doc>
            <type name="BearerProperties" c:type="MMBearerProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp.c"
                 line="1087">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModem3gppProxy" c:type="MmGdbusModem3gppProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="Modem3gppPrivate" c:type="MMModem3gppPrivate*"/>
      </field>
    </class>
    <record name="Modem3gppClass"
            c:type="MMModem3gppClass"
            glib:is-gtype-struct-for="Modem3gpp">
      <source-position filename="mm-modem-3gpp.h" line="64"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModem3gppProxyClass"
              c:type="MmGdbusModem3gppProxyClass"/>
      </field>
    </record>
    <enumeration name="Modem3gppEpsUeModeOperation"
                 glib:type-name="MMModem3gppEpsUeModeOperation"
                 glib:get-type="mm_modem_3gpp_eps_ue_mode_operation_get_type"
                 c:type="MMModem3gppEpsUeModeOperation">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="ps_1"
              value="1"
              c:identifier="MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_PS_1"
              glib:nick="ps-1">
      </member>
      <member name="ps_2"
              value="2"
              c:identifier="MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_PS_2"
              glib:nick="ps-2">
      </member>
      <member name="csps_1"
              value="3"
              c:identifier="MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_CSPS_1"
              glib:nick="csps-1">
      </member>
      <member name="csps_2"
              value="4"
              c:identifier="MM_MODEM_3GPP_EPS_UE_MODE_OPERATION_CSPS_2"
              glib:nick="csps-2">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_3gpp_eps_ue_mode_operation_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3513">Gets the nickname string for the #MMModem3gppEpsUeModeOperation specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="502"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3519">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3515">a MMModem3gppEpsUeModeOperation.</doc>
            <type name="Modem3gppEpsUeModeOperation"
                  c:type="MMModem3gppEpsUeModeOperation"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="Modem3gppFacility"
              glib:type-name="MMModem3gppFacility"
              glib:get-type="mm_modem_3gpp_facility_get_type"
              c:type="MMModem3gppFacility">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_3GPP_FACILITY_NONE"
              glib:nick="none">
      </member>
      <member name="sim"
              value="1"
              c:identifier="MM_MODEM_3GPP_FACILITY_SIM"
              glib:nick="sim">
      </member>
      <member name="fixed_dialing"
              value="2"
              c:identifier="MM_MODEM_3GPP_FACILITY_FIXED_DIALING"
              glib:nick="fixed-dialing">
      </member>
      <member name="ph_sim"
              value="4"
              c:identifier="MM_MODEM_3GPP_FACILITY_PH_SIM"
              glib:nick="ph-sim">
      </member>
      <member name="ph_fsim"
              value="8"
              c:identifier="MM_MODEM_3GPP_FACILITY_PH_FSIM"
              glib:nick="ph-fsim">
      </member>
      <member name="net_pers"
              value="16"
              c:identifier="MM_MODEM_3GPP_FACILITY_NET_PERS"
              glib:nick="net-pers">
      </member>
      <member name="net_sub_pers"
              value="32"
              c:identifier="MM_MODEM_3GPP_FACILITY_NET_SUB_PERS"
              glib:nick="net-sub-pers">
      </member>
      <member name="provider_pers"
              value="64"
              c:identifier="MM_MODEM_3GPP_FACILITY_PROVIDER_PERS"
              glib:nick="provider-pers">
      </member>
      <member name="corp_pers"
              value="128"
              c:identifier="MM_MODEM_3GPP_FACILITY_CORP_PERS"
              glib:nick="corp-pers">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_3gpp_facility_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3139">Builds a string containing a comma-separated list of nicknames for
each #MMModem3gppFacility in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="446"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3146">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3141">bitmask of MMModem3gppFacility values.</doc>
            <type name="Modem3gppFacility" c:type="MMModem3gppFacility"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <record name="Modem3gppNetwork" c:type="MMModem3gppNetwork" disguised="1">
      <doc xml:space="preserve"
           filename="mm-modem-3gpp.h"
           line="107">The #MMModem3gppNetwork structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-3gpp.h" line="113"/>
    </record>
    <enumeration name="Modem3gppNetworkAvailability"
                 glib:type-name="MMModem3gppNetworkAvailability"
                 glib:get-type="mm_modem_3gpp_network_availability_get_type"
                 c:type="MMModem3gppNetworkAvailability">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_3GPP_NETWORK_AVAILABILITY_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="available"
              value="1"
              c:identifier="MM_MODEM_3GPP_NETWORK_AVAILABILITY_AVAILABLE"
              glib:nick="available">
      </member>
      <member name="current"
              value="2"
              c:identifier="MM_MODEM_3GPP_NETWORK_AVAILABILITY_CURRENT"
              glib:nick="current">
      </member>
      <member name="forbidden"
              value="3"
              c:identifier="MM_MODEM_3GPP_NETWORK_AVAILABILITY_FORBIDDEN"
              glib:nick="forbidden">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_3gpp_network_availability_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3215">Gets the nickname string for the #MMModem3gppNetworkAvailability specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="457"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3221">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3217">a MMModem3gppNetworkAvailability.</doc>
            <type name="Modem3gppNetworkAvailability"
                  c:type="MMModem3gppNetworkAvailability"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="Modem3gppPrivate" c:type="MMModem3gppPrivate" disguised="1">
      <source-position filename="mm-modem-3gpp.h" line="47"/>
    </record>
    <enumeration name="Modem3gppRegistrationState"
                 glib:type-name="MMModem3gppRegistrationState"
                 glib:get-type="mm_modem_3gpp_registration_state_get_type"
                 c:type="MMModem3gppRegistrationState">
      <member name="idle"
              value="0"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_IDLE"
              glib:nick="idle">
      </member>
      <member name="home"
              value="1"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_HOME"
              glib:nick="home">
      </member>
      <member name="searching"
              value="2"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_SEARCHING"
              glib:nick="searching">
      </member>
      <member name="denied"
              value="3"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_DENIED"
              glib:nick="denied">
      </member>
      <member name="unknown"
              value="4"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="roaming"
              value="5"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_ROAMING"
              glib:nick="roaming">
      </member>
      <member name="home_sms_only"
              value="6"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_HOME_SMS_ONLY"
              glib:nick="home-sms-only">
      </member>
      <member name="roaming_sms_only"
              value="7"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_ROAMING_SMS_ONLY"
              glib:nick="roaming-sms-only">
      </member>
      <member name="emergency_only"
              value="8"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_EMERGENCY_ONLY"
              glib:nick="emergency-only">
      </member>
      <member name="home_csfb_not_preferred"
              value="9"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_HOME_CSFB_NOT_PREFERRED"
              glib:nick="home-csfb-not-preferred">
      </member>
      <member name="roaming_csfb_not_preferred"
              value="10"
              c:identifier="MM_MODEM_3GPP_REGISTRATION_STATE_ROAMING_CSFB_NOT_PREFERRED"
              glib:nick="roaming-csfb-not-preferred">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_3gpp_registration_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3012">Gets the nickname string for the #MMModem3gppRegistrationState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="427"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3018">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3014">a MMModem3gppRegistrationState.</doc>
            <type name="Modem3gppRegistrationState"
                  c:type="MMModem3gppRegistrationState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="Modem3gppSubscriptionState"
                 glib:type-name="MMModem3gppSubscriptionState"
                 glib:get-type="mm_modem_3gpp_subscription_state_get_type"
                 c:type="MMModem3gppSubscriptionState">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_3GPP_SUBSCRIPTION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="unprovisioned"
              value="1"
              c:identifier="MM_MODEM_3GPP_SUBSCRIPTION_STATE_UNPROVISIONED"
              glib:nick="unprovisioned">
      </member>
      <member name="provisioned"
              value="2"
              c:identifier="MM_MODEM_3GPP_SUBSCRIPTION_STATE_PROVISIONED"
              glib:nick="provisioned">
      </member>
      <member name="out_of_data"
              value="3"
              c:identifier="MM_MODEM_3GPP_SUBSCRIPTION_STATE_OUT_OF_DATA"
              glib:nick="out-of-data">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_3gpp_subscription_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3314">Gets the nickname string for the #MMModem3gppSubscriptionState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="472"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3320">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3316">a MMModem3gppSubscriptionState.</doc>
            <type name="Modem3gppSubscriptionState"
                  c:type="MMModem3gppSubscriptionState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Modem3gppUssd"
           c:symbol-prefix="modem_3gpp_ussd"
           c:type="MMModem3gppUssd"
           parent="GdbusModem3gppUssdProxy"
           glib:type-name="MMModem3gppUssd"
           glib:get-type="mm_modem_3gpp_ussd_get_type"
           glib:type-struct="Modem3gppUssdClass">
      <doc xml:space="preserve"
           filename="mm-modem-3gpp-ussd.h"
           line="47">The #MMModem3gppUssd structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-3gpp-ussd.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModem3gppUssd"/>
      <method name="cancel" c:identifier="mm_modem_3gpp_ussd_cancel">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="381">Asynchronously cancels an ongoing USSD session, either mobile or network initiated.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_ussd_cancel_finish() to get the result of the operation.

See mm_modem_3gpp_ussd_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="383">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="384">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="385">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="386">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_finish"
              c:identifier="mm_modem_3gpp_ussd_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="361">Finishes an operation started with mm_modem_3gpp_ussd_cancel().</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="369">%TRUE if the session was successfully cancelled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="363">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="364">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_ussd_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_sync"
              c:identifier="mm_modem_3gpp_ussd_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="406">Synchronously cancels an ongoing USSD session, either mobile or network initiated.

The calling thread is blocked until a reply is received. See mm_modem_3gpp_ussd_cancel()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="417">%TRUE if the session was successfully cancelled, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="408">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="409">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_network_notification"
              c:identifier="mm_modem_3gpp_ussd_dup_network_notification">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="148">Gets a copy of any pending network-initiated request to which no USSD response is required.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="154">The network notification, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="150">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_network_request"
              c:identifier="mm_modem_3gpp_ussd_dup_network_request">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="107">Gets a copy of any pending network-initiated request.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="113">The network request, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="109">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_3gpp_ussd_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="62">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="68">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="64">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_notification"
              c:identifier="mm_modem_3gpp_ussd_get_network_notification">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="126">Gets any pending network-initiated request to which no USSD response is required.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_ussd_dup_network_notification() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="137">The network notification, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="128">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_request"
              c:identifier="mm_modem_3gpp_ussd_get_network_request">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="85">Gets any pending network-initiated request.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_3gpp_ussd_dup_network_request() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="96">The network request, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="87">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_3gpp_ussd_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="45">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="51">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="47">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_modem_3gpp_ussd_get_state">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="167">Get the state of the ongoing USSD session, if any.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="173">A #MMModem3gppUssdSessionState value, specifying the current state.</doc>
          <type name="Modem3gppUssdSessionState"
                c:type="MMModem3gppUssdSessionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="169">A #MMModem.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="initiate" c:identifier="mm_modem_3gpp_ussd_initiate">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="209">Asynchronously sends a USSD command string to the network initiating a USSD session.

When the request is handled by the network, the method returns the
response or an appropriate error. The network may be awaiting further
response from the ME after returning from this method and no new command.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_ussd_initiate_finish() to get the result of the operation.

See mm_modem_3gpp_ussd_initiate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="211">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="212">The command to start the USSD session with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="213">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="214">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="215">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="initiate_finish"
              c:identifier="mm_modem_3gpp_ussd_initiate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="185">Finishes an operation started with mm_modem_3gpp_ussd_initiate().</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="193">The response from the network, if any. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="187">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="188">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_ussd_initiate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="initiate_sync"
              c:identifier="mm_modem_3gpp_ussd_initiate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="240">Synchronously sends a USSD command string to the network initiating a USSD session.

When the request is handled by the network, the method returns the
response or an appropriate error. The network may be awaiting further
response from the ME after returning from this method and no new command.

The calling thread is blocked until a reply is received. See mm_modem_3gpp_ussd_initiate()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="256">The response from the network, if any. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="242">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="243">The command to start the USSD session with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="244">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="respond" c:identifier="mm_modem_3gpp_ussd_respond">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="299">Asynchronously responds to a USSD request that is either initiated by the
mobile network, or that is awaiting further input after a previous call to
mm_modem_3gpp_ussd_initiate().

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_3gpp_ussd_respond_finish() to get the result of the operation.

See mm_modem_3gpp_ussd_respond_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="301">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="302">The response to network-initiated USSD command, or a response to a request for further input.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="303">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="304">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="305">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="respond_finish"
              c:identifier="mm_modem_3gpp_ussd_respond_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="275">Finishes an operation started with mm_modem_3gpp_ussd_respond().</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="283">The network reply to this response to the network-initiated USSD command. The reply may require further responses. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="277">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="278">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_3gpp_ussd_respond().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="respond_sync"
              c:identifier="mm_modem_3gpp_ussd_respond_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-3gpp-ussd.c"
             line="328">Synchronously responds to a USSD request that is either initiated by the
mobile network, or that is awaiting further input after a previous call to
mm_modem_3gpp_ussd_initiate().

The calling thread is blocked until a reply is received. See mm_modem_3gpp_ussd_respond()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-3gpp-ussd.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-3gpp-ussd.c"
               line="342">The network reply to this response to the network-initiated USSD command. The reply may require further responses. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="330">A #MMModem3gppUssd.</doc>
            <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="331">The response to network-initiated USSD command, or a response to a request for further input.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-3gpp-ussd.c"
                 line="332">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModem3gppUssdProxy"
              c:type="MmGdbusModem3gppUssdProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="Modem3gppUssdClass"
            c:type="MMModem3gppUssdClass"
            glib:is-gtype-struct-for="Modem3gppUssd">
      <source-position filename="mm-modem-3gpp-ussd.h" line="62"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModem3gppUssdProxyClass"
              c:type="MmGdbusModem3gppUssdProxyClass"/>
      </field>
    </record>
    <enumeration name="Modem3gppUssdSessionState"
                 glib:type-name="MMModem3gppUssdSessionState"
                 glib:get-type="mm_modem_3gpp_ussd_session_state_get_type"
                 c:type="MMModem3gppUssdSessionState">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_3GPP_USSD_SESSION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="idle"
              value="1"
              c:identifier="MM_MODEM_3GPP_USSD_SESSION_STATE_IDLE"
              glib:nick="idle">
      </member>
      <member name="active"
              value="2"
              c:identifier="MM_MODEM_3GPP_USSD_SESSION_STATE_ACTIVE"
              glib:nick="active">
      </member>
      <member name="user_response"
              value="3"
              c:identifier="MM_MODEM_3GPP_USSD_SESSION_STATE_USER_RESPONSE"
              glib:nick="user-response">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_3gpp_ussd_session_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3413">Gets the nickname string for the #MMModem3gppUssdSessionState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="487"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3419">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3415">a MMModem3gppUssdSessionState.</doc>
            <type name="Modem3gppUssdSessionState"
                  c:type="MMModem3gppUssdSessionState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="ModemAccessTechnology"
              glib:type-name="MMModemAccessTechnology"
              glib:get-type="mm_modem_access_technology_get_type"
              c:type="MMModemAccessTechnology">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="pots"
              value="1"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_POTS"
              glib:nick="pots">
      </member>
      <member name="gsm"
              value="2"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_GSM"
              glib:nick="gsm">
      </member>
      <member name="gsm_compact"
              value="4"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_GSM_COMPACT"
              glib:nick="gsm-compact">
      </member>
      <member name="gprs"
              value="8"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_GPRS"
              glib:nick="gprs">
      </member>
      <member name="edge"
              value="16"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_EDGE"
              glib:nick="edge">
      </member>
      <member name="umts"
              value="32"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_UMTS"
              glib:nick="umts">
      </member>
      <member name="hsdpa"
              value="64"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_HSDPA"
              glib:nick="hsdpa">
      </member>
      <member name="hsupa"
              value="128"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_HSUPA"
              glib:nick="hsupa">
      </member>
      <member name="hspa"
              value="256"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_HSPA"
              glib:nick="hspa">
      </member>
      <member name="hspa_plus"
              value="512"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_HSPA_PLUS"
              glib:nick="hspa-plus">
      </member>
      <member name="1xrtt"
              value="1024"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_1XRTT"
              glib:nick="1xrtt">
      </member>
      <member name="evdo0"
              value="2048"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_EVDO0"
              glib:nick="evdo0">
      </member>
      <member name="evdoa"
              value="4096"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_EVDOA"
              glib:nick="evdoa">
      </member>
      <member name="evdob"
              value="8192"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_EVDOB"
              glib:nick="evdob">
      </member>
      <member name="lte"
              value="16384"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_LTE"
              glib:nick="lte">
      </member>
      <member name="any"
              value="4294967295"
              c:identifier="MM_MODEM_ACCESS_TECHNOLOGY_ANY"
              glib:nick="any">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_access_technology_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="690">Builds a string containing a comma-separated list of nicknames for
each #MMModemAccessTechnology in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="697">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="692">bitmask of MMModemAccessTechnology values.</doc>
            <type name="ModemAccessTechnology"
                  c:type="MMModemAccessTechnology"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <enumeration name="ModemBand"
                 glib:type-name="MMModemBand"
                 glib:get-type="mm_modem_band_get_type"
                 c:type="MMModemBand">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_BAND_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="egsm"
              value="1"
              c:identifier="MM_MODEM_BAND_EGSM"
              glib:nick="egsm">
      </member>
      <member name="dcs"
              value="2"
              c:identifier="MM_MODEM_BAND_DCS"
              glib:nick="dcs">
      </member>
      <member name="pcs"
              value="3"
              c:identifier="MM_MODEM_BAND_PCS"
              glib:nick="pcs">
      </member>
      <member name="g850"
              value="4"
              c:identifier="MM_MODEM_BAND_G850"
              glib:nick="g850">
      </member>
      <member name="utran_1"
              value="5"
              c:identifier="MM_MODEM_BAND_UTRAN_1"
              glib:nick="utran-1">
      </member>
      <member name="utran_3"
              value="6"
              c:identifier="MM_MODEM_BAND_UTRAN_3"
              glib:nick="utran-3">
      </member>
      <member name="utran_4"
              value="7"
              c:identifier="MM_MODEM_BAND_UTRAN_4"
              glib:nick="utran-4">
      </member>
      <member name="utran_6"
              value="8"
              c:identifier="MM_MODEM_BAND_UTRAN_6"
              glib:nick="utran-6">
      </member>
      <member name="utran_5"
              value="9"
              c:identifier="MM_MODEM_BAND_UTRAN_5"
              glib:nick="utran-5">
      </member>
      <member name="utran_8"
              value="10"
              c:identifier="MM_MODEM_BAND_UTRAN_8"
              glib:nick="utran-8">
      </member>
      <member name="utran_9"
              value="11"
              c:identifier="MM_MODEM_BAND_UTRAN_9"
              glib:nick="utran-9">
      </member>
      <member name="utran_2"
              value="12"
              c:identifier="MM_MODEM_BAND_UTRAN_2"
              glib:nick="utran-2">
      </member>
      <member name="utran_7"
              value="13"
              c:identifier="MM_MODEM_BAND_UTRAN_7"
              glib:nick="utran-7">
      </member>
      <member name="g450"
              value="14"
              c:identifier="MM_MODEM_BAND_G450"
              glib:nick="g450">
      </member>
      <member name="g480"
              value="15"
              c:identifier="MM_MODEM_BAND_G480"
              glib:nick="g480">
      </member>
      <member name="g750"
              value="16"
              c:identifier="MM_MODEM_BAND_G750"
              glib:nick="g750">
      </member>
      <member name="g380"
              value="17"
              c:identifier="MM_MODEM_BAND_G380"
              glib:nick="g380">
      </member>
      <member name="g410"
              value="18"
              c:identifier="MM_MODEM_BAND_G410"
              glib:nick="g410">
      </member>
      <member name="g710"
              value="19"
              c:identifier="MM_MODEM_BAND_G710"
              glib:nick="g710">
      </member>
      <member name="g810"
              value="20"
              c:identifier="MM_MODEM_BAND_G810"
              glib:nick="g810">
      </member>
      <member name="eutran_1"
              value="31"
              c:identifier="MM_MODEM_BAND_EUTRAN_1"
              glib:nick="eutran-1">
      </member>
      <member name="eutran_2"
              value="32"
              c:identifier="MM_MODEM_BAND_EUTRAN_2"
              glib:nick="eutran-2">
      </member>
      <member name="eutran_3"
              value="33"
              c:identifier="MM_MODEM_BAND_EUTRAN_3"
              glib:nick="eutran-3">
      </member>
      <member name="eutran_4"
              value="34"
              c:identifier="MM_MODEM_BAND_EUTRAN_4"
              glib:nick="eutran-4">
      </member>
      <member name="eutran_5"
              value="35"
              c:identifier="MM_MODEM_BAND_EUTRAN_5"
              glib:nick="eutran-5">
      </member>
      <member name="eutran_6"
              value="36"
              c:identifier="MM_MODEM_BAND_EUTRAN_6"
              glib:nick="eutran-6">
      </member>
      <member name="eutran_7"
              value="37"
              c:identifier="MM_MODEM_BAND_EUTRAN_7"
              glib:nick="eutran-7">
      </member>
      <member name="eutran_8"
              value="38"
              c:identifier="MM_MODEM_BAND_EUTRAN_8"
              glib:nick="eutran-8">
      </member>
      <member name="eutran_9"
              value="39"
              c:identifier="MM_MODEM_BAND_EUTRAN_9"
              glib:nick="eutran-9">
      </member>
      <member name="eutran_10"
              value="40"
              c:identifier="MM_MODEM_BAND_EUTRAN_10"
              glib:nick="eutran-10">
      </member>
      <member name="eutran_11"
              value="41"
              c:identifier="MM_MODEM_BAND_EUTRAN_11"
              glib:nick="eutran-11">
      </member>
      <member name="eutran_12"
              value="42"
              c:identifier="MM_MODEM_BAND_EUTRAN_12"
              glib:nick="eutran-12">
      </member>
      <member name="eutran_13"
              value="43"
              c:identifier="MM_MODEM_BAND_EUTRAN_13"
              glib:nick="eutran-13">
      </member>
      <member name="eutran_14"
              value="44"
              c:identifier="MM_MODEM_BAND_EUTRAN_14"
              glib:nick="eutran-14">
      </member>
      <member name="eutran_17"
              value="47"
              c:identifier="MM_MODEM_BAND_EUTRAN_17"
              glib:nick="eutran-17">
      </member>
      <member name="eutran_18"
              value="48"
              c:identifier="MM_MODEM_BAND_EUTRAN_18"
              glib:nick="eutran-18">
      </member>
      <member name="eutran_19"
              value="49"
              c:identifier="MM_MODEM_BAND_EUTRAN_19"
              glib:nick="eutran-19">
      </member>
      <member name="eutran_20"
              value="50"
              c:identifier="MM_MODEM_BAND_EUTRAN_20"
              glib:nick="eutran-20">
      </member>
      <member name="eutran_21"
              value="51"
              c:identifier="MM_MODEM_BAND_EUTRAN_21"
              glib:nick="eutran-21">
      </member>
      <member name="eutran_22"
              value="52"
              c:identifier="MM_MODEM_BAND_EUTRAN_22"
              glib:nick="eutran-22">
      </member>
      <member name="eutran_23"
              value="53"
              c:identifier="MM_MODEM_BAND_EUTRAN_23"
              glib:nick="eutran-23">
      </member>
      <member name="eutran_24"
              value="54"
              c:identifier="MM_MODEM_BAND_EUTRAN_24"
              glib:nick="eutran-24">
      </member>
      <member name="eutran_25"
              value="55"
              c:identifier="MM_MODEM_BAND_EUTRAN_25"
              glib:nick="eutran-25">
      </member>
      <member name="eutran_26"
              value="56"
              c:identifier="MM_MODEM_BAND_EUTRAN_26"
              glib:nick="eutran-26">
      </member>
      <member name="eutran_27"
              value="57"
              c:identifier="MM_MODEM_BAND_EUTRAN_27"
              glib:nick="eutran-27">
      </member>
      <member name="eutran_28"
              value="58"
              c:identifier="MM_MODEM_BAND_EUTRAN_28"
              glib:nick="eutran-28">
      </member>
      <member name="eutran_29"
              value="59"
              c:identifier="MM_MODEM_BAND_EUTRAN_29"
              glib:nick="eutran-29">
      </member>
      <member name="eutran_30"
              value="60"
              c:identifier="MM_MODEM_BAND_EUTRAN_30"
              glib:nick="eutran-30">
      </member>
      <member name="eutran_31"
              value="61"
              c:identifier="MM_MODEM_BAND_EUTRAN_31"
              glib:nick="eutran-31">
      </member>
      <member name="eutran_32"
              value="62"
              c:identifier="MM_MODEM_BAND_EUTRAN_32"
              glib:nick="eutran-32">
      </member>
      <member name="eutran_33"
              value="63"
              c:identifier="MM_MODEM_BAND_EUTRAN_33"
              glib:nick="eutran-33">
      </member>
      <member name="eutran_34"
              value="64"
              c:identifier="MM_MODEM_BAND_EUTRAN_34"
              glib:nick="eutran-34">
      </member>
      <member name="eutran_35"
              value="65"
              c:identifier="MM_MODEM_BAND_EUTRAN_35"
              glib:nick="eutran-35">
      </member>
      <member name="eutran_36"
              value="66"
              c:identifier="MM_MODEM_BAND_EUTRAN_36"
              glib:nick="eutran-36">
      </member>
      <member name="eutran_37"
              value="67"
              c:identifier="MM_MODEM_BAND_EUTRAN_37"
              glib:nick="eutran-37">
      </member>
      <member name="eutran_38"
              value="68"
              c:identifier="MM_MODEM_BAND_EUTRAN_38"
              glib:nick="eutran-38">
      </member>
      <member name="eutran_39"
              value="69"
              c:identifier="MM_MODEM_BAND_EUTRAN_39"
              glib:nick="eutran-39">
      </member>
      <member name="eutran_40"
              value="70"
              c:identifier="MM_MODEM_BAND_EUTRAN_40"
              glib:nick="eutran-40">
      </member>
      <member name="eutran_41"
              value="71"
              c:identifier="MM_MODEM_BAND_EUTRAN_41"
              glib:nick="eutran-41">
      </member>
      <member name="eutran_42"
              value="72"
              c:identifier="MM_MODEM_BAND_EUTRAN_42"
              glib:nick="eutran-42">
      </member>
      <member name="eutran_43"
              value="73"
              c:identifier="MM_MODEM_BAND_EUTRAN_43"
              glib:nick="eutran-43">
      </member>
      <member name="eutran_44"
              value="74"
              c:identifier="MM_MODEM_BAND_EUTRAN_44"
              glib:nick="eutran-44">
      </member>
      <member name="eutran_45"
              value="75"
              c:identifier="MM_MODEM_BAND_EUTRAN_45"
              glib:nick="eutran-45">
      </member>
      <member name="eutran_46"
              value="76"
              c:identifier="MM_MODEM_BAND_EUTRAN_46"
              glib:nick="eutran-46">
      </member>
      <member name="eutran_47"
              value="77"
              c:identifier="MM_MODEM_BAND_EUTRAN_47"
              glib:nick="eutran-47">
      </member>
      <member name="eutran_48"
              value="78"
              c:identifier="MM_MODEM_BAND_EUTRAN_48"
              glib:nick="eutran-48">
      </member>
      <member name="eutran_49"
              value="79"
              c:identifier="MM_MODEM_BAND_EUTRAN_49"
              glib:nick="eutran-49">
      </member>
      <member name="eutran_50"
              value="80"
              c:identifier="MM_MODEM_BAND_EUTRAN_50"
              glib:nick="eutran-50">
      </member>
      <member name="eutran_51"
              value="81"
              c:identifier="MM_MODEM_BAND_EUTRAN_51"
              glib:nick="eutran-51">
      </member>
      <member name="eutran_52"
              value="82"
              c:identifier="MM_MODEM_BAND_EUTRAN_52"
              glib:nick="eutran-52">
      </member>
      <member name="eutran_53"
              value="83"
              c:identifier="MM_MODEM_BAND_EUTRAN_53"
              glib:nick="eutran-53">
      </member>
      <member name="eutran_54"
              value="84"
              c:identifier="MM_MODEM_BAND_EUTRAN_54"
              glib:nick="eutran-54">
      </member>
      <member name="eutran_55"
              value="85"
              c:identifier="MM_MODEM_BAND_EUTRAN_55"
              glib:nick="eutran-55">
      </member>
      <member name="eutran_56"
              value="86"
              c:identifier="MM_MODEM_BAND_EUTRAN_56"
              glib:nick="eutran-56">
      </member>
      <member name="eutran_57"
              value="87"
              c:identifier="MM_MODEM_BAND_EUTRAN_57"
              glib:nick="eutran-57">
      </member>
      <member name="eutran_58"
              value="88"
              c:identifier="MM_MODEM_BAND_EUTRAN_58"
              glib:nick="eutran-58">
      </member>
      <member name="eutran_59"
              value="89"
              c:identifier="MM_MODEM_BAND_EUTRAN_59"
              glib:nick="eutran-59">
      </member>
      <member name="eutran_60"
              value="90"
              c:identifier="MM_MODEM_BAND_EUTRAN_60"
              glib:nick="eutran-60">
      </member>
      <member name="eutran_61"
              value="91"
              c:identifier="MM_MODEM_BAND_EUTRAN_61"
              glib:nick="eutran-61">
      </member>
      <member name="eutran_62"
              value="92"
              c:identifier="MM_MODEM_BAND_EUTRAN_62"
              glib:nick="eutran-62">
      </member>
      <member name="eutran_63"
              value="93"
              c:identifier="MM_MODEM_BAND_EUTRAN_63"
              glib:nick="eutran-63">
      </member>
      <member name="eutran_64"
              value="94"
              c:identifier="MM_MODEM_BAND_EUTRAN_64"
              glib:nick="eutran-64">
      </member>
      <member name="eutran_65"
              value="95"
              c:identifier="MM_MODEM_BAND_EUTRAN_65"
              glib:nick="eutran-65">
      </member>
      <member name="eutran_66"
              value="96"
              c:identifier="MM_MODEM_BAND_EUTRAN_66"
              glib:nick="eutran-66">
      </member>
      <member name="eutran_67"
              value="97"
              c:identifier="MM_MODEM_BAND_EUTRAN_67"
              glib:nick="eutran-67">
      </member>
      <member name="eutran_68"
              value="98"
              c:identifier="MM_MODEM_BAND_EUTRAN_68"
              glib:nick="eutran-68">
      </member>
      <member name="eutran_69"
              value="99"
              c:identifier="MM_MODEM_BAND_EUTRAN_69"
              glib:nick="eutran-69">
      </member>
      <member name="eutran_70"
              value="100"
              c:identifier="MM_MODEM_BAND_EUTRAN_70"
              glib:nick="eutran-70">
      </member>
      <member name="eutran_71"
              value="101"
              c:identifier="MM_MODEM_BAND_EUTRAN_71"
              glib:nick="eutran-71">
      </member>
      <member name="cdma_bc0"
              value="128"
              c:identifier="MM_MODEM_BAND_CDMA_BC0"
              glib:nick="cdma-bc0">
      </member>
      <member name="cdma_bc1"
              value="129"
              c:identifier="MM_MODEM_BAND_CDMA_BC1"
              glib:nick="cdma-bc1">
      </member>
      <member name="cdma_bc2"
              value="130"
              c:identifier="MM_MODEM_BAND_CDMA_BC2"
              glib:nick="cdma-bc2">
      </member>
      <member name="cdma_bc3"
              value="131"
              c:identifier="MM_MODEM_BAND_CDMA_BC3"
              glib:nick="cdma-bc3">
      </member>
      <member name="cdma_bc4"
              value="132"
              c:identifier="MM_MODEM_BAND_CDMA_BC4"
              glib:nick="cdma-bc4">
      </member>
      <member name="cdma_bc5"
              value="134"
              c:identifier="MM_MODEM_BAND_CDMA_BC5"
              glib:nick="cdma-bc5">
      </member>
      <member name="cdma_bc6"
              value="135"
              c:identifier="MM_MODEM_BAND_CDMA_BC6"
              glib:nick="cdma-bc6">
      </member>
      <member name="cdma_bc7"
              value="136"
              c:identifier="MM_MODEM_BAND_CDMA_BC7"
              glib:nick="cdma-bc7">
      </member>
      <member name="cdma_bc8"
              value="137"
              c:identifier="MM_MODEM_BAND_CDMA_BC8"
              glib:nick="cdma-bc8">
      </member>
      <member name="cdma_bc9"
              value="138"
              c:identifier="MM_MODEM_BAND_CDMA_BC9"
              glib:nick="cdma-bc9">
      </member>
      <member name="cdma_bc10"
              value="139"
              c:identifier="MM_MODEM_BAND_CDMA_BC10"
              glib:nick="cdma-bc10">
      </member>
      <member name="cdma_bc11"
              value="140"
              c:identifier="MM_MODEM_BAND_CDMA_BC11"
              glib:nick="cdma-bc11">
      </member>
      <member name="cdma_bc12"
              value="141"
              c:identifier="MM_MODEM_BAND_CDMA_BC12"
              glib:nick="cdma-bc12">
      </member>
      <member name="cdma_bc13"
              value="142"
              c:identifier="MM_MODEM_BAND_CDMA_BC13"
              glib:nick="cdma-bc13">
      </member>
      <member name="cdma_bc14"
              value="143"
              c:identifier="MM_MODEM_BAND_CDMA_BC14"
              glib:nick="cdma-bc14">
      </member>
      <member name="cdma_bc15"
              value="144"
              c:identifier="MM_MODEM_BAND_CDMA_BC15"
              glib:nick="cdma-bc15">
      </member>
      <member name="cdma_bc16"
              value="145"
              c:identifier="MM_MODEM_BAND_CDMA_BC16"
              glib:nick="cdma-bc16">
      </member>
      <member name="cdma_bc17"
              value="146"
              c:identifier="MM_MODEM_BAND_CDMA_BC17"
              glib:nick="cdma-bc17">
      </member>
      <member name="cdma_bc18"
              value="147"
              c:identifier="MM_MODEM_BAND_CDMA_BC18"
              glib:nick="cdma-bc18">
      </member>
      <member name="cdma_bc19"
              value="148"
              c:identifier="MM_MODEM_BAND_CDMA_BC19"
              glib:nick="cdma-bc19">
      </member>
      <member name="utran_10"
              value="210"
              c:identifier="MM_MODEM_BAND_UTRAN_10"
              glib:nick="utran-10">
      </member>
      <member name="utran_11"
              value="211"
              c:identifier="MM_MODEM_BAND_UTRAN_11"
              glib:nick="utran-11">
      </member>
      <member name="utran_12"
              value="212"
              c:identifier="MM_MODEM_BAND_UTRAN_12"
              glib:nick="utran-12">
      </member>
      <member name="utran_13"
              value="213"
              c:identifier="MM_MODEM_BAND_UTRAN_13"
              glib:nick="utran-13">
      </member>
      <member name="utran_14"
              value="214"
              c:identifier="MM_MODEM_BAND_UTRAN_14"
              glib:nick="utran-14">
      </member>
      <member name="utran_19"
              value="219"
              c:identifier="MM_MODEM_BAND_UTRAN_19"
              glib:nick="utran-19">
      </member>
      <member name="utran_20"
              value="220"
              c:identifier="MM_MODEM_BAND_UTRAN_20"
              glib:nick="utran-20">
      </member>
      <member name="utran_21"
              value="221"
              c:identifier="MM_MODEM_BAND_UTRAN_21"
              glib:nick="utran-21">
      </member>
      <member name="utran_22"
              value="222"
              c:identifier="MM_MODEM_BAND_UTRAN_22"
              glib:nick="utran-22">
      </member>
      <member name="utran_25"
              value="225"
              c:identifier="MM_MODEM_BAND_UTRAN_25"
              glib:nick="utran-25">
      </member>
      <member name="utran_26"
              value="226"
              c:identifier="MM_MODEM_BAND_UTRAN_26"
              glib:nick="utran-26">
      </member>
      <member name="utran_32"
              value="232"
              c:identifier="MM_MODEM_BAND_UTRAN_32"
              glib:nick="utran-32">
      </member>
      <member name="any"
              value="256"
              c:identifier="MM_MODEM_BAND_ANY"
              glib:nick="any">
      </member>
      <function name="get_string" c:identifier="mm_modem_band_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="986">Gets the nickname string for the #MMModemBand specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="992">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="988">a MMModemBand.</doc>
            <type name="ModemBand" c:type="MMModemBand"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <bitfield name="ModemCapability"
              glib:type-name="MMModemCapability"
              glib:get-type="mm_modem_capability_get_type"
              c:type="MMModemCapability">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_CAPABILITY_NONE"
              glib:nick="none">
      </member>
      <member name="pots"
              value="1"
              c:identifier="MM_MODEM_CAPABILITY_POTS"
              glib:nick="pots">
      </member>
      <member name="cdma_evdo"
              value="2"
              c:identifier="MM_MODEM_CAPABILITY_CDMA_EVDO"
              glib:nick="cdma-evdo">
      </member>
      <member name="gsm_umts"
              value="4"
              c:identifier="MM_MODEM_CAPABILITY_GSM_UMTS"
              glib:nick="gsm-umts">
      </member>
      <member name="lte"
              value="8"
              c:identifier="MM_MODEM_CAPABILITY_LTE"
              glib:nick="lte">
      </member>
      <member name="lte_advanced"
              value="16"
              c:identifier="MM_MODEM_CAPABILITY_LTE_ADVANCED"
              glib:nick="lte-advanced">
      </member>
      <member name="iridium"
              value="32"
              c:identifier="MM_MODEM_CAPABILITY_IRIDIUM"
              glib:nick="iridium">
      </member>
      <member name="any"
              value="4294967295"
              c:identifier="MM_MODEM_CAPABILITY_ANY"
              glib:nick="any">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_capability_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="61">Builds a string containing a comma-separated list of nicknames for
each #MMModemCapability in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="68">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="63">bitmask of MMModemCapability values.</doc>
            <type name="ModemCapability" c:type="MMModemCapability"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <class name="ModemCdma"
           c:symbol-prefix="modem_cdma"
           c:type="MMModemCdma"
           parent="GdbusModemCdmaProxy"
           glib:type-name="MMModemCdma"
           glib:get-type="mm_modem_cdma_get_type"
           glib:type-struct="ModemCdmaClass">
      <doc xml:space="preserve"
           filename="mm-modem-cdma.h"
           line="48">The #MMModemCdma structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-cdma.h" line="63"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemCdma"/>
      <method name="activate" c:identifier="mm_modem_cdma_activate">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="288">Asynchronously requests to provision the modem for use with a given carrier
using the modem's OTA activation functionality, if any.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_cdma_activate_finish() to get the result of the operation.

See mm_modem_cdma_activate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-cdma.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="290">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="carrier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="291">Name of the carrier.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="292">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="293">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="294">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_finish"
              c:identifier="mm_modem_cdma_activate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="268">Finishes an operation started with mm_modem_cdma_activate().</doc>
        <source-position filename="mm-modem-cdma.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="276">%TRUE if the activation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="270">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="271">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_cdma_activate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_manual"
              c:identifier="mm_modem_cdma_activate_manual">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="364">Asynchronously requests to provision the modem with the given properties.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_cdma_activate_manual_finish() to get the result of the operation.

See mm_modem_cdma_activate_manual_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-cdma.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="366">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="367">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="368">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="369">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="370">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_manual_finish"
              c:identifier="mm_modem_cdma_activate_manual_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="344">Finishes an operation started with mm_modem_cdma_activate_manual().</doc>
        <source-position filename="mm-modem-cdma.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="352">%TRUE if the activation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="346">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="347">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_cdma_activate_manual().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_manual_sync"
              c:identifier="mm_modem_cdma_activate_manual_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="399">Synchronously requests to provision the modem with the given properties.

The calling thread is blocked until a reply is received. See mm_modem_cdma_activate_manual()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-cdma.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="411">%TRUE if the activation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="401">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="402">A #MMCdmaManualActivationProperties.</doc>
            <type name="CdmaManualActivationProperties"
                  c:type="MMCdmaManualActivationProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="403">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="activate_sync"
              c:identifier="mm_modem_cdma_activate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="316">Synchronously requests to provision the modem for use with a given carrier
using the modem's OTA activation functionality, if any.

The calling thread is blocked until a reply is received. See mm_modem_cdma_activate()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-cdma.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="329">%TRUE if the activation was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="318">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
          <parameter name="carrier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="319">Name of the carrier.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="320">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_esn" c:identifier="mm_modem_cdma_dup_esn">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="154">Gets a copy of the &lt;ulink url="http://en.wikipedia.org/wiki/Electronic_serial_number"&gt;Electronic Serial Number&lt;/ulink&gt;,
as reported by this #MMModemCdma.

The ESN is superceded by MEID, but still used in older devices.</doc>
        <source-position filename="mm-modem-cdma.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="163">The ESN, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="156">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_meid" c:identifier="mm_modem_cdma_dup_meid">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="109">Gets a copy of the &lt;ulink url="http://en.wikipedia.org/wiki/MEID"&gt;Mobile Equipment Identifier&lt;/ulink&gt;,
as reported by this #MMModemCdma.</doc>
        <source-position filename="mm-modem-cdma.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="116">The MEID, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="111">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_cdma_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="63">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-cdma.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="69">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="65">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_activation_state"
              c:identifier="mm_modem_cdma_get_activation_state">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="250">Gets the state of the activation in the 3GPP2 network.</doc>
        <source-position filename="mm-modem-cdma.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="256">a #MMModemCdmaActivationState.</doc>
          <type name="ModemCdmaActivationState"
                c:type="MMModemCdmaActivationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="252">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma1x_registration_state"
              c:identifier="mm_modem_cdma_get_cdma1x_registration_state">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="216">Gets the state of the registration in the CDMA 1x network.</doc>
        <source-position filename="mm-modem-cdma.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="222">a #MMModemCdmaRegistrationState.</doc>
          <type name="ModemCdmaRegistrationState"
                c:type="MMModemCdmaRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="218">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_esn" c:identifier="mm_modem_cdma_get_esn">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="129">Gets the &lt;ulink url="http://en.wikipedia.org/wiki/Electronic_serial_number"&gt;Electronic Serial Number&lt;/ulink&gt;,
as reported by this #MMModemCdma.

The ESN is superceded by MEID, but still used in older devices.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_cdma_dup_esn() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-cdma.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="143">The ESN, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="131">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_evdo_registration_state"
              c:identifier="mm_modem_cdma_get_evdo_registration_state">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="232">Gets the state of the registration in the EV-DO network.</doc>
        <source-position filename="mm-modem-cdma.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="238">a #MMModemCdmaRegistrationState.</doc>
          <type name="ModemCdmaRegistrationState"
                c:type="MMModemCdmaRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="234">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_meid" c:identifier="mm_modem_cdma_get_meid">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="86">Gets the &lt;ulink url="http://en.wikipedia.org/wiki/MEID"&gt;Mobile Equipment Identifier&lt;/ulink&gt;,
as reported by this #MMModemCdma.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_cdma_dup_meid() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-cdma.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="98">The MEID, or %NULL if none available.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="88">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nid" c:identifier="mm_modem_cdma_get_nid">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="196">Gets the &lt;ulink url="http://en.wikipedia.org/wiki/Network_Identification_Number"&gt;Network Identifier&lt;/ulink&gt;
of the serving CDMA 1x network, if known, and if the modem is registered with
a CDMA 1x network.</doc>
        <source-position filename="mm-modem-cdma.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="204">The NID, or %MM_MODEM_CDMA_NID_UNKNOWN.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="198">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_cdma_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="46">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-cdma.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="52">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="48">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sid" c:identifier="mm_modem_cdma_get_sid">
        <doc xml:space="preserve"
             filename="mm-modem-cdma.c"
             line="176">Gets the &lt;ulink url="http://en.wikipedia.org/wiki/System_Identification_Number"&gt;System Identifier&lt;/ulink&gt;
of the serving CDMA 1x network, if known, and if the modem is registered with
a CDMA 1x network.</doc>
        <source-position filename="mm-modem-cdma.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-cdma.c"
               line="184">The SID, or %MM_MODEM_CDMA_SID_UNKNOWN.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-cdma.c"
                 line="178">A #MMModemCdma.</doc>
            <type name="ModemCdma" c:type="MMModemCdma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemCdmaProxy" c:type="MmGdbusModemCdmaProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <enumeration name="ModemCdmaActivationState"
                 glib:type-name="MMModemCdmaActivationState"
                 glib:get-type="mm_modem_cdma_activation_state_get_type"
                 c:type="MMModemCdmaActivationState">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_CDMA_ACTIVATION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="not_activated"
              value="1"
              c:identifier="MM_MODEM_CDMA_ACTIVATION_STATE_NOT_ACTIVATED"
              glib:nick="not-activated">
      </member>
      <member name="activating"
              value="2"
              c:identifier="MM_MODEM_CDMA_ACTIVATION_STATE_ACTIVATING"
              glib:nick="activating">
      </member>
      <member name="partially_activated"
              value="3"
              c:identifier="MM_MODEM_CDMA_ACTIVATION_STATE_PARTIALLY_ACTIVATED"
              glib:nick="partially-activated">
      </member>
      <member name="activated"
              value="4"
              c:identifier="MM_MODEM_CDMA_ACTIVATION_STATE_ACTIVATED"
              glib:nick="activated">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_cdma_activation_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2805">Gets the nickname string for the #MMModemCdmaActivationState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="397"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2811">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2807">a MMModemCdmaActivationState.</doc>
            <type name="ModemCdmaActivationState"
                  c:type="MMModemCdmaActivationState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ModemCdmaClass"
            c:type="MMModemCdmaClass"
            glib:is-gtype-struct-for="ModemCdma">
      <source-position filename="mm-modem-cdma.h" line="63"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemCdmaProxyClass"
              c:type="MmGdbusModemCdmaProxyClass"/>
      </field>
    </record>
    <enumeration name="ModemCdmaRegistrationState"
                 glib:type-name="MMModemCdmaRegistrationState"
                 glib:get-type="mm_modem_cdma_registration_state_get_type"
                 c:type="MMModemCdmaRegistrationState">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_CDMA_REGISTRATION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="registered"
              value="1"
              c:identifier="MM_MODEM_CDMA_REGISTRATION_STATE_REGISTERED"
              glib:nick="registered">
      </member>
      <member name="home"
              value="2"
              c:identifier="MM_MODEM_CDMA_REGISTRATION_STATE_HOME"
              glib:nick="home">
      </member>
      <member name="roaming"
              value="3"
              c:identifier="MM_MODEM_CDMA_REGISTRATION_STATE_ROAMING"
              glib:nick="roaming">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_cdma_registration_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2705">Gets the nickname string for the #MMModemCdmaRegistrationState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="382"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2711">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2707">a MMModemCdmaRegistrationState.</doc>
            <type name="ModemCdmaRegistrationState"
                  c:type="MMModemCdmaRegistrationState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="ModemCdmaRmProtocol"
                 glib:type-name="MMModemCdmaRmProtocol"
                 glib:get-type="mm_modem_cdma_rm_protocol_get_type"
                 c:type="MMModemCdmaRmProtocol">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="async"
              value="1"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_ASYNC"
              glib:nick="async">
      </member>
      <member name="packet_relay"
              value="2"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_PACKET_RELAY"
              glib:nick="packet-relay">
      </member>
      <member name="packet_network_ppp"
              value="3"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_PACKET_NETWORK_PPP"
              glib:nick="packet-network-ppp">
      </member>
      <member name="packet_network_slip"
              value="4"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_PACKET_NETWORK_SLIP"
              glib:nick="packet-network-slip">
      </member>
      <member name="stu_iii"
              value="5"
              c:identifier="MM_MODEM_CDMA_RM_PROTOCOL_STU_III"
              glib:nick="stu-iii">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_cdma_rm_protocol_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2906">Gets the nickname string for the #MMModemCdmaRmProtocol specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="412"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2912">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2908">a MMModemCdmaRmProtocol.</doc>
            <type name="ModemCdmaRmProtocol" c:type="MMModemCdmaRmProtocol"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ModemClass"
            c:type="MMModemClass"
            glib:is-gtype-struct-for="Modem">
      <source-position filename="mm-modem.h" line="67"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemProxyClass" c:type="MmGdbusModemProxyClass"/>
      </field>
    </record>
    <enumeration name="ModemContactsStorage"
                 glib:type-name="MMModemContactsStorage"
                 glib:get-type="mm_modem_contacts_storage_get_type"
                 c:type="MMModemContactsStorage">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_CONTACTS_STORAGE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="me"
              value="1"
              c:identifier="MM_MODEM_CONTACTS_STORAGE_ME"
              glib:nick="me">
      </member>
      <member name="sm"
              value="2"
              c:identifier="MM_MODEM_CONTACTS_STORAGE_SM"
              glib:nick="sm">
      </member>
      <member name="mt"
              value="3"
              c:identifier="MM_MODEM_CONTACTS_STORAGE_MT"
              glib:nick="mt">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_contacts_storage_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2206">Gets the nickname string for the #MMModemContactsStorage specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2212">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2208">a MMModemContactsStorage.</doc>
            <type name="ModemContactsStorage" c:type="MMModemContactsStorage"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="ModemFirmware"
           c:symbol-prefix="modem_firmware"
           c:type="MMModemFirmware"
           parent="GdbusModemFirmwareProxy"
           glib:type-name="MMModemFirmware"
           glib:get-type="mm_modem_firmware_get_type"
           glib:type-struct="ModemFirmwareClass">
      <doc xml:space="preserve"
           filename="mm-modem-firmware.h"
           line="47">The #MMModemFirmware structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-firmware.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemFirmware"/>
      <method name="dup_path" c:identifier="mm_modem_firmware_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="62">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-firmware.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="68">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="64">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_firmware_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="45">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-firmware.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="51">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="47">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list" c:identifier="mm_modem_firmware_list">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="292">Asynchronously gets the list of available firmware images.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_firmware_list_finish() to get the result of the operation.

See mm_modem_firmware_list_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-firmware.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="294">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="295">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="296">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="297">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="mm_modem_firmware_list_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="244">Finishes an operation started with mm_modem_firmware_list().</doc>
        <source-position filename="mm-modem-firmware.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="254">%TRUE if the list was correctly retrieved, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="246">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="249">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_firmware_list().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="selected"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="247">The selected firmware slot, or NULL if no slot is selected (such as if all slots are empty, or no slots exist). The returned value should be freed with g_object_unref().</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties**"/>
          </parameter>
          <parameter name="installed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="248">A list of #MMFirmwareProperties objects specifying the installed images. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="FirmwareProperties"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="mm_modem_firmware_list_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="320">Synchronously gets the list of available firmware images.

The calling thread is blocked until a reply is received. See mm_modem_firmware_list()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-firmware.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="333">%TRUE if the list was correctly retrieved, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="322">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="selected"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="323">The selected firmware slot, or NULL if no slot is selected (such as if all slots are empty, or no slots exist). The returned value should be freed with g_object_unref().</doc>
            <type name="FirmwareProperties" c:type="MMFirmwareProperties**"/>
          </parameter>
          <parameter name="installed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="324">A list of #MMFirmwareProperties objects specifying the installed images. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="FirmwareProperties"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="325">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select" c:identifier="mm_modem_firmware_select">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="105">Asynchronously selects a firmware image to boot.

&lt;warning&gt;The modem will possibly disappear once this action is run, as it
needs to reboot in order to select the new image.&lt;/warning&gt;

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_firmware_select_finish() to get the result of the operation.

See mm_modem_firmware_select_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-firmware.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="107">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="unique_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="108">Unique ID of the firmware image to select.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="109">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="110">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="111">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_finish"
              c:identifier="mm_modem_firmware_select_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="85">Finishes an operation started with mm_modem_firmware_select().</doc>
        <source-position filename="mm-modem-firmware.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="93">%TRUE if the selection was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="87">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="88">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_firmware_select().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_sync"
              c:identifier="mm_modem_firmware_select_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-firmware.c"
             line="136">Synchronously selects a firmware image to boot.

&lt;warning&gt;The modem will possibly disappear once this action is run, as it
needs to reboot in order to select the new image.&lt;/warning&gt;

The calling thread is blocked until a reply is received. See mm_modem_firmware_select()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-firmware.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-firmware.c"
               line="151">%TRUE if the selection was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="138">A #MMModemFirmware.</doc>
            <type name="ModemFirmware" c:type="MMModemFirmware*"/>
          </instance-parameter>
          <parameter name="unique_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="139">Unique ID of the firmware image to select.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-firmware.c"
                 line="140">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemFirmwareProxy"
              c:type="MmGdbusModemFirmwareProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="ModemFirmwareClass"
            c:type="MMModemFirmwareClass"
            glib:is-gtype-struct-for="ModemFirmware">
      <source-position filename="mm-modem-firmware.h" line="62"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemFirmwareProxyClass"
              c:type="MmGdbusModemFirmwareProxyClass"/>
      </field>
    </record>
    <class name="ModemLocation"
           c:symbol-prefix="modem_location"
           c:type="MMModemLocation"
           parent="GdbusModemLocationProxy"
           glib:type-name="MMModemLocation"
           glib:get-type="mm_modem_location_get_type"
           glib:type-struct="ModemLocationClass">
      <doc xml:space="preserve"
           filename="mm-modem-location.h"
           line="51">The #MMModemLocation structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-location.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemLocation"/>
      <method name="dup_assistance_data_servers"
              c:identifier="mm_modem_location_dup_assistance_data_servers">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="1007">Gets the list of assistance data servers.</doc>
        <source-position filename="mm-modem-location.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="1013">a %NULL-terminated array of server addresses, or %NULL if none available. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="1009">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_location_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="62">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-location.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="68">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="64">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supl_server"
              c:identifier="mm_modem_location_dup_supl_server">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="963">Gets the address of the SUPL server.</doc>
        <source-position filename="mm-modem-location.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="969">The SUPL server address, or %NULL if none available. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="965">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_3gpp" c:identifier="mm_modem_location_get_3gpp">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="675">Asynchronously gets the current 3GPP location information.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_get_3gpp_finish() to get the result of the operation.

See mm_modem_location_get_3gpp_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="677">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="678">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="679">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="680">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_3gpp_finish"
              c:identifier="mm_modem_location_get_3gpp_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="653">Finishes an operation started with mm_modem_location_get_3gpp().</doc>
        <source-position filename="mm-modem-location.h" line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="661">A #MMLocation3gpp, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="Location3gpp" c:type="MMLocation3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="655">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="656">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_get_3gpp().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_3gpp_sync"
              c:identifier="mm_modem_location_get_3gpp_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="698">Synchronously gets the current 3GPP location information.

The calling thread is blocked until a reply is received. See mm_modem_location_get_3gpp()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="709">A #MMLocation3gpp, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="Location3gpp" c:type="MMLocation3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="700">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="701">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assistance_data_servers"
              c:identifier="mm_modem_location_get_assistance_data_servers">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="982">Gets the list of assistance data servers.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_location_dup_assistance_data_servers() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-location.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="993">a %NULL-terminated array of server addresses, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="984">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="mm_modem_location_get_capabilities">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="85">Gets a bitmask of the location capabilities supported by this #MMModemLocation.</doc>
        <source-position filename="mm-modem-location.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="91">A #MMModemLocationSource.</doc>
          <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="87">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma_bs" c:identifier="mm_modem_location_get_cdma_bs">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="891">Asynchronously gets the current CDMA base station location information.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_get_cdma_bs_finish() to get the result of the operation.

See mm_modem_location_get_cdma_bs_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="893">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="894">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="895">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="896">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cdma_bs_finish"
              c:identifier="mm_modem_location_get_cdma_bs_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="869">Finishes an operation started with mm_modem_location_get_cdma_bs().</doc>
        <source-position filename="mm-modem-location.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="877">A #MMLocationCdmaBs, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="871">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="872">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_get_cdma_bs().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cdma_bs_sync"
              c:identifier="mm_modem_location_get_cdma_bs_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="914">Synchronously gets the current CDMA base station location information.

The calling thread is blocked until a reply is received. See mm_modem_location_get_cdma_bs()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="925">A #MMLocationCdmaBs, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationCdmaBs" c:type="MMLocationCdmaBs*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="916">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="917">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enabled" c:identifier="mm_modem_location_get_enabled">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="121">Gets a bitmask of the location capabilities which are enabled in this #MMModemLocation.</doc>
        <source-position filename="mm-modem-location.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="127">A #MMModemLocationSource.</doc>
          <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="123">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full" c:identifier="mm_modem_location_get_full">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="587">Asynchronously gets the current location information.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_get_full_finish() to get the result of the operation.

See mm_modem_location_get_full_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="589">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="590">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="591">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="592">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_full_finish"
              c:identifier="mm_modem_location_get_full_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="554">Finishes an operation started with mm_modem_location_get_full().</doc>
        <source-position filename="mm-modem-location.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="566">%TRUE if the retrieval was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="556">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="561">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_get_full().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="location_3gpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="557">Return location for a #MMLocation3gpp if 3GPP location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp**"/>
          </parameter>
          <parameter name="location_gps_nmea"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="558">Return location for a #MMLocationGpsNmea if GPS NMEA location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea**"/>
          </parameter>
          <parameter name="location_gps_raw"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="559">Return location for a #MMLocationGpsRaw if GPS raw location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw**"/>
          </parameter>
          <parameter name="location_cdma_bs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="560">Return location for a #MMLocationCdmaBs if CDMA Base Station location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_full_sync"
              c:identifier="mm_modem_location_get_full_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="615">Synchronously gets the current location information.

The calling thread is blocked until a reply is received. See mm_modem_location_get_full()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="630">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="617">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="location_3gpp"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="618">Return location for a #MMLocation3gpp if 3GPP location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="Location3gpp" c:type="MMLocation3gpp**"/>
          </parameter>
          <parameter name="location_gps_nmea"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="619">Return location for a #MMLocationGpsNmea if GPS NMEA location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationGpsNmea" c:type="MMLocationGpsNmea**"/>
          </parameter>
          <parameter name="location_gps_raw"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="620">Return location for a #MMLocationGpsRaw if GPS raw location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationGpsRaw" c:type="MMLocationGpsRaw**"/>
          </parameter>
          <parameter name="location_cdma_bs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="621">Return location for a #MMLocationCdmaBs if CDMA Base Station location is requested, or #NULL if not required. The returned value should be freed with g_object_unref().</doc>
            <type name="LocationCdmaBs" c:type="MMLocationCdmaBs**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="622">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_nmea"
              c:identifier="mm_modem_location_get_gps_nmea">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="747">Asynchronously gets the current GPS NMEA location information.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_get_gps_nmea_finish() to get the result of the operation.

See mm_modem_location_get_gps_nmea_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="749">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="750">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="751">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="752">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_nmea_finish"
              c:identifier="mm_modem_location_get_gps_nmea_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="725">Finishes an operation started with mm_modem_location_get_gps_nmea().</doc>
        <source-position filename="mm-modem-location.h" line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="733">A #MMLocationGpsNmea, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="727">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="728">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_get_gps_nmea().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_nmea_sync"
              c:identifier="mm_modem_location_get_gps_nmea_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="770">Synchronously gets the current GPS NMEA location information.

The calling thread is blocked until a reply is received. See mm_modem_location_get_gps_nmea()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="163"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="781">A #MMLocationGpsNmea, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationGpsNmea" c:type="MMLocationGpsNmea*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="772">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="773">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_raw" c:identifier="mm_modem_location_get_gps_raw">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="819">Asynchronously gets the current GPS raw location information.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_get_gps_raw_finish() to get the result of the operation.

See mm_modem_location_get_gps_raw_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="821">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="822">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="823">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="824">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_raw_finish"
              c:identifier="mm_modem_location_get_gps_raw_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="797">Finishes an operation started with mm_modem_location_get_gps_raw().</doc>
        <source-position filename="mm-modem-location.h" line="171"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="805">A #MMLocationGpsRaw, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="799">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_get_gps_raw().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_raw_sync"
              c:identifier="mm_modem_location_get_gps_raw_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="842">Synchronously gets the current GPS raw location information.

The calling thread is blocked until a reply is received. See mm_modem_location_get_gps_raw()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="853">A #MMLocationGpsRaw, or #NULL if not available. The returned value should be freed with g_object_unref().</doc>
          <type name="LocationGpsRaw" c:type="MMLocationGpsRaw*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="844">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="845">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_gps_refresh_rate"
              c:identifier="mm_modem_location_get_gps_refresh_rate">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="1032">Gets the GPS refresh rate, in seconds.</doc>
        <source-position filename="mm-modem-location.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="1038">The GPS refresh rate, or 0 if no fixed rate is used.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="1034">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_location_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="45">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-location.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="51">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="47">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supl_server"
              c:identifier="mm_modem_location_get_supl_server">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="941">Gets the address of the SUPL server.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_location_dup_supl_server() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-location.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="952">The SUPL server address, or %NULL if none available. Do not free the returned value, it belongs to @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="943">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_assistance_data"
              c:identifier="mm_modem_location_get_supported_assistance_data">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="103">Gets a bitmask of the supported assistance data types.</doc>
        <source-position filename="mm-modem-location.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="109">A #MMModemLocationAssistanceDataType.</doc>
          <type name="ModemLocationAssistanceDataType"
                c:type="MMModemLocationAssistanceDataType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="105">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inject_assistance_data"
              c:identifier="mm_modem_location_inject_assistance_data">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="347">Aynchronously injects assistance data to the GNSS module.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_inject_assistance_data_finish() to get the result of the operation.

See mm_modem_location_inject_assistance_data_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="349">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="350">Data to inject.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="351">size of @data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="352">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="353">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="354">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="inject_assistance_data_finish"
              c:identifier="mm_modem_location_inject_assistance_data_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="327">Finishes an operation started with mm_modem_location_inject_assistance_data().</doc>
        <source-position filename="mm-modem-location.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="335">%TRUE if the injection was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="329">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="330">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_inject_assistance_data().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="inject_assistance_data_sync"
              c:identifier="mm_modem_location_inject_assistance_data_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="380">Synchronously injects assistance data to the GNSS module.

The calling thread is blocked until a reply is received. See mm_modem_location_inject_assistance_data()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="393">%TRUE if the injection was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="382">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="383">Data to inject.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="384">size of @data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="385">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gps_refresh_rate"
              c:identifier="mm_modem_location_set_gps_refresh_rate">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="432">Asynchronously configures the GPS refresh rate.

If a 0 rate is used, the GPS location updates will be immediately propagated to the interface.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_set_gps_refresh_rate_finish() to get the result of the operation.

See mm_modem_location_set_gps_refresh_rate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="434">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="435">The GPS refresh rate, in seconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="436">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="437">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="438">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gps_refresh_rate_finish"
              c:identifier="mm_modem_location_set_gps_refresh_rate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="412">Finishes an operation started with mm_modem_location_set_gps_refresh_rate().</doc>
        <source-position filename="mm-modem-location.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="420">%TRUE if setting the GPS refresh rate was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="414">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="415">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_set_gps_refresh_rate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gps_refresh_rate_sync"
              c:identifier="mm_modem_location_set_gps_refresh_rate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="465">Synchronously configures the GPS refresh rate.

If a 0 rate is used, the GPS location updates will be immediately propagated to the interface.

The calling thread is blocked until a reply is received. See mm_modem_location_set_gps_refresh_rate()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="479">%TRUE if setting the refresh rate was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="467">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="468">The GPS refresh rate, in seconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="469">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supl_server"
              c:identifier="mm_modem_location_set_supl_server">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="266">Asynchronously configures the address of the SUPL server for A-GPS operation.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_set_supl_server_finish() to get the result of the operation.

See mm_modem_location_set_supl_server_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="268">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="supl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="269">The SUPL server address, given as IP:PORT or with a full URL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="270">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="271">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="272">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supl_server_finish"
              c:identifier="mm_modem_location_set_supl_server_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="246">Finishes an operation started with mm_modem_location_set_supl_server().</doc>
        <source-position filename="mm-modem-location.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="254">%TRUE if setting the SUPL server was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="248">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="249">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_set_supl_server().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supl_server_sync"
              c:identifier="mm_modem_location_set_supl_server_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="297">Synchronously configures the address of the SUPL server for A-GPS operation.

The calling thread is blocked until a reply is received. See mm_modem_location_set_supl_server()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="309">%TRUE if setting the SUPL server was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="299">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="supl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="300">The SUPL server address, given as IP:PORT or with a full URL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="301">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="mm_modem_location_setup">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="177">Asynchronously configures the location sources to use when gathering location
information. Also enable or disable location information gathering.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_location_setup_finish() to get the result of the operation.

See mm_modem_location_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="179">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="180">Bitmask of #MMModemLocationSource values specifying which locations should get enabled.</doc>
            <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
          </parameter>
          <parameter name="signal_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="181">Flag to enable or disable location signaling.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="182">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="183">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="184">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_finish"
              c:identifier="mm_modem_location_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="157">Finishes an operation started with mm_modem_location_setup().</doc>
        <source-position filename="mm-modem-location.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="165">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="159">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="160">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_location_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_sync"
              c:identifier="mm_modem_location_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="212">Synchronously configures the location sources to use when gathering location
information. Also enable or disable location information gathering.

The calling thread is blocked until a reply is received. See mm_modem_location_setup()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-location.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="226">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="214">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
          <parameter name="sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="215">Bitmask of #MMModemLocationSource values specifying which locations should get enabled.</doc>
            <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
          </parameter>
          <parameter name="signal_location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="216">Flag to enable or disable location signaling.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="217">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signals_location"
              c:identifier="mm_modem_location_signals_location">
        <doc xml:space="preserve"
             filename="mm-modem-location.c"
             line="139">Gets the status of the location signaling in the #MMModemLocation.</doc>
        <source-position filename="mm-modem-location.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-location.c"
               line="145">%TRUE if location changes are signaled, %FALSE otherwise..</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-location.c"
                 line="141">A #MMModemLocation.</doc>
            <type name="ModemLocation" c:type="MMModemLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemLocationProxy"
              c:type="MmGdbusModemLocationProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <bitfield name="ModemLocationAssistanceDataType"
              glib:type-name="MMModemLocationAssistanceDataType"
              glib:get-type="mm_modem_location_assistance_data_type_get_type"
              c:type="MMModemLocationAssistanceDataType">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_NONE"
              glib:nick="none">
      </member>
      <member name="xtra"
              value="1"
              c:identifier="MM_MODEM_LOCATION_ASSISTANCE_DATA_TYPE_XTRA"
              glib:nick="xtra">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_location_assistance_data_type_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2130">Builds a string containing a comma-separated list of nicknames for
each #MMModemLocationAssistanceDataType in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="296"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2137">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2132">bitmask of MMModemLocationAssistanceDataType values.</doc>
            <type name="ModemLocationAssistanceDataType"
                  c:type="MMModemLocationAssistanceDataType"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <record name="ModemLocationClass"
            c:type="MMModemLocationClass"
            glib:is-gtype-struct-for="ModemLocation">
      <source-position filename="mm-modem-location.h" line="66"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemLocationProxyClass"
              c:type="MmGdbusModemLocationProxyClass"/>
      </field>
    </record>
    <bitfield name="ModemLocationSource"
              glib:type-name="MMModemLocationSource"
              glib:get-type="mm_modem_location_source_get_type"
              c:type="MMModemLocationSource">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_LOCATION_SOURCE_NONE"
              glib:nick="none">
      </member>
      <member name="3gpp_lac_ci"
              value="1"
              c:identifier="MM_MODEM_LOCATION_SOURCE_3GPP_LAC_CI"
              glib:nick="3gpp-lac-ci">
      </member>
      <member name="gps_raw"
              value="2"
              c:identifier="MM_MODEM_LOCATION_SOURCE_GPS_RAW"
              glib:nick="gps-raw">
      </member>
      <member name="gps_nmea"
              value="4"
              c:identifier="MM_MODEM_LOCATION_SOURCE_GPS_NMEA"
              glib:nick="gps-nmea">
      </member>
      <member name="cdma_bs"
              value="8"
              c:identifier="MM_MODEM_LOCATION_SOURCE_CDMA_BS"
              glib:nick="cdma-bs">
      </member>
      <member name="gps_unmanaged"
              value="16"
              c:identifier="MM_MODEM_LOCATION_SOURCE_GPS_UNMANAGED"
              glib:nick="gps-unmanaged">
      </member>
      <member name="agps"
              value="32"
              c:identifier="MM_MODEM_LOCATION_SOURCE_AGPS"
              glib:nick="agps">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_location_source_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2033">Builds a string containing a comma-separated list of nicknames for
each #MMModemLocationSource in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="281"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2040">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="2035">bitmask of MMModemLocationSource values.</doc>
            <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <enumeration name="ModemLock"
                 glib:type-name="MMModemLock"
                 glib:get-type="mm_modem_lock_get_type"
                 c:type="MMModemLock">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_LOCK_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="none"
              value="1"
              c:identifier="MM_MODEM_LOCK_NONE"
              glib:nick="none">
      </member>
      <member name="sim_pin"
              value="2"
              c:identifier="MM_MODEM_LOCK_SIM_PIN"
              glib:nick="sim-pin">
      </member>
      <member name="sim_pin2"
              value="3"
              c:identifier="MM_MODEM_LOCK_SIM_PIN2"
              glib:nick="sim-pin2">
      </member>
      <member name="sim_puk"
              value="4"
              c:identifier="MM_MODEM_LOCK_SIM_PUK"
              glib:nick="sim-puk">
      </member>
      <member name="sim_puk2"
              value="5"
              c:identifier="MM_MODEM_LOCK_SIM_PUK2"
              glib:nick="sim-puk2">
      </member>
      <member name="ph_sp_pin"
              value="6"
              c:identifier="MM_MODEM_LOCK_PH_SP_PIN"
              glib:nick="ph-sp-pin">
      </member>
      <member name="ph_sp_puk"
              value="7"
              c:identifier="MM_MODEM_LOCK_PH_SP_PUK"
              glib:nick="ph-sp-puk">
      </member>
      <member name="ph_net_pin"
              value="8"
              c:identifier="MM_MODEM_LOCK_PH_NET_PIN"
              glib:nick="ph-net-pin">
      </member>
      <member name="ph_net_puk"
              value="9"
              c:identifier="MM_MODEM_LOCK_PH_NET_PUK"
              glib:nick="ph-net-puk">
      </member>
      <member name="ph_sim_pin"
              value="10"
              c:identifier="MM_MODEM_LOCK_PH_SIM_PIN"
              glib:nick="ph-sim-pin">
      </member>
      <member name="ph_corp_pin"
              value="11"
              c:identifier="MM_MODEM_LOCK_PH_CORP_PIN"
              glib:nick="ph-corp-pin">
      </member>
      <member name="ph_corp_puk"
              value="12"
              c:identifier="MM_MODEM_LOCK_PH_CORP_PUK"
              glib:nick="ph-corp-puk">
      </member>
      <member name="ph_fsim_pin"
              value="13"
              c:identifier="MM_MODEM_LOCK_PH_FSIM_PIN"
              glib:nick="ph-fsim-pin">
      </member>
      <member name="ph_fsim_puk"
              value="14"
              c:identifier="MM_MODEM_LOCK_PH_FSIM_PUK"
              glib:nick="ph-fsim-puk">
      </member>
      <member name="ph_netsub_pin"
              value="15"
              c:identifier="MM_MODEM_LOCK_PH_NETSUB_PIN"
              glib:nick="ph-netsub-pin">
      </member>
      <member name="ph_netsub_puk"
              value="16"
              c:identifier="MM_MODEM_LOCK_PH_NETSUB_PUK"
              glib:nick="ph-netsub-puk">
      </member>
      <function name="get_string" c:identifier="mm_modem_lock_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="150">Gets the nickname string for the #MMModemLock specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="156">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="152">a MMModemLock.</doc>
            <type name="ModemLock" c:type="MMModemLock"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="ModemMessaging"
           c:symbol-prefix="modem_messaging"
           c:type="MMModemMessaging"
           parent="GdbusModemMessagingProxy"
           glib:type-name="MMModemMessaging"
           glib:get-type="mm_modem_messaging_get_type"
           glib:type-struct="ModemMessagingClass">
      <doc xml:space="preserve"
           filename="mm-modem-messaging.h"
           line="50">The #MMModemMessaging structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-messaging.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemMessaging"/>
      <method name="create" c:identifier="mm_modem_messaging_create">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="498">Asynchronously creates a new #MMSms in the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_messaging_create_finish() to get the result of the operation.

See mm_modem_messaging_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="500">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="501">A ##MMSmsProperties object with the properties to use.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="502">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="503">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="504">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_finish"
              c:identifier="mm_modem_messaging_create_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="425">Finishes an operation started with mm_modem_messaging_create().</doc>
        <source-position filename="mm-modem-messaging.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="433">A newly created #MMSms, or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Sms" c:type="MMSms*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="427">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="428">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_messaging_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_sync"
              c:identifier="mm_modem_messaging_create_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="537">Synchronously creates a new #MMSms in the modem.

The calling thread is blocked until a reply is received. See mm_modem_messaging_create()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="549">A newly created #MMSms, or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Sms" c:type="MMSms*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="539">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="540">A ##MMSmsProperties object with the properties to use.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="541">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="mm_modem_messaging_delete">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="609">Asynchronously deletes a given #MMSms from the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_messaging_delete_finish() to get the result of the operation.

See mm_modem_messaging_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="611">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="sms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="612">Path of the #MMSms to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="613">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="614">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="615">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="mm_modem_messaging_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="589">Finishes an operation started with mm_modem_messaging_delete().</doc>
        <source-position filename="mm-modem-messaging.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="597">%TRUE if the sms was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="591">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="592">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_messaging_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="mm_modem_messaging_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="640">Synchronously deletes a given #MMSms from the modem.

The calling thread is blocked until a reply is received. See mm_modem_messaging_delete()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="652">%TRUE if the SMS was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="642">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="sms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="643">Path of the #MMSms to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="644">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_messaging_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="70">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-messaging.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="76">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="72">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_storage"
              c:identifier="mm_modem_messaging_get_default_storage">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="203">Gets the default SMS storage used when storing or receiving SMS messages.</doc>
        <source-position filename="mm-modem-messaging.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="209">the default #MMSmsStorage.</doc>
          <type name="SmsStorage" c:type="MMSmsStorage"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="205">A #MMModem.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_messaging_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="53">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-messaging.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="59">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="55">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_storages"
              c:identifier="mm_modem_messaging_get_supported_storages">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="143">Gets the list of SMS storages supported by the #MMModem.</doc>
        <source-position filename="mm-modem-messaging.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="151">%TRUE if @storages and @n_storages are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="145">A #MMModem.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="storages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="146">Return location for the array of #MMSmsStorage values. The returned array should be freed with g_free() when no longer needed.</doc>
            <array length="1" zero-terminated="0" c:type="MMSmsStorage**">
              <type name="SmsStorage" c:type="MMSmsStorage*"/>
            </array>
          </parameter>
          <parameter name="n_storages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="147">Return location for the number of values in @storages.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list" c:identifier="mm_modem_messaging_list">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="324">Asynchronously lists the #MMSms objects in the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_messaging_list_finish() to get the result of the operation.

See mm_modem_messaging_list_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="326">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="327">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="328">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="329">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="mm_modem_messaging_list_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="241">Finishes an operation started with mm_modem_messaging_list().</doc>
        <source-position filename="mm-modem-messaging.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="249">A list of #MMSms objects, or #NULL if either not found or @error is set. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Sms"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="243">A #MMModem.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="244">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_messaging_list().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="mm_modem_messaging_list_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="367">Synchronously lists the #MMSms objects in the modem.

The calling thread is blocked until a reply is received. See mm_modem_messaging_list()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-messaging.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="378">A list of #MMSms objects, or #NULL if either not found or @error is set. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Sms"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="369">A #MMModemMessaging.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="370">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_supported_storages"
              c:identifier="mm_modem_messaging_peek_supported_storages">
        <doc xml:space="preserve"
             filename="mm-modem-messaging.c"
             line="173">Gets the list of SMS storages supported by the #MMModem.</doc>
        <source-position filename="mm-modem-messaging.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-messaging.c"
               line="181">%TRUE if @storages and @n_storages are set, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="175">A #MMModem.</doc>
            <type name="ModemMessaging" c:type="MMModemMessaging*"/>
          </instance-parameter>
          <parameter name="storages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="176">Return location for the array of #MMSmsStorage values. Do not free the returned array, it is owned by @self.</doc>
            <type name="SmsStorage" c:type="const MMSmsStorage**"/>
          </parameter>
          <parameter name="n_storages"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-modem-messaging.c"
                 line="177">Return location for the number of values in @storages.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemMessagingProxy"
              c:type="MmGdbusModemMessagingProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemMessagingPrivate" c:type="MMModemMessagingPrivate*"/>
      </field>
    </class>
    <record name="ModemMessagingClass"
            c:type="MMModemMessagingClass"
            glib:is-gtype-struct-for="ModemMessaging">
      <source-position filename="mm-modem-messaging.h" line="65"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemMessagingProxyClass"
              c:type="MmGdbusModemMessagingProxyClass"/>
      </field>
    </record>
    <record name="ModemMessagingPrivate"
            c:type="MMModemMessagingPrivate"
            disguised="1">
      <source-position filename="mm-modem-messaging.h" line="48"/>
    </record>
    <bitfield name="ModemMode"
              glib:type-name="MMModemMode"
              glib:get-type="mm_modem_mode_get_type"
              c:type="MMModemMode">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_MODE_NONE"
              glib:nick="none">
      </member>
      <member name="cs"
              value="1"
              c:identifier="MM_MODEM_MODE_CS"
              glib:nick="cs">
      </member>
      <member name="2g"
              value="2"
              c:identifier="MM_MODEM_MODE_2G"
              glib:nick="2g">
      </member>
      <member name="3g"
              value="4"
              c:identifier="MM_MODEM_MODE_3G"
              glib:nick="3g">
      </member>
      <member name="4g"
              value="8"
              c:identifier="MM_MODEM_MODE_4G"
              glib:nick="4g">
      </member>
      <member name="any"
              value="4294967295"
              c:identifier="MM_MODEM_MODE_ANY"
              glib:nick="any">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_modem_mode_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="791">Builds a string containing a comma-separated list of nicknames for
each #MMModemMode in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="798">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="793">bitmask of MMModemMode values.</doc>
            <type name="ModemMode" c:type="MMModemMode"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <record name="ModemModeCombination" c:type="MMModemModeCombination">
      <doc xml:space="preserve"
           filename="mm-helper-types.h"
           line="33">#MMModemModeCombination is a simple struct holding a pair of #MMModemMode values.</doc>
      <source-position filename="mm-helper-types.h" line="44"/>
      <field name="allowed" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="35">Mask of #MMModemMode values specifying allowed modes.</doc>
        <type name="ModemMode" c:type="MMModemMode"/>
      </field>
      <field name="preferred" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="36">A single #MMModemMode value specifying the preferred mode.</doc>
        <type name="ModemMode" c:type="MMModemMode"/>
      </field>
    </record>
    <class name="ModemOma"
           c:symbol-prefix="modem_oma"
           c:type="MMModemOma"
           parent="GdbusModemOmaProxy"
           glib:type-name="MMModemOma"
           glib:get-type="mm_modem_oma_get_type"
           glib:type-struct="ModemOmaClass">
      <doc xml:space="preserve"
           filename="mm-modem-oma.h"
           line="48">The #MMModemOma structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-oma.h" line="63"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemOma"/>
      <method name="accept_network_initiated_session"
              c:identifier="mm_modem_oma_accept_network_initiated_session">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="261">Asynchronously accepts a nework-initiated OMA device management session.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_oma_accept_network_initiated_session_finish() to get the result of the operation.

See mm_modem_oma_accept_network_initiated_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="263">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="264">The unique ID of the network-initiated session.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accept" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="265">%TRUE if the session is to be accepted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="266">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="267">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="268">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_network_initiated_session_finish"
              c:identifier="mm_modem_oma_accept_network_initiated_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="241">Finishes an operation started with mm_modem_oma_accept_network_initiated_session().</doc>
        <source-position filename="mm-modem-oma.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="249">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="243">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="244">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_oma_accept_network_initiated_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_network_initiated_session_sync"
              c:identifier="mm_modem_oma_accept_network_initiated_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="290">Synchronously accepts a nework-initiated OMA device management session.

The calling thread is blocked until a reply is received. See mm_modem_oma_accept_network_initiated_session()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="303">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="292">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="293">The unique ID of the network-initiated session.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="accept" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="294">%TRUE if the session is to be accepted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="295">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_session" c:identifier="mm_modem_oma_cancel_session">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="339">Asynchronously cancels the current OMA device management session.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_oma_cancel_session_finish() to get the result of the operation.

See mm_modem_oma_cancel_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="341">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="342">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="343">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="344">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_session_finish"
              c:identifier="mm_modem_oma_cancel_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="319">Finishes an operation started with mm_modem_oma_cancel_session().</doc>
        <source-position filename="mm-modem-oma.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="327">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="321">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="322">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_oma_cancel_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_session_sync"
              c:identifier="mm_modem_oma_cancel_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="364">Synchronously cancels the current OMA device management session.

The calling thread is blocked until a reply is received. See mm_modem_oma_cancel_session()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="375">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="366">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="367">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_oma_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="70">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-oma.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="76">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="72">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_features" c:identifier="mm_modem_oma_get_features">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="389">Gets the currently enabled OMA features.</doc>
        <source-position filename="mm-modem-oma.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="395">a bitmask of #MMOmaFeature values.</doc>
          <type name="OmaFeature" c:type="MMOmaFeature"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="391">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_oma_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="53">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-oma.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="59">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="55">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_state"
              c:identifier="mm_modem_oma_get_session_state">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="425">Gets the state of the current OMA device management session.</doc>
        <source-position filename="mm-modem-oma.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="431">a #MMOmaSessionState.</doc>
          <type name="OmaSessionState" c:type="MMOmaSessionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="427">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session_type"
              c:identifier="mm_modem_oma_get_session_type">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="407">Gets the type of the current OMA device management session.</doc>
        <source-position filename="mm-modem-oma.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="413">a #MMOmaSessionType.</doc>
          <type name="OmaSessionType" c:type="MMOmaSessionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="409">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="mm_modem_oma_setup">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="113">Asynchronously sets up the OMA device management service.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_oma_setup_finish() to get the result of the operation.

See mm_modem_oma_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="115">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="116">Mask of #MMOmaFeatures to enable.</doc>
            <type name="OmaFeature" c:type="MMOmaFeature"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="118">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="119">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_finish"
              c:identifier="mm_modem_oma_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="93">Finishes an operation started with mm_modem_oma_setup().</doc>
        <source-position filename="mm-modem-oma.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="101">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="95">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="96">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_oma_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_sync"
              c:identifier="mm_modem_oma_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="140">Synchronously sets up the OMA device management service.

The calling thread is blocked until a reply is received. See mm_modem_oma_setup()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="152">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="142">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="143">Mask of #MMOmaFeatures to enable.</doc>
            <type name="OmaFeature" c:type="MMOmaFeature"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="144">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_client_initiated_session"
              c:identifier="mm_modem_oma_start_client_initiated_session">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="187">Asynchronously starts a client-initiated OMA device management session.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_oma_start_client_initiated_session_finish() to get the result of the operation.

See mm_modem_oma_start_client_initiated_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="189">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="session_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="190">A #MMOmaSessionType.</doc>
            <type name="OmaSessionType" c:type="MMOmaSessionType"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="191">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="192">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="193">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_client_initiated_session_finish"
              c:identifier="mm_modem_oma_start_client_initiated_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="167">Finishes an operation started with mm_modem_oma_start_client_initiated_session().</doc>
        <source-position filename="mm-modem-oma.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="175">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="169">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="170">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_oma_start_client_initiated_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_client_initiated_session_sync"
              c:identifier="mm_modem_oma_start_client_initiated_session_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-oma.c"
             line="214">Synchronously starts a client-initiated OMA device management session.

The calling thread is blocked until a reply is received. See mm_modem_oma_start_client_initiated_session()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-oma.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-oma.c"
               line="226">%TRUE if the session was started, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="216">A #MMModemOma.</doc>
            <type name="ModemOma" c:type="MMModemOma*"/>
          </instance-parameter>
          <parameter name="session_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="217">A #MMOmaSessionType.</doc>
            <type name="OmaSessionType" c:type="MMOmaSessionType"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-oma.c"
                 line="218">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemOmaProxy" c:type="MmGdbusModemOmaProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemOmaPrivate" c:type="MMModemOmaPrivate*"/>
      </field>
    </class>
    <record name="ModemOmaClass"
            c:type="MMModemOmaClass"
            glib:is-gtype-struct-for="ModemOma">
      <source-position filename="mm-modem-oma.h" line="63"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemOmaProxyClass"
              c:type="MmGdbusModemOmaProxyClass"/>
      </field>
    </record>
    <record name="ModemOmaPrivate" c:type="MMModemOmaPrivate" disguised="1">
      <source-position filename="mm-modem-oma.h" line="46"/>
    </record>
    <record name="ModemPortInfo" c:type="MMModemPortInfo">
      <doc xml:space="preserve"
           filename="mm-helper-types.h"
           line="46">Information of a given port.</doc>
      <source-position filename="mm-helper-types.h" line="57"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="48">Name of the port.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="49">A #MMModemPortType value.</doc>
        <type name="ModemPortType" c:type="MMModemPortType"/>
      </field>
      <method name="array_free" c:identifier="mm_modem_port_info_array_free">
        <doc xml:space="preserve"
             filename="mm-helper-types.c"
             line="25">Frees an array of #MMModemPortInfo values.</doc>
        <source-position filename="mm-helper-types.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-helper-types.c"
                 line="27">an array of #MMModemPortInfo values.</doc>
            <type name="ModemPortInfo" c:type="MMModemPortInfo*"/>
          </instance-parameter>
          <parameter name="array_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-helper-types.c"
                 line="28">length of @array.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ModemPortType"
                 glib:type-name="MMModemPortType"
                 glib:get-type="mm_modem_port_type_get_type"
                 c:type="MMModemPortType">
      <member name="unknown"
              value="1"
              c:identifier="MM_MODEM_PORT_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="net"
              value="2"
              c:identifier="MM_MODEM_PORT_TYPE_NET"
              glib:nick="net">
      </member>
      <member name="at"
              value="3"
              c:identifier="MM_MODEM_PORT_TYPE_AT"
              glib:nick="at">
      </member>
      <member name="qcdm"
              value="4"
              c:identifier="MM_MODEM_PORT_TYPE_QCDM"
              glib:nick="qcdm">
      </member>
      <member name="gps"
              value="5"
              c:identifier="MM_MODEM_PORT_TYPE_GPS"
              glib:nick="gps">
      </member>
      <member name="qmi"
              value="6"
              c:identifier="MM_MODEM_PORT_TYPE_QMI"
              glib:nick="qmi">
      </member>
      <member name="mbim"
              value="7"
              c:identifier="MM_MODEM_PORT_TYPE_MBIM"
              glib:nick="mbim">
      </member>
      <function name="get_string" c:identifier="mm_modem_port_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1088">Gets the nickname string for the #MMModemPortType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1094">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1090">a MMModemPortType.</doc>
            <type name="ModemPortType" c:type="MMModemPortType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="ModemPowerState"
                 glib:type-name="MMModemPowerState"
                 glib:get-type="mm_modem_power_state_get_type"
                 c:type="MMModemPowerState">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_POWER_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="off"
              value="1"
              c:identifier="MM_MODEM_POWER_STATE_OFF"
              glib:nick="off">
      </member>
      <member name="low"
              value="2"
              c:identifier="MM_MODEM_POWER_STATE_LOW"
              glib:nick="low">
      </member>
      <member name="on"
              value="3"
              c:identifier="MM_MODEM_POWER_STATE_ON"
              glib:nick="on">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_power_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="456">Gets the nickname string for the #MMModemPowerState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="462">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="458">a MMModemPowerState.</doc>
            <type name="ModemPowerState" c:type="MMModemPowerState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="ModemPrivate" c:type="MMModemPrivate" disguised="1">
      <source-position filename="mm-modem.h" line="50"/>
    </record>
    <class name="ModemSignal"
           c:symbol-prefix="modem_signal"
           c:type="MMModemSignal"
           parent="GdbusModemSignalProxy"
           glib:type-name="MMModemSignal"
           glib:get-type="mm_modem_signal_get_type"
           glib:type-struct="ModemSignalClass">
      <doc xml:space="preserve"
           filename="mm-modem-signal.h"
           line="48">The #MMModemSignal structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-signal.h" line="63"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemSignal"/>
      <method name="dup_path" c:identifier="mm_modem_signal_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="82">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-signal.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="88">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="84">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma" c:identifier="mm_modem_signal_get_cdma">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="316">Gets a #MMSignal object specifying the CDMA signal information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_signal_get_cdma() again to get a new #MMSignal with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="327">A #MMSignal that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="318">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_evdo" c:identifier="mm_modem_signal_get_evdo">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="364">Gets a #MMSignal object specifying the EV-DO signal information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_signal_get_evdo() again to get a new #MMSignal with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="375">A #MMSignal that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="366">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gsm" c:identifier="mm_modem_signal_get_gsm">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="412">Gets a #MMSignal object specifying the GSM signal information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_signal_get_gsm() again to get a new #MMSignal with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="423">A #MMSignal that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="414">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lte" c:identifier="mm_modem_signal_get_lte">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="508">Gets a #MMSignal object specifying the LTE signal information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_signal_get_lte() again to get a new #MMSignal with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="519">A #MMSignal that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="510">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_signal_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="65">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-signal.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="71">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="67">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate" c:identifier="mm_modem_signal_get_rate">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="179">Gets the currently configured refresh rate.</doc>
        <source-position filename="mm-modem-signal.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="185">the refresh rate, in seconds.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="181">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_umts" c:identifier="mm_modem_signal_get_umts">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="460">Gets a #MMSignal object specifying the UMTS signal information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_signal_get_umts() again to get a new #MMSignal with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="93"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="471">A #MMSignal that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="462">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_cdma" c:identifier="mm_modem_signal_peek_cdma">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="340">Gets a #MMSignal object specifying the CDMA signal information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_signal_get_cdma() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="351">A #MMSignal. Do not free the returned value, it belongs to @self.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="342">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_evdo" c:identifier="mm_modem_signal_peek_evdo">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="388">Gets a #MMSignal object specifying the EV-DO signal information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_signal_get_evdo() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="399">A #MMSignal. Do not free the returned value, it belongs to @self.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="390">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_gsm" c:identifier="mm_modem_signal_peek_gsm">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="436">Gets a #MMSignal object specifying the GSM signal information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_signal_get_gsm() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="447">A #MMSignal. Do not free the returned value, it belongs to @self.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="438">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_lte" c:identifier="mm_modem_signal_peek_lte">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="532">Gets a #MMSignal object specifying the LTE signal information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_signal_get_lte() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="543">A #MMSignal. Do not free the returned value, it belongs to @self.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="534">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_umts" c:identifier="mm_modem_signal_peek_umts">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="484">Gets a #MMSignal object specifying the UMTS signal information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_signal_get_umts() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-signal.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="495">A #MMSignal. Do not free the returned value, it belongs to @self.</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="486">A #MMModem.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="setup" c:identifier="mm_modem_signal_setup">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="125">Asynchronously setups the extended signal quality retrieval.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_signal_setup_finish() to get the result of the operation.

See mm_modem_signal_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-signal.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="127">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="128">Rate to use when refreshing signal values.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="130">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="131">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_finish"
              c:identifier="mm_modem_signal_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="105">Finishes an operation started with mm_modem_signal_setup().</doc>
        <source-position filename="mm-modem-signal.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="113">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="107">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="108">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_signal_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_sync"
              c:identifier="mm_modem_signal_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-signal.c"
             line="152">Synchronously setups the extended signal quality retrieval.

The calling thread is blocked until a reply is received. See mm_modem_signal_setup()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-signal.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-signal.c"
               line="164">%TRUE if the setup was successful, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="154">A #MMModemSignal.</doc>
            <type name="ModemSignal" c:type="MMModemSignal*"/>
          </instance-parameter>
          <parameter name="rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="155">Rate to use when refreshing signal values.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-signal.c"
                 line="156">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemSignalProxy" c:type="MmGdbusModemSignalProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemSignalPrivate" c:type="MMModemSignalPrivate*"/>
      </field>
    </class>
    <record name="ModemSignalClass"
            c:type="MMModemSignalClass"
            glib:is-gtype-struct-for="ModemSignal">
      <source-position filename="mm-modem-signal.h" line="63"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemSignalProxyClass"
              c:type="MmGdbusModemSignalProxyClass"/>
      </field>
    </record>
    <record name="ModemSignalPrivate"
            c:type="MMModemSignalPrivate"
            disguised="1">
      <source-position filename="mm-modem-signal.h" line="46"/>
    </record>
    <class name="ModemSimple"
           c:symbol-prefix="modem_simple"
           c:type="MMModemSimple"
           parent="GdbusModemSimpleProxy"
           glib:type-name="MMModemSimple"
           glib:get-type="mm_modem_simple_get_type"
           glib:type-struct="ModemSimpleClass">
      <doc xml:space="preserve"
           filename="mm-modem-simple.h"
           line="50">The #MMModemSimple structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-simple.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemSimple"/>
      <method name="connect" c:identifier="mm_modem_simple_connect">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="157">Asynchronously requests to connect the modem using the given @properties.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_simple_connect_finish() to get the result of the operation.

See mm_modem_simple_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="159">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="160">A #MMSimpleConnectProperties bundle.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="161">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="162">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="163">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="mm_modem_simple_connect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="85">Finishes an operation started with mm_modem_simple_connect().</doc>
        <source-position filename="mm-modem-simple.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="93">A #MMBearer, or %FALSE if @error is set. The returned value must be freed with g_object_ref().</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="87">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="88">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_simple_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="mm_modem_simple_connect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="197">Synchronously requests to connect the modem using the given @properties.

The calling thread is blocked until a reply is received. See mm_modem_simple_connect()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="209">A #MMBearer, or %FALSE if @error is set. The returned value must be freed with g_object_ref().</doc>
          <type name="Bearer" c:type="MMBearer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="199">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="200">A #MMSimpleConnectProperties bundle.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="201">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="mm_modem_simple_disconnect">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="269">Asynchronously requests to disconnect the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_simple_disconnect_finish() to get the result of the operation.

See mm_modem_simple_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="271">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="bearer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="272">Path of the bearer to disconnect, or %NULL to disconnect all connected bearers.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="273">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="274">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="275">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="mm_modem_simple_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="249">Finishes an operation started with mm_modem_simple_disconnect().</doc>
        <source-position filename="mm-modem-simple.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="257">%TRUE if the modem is successfully disconnected, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="251">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="252">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_simple_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_sync"
              c:identifier="mm_modem_simple_disconnect_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="300">Synchronously requests to disconnect the modem.

The calling thread is blocked until a reply is received. See mm_modem_simple_disconnect()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="312">%TRUE if the modem is successfully disconnected, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="302">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="bearer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="303">Path of the bearer to disconnect, or %NULL to disconnect all connected bearers.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="304">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_simple_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="62">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-simple.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="68">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="64">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_simple_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="45">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-simple.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="51">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="47">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="mm_modem_simple_get_status">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="358">Asynchronously requests a compilation of the status of the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_simple_get_status_finish() to get the result of the operation.

See mm_modem_simple_get_status_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="360">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="361">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="362">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="363">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_finish"
              c:identifier="mm_modem_simple_get_status_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="330">Finishes an operation started with mm_modem_simple_get_status().</doc>
        <source-position filename="mm-modem-simple.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="338">A #MMSimpleStatus, or %FALSE if @error is set. The returned value must be freed with g_object_ref().</doc>
          <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="332">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="333">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_simple_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_status_sync"
              c:identifier="mm_modem_simple_get_status_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-simple.c"
             line="386">Synchronously requests a compilation of the status of the modem.

The calling thread is blocked until a reply is received. See mm_modem_simple_get_status()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-simple.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-simple.c"
               line="397">A #MMSimpleStatus, or %FALSE if @error is set. The returned value must be freed with g_object_ref().</doc>
          <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="388">A #MMModemSimple.</doc>
            <type name="ModemSimple" c:type="MMModemSimple*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-simple.c"
                 line="389">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemSimpleProxy" c:type="MmGdbusModemSimpleProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="ModemSimpleClass"
            c:type="MMModemSimpleClass"
            glib:is-gtype-struct-for="ModemSimple">
      <source-position filename="mm-modem-simple.h" line="65"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemSimpleProxyClass"
              c:type="MmGdbusModemSimpleProxyClass"/>
      </field>
    </record>
    <enumeration name="ModemState"
                 glib:type-name="MMModemState"
                 glib:get-type="mm_modem_state_get_type"
                 c:type="MMModemState">
      <member name="failed"
              value="-1"
              c:identifier="MM_MODEM_STATE_FAILED"
              glib:nick="failed">
      </member>
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="initializing"
              value="1"
              c:identifier="MM_MODEM_STATE_INITIALIZING"
              glib:nick="initializing">
      </member>
      <member name="locked"
              value="2"
              c:identifier="MM_MODEM_STATE_LOCKED"
              glib:nick="locked">
      </member>
      <member name="disabled"
              value="3"
              c:identifier="MM_MODEM_STATE_DISABLED"
              glib:nick="disabled">
      </member>
      <member name="disabling"
              value="4"
              c:identifier="MM_MODEM_STATE_DISABLING"
              glib:nick="disabling">
      </member>
      <member name="enabling"
              value="5"
              c:identifier="MM_MODEM_STATE_ENABLING"
              glib:nick="enabling">
      </member>
      <member name="enabled"
              value="6"
              c:identifier="MM_MODEM_STATE_ENABLED"
              glib:nick="enabled">
      </member>
      <member name="searching"
              value="7"
              c:identifier="MM_MODEM_STATE_SEARCHING"
              glib:nick="searching">
      </member>
      <member name="registered"
              value="8"
              c:identifier="MM_MODEM_STATE_REGISTERED"
              glib:nick="registered">
      </member>
      <member name="disconnecting"
              value="9"
              c:identifier="MM_MODEM_STATE_DISCONNECTING"
              glib:nick="disconnecting">
      </member>
      <member name="connecting"
              value="10"
              c:identifier="MM_MODEM_STATE_CONNECTING"
              glib:nick="connecting">
      </member>
      <member name="connected"
              value="11"
              c:identifier="MM_MODEM_STATE_CONNECTED"
              glib:nick="connected">
      </member>
      <function name="get_string" c:identifier="mm_modem_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="258">Gets the nickname string for the #MMModemState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="264">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="260">a MMModemState.</doc>
            <type name="ModemState" c:type="MMModemState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="ModemStateChangeReason"
                 glib:type-name="MMModemStateChangeReason"
                 glib:get-type="mm_modem_state_change_reason_get_type"
                 c:type="MMModemStateChangeReason">
      <member name="unknown"
              value="0"
              c:identifier="MM_MODEM_STATE_CHANGE_REASON_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="user_requested"
              value="1"
              c:identifier="MM_MODEM_STATE_CHANGE_REASON_USER_REQUESTED"
              glib:nick="user-requested">
      </member>
      <member name="suspend"
              value="2"
              c:identifier="MM_MODEM_STATE_CHANGE_REASON_SUSPEND"
              glib:nick="suspend">
      </member>
      <member name="failure"
              value="3"
              c:identifier="MM_MODEM_STATE_CHANGE_REASON_FAILURE"
              glib:nick="failure">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_state_change_reason_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="555">Gets the nickname string for the #MMModemStateChangeReason specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="561">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="557">a MMModemStateChangeReason.</doc>
            <type name="ModemStateChangeReason"
                  c:type="MMModemStateChangeReason"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="ModemStateFailedReason"
                 glib:type-name="MMModemStateFailedReason"
                 glib:get-type="mm_modem_state_failed_reason_get_type"
                 c:type="MMModemStateFailedReason">
      <member name="none"
              value="0"
              c:identifier="MM_MODEM_STATE_FAILED_REASON_NONE"
              glib:nick="none">
      </member>
      <member name="unknown"
              value="1"
              c:identifier="MM_MODEM_STATE_FAILED_REASON_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="sim_missing"
              value="2"
              c:identifier="MM_MODEM_STATE_FAILED_REASON_SIM_MISSING"
              glib:nick="sim-missing">
      </member>
      <member name="sim_error"
              value="3"
              c:identifier="MM_MODEM_STATE_FAILED_REASON_SIM_ERROR"
              glib:nick="sim-error">
      </member>
      <function name="get_string"
                c:identifier="mm_modem_state_failed_reason_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="357">Gets the nickname string for the #MMModemStateFailedReason specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="363">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="359">a MMModemStateFailedReason.</doc>
            <type name="ModemStateFailedReason"
                  c:type="MMModemStateFailedReason"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="ModemTime"
           c:symbol-prefix="modem_time"
           c:type="MMModemTime"
           parent="GdbusModemTimeProxy"
           glib:type-name="MMModemTime"
           glib:get-type="mm_modem_time_get_type"
           glib:type-struct="ModemTimeClass">
      <doc xml:space="preserve"
           filename="mm-modem-time.h"
           line="49">The #MMModemTime structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-time.h" line="64"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemTime"/>
      <method name="dup_path" c:identifier="mm_modem_time_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="69">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-time.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="75">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="71">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_time"
              c:identifier="mm_modem_time_get_network_time">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="117">Asynchronously requests the current network time.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_time_get_network_time_finish() to get the result of the operation.

See mm_modem_time_get_network_time_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-time.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="119">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="120">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="121">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="122">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_time_finish"
              c:identifier="mm_modem_time_get_network_time_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="92">Finishes an operation started with mm_modem_time_get_network_time().</doc>
        <source-position filename="mm-modem-time.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="100">A string containing the network time, or %NULL if @error is set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="94">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="95">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_enable().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_time_sync"
              c:identifier="mm_modem_time_get_network_time_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="145">Synchronously requests the current network time.

The calling thread is blocked until a reply is received. See mm_modem_time_get_network_time()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-time.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="156">A string containing the network time, or %NULL if @error is set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="147">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="148">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_network_timezone"
              c:identifier="mm_modem_time_get_network_timezone">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="223">Gets the network timezone information.

&lt;warning&gt;The values reported by @self are not updated when the values in the
interface change. Instead, the client is expected to call
mm_modem_time_get_network_timezone() again to get a new #MMNetworkTimezone with the
new values.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-time.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="234">A #MMNetworkTimezone that must be freed with g_object_unref() or %NULL if unknown.</doc>
          <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="225">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_time_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="52">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-time.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="58">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="54">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_network_timezone"
              c:identifier="mm_modem_time_peek_network_timezone">
        <doc xml:space="preserve"
             filename="mm-modem-time.c"
             line="247">Gets the network timezone information.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_modem_time_get_network_timezone() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-modem-time.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-time.c"
               line="258">A #MMNetworkTimezone. Do not free the returned value, it belongs to @self.</doc>
          <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-time.c"
                 line="249">A #MMModemTime.</doc>
            <type name="ModemTime" c:type="MMModemTime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemTimeProxy" c:type="MmGdbusModemTimeProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemTimePrivate" c:type="MMModemTimePrivate*"/>
      </field>
    </class>
    <record name="ModemTimeClass"
            c:type="MMModemTimeClass"
            glib:is-gtype-struct-for="ModemTime">
      <source-position filename="mm-modem-time.h" line="64"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemTimeProxyClass"
              c:type="MmGdbusModemTimeProxyClass"/>
      </field>
    </record>
    <record name="ModemTimePrivate" c:type="MMModemTimePrivate" disguised="1">
      <source-position filename="mm-modem-time.h" line="47"/>
    </record>
    <class name="ModemVoice"
           c:symbol-prefix="modem_voice"
           c:type="MMModemVoice"
           parent="GdbusModemVoiceProxy"
           glib:type-name="MMModemVoice"
           glib:get-type="mm_modem_voice_get_type"
           glib:type-struct="ModemVoiceClass">
      <doc xml:space="preserve"
           filename="mm-modem-voice.h"
           line="50">The #MMModemVoice structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-modem-voice.h" line="65"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusModemVoice"/>
      <method name="create_call" c:identifier="mm_modem_voice_create_call">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="363">Asynchronously creates a new #MMCall in the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_voice_create_call_finish() to get the result of the operation.

See mm_modem_voice_create_call_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="365">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="366">A ##MMCallProperties object with the properties to use.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="367">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="368">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="369">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_call_finish"
              c:identifier="mm_modem_voice_create_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="290">Finishes an operation started with mm_modem_voice_create_call().</doc>
        <source-position filename="mm-modem-voice.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="298">A newly created #MMCall, or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Call" c:type="MMCall*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="292">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="293">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_voice_create_call().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_call_sync"
              c:identifier="mm_modem_voice_create_call_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="402">Synchronously creates a new #MMCall in the modem.

The calling thread is blocked until a reply is received. See mm_modem_voice_create_call()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="414">A newly created #MMCall, or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Call" c:type="MMCall*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="404">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="405">A ##MMCallProperties object with the properties to use.</doc>
            <type name="CallProperties" c:type="MMCallProperties*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="406">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_call" c:identifier="mm_modem_voice_delete_call">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="474">Asynchronously deletes a given #MMCall from the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_voice_delete_call_finish() to get the result of the operation.

See mm_modem_voice_delete_call_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="476">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="call" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="477">Path of the #MMCall to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="478">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="479">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="480">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_call_finish"
              c:identifier="mm_modem_voice_delete_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="454">Finishes an operation started with mm_modem_voice_delete_call().</doc>
        <source-position filename="mm-modem-voice.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="462">%TRUE if the call was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="456">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="457">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_voice_delete_call().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_call_sync"
              c:identifier="mm_modem_voice_delete_call_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="505">Synchronously deletes a given #MMCall from the modem.

The calling thread is blocked until a reply is received. See mm_modem_voice_delete_call()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="517">%TRUE if the CALL was deleted, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="507">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="call" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="508">Path of the #MMCall to delete.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="509">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_modem_voice_dup_path">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="63">Gets a copy of the DBus path of the #MMObject object which implements this interface.</doc>
        <source-position filename="mm-modem-voice.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="69">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="65">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_modem_voice_get_path">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="46">Gets the DBus path of the #MMObject which implements this interface.</doc>
        <source-position filename="mm-modem-voice.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="52">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="48">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_calls" c:identifier="mm_modem_voice_list_calls">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="189">Asynchronously lists the #MMCall objects in the modem.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_modem_voice_list_calls_finish() to get the result of the operation.

See mm_modem_voice_list_calls_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="191">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="192">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="193">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="194">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_calls_finish"
              c:identifier="mm_modem_voice_list_calls_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="106">Finishes an operation started with mm_modem_voice_list_calls().</doc>
        <source-position filename="mm-modem-voice.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="114">A list of #MMCall objects, or #NULL if either not found or @error is set. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Call"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="108">A #MMModem.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="109">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_modem_voice_list_calls().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_calls_sync"
              c:identifier="mm_modem_voice_list_calls_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-modem-voice.c"
             line="232">Synchronously lists the #MMCall objects in the modem.

The calling thread is blocked until a reply is received. See mm_modem_voice_list_calls()
for the asynchronous version of this method.</doc>
        <source-position filename="mm-modem-voice.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-modem-voice.c"
               line="243">A list of #MMCall objects, or #NULL if either not found or @error is set. The returned value should be freed with g_list_free_full() using g_object_unref() as #GDestroyNotify function.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Call"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="234">A #MMModemVoice.</doc>
            <type name="ModemVoice" c:type="MMModemVoice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-modem-voice.c"
                 line="235">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemVoiceProxy" c:type="MmGdbusModemVoiceProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModemVoicePrivate" c:type="MMModemVoicePrivate*"/>
      </field>
    </class>
    <record name="ModemVoiceClass"
            c:type="MMModemVoiceClass"
            glib:is-gtype-struct-for="ModemVoice">
      <source-position filename="mm-modem-voice.h" line="65"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusModemVoiceProxyClass"
              c:type="MmGdbusModemVoiceProxyClass"/>
      </field>
    </record>
    <record name="ModemVoicePrivate"
            c:type="MMModemVoicePrivate"
            disguised="1">
      <source-position filename="mm-modem-voice.h" line="48"/>
    </record>
    <class name="NetworkTimezone"
           c:symbol-prefix="network_timezone"
           c:type="MMNetworkTimezone"
           parent="GObject.Object"
           glib:type-name="MMNetworkTimezone"
           glib:get-type="mm_network_timezone_get_type"
           glib:type-struct="NetworkTimezoneClass">
      <doc xml:space="preserve"
           filename="mm-network-timezone.h"
           line="53">The #MMNetworkTimezone structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-network-timezone.h" line="68"/>
      <constructor name="new" c:identifier="mm_network_timezone_new">
        <source-position filename="mm-network-timezone.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_network_timezone_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-network-timezone.h" line="84"/>
        <return-value transfer-ownership="full">
          <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary"
              c:identifier="mm_network_timezone_get_dictionary">
        <source-position filename="mm-network-timezone.h" line="94"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dst_offset"
              c:identifier="mm_network_timezone_get_dst_offset">
        <doc xml:space="preserve"
             filename="mm-network-timezone.c"
             line="71">Gets the timezone offset due to daylight saving time (in minutes) reported by
the network.</doc>
        <source-position filename="mm-network-timezone.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-network-timezone.c"
               line="78">the offset, or %MM_NETWORK_TIMEZONE_OFFSET_UNKNOWN if unknown.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-network-timezone.c"
                 line="73">a #MMNetworkTimezone.</doc>
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_leap_seconds"
              c:identifier="mm_network_timezone_get_leap_seconds">
        <doc xml:space="preserve"
             filename="mm-network-timezone.c"
             line="100">Gets the number of leap seconds (TAI-UTC), as reported by the network.</doc>
        <source-position filename="mm-network-timezone.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-network-timezone.c"
               line="106">the number of leap seconds, or %MM_NETWORK_TIMEZONE_LEAP_SECONDS_UNKNOWN if unknown.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-network-timezone.c"
                 line="102">a #MMNetworkTimezone.</doc>
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset" c:identifier="mm_network_timezone_get_offset">
        <doc xml:space="preserve"
             filename="mm-network-timezone.c"
             line="43">Gets the timezone offset (in minutes) reported by the network.</doc>
        <source-position filename="mm-network-timezone.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-network-timezone.c"
               line="49">the offset, or %MM_NETWORK_TIMEZONE_OFFSET_UNKNOWN if unknown.</doc>
          <type name="gint32" c:type="gint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-network-timezone.c"
                 line="45">a #MMNetworkTimezone.</doc>
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dst_offset"
              c:identifier="mm_network_timezone_set_dst_offset">
        <source-position filename="mm-network-timezone.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
          <parameter name="dst_offset" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_leap_seconds"
              c:identifier="mm_network_timezone_set_leap_seconds">
        <source-position filename="mm-network-timezone.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
          <parameter name="leap_seconds" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset" c:identifier="mm_network_timezone_set_offset">
        <source-position filename="mm-network-timezone.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="NetworkTimezone" c:type="MMNetworkTimezone*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NetworkTimezonePrivate"
              c:type="MMNetworkTimezonePrivate*"/>
      </field>
    </class>
    <record name="NetworkTimezoneClass"
            c:type="MMNetworkTimezoneClass"
            glib:is-gtype-struct-for="NetworkTimezone">
      <source-position filename="mm-network-timezone.h" line="68"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NetworkTimezonePrivate"
            c:type="MMNetworkTimezonePrivate"
            disguised="1">
      <source-position filename="mm-network-timezone.h" line="51"/>
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="MMObject"
           parent="GdbusObjectProxy"
           glib:type-name="MMObject"
           glib:get-type="mm_object_get_type"
           glib:type-struct="ObjectClass">
      <doc xml:space="preserve"
           filename="mm-object.h"
           line="59">The #MMObject structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-object.h" line="74"/>
      <implements name="Gio.DBusObject"/>
      <implements name="GdbusObject"/>
      <method name="dup_path" c:identifier="mm_object_dup_path">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="59">Gets a copy of the DBus path of the #MMObject object.</doc>
        <source-position filename="mm-object.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="65">The DBus path of the #MMObject. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="61">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem" c:identifier="mm_object_get_modem">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="83">Gets the #MMModem instance for the D-Bus interface org.freedesktop.ModemManager1.Modem on @self, if any.</doc>
        <source-position filename="mm-object.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="89">A #MMModem that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="Modem" c:type="MMModem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="85">A #MMModem</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_3gpp" c:identifier="mm_object_get_modem_3gpp">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="127">Gets the #MMModem3gpp instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modem3gpp on @self, if any.</doc>
        <source-position filename="mm-object.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="133">A #MMModem3gpp that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="Modem3gpp" c:type="MMModem3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="129">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_3gpp_ussd"
              c:identifier="mm_object_get_modem_3gpp_ussd">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="163">Gets the #MMModem3gppUssd instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modem3gpp-Ussd on @self, if any.</doc>
        <source-position filename="mm-object.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="169">A #MMModem3gppUssd that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="165">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_cdma" c:identifier="mm_object_get_modem_cdma">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="199">Gets the #MMModemCdma instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.ModemCdma on @self, if any.</doc>
        <source-position filename="mm-object.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="205">A #MMModemCdma that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemCdma" c:type="MMModemCdma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="201">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_firmware"
              c:identifier="mm_object_get_modem_firmware">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="415">Gets the #MMModemFirmware instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Firmware on @self, if any.</doc>
        <source-position filename="mm-object.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="421">A #MMModemFirmware that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemFirmware" c:type="MMModemFirmware*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="417">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_location"
              c:identifier="mm_object_get_modem_location">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="271">Gets the #MMModemLocation instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modemlocation on @self, if any.</doc>
        <source-position filename="mm-object.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="277">A #MMModemLocation that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemLocation" c:type="MMModemLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="273">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_messaging"
              c:identifier="mm_object_get_modem_messaging">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="307">Gets the #MMModemMessaging instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modemmessaging on @self, if any.</doc>
        <source-position filename="mm-object.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="313">A #MMModemMessaging that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemMessaging" c:type="MMModemMessaging*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="309">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_oma" c:identifier="mm_object_get_modem_oma">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="487">Gets the #MMModemOma instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Oma on @self, if any.</doc>
        <source-position filename="mm-object.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="493">A #MMModemOma that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemOma" c:type="MMModemOma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="489">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_signal"
              c:identifier="mm_object_get_modem_signal">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="451">Gets the #MMModemSignal instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Signal on @self, if any.</doc>
        <source-position filename="mm-object.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="457">A #MMModemSignal that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemSignal" c:type="MMModemSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="453">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_simple"
              c:identifier="mm_object_get_modem_simple">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="235">Gets the #MMModemSimple instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modemsimple on @self, if any.</doc>
        <source-position filename="mm-object.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="241">A #MMModemSimple that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemSimple" c:type="MMModemSimple*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="237">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_time" c:identifier="mm_object_get_modem_time">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="379">Gets the #MMModemTime instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Time on @self, if any.</doc>
        <source-position filename="mm-object.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="385">A #MMModemTime that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemTime" c:type="MMModemTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="381">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_voice" c:identifier="mm_object_get_modem_voice">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="343">Gets the #MMModemVoice instance for the D-Bus interface org.freedesktop.ModemManager1.Modem.Modemvoice on @self, if any.</doc>
        <source-position filename="mm-object.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="349">A #MMModemVoice that must be freed with g_object_unref() or %NULL if @self does not implement the interface.</doc>
          <type name="ModemVoice" c:type="MMModemVoice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="345">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="mm_object_get_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="43">Gets the DBus path of the #MMObject object.</doc>
        <source-position filename="mm-object.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="49">The DBus path of the #MMObject object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="45">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem"
              c:identifier="mm_object_peek_modem"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="103">Like mm_object_get_modem() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="111">A #MMModem or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="Modem" c:type="MMModem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="105">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_3gpp"
              c:identifier="mm_object_peek_modem_3gpp"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="143">Like mm_object_get_modem_3gpp() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="151">A #MMModem3gpp or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="Modem3gpp" c:type="MMModem3gpp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="145">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_3gpp_ussd"
              c:identifier="mm_object_peek_modem_3gpp_ussd"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="179">Like mm_object_get_modem_3gpp_ussd() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="187">A #MMModem3gppUssd or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="Modem3gppUssd" c:type="MMModem3gppUssd*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="181">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_cdma"
              c:identifier="mm_object_peek_modem_cdma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="215">Like mm_object_get_modem_cdma() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="223">A #MMModemCdma or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemCdma" c:type="MMModemCdma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="217">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_firmware"
              c:identifier="mm_object_peek_modem_firmware"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="431">Like mm_object_get_modem_firmware() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="439">A #MMModemFirmware or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemFirmware" c:type="MMModemFirmware*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="433">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_location"
              c:identifier="mm_object_peek_modem_location"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="287">Like mm_object_get_modem_location() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="295">A #MMModemLocation or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemLocation" c:type="MMModemLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="289">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_messaging"
              c:identifier="mm_object_peek_modem_messaging"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="323">Like mm_object_get_modem_messaging() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="331">A #MMModemMessaging or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemMessaging" c:type="MMModemMessaging*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="325">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_oma"
              c:identifier="mm_object_peek_modem_oma"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="503">Like mm_object_get_modem_oma() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="511">A #MMModemOma or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemOma" c:type="MMModemOma*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="505">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_signal"
              c:identifier="mm_object_peek_modem_signal"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="467">Like mm_object_get_modem_signal() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="475">A #MMModemSignal or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemSignal" c:type="MMModemSignal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="469">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_simple"
              c:identifier="mm_object_peek_modem_simple"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="251">Like mm_object_get_modem_simple() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="259">A #MMModemSimple or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemSimple" c:type="MMModemSimple*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="253">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_time"
              c:identifier="mm_object_peek_modem_time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="395">Like mm_object_get_modem_time() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="403">A #MMModemTime or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemTime" c:type="MMModemTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="397">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_modem_voice"
              c:identifier="mm_object_peek_modem_voice"
              introspectable="0">
        <doc xml:space="preserve"
             filename="mm-object.c"
             line="359">Like mm_object_get_modem_voice() but doesn't increase the reference count on the returned object.

&lt;warning&gt;It is not safe to use the returned object if you are on another thread than the one where the #MMManager is running.&lt;/warning&gt;</doc>
        <source-position filename="mm-object.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-object.c"
               line="367">A #MMModemVoice or %NULL if @self does not implement the interface. Do not free the returned object, it is owned by @self.</doc>
          <type name="ModemVoice" c:type="MMModemVoice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-object.c"
                 line="361">A #MMObject.</doc>
            <type name="Object" c:type="MMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusObjectProxy" c:type="MmGdbusObjectProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="ObjectClass"
            c:type="MMObjectClass"
            glib:is-gtype-struct-for="Object">
      <source-position filename="mm-object.h" line="74"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusObjectProxyClass" c:type="MmGdbusObjectProxyClass"/>
      </field>
    </record>
    <bitfield name="OmaFeature"
              glib:type-name="MMOmaFeature"
              glib:get-type="mm_oma_feature_get_type"
              c:type="MMOmaFeature">
      <member name="none"
              value="0"
              c:identifier="MM_OMA_FEATURE_NONE"
              glib:nick="none">
      </member>
      <member name="device_provisioning"
              value="1"
              c:identifier="MM_OMA_FEATURE_DEVICE_PROVISIONING"
              glib:nick="device-provisioning">
      </member>
      <member name="prl_update"
              value="2"
              c:identifier="MM_OMA_FEATURE_PRL_UPDATE"
              glib:nick="prl-update">
      </member>
      <member name="hands_free_activation"
              value="4"
              c:identifier="MM_OMA_FEATURE_HANDS_FREE_ACTIVATION"
              glib:nick="hands-free-activation">
      </member>
      <function name="build_string_from_mask"
                c:identifier="mm_oma_feature_build_string_from_mask">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3733">Builds a string containing a comma-separated list of nicknames for
each #MMOmaFeature in @mask.</doc>
        <source-position filename="generated/mm-enums-types.h" line="536"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3740">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3735">bitmask of MMOmaFeature values.</doc>
            <type name="OmaFeature" c:type="MMOmaFeature"/>
          </parameter>
        </parameters>
      </function>
    </bitfield>
    <record name="OmaPendingNetworkInitiatedSession"
            c:type="MMOmaPendingNetworkInitiatedSession">
      <doc xml:space="preserve"
           filename="mm-helper-types.h"
           line="62">#MMOmaPendingNetworkInitiatedSession is a simple struct specifying the
information available for a pending network-initiated OMA session.</doc>
      <source-position filename="mm-helper-types.h" line="74"/>
      <field name="session_type" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="64">A #MMOmaSessionType.</doc>
        <type name="OmaSessionType" c:type="MMOmaSessionType"/>
      </field>
      <field name="session_id" writable="1">
        <doc xml:space="preserve"
             filename="mm-helper-types.h"
             line="65">Unique ID of the network-initiated OMA session.</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <enumeration name="OmaSessionState"
                 glib:type-name="MMOmaSessionState"
                 glib:get-type="mm_oma_session_state_get_type"
                 c:type="MMOmaSessionState">
      <member name="failed"
              value="-1"
              c:identifier="MM_OMA_SESSION_STATE_FAILED"
              glib:nick="failed">
      </member>
      <member name="unknown"
              value="0"
              c:identifier="MM_OMA_SESSION_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="started"
              value="1"
              c:identifier="MM_OMA_SESSION_STATE_STARTED"
              glib:nick="started">
      </member>
      <member name="retrying"
              value="2"
              c:identifier="MM_OMA_SESSION_STATE_RETRYING"
              glib:nick="retrying">
      </member>
      <member name="connecting"
              value="3"
              c:identifier="MM_OMA_SESSION_STATE_CONNECTING"
              glib:nick="connecting">
      </member>
      <member name="connected"
              value="4"
              c:identifier="MM_OMA_SESSION_STATE_CONNECTED"
              glib:nick="connected">
      </member>
      <member name="authenticated"
              value="5"
              c:identifier="MM_OMA_SESSION_STATE_AUTHENTICATED"
              glib:nick="authenticated">
      </member>
      <member name="mdn_downloaded"
              value="10"
              c:identifier="MM_OMA_SESSION_STATE_MDN_DOWNLOADED"
              glib:nick="mdn-downloaded">
      </member>
      <member name="msid_downloaded"
              value="11"
              c:identifier="MM_OMA_SESSION_STATE_MSID_DOWNLOADED"
              glib:nick="msid-downloaded">
      </member>
      <member name="prl_downloaded"
              value="12"
              c:identifier="MM_OMA_SESSION_STATE_PRL_DOWNLOADED"
              glib:nick="prl-downloaded">
      </member>
      <member name="mip_profile_downloaded"
              value="13"
              c:identifier="MM_OMA_SESSION_STATE_MIP_PROFILE_DOWNLOADED"
              glib:nick="mip-profile-downloaded">
      </member>
      <member name="completed"
              value="20"
              c:identifier="MM_OMA_SESSION_STATE_COMPLETED"
              glib:nick="completed">
      </member>
      <function name="get_string"
                c:identifier="mm_oma_session_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3920">Gets the nickname string for the #MMOmaSessionState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="562"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3926">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3922">a MMOmaSessionState.</doc>
            <type name="OmaSessionState" c:type="MMOmaSessionState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="OmaSessionStateFailedReason"
                 glib:type-name="MMOmaSessionStateFailedReason"
                 glib:get-type="mm_oma_session_state_failed_reason_get_type"
                 c:type="MMOmaSessionStateFailedReason">
      <member name="unknown"
              value="0"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="network_unavailable"
              value="1"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_NETWORK_UNAVAILABLE"
              glib:nick="network-unavailable">
      </member>
      <member name="server_unavailable"
              value="2"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_SERVER_UNAVAILABLE"
              glib:nick="server-unavailable">
      </member>
      <member name="authentication_failed"
              value="3"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_AUTHENTICATION_FAILED"
              glib:nick="authentication-failed">
      </member>
      <member name="max_retry_exceeded"
              value="4"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_MAX_RETRY_EXCEEDED"
              glib:nick="max-retry-exceeded">
      </member>
      <member name="session_cancelled"
              value="5"
              c:identifier="MM_OMA_SESSION_STATE_FAILED_REASON_SESSION_CANCELLED"
              glib:nick="session-cancelled">
      </member>
      <function name="get_string"
                c:identifier="mm_oma_session_state_failed_reason_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4021">Gets the nickname string for the #MMOmaSessionStateFailedReason specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4027">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="4023">a MMOmaSessionStateFailedReason.</doc>
            <type name="OmaSessionStateFailedReason"
                  c:type="MMOmaSessionStateFailedReason"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="OmaSessionType"
                 glib:type-name="MMOmaSessionType"
                 glib:get-type="mm_oma_session_type_get_type"
                 c:type="MMOmaSessionType">
      <member name="unknown"
              value="0"
              c:identifier="MM_OMA_SESSION_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="client_initiated_device_configure"
              value="10"
              c:identifier="MM_OMA_SESSION_TYPE_CLIENT_INITIATED_DEVICE_CONFIGURE"
              glib:nick="client-initiated-device-configure">
      </member>
      <member name="client_initiated_prl_update"
              value="11"
              c:identifier="MM_OMA_SESSION_TYPE_CLIENT_INITIATED_PRL_UPDATE"
              glib:nick="client-initiated-prl-update">
      </member>
      <member name="client_initiated_hands_free_activation"
              value="12"
              c:identifier="MM_OMA_SESSION_TYPE_CLIENT_INITIATED_HANDS_FREE_ACTIVATION"
              glib:nick="client-initiated-hands-free-activation">
      </member>
      <member name="network_initiated_device_configure"
              value="20"
              c:identifier="MM_OMA_SESSION_TYPE_NETWORK_INITIATED_DEVICE_CONFIGURE"
              glib:nick="network-initiated-device-configure">
      </member>
      <member name="network_initiated_prl_update"
              value="21"
              c:identifier="MM_OMA_SESSION_TYPE_NETWORK_INITIATED_PRL_UPDATE"
              glib:nick="network-initiated-prl-update">
      </member>
      <member name="device_initiated_prl_update"
              value="30"
              c:identifier="MM_OMA_SESSION_TYPE_DEVICE_INITIATED_PRL_UPDATE"
              glib:nick="device-initiated-prl-update">
      </member>
      <member name="device_initiated_hands_free_activation"
              value="31"
              c:identifier="MM_OMA_SESSION_TYPE_DEVICE_INITIATED_HANDS_FREE_ACTIVATION"
              glib:nick="device-initiated-hands-free-activation">
      </member>
      <function name="get_string"
                c:identifier="mm_oma_session_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3813">Gets the nickname string for the #MMOmaSessionType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="547"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3819">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="3815">a MMOmaSessionType.</doc>
            <type name="OmaSessionType" c:type="MMOmaSessionType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="Pco"
           c:symbol-prefix="pco"
           c:type="MMPco"
           parent="GObject.Object"
           glib:type-name="MMPco"
           glib:get-type="mm_pco_get_type"
           glib:type-struct="PcoClass">
      <doc xml:space="preserve"
           filename="mm-pco.h"
           line="39">The #MMPco structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-pco.h" line="54"/>
      <constructor name="new" c:identifier="mm_pco_new">
        <source-position filename="mm-pco.h" line="75"/>
        <return-value transfer-ownership="full">
          <type name="Pco" c:type="MMPco*"/>
        </return-value>
      </constructor>
      <function name="from_variant"
                c:identifier="mm_pco_from_variant"
                throws="1">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="161">Creates a new #MMPco object with the values exposed in
the variant.</doc>
        <source-position filename="mm-pco.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="169">A #MMPco or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Pco" c:type="MMPco*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="163">A variant with the PCO information.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_add" c:identifier="mm_pco_list_add">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="257">Adds a #MMPco to a given PCO list. #MMPco objects stored in the order of
their session ID. An existing PCO with the same session ID is overwritten
with the new value.</doc>
        <source-position filename="mm-pco.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="266">the new start of an updated or newly allocated #GList of #MMPco.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Pco"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="pco_list" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="259">a #GList of #MMPco.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Pco"/>
            </type>
          </parameter>
          <parameter name="pco" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="260">a #MMPco to add to the given list.</doc>
            <type name="Pco" c:type="MMPco*"/>
          </parameter>
        </parameters>
      </function>
      <function name="list_free" c:identifier="mm_pco_list_free">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="245">Frees all of the memory used by a #GList of #MMPco.</doc>
        <source-position filename="mm-pco.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pco_list" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="247">a #GList of #MMPco.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Pco"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <method name="get_data" c:identifier="mm_pco_get_data">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="128">Gets the PCO data in raw bytes.</doc>
        <source-position filename="mm-pco.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="135">the PCO data, or %NULL if it doesn't contain any.</doc>
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="130">a #MMPco.</doc>
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
          <parameter name="data_size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="131">Size of the PCO data, if any given.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_session_id" c:identifier="mm_pco_get_session_id">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="73">Gets the session ID associated with the PCO.</doc>
        <source-position filename="mm-pco.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="79">the session ID.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="75">a #MMPco.</doc>
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_complete" c:identifier="mm_pco_is_complete">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="100">Gets the complete flag that indicates whether the PCO data contains the
complete PCO structure received from the network.</doc>
        <source-position filename="mm-pco.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="107">%TRUE if the PCO data contains the complete PCO structure, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="102">a #MMPco.</doc>
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_complete" c:identifier="mm_pco_set_complete">
        <source-position filename="mm-pco.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
          <parameter name="is_complete" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="mm_pco_set_data">
        <source-position filename="mm-pco.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="data_size" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_session_id" c:identifier="mm_pco_set_session_id">
        <source-position filename="mm-pco.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
          <parameter name="session_id" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="mm_pco_to_variant">
        <doc xml:space="preserve"
             filename="mm-pco.c"
             line="206">Gets a GVariant representation with signature "(ubay)" of @self.</doc>
        <source-position filename="mm-pco.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-pco.c"
               line="212">A #GVariant representation of the #MMPco object. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-pco.c"
                 line="208">a #MMPco.</doc>
            <type name="Pco" c:type="MMPco*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PcoPrivate" c:type="MMPcoPrivate*"/>
      </field>
    </class>
    <record name="PcoClass" c:type="MMPcoClass" glib:is-gtype-struct-for="Pco">
      <source-position filename="mm-pco.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PcoPrivate" c:type="MMPcoPrivate" disguised="1">
      <source-position filename="mm-pco.h" line="37"/>
    </record>
    <constant name="SIMPLE_PROPERTY_3GPP_OPERATOR_CODE"
              value="m3gpp-operator-code"
              c:type="MM_SIMPLE_PROPERTY_3GPP_OPERATOR_CODE">
      <source-position filename="mm-simple-status.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_3GPP_OPERATOR_NAME"
              value="m3gpp-operator-name"
              c:type="MM_SIMPLE_PROPERTY_3GPP_OPERATOR_NAME">
      <source-position filename="mm-simple-status.h" line="91"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE"
              value="m3gpp-registration-state"
              c:type="MM_SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE">
      <source-position filename="mm-simple-status.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE"
              value="m3gpp-subscription-state"
              c:type="MM_SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE">
      <source-position filename="mm-simple-status.h" line="92"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES"
              value="access-technologies"
              c:type="MM_SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES">
      <source-position filename="mm-simple-status.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE"
              value="cdma-cdma1x-registration-state"
              c:type="MM_SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE">
      <source-position filename="mm-simple-status.h" line="94"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE"
              value="cdma-evdo-registration-state"
              c:type="MM_SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE">
      <source-position filename="mm-simple-status.h" line="95"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_CDMA_NID"
              value="cdma-nid"
              c:type="MM_SIMPLE_PROPERTY_CDMA_NID">
      <source-position filename="mm-simple-status.h" line="97"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_CDMA_SID"
              value="cdma-sid"
              c:type="MM_SIMPLE_PROPERTY_CDMA_SID">
      <source-position filename="mm-simple-status.h" line="96"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_CURRENT_BANDS"
              value="current-bands"
              c:type="MM_SIMPLE_PROPERTY_CURRENT_BANDS">
      <source-position filename="mm-simple-status.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_SIGNAL_QUALITY"
              value="signal-quality"
              c:type="MM_SIMPLE_PROPERTY_SIGNAL_QUALITY">
      <source-position filename="mm-simple-status.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIMPLE_PROPERTY_STATE"
              value="state"
              c:type="MM_SIMPLE_PROPERTY_STATE">
      <source-position filename="mm-simple-status.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_METHOD_CHANGEPIN"
              value="ChangePin"
              c:type="MM_SIM_METHOD_CHANGEPIN">
      <source-position filename="../include/ModemManager-names.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_METHOD_ENABLEPIN"
              value="EnablePin"
              c:type="MM_SIM_METHOD_ENABLEPIN">
      <source-position filename="../include/ModemManager-names.h" line="85"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_METHOD_SENDPIN"
              value="SendPin"
              c:type="MM_SIM_METHOD_SENDPIN">
      <source-position filename="../include/ModemManager-names.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_METHOD_SENDPUK"
              value="SendPuk"
              c:type="MM_SIM_METHOD_SENDPUK">
      <source-position filename="../include/ModemManager-names.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_PROPERTY_IMSI"
              value="Imsi"
              c:type="MM_SIM_PROPERTY_IMSI">
      <source-position filename="../include/ModemManager-names.h" line="88"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_PROPERTY_OPERATORIDENTIFIER"
              value="OperatorIdentifier"
              c:type="MM_SIM_PROPERTY_OPERATORIDENTIFIER">
      <source-position filename="../include/ModemManager-names.h" line="89"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_PROPERTY_OPERATORNAME"
              value="OperatorName"
              c:type="MM_SIM_PROPERTY_OPERATORNAME">
      <source-position filename="../include/ModemManager-names.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SIM_PROPERTY_SIMIDENTIFIER"
              value="SimIdentifier"
              c:type="MM_SIM_PROPERTY_SIMIDENTIFIER">
      <source-position filename="../include/ModemManager-names.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_METHOD_SEND" value="Send" c:type="MM_SMS_METHOD_SEND">
      <source-position filename="../include/ModemManager-names.h" line="110"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_METHOD_STORE"
              value="Store"
              c:type="MM_SMS_METHOD_STORE">
      <source-position filename="../include/ModemManager-names.h" line="111"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_CLASS"
              value="Class"
              c:type="MM_SMS_PROPERTY_CLASS">
      <source-position filename="../include/ModemManager-names.h" line="119"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_DATA"
              value="Data"
              c:type="MM_SMS_PROPERTY_DATA">
      <source-position filename="../include/ModemManager-names.h" line="116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_DELIVERYREPORTREQUEST"
              value="DeliveryReportRequest"
              c:type="MM_SMS_PROPERTY_DELIVERYREPORTREQUEST">
      <source-position filename="../include/ModemManager-names.h" line="122"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_DELIVERYSTATE"
              value="DeliveryState"
              c:type="MM_SMS_PROPERTY_DELIVERYSTATE">
      <source-position filename="../include/ModemManager-names.h" line="126"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_DISCHARGETIMESTAMP"
              value="DischargeTimestamp"
              c:type="MM_SMS_PROPERTY_DISCHARGETIMESTAMP">
      <source-position filename="../include/ModemManager-names.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_MESSAGEREFERENCE"
              value="MessageReference"
              c:type="MM_SMS_PROPERTY_MESSAGEREFERENCE">
      <source-position filename="../include/ModemManager-names.h" line="123"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_NUMBER"
              value="Number"
              c:type="MM_SMS_PROPERTY_NUMBER">
      <source-position filename="../include/ModemManager-names.h" line="114"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_PDUTYPE"
              value="PduType"
              c:type="MM_SMS_PROPERTY_PDUTYPE">
      <source-position filename="../include/ModemManager-names.h" line="113"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_SERVICECATEGORY"
              value="ServiceCategory"
              c:type="MM_SMS_PROPERTY_SERVICECATEGORY">
      <source-position filename="../include/ModemManager-names.h" line="121"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_SMSC"
              value="SMSC"
              c:type="MM_SMS_PROPERTY_SMSC">
      <source-position filename="../include/ModemManager-names.h" line="117"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_STATE"
              value="State"
              c:type="MM_SMS_PROPERTY_STATE">
      <source-position filename="../include/ModemManager-names.h" line="112"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_STORAGE"
              value="Storage"
              c:type="MM_SMS_PROPERTY_STORAGE">
      <source-position filename="../include/ModemManager-names.h" line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_TELESERVICEID"
              value="TeleserviceId"
              c:type="MM_SMS_PROPERTY_TELESERVICEID">
      <source-position filename="../include/ModemManager-names.h" line="120"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_TEXT"
              value="Text"
              c:type="MM_SMS_PROPERTY_TEXT">
      <source-position filename="../include/ModemManager-names.h" line="115"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_TIMESTAMP"
              value="Timestamp"
              c:type="MM_SMS_PROPERTY_TIMESTAMP">
      <source-position filename="../include/ModemManager-names.h" line="124"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SMS_PROPERTY_VALIDITY"
              value="Validity"
              c:type="MM_SMS_PROPERTY_VALIDITY">
      <source-position filename="../include/ModemManager-names.h" line="118"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="SerialError"
                 glib:type-name="MMSerialError"
                 glib:get-type="mm_serial_error_get_type"
                 c:type="MMSerialError"
                 glib:error-domain="mm_serial_error_quark">
      <member name="Unknown"
              value="0"
              c:identifier="MM_SERIAL_ERROR_UNKNOWN"
              glib:nick="Unknown">
      </member>
      <member name="OpenFailed"
              value="1"
              c:identifier="MM_SERIAL_ERROR_OPEN_FAILED"
              glib:nick="OpenFailed">
      </member>
      <member name="SendFailed"
              value="2"
              c:identifier="MM_SERIAL_ERROR_SEND_FAILED"
              glib:nick="SendFailed">
      </member>
      <member name="ResponseTimeout"
              value="3"
              c:identifier="MM_SERIAL_ERROR_RESPONSE_TIMEOUT"
              glib:nick="ResponseTimeout">
      </member>
      <member name="OpenFailedNoDevice"
              value="4"
              c:identifier="MM_SERIAL_ERROR_OPEN_FAILED_NO_DEVICE"
              glib:nick="OpenFailedNoDevice">
      </member>
      <member name="FlashFailed"
              value="5"
              c:identifier="MM_SERIAL_ERROR_FLASH_FAILED"
              glib:nick="FlashFailed">
      </member>
      <member name="NotOpen"
              value="6"
              c:identifier="MM_SERIAL_ERROR_NOT_OPEN"
              glib:nick="NotOpen">
      </member>
      <member name="ParseFailed"
              value="7"
              c:identifier="MM_SERIAL_ERROR_PARSE_FAILED"
              glib:nick="ParseFailed">
      </member>
      <member name="FrameNotFound"
              value="8"
              c:identifier="MM_SERIAL_ERROR_FRAME_NOT_FOUND"
              glib:nick="FrameNotFound">
      </member>
      <function name="quark" c:identifier="mm_serial_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Signal"
           c:symbol-prefix="signal"
           c:type="MMSignal"
           parent="GObject.Object"
           glib:type-name="MMSignal"
           glib:get-type="mm_signal_get_type"
           glib:type-struct="SignalClass">
      <doc xml:space="preserve"
           filename="mm-signal.h"
           line="46">The #MMSignal structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-signal.h" line="61"/>
      <constructor name="new" c:identifier="mm_signal_new">
        <source-position filename="mm-signal.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_signal_new_from_dictionary"
                   throws="1">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="393">Creates a new #MMSignal object with the values exposed in
the dictionary.</doc>
        <source-position filename="mm-signal.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="401">A #MMSignal or %NULL if @error is set. The returned value should be freed with g_object_unref().</doc>
          <type name="Signal" c:type="MMSignal*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="395">A variant dictionary with the signal information.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_dictionary" c:identifier="mm_signal_get_dictionary">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="284">Gets a variant dictionary with the contents of @self.</doc>
        <source-position filename="mm-signal.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="290">A dictionary with the signal values. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="286">A #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ecio" c:identifier="mm_signal_get_ecio">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="110">Gets the Ec/Io, in dB.

Only applicable to CDMA1x, CDMA EV-DO and UMTS (WCDMA).</doc>
        <source-position filename="mm-signal.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="118">the ECIO, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="112">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_io" c:identifier="mm_signal_get_io">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="168">Gets the Io, in dBm.

Only applicable to CDMA EV-DO.</doc>
        <source-position filename="mm-signal.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="176">the Io, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="170">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rscp" c:identifier="mm_signal_get_rscp">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="83">Gets the RSCP (Received Signal Code Power), in dBm.</doc>
        <source-position filename="mm-signal.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="89">the RSCP, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="85">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsrp" c:identifier="mm_signal_get_rsrp">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="197">Gets the RSRP (Reference Signal Received Power), in dBm.

Only applicable to LTE.</doc>
        <source-position filename="mm-signal.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="205">the RSRP, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="199">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsrq" c:identifier="mm_signal_get_rsrq">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="226">Gets the RSRQ (Reference Signal Received Quality), in dB.

Only applicable to LTE.</doc>
        <source-position filename="mm-signal.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="234">the RSRQ, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="228">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rssi" c:identifier="mm_signal_get_rssi">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="56">Gets the RSSI (Received Signal Strength Indication), in dBm.</doc>
        <source-position filename="mm-signal.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="62">the RSSI, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="58">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sinr" c:identifier="mm_signal_get_sinr">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="139">Gets the SINR level, in dB.

Only applicable to CDMA EV-DO.</doc>
        <source-position filename="mm-signal.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="147">the SINR, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="141">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snr" c:identifier="mm_signal_get_snr">
        <doc xml:space="preserve"
             filename="mm-signal.c"
             line="255">Gets the S/R ration, in dB.

Only applicable to LTE.</doc>
        <source-position filename="mm-signal.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-signal.c"
               line="263">the S/R ratio, or %MM_SIGNAL_UNKNOWN if unknown.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-signal.c"
                 line="257">a #MMSignal.</doc>
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ecio" c:identifier="mm_signal_set_ecio">
        <source-position filename="mm-signal.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_io" c:identifier="mm_signal_set_io">
        <source-position filename="mm-signal.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rscp" c:identifier="mm_signal_set_rscp">
        <source-position filename="mm-signal.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rsrp" c:identifier="mm_signal_set_rsrp">
        <source-position filename="mm-signal.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rsrq" c:identifier="mm_signal_set_rsrq">
        <source-position filename="mm-signal.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rssi" c:identifier="mm_signal_set_rssi">
        <source-position filename="mm-signal.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sinr" c:identifier="mm_signal_set_sinr">
        <source-position filename="mm-signal.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snr" c:identifier="mm_signal_set_snr">
        <source-position filename="mm-signal.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Signal" c:type="MMSignal*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SignalPrivate" c:type="MMSignalPrivate*"/>
      </field>
    </class>
    <record name="SignalClass"
            c:type="MMSignalClass"
            glib:is-gtype-struct-for="Signal">
      <source-position filename="mm-signal.h" line="61"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SignalPrivate" c:type="MMSignalPrivate" disguised="1">
      <source-position filename="mm-signal.h" line="44"/>
    </record>
    <class name="Sim"
           c:symbol-prefix="sim"
           c:type="MMSim"
           parent="GdbusSimProxy"
           glib:type-name="MMSim"
           glib:get-type="mm_sim_get_type"
           glib:type-struct="SimClass">
      <doc xml:space="preserve"
           filename="mm-sim.h"
           line="47">The #MMSim structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-sim.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusSim"/>
      <method name="change_pin" c:identifier="mm_sim_change_pin">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="602">Asynchronously changes the PIN code in the SIM card.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sim_change_pin_finish() to get the result of the operation.

See mm_sim_change_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sim.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="604">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="605">The current PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="606">The new PIN code to be set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="607">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="608">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="609">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_pin_finish"
              c:identifier="mm_sim_change_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="582">Finishes an operation started with mm_sim_change_pin().</doc>
        <source-position filename="mm-sim.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="590">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="584">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="585">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sim_change_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_pin_sync"
              c:identifier="mm_sim_change_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="636">Synchronously changes the PIN code in the SIM card.

The calling thread is blocked until a reply is received.
See mm_sim_change_pin() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sim.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="649">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="638">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="old_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="639">The current PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="640">The new PIN code to be set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="641">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_pin" c:identifier="mm_sim_disable_pin">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="519">Asynchronously disables requesting the PIN code in the SIM card.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sim_disable_pin_finish() to get the result of the operation.

See mm_sim_disable_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sim.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="521">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="522">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="523">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="524">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="525">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_pin_finish"
              c:identifier="mm_sim_disable_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="499">Finishes an operation started with mm_sim_disable_pin().</doc>
        <source-position filename="mm-sim.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="507">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="501">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="502">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sim_disable_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_pin_sync"
              c:identifier="mm_sim_disable_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="551">Synchronously disables requesting the PIN code in the SIM card.

The calling thread is blocked until a reply is received.
See mm_sim_disable_pin() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sim.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="563">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="553">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="554">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="555">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_identifier" c:identifier="mm_sim_dup_identifier">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="106">Gets a copy of the unique SIM identifier of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="112">The unique identifier of the #MMSim object, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="108">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_imsi" c:identifier="mm_sim_dup_imsi">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="147">Gets a copy of the International Mobile Subscriber Identity (IMSI) of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="153">The IMSI of the #MMSim object, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="149">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_identifier"
              c:identifier="mm_sim_dup_operator_identifier">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="188">Gets a copy of the Operator Identifier of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="194">The Operator Identifier of the #MMSim object, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="190">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operator_name" c:identifier="mm_sim_dup_operator_name">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="229">Gets a copy of the Operator Name of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="235">The Operator Name of the #MMSim object, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="231">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_sim_dup_path">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="60">Gets a copy of the DBus path of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="66">The DBus path of the #MMSim object. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="62">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_pin" c:identifier="mm_sim_enable_pin">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="436">Asynchronously enables requesting the PIN code in the SIM card.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sim_enable_pin_finish() to get the result of the operation.

See mm_sim_enable_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sim.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="438">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="439">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="440">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="441">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="442">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_pin_finish"
              c:identifier="mm_sim_enable_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="416">Finishes an operation started with mm_sim_enable_pin().</doc>
        <source-position filename="mm-sim.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="424">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="418">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="419">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sim_enable_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_pin_sync"
              c:identifier="mm_sim_enable_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="468">Synchronously enables requesting the PIN code in the SIM card.

The calling thread is blocked until a reply is received.
See mm_sim_enable_pin() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sim.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="480">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="470">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="471">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="472">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_identifier" c:identifier="mm_sim_get_identifier">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="84">Gets the unique SIM identifier of the #MMSim object.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sim_dup_identifier() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sim.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="95">The unique identifier of the #MMSim object, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="86">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_imsi" c:identifier="mm_sim_get_imsi">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="125">Gets the International Mobile Subscriber Identity (IMSI) of the #MMSim object.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sim_dup_imsi() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sim.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="136">The IMSI of the #MMSim object, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="127">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_identifier"
              c:identifier="mm_sim_get_operator_identifier">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="166">Gets the Operator Identifier of the #MMSim object.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sim_dup_operator_identifier() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sim.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="177">The Operator Identifier of the #MMSim object, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="168">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_name" c:identifier="mm_sim_get_operator_name">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="207">Gets the Operator Name of the #MMSim object.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sim_dup_operator_name() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sim.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="218">The Operator Name of the #MMSim object, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="209">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_sim_get_path">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="43">Gets the DBus path of the #MMSim object.</doc>
        <source-position filename="mm-sim.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="49">The DBus path of the #MMSim object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="45">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_pin" c:identifier="mm_sim_send_pin">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="268">Asynchronously sends the PIN code to the SIM card.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sim_send_pin_finish() to get the result of the operation.

See mm_sim_send_pin_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sim.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="270">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="271">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="272">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="273">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="274">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_pin_finish"
              c:identifier="mm_sim_send_pin_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="248">Finishes an operation started with mm_sim_send_pin().</doc>
        <source-position filename="mm-sim.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="256">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="250">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="251">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sim_send_pin().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_pin_sync"
              c:identifier="mm_sim_send_pin_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="299">Synchronously sends the PIN to the SIM card.

The calling thread is blocked until a reply is received.
See mm_sim_send_pin() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sim.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="311">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="301">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="302">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="303">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_puk" c:identifier="mm_sim_send_puk">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="349">Asynchronously sends the PUK code to the SIM card.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sim_send_puk_finish() to get the result of the operation.

See mm_sim_send_puk_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sim.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="351">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="puk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="352">The PUK code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="353">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="354">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="355">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="356">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_puk_finish"
              c:identifier="mm_sim_send_puk_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="329">Finishes an operation started with mm_sim_send_puk().</doc>
        <source-position filename="mm-sim.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="337">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="331">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="332">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sim_send_puk().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_puk_sync"
              c:identifier="mm_sim_send_puk_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sim.c"
             line="383">Synchronously sends the PUK to the SIM card.

The calling thread is blocked until a reply is received.
See mm_sim_send_puk() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sim.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sim.c"
               line="396">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="385">A #MMSim.</doc>
            <type name="Sim" c:type="MMSim*"/>
          </instance-parameter>
          <parameter name="puk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="386">The PUK code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="387">The PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sim.c"
                 line="388">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusSimProxy" c:type="MmGdbusSimProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="SimClass" c:type="MMSimClass" glib:is-gtype-struct-for="Sim">
      <source-position filename="mm-sim.h" line="62"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusSimProxyClass" c:type="MmGdbusSimProxyClass"/>
      </field>
    </record>
    <class name="SimpleConnectProperties"
           c:symbol-prefix="simple_connect_properties"
           c:type="MMSimpleConnectProperties"
           parent="GObject.Object"
           glib:type-name="MMSimpleConnectProperties"
           glib:get-type="mm_simple_connect_properties_get_type"
           glib:type-struct="SimpleConnectPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-simple-connect-properties.h"
           line="41">The #MMSimpleConnectProperties structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-simple-connect-properties.h" line="56"/>
      <constructor name="new" c:identifier="mm_simple_connect_properties_new">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="554">Creates a new empty #MMSimpleConnectProperties.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="559">a #MMSimpleConnectProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="SimpleConnectProperties"
                c:type="MMSimpleConnectProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_simple_connect_properties_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-simple-connect-properties.h" line="100"/>
        <return-value transfer-ownership="full">
          <type name="SimpleConnectProperties"
                c:type="MMSimpleConnectProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_simple_connect_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-simple-connect-properties.h" line="98"/>
        <return-value transfer-ownership="full">
          <type name="SimpleConnectProperties"
                c:type="MMSimpleConnectProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_allow_roaming"
              c:identifier="mm_simple_connect_properties_get_allow_roaming">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="312">Checks whether roaming is allowed in the connection.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="318">%TRUE if roaming is allowed, %FALSE otherwise..</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="314">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allowed_auth"
              c:identifier="mm_simple_connect_properties_get_allowed_auth">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="171">Gets the authentication methods allowed in the connection.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="177">a bitmask of #MMBearerAllowedAuth values, or %MM_BEARER_ALLOWED_AUTH_UNKNOWN to request the modem-default method.</doc>
          <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="173">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apn"
              c:identifier="mm_simple_connect_properties_get_apn">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="137">Gets the name of the access point to use when connecting.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="143">the access point, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="139">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bearer_properties"
              c:identifier="mm_simple_connect_properties_get_bearer_properties">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="366">Returns the bearer properties of @self.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="372">a #MMBearerProperties</doc>
          <type name="BearerProperties" c:type="MMBearerProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="368">a #MMSimpleConnectProperties:</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_simple_connect_properties_get_dictionary">
        <source-position filename="mm-simple-connect-properties.h" line="105"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_type"
              c:identifier="mm_simple_connect_properties_get_ip_type">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="276">Sets the IP type to use.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="282">a #MMBearerIpFamily.</doc>
          <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="278">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="mm_simple_connect_properties_get_number">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="348">Gets the number to use when performing the connection.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="354">the number, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="350">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operator_id"
              c:identifier="mm_simple_connect_properties_get_operator_id">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="102">Gets the ID of the network to which register before connecting.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="108">the operator ID, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="104">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="mm_simple_connect_properties_get_password">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="241">Gets the password used to authenticate with the access point.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="247">the password, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="243">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pin"
              c:identifier="mm_simple_connect_properties_get_pin">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="67">Gets the PIN code to use when unlocking the modem.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="73">the PIN, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="69">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user"
              c:identifier="mm_simple_connect_properties_get_user">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="206">Gets the username used to authenticate with the access point.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-connect-properties.c"
               line="212">the username, or #NULL if not set. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="208">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_roaming"
              c:identifier="mm_simple_connect_properties_set_allow_roaming">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="294">Sets the flag to indicate whether roaming is allowed or not in the
connection.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="296">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="allow_roaming" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="297">boolean value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allowed_auth"
              c:identifier="mm_simple_connect_properties_set_allowed_auth">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="155">Sets the authentication method to use.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="157">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="allowed_auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="158">a bitmask of #MMBearerAllowedAuth values. %MM_BEARER_ALLOWED_AUTH_UNKNOWN may be given to request the modem-default method.</doc>
            <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apn"
              c:identifier="mm_simple_connect_properties_set_apn">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="120">Sets the name of the access point to use when connecting.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="122">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="apn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="123">Name of the access point.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ip_type"
              c:identifier="mm_simple_connect_properties_set_ip_type">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="259">Sets the IP type to use.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="261">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="ip_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="262">a #MMBearerIpFamily.</doc>
            <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="mm_simple_connect_properties_set_number">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="331">Sets the number to use when performing the connection.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="333">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="334">the number.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operator_id"
              c:identifier="mm_simple_connect_properties_set_operator_id">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="85">Sets the ID of the network to which register before connecting.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="87">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="operator_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="88">operator ID, given as MCC/MNC.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="mm_simple_connect_properties_set_password">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="224">Sets the password used to authenticate with the access point.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="226">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="227">the password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin"
              c:identifier="mm_simple_connect_properties_set_pin">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="50">Sets the PIN code to use when unlocking the modem.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="52">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="pin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="53">PIN code.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user"
              c:identifier="mm_simple_connect_properties_set_user">
        <doc xml:space="preserve"
             filename="mm-simple-connect-properties.c"
             line="189">Sets the username used to authenticate with the access point.</doc>
        <source-position filename="mm-simple-connect-properties.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="191">a #MMSimpleConnectProperties.</doc>
            <type name="SimpleConnectProperties"
                  c:type="MMSimpleConnectProperties*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-connect-properties.c"
                 line="192">the username</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleConnectPropertiesPrivate"
              c:type="MMSimpleConnectPropertiesPrivate*"/>
      </field>
    </class>
    <record name="SimpleConnectPropertiesClass"
            c:type="MMSimpleConnectPropertiesClass"
            glib:is-gtype-struct-for="SimpleConnectProperties">
      <source-position filename="mm-simple-connect-properties.h" line="56"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SimpleConnectPropertiesPrivate"
            c:type="MMSimpleConnectPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-simple-connect-properties.h" line="39"/>
    </record>
    <class name="SimpleStatus"
           c:symbol-prefix="simple_status"
           c:type="MMSimpleStatus"
           parent="GObject.Object"
           glib:type-name="MMSimpleStatus"
           glib:get-type="mm_simple_status_get_type"
           glib:type-struct="SimpleStatusClass">
      <doc xml:space="preserve"
           filename="mm-simple-status.h"
           line="39">The #MMSimpleStatus structure contains private data and should
only be accessed using the provided API.</doc>
      <source-position filename="mm-simple-status.h" line="54"/>
      <constructor name="new" c:identifier="mm_simple_status_new">
        <source-position filename="mm-simple-status.h" line="99"/>
        <return-value transfer-ownership="full">
          <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_simple_status_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-simple-status.h" line="100"/>
        <return-value transfer-ownership="full">
          <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_3gpp_operator_code"
              c:identifier="mm_simple_status_get_3gpp_operator_code">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="202">Gets the MCC/MNC of the operator of the 3GPP network where the modem is registered.</doc>
        <source-position filename="mm-simple-status.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="208">the operator code, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="204">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_3gpp_operator_name"
              c:identifier="mm_simple_status_get_3gpp_operator_name">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="220">Gets the name of the operator of the 3GPP network where the modem is registered.</doc>
        <source-position filename="mm-simple-status.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="226">the operator name, or %NULL if unknown. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="222">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_3gpp_registration_state"
              c:identifier="mm_simple_status_get_3gpp_registration_state">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="184">Gets the current state of the registration in the 3GPP network.</doc>
        <source-position filename="mm-simple-status.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="190">a #MMModem3gppRegistrationState.</doc>
          <type name="Modem3gppRegistrationState"
                c:type="MMModem3gppRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="186">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_3gpp_subscription_state"
              c:identifier="mm_simple_status_get_3gpp_subscription_state">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="238">Gets the current subscription status of the account.</doc>
        <source-position filename="mm-simple-status.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="244">a #MMModem3gppSubscriptionState.</doc>
          <type name="Modem3gppSubscriptionState"
                c:type="MMModem3gppSubscriptionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="240">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_access_technologies"
              c:identifier="mm_simple_status_get_access_technologies">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="166">Gets the currently used access technologies.</doc>
        <source-position filename="mm-simple-status.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="172">a bitmask of #MMModemAccessTechnology values.</doc>
          <type name="ModemAccessTechnology" c:type="MMModemAccessTechnology"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="168">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma_cdma1x_registration_state"
              c:identifier="mm_simple_status_get_cdma_cdma1x_registration_state">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="257">Gets the current state of the registration in the CDMA-1x network.</doc>
        <source-position filename="mm-simple-status.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="263">a #MMModemCdmaRegistrationState.</doc>
          <type name="ModemCdmaRegistrationState"
                c:type="MMModemCdmaRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="259">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma_evdo_registration_state"
              c:identifier="mm_simple_status_get_cdma_evdo_registration_state">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="275">Gets the current state of the registration in the EV-DO network.</doc>
        <source-position filename="mm-simple-status.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="281">a #MMModemCdmaRegistrationState.</doc>
          <type name="ModemCdmaRegistrationState"
                c:type="MMModemCdmaRegistrationState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="277">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma_nid" c:identifier="mm_simple_status_get_cdma_nid">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="311">Gets the Network Identification number of the CDMA network.</doc>
        <source-position filename="mm-simple-status.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="317">the NID, or %MM_MODEM_CDMA_NID_UNKNOWN if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="313">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cdma_sid" c:identifier="mm_simple_status_get_cdma_sid">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="293">Gets the System Identification number of the CDMA network.</doc>
        <source-position filename="mm-simple-status.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="299">the SID, or %MM_MODEM_CDMA_SID_UNKNOWN if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="295">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_bands"
              c:identifier="mm_simple_status_get_current_bands">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="142">Gets the currently used frequency bands.</doc>
        <source-position filename="mm-simple-status.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="144">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
          <parameter name="bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="145">location for an array of #MMModemBand values. Do not free the returned value, it is owned by @self.</doc>
            <type name="ModemBand" c:type="const MMModemBand**"/>
          </parameter>
          <parameter name="n_bands"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="146">number of elements in @bands.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_simple_status_get_dictionary">
        <source-position filename="mm-simple-status.h" line="103"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="mm_simple_status_get_signal_quality">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="110">Gets the signal quality.</doc>
        <source-position filename="mm-simple-status.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="117">the signal quality.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="112">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
          <parameter name="recent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="113">indication of whether the given signal quality is considered recent.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_simple_status_get_state">
        <doc xml:space="preserve"
             filename="mm-simple-status.c"
             line="92">Gets the state of the modem.</doc>
        <source-position filename="mm-simple-status.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-simple-status.c"
               line="98">a #MMModemState.</doc>
          <type name="ModemState" c:type="MMModemState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-simple-status.c"
                 line="94">a #MMSimpleStatus.</doc>
            <type name="SimpleStatus" c:type="MMSimpleStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="access-technologies"
                writable="1"
                transfer-ownership="none">
        <type name="ModemAccessTechnology"/>
      </property>
      <property name="cdma-cdma1x-registration-state"
                writable="1"
                transfer-ownership="none">
        <type name="ModemCdmaRegistrationState"/>
      </property>
      <property name="cdma-evdo-registration-state"
                writable="1"
                transfer-ownership="none">
        <type name="ModemCdmaRegistrationState"/>
      </property>
      <property name="cdma-nid" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cdma-sid" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-bands" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="m3gpp-operator-code"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="m3gpp-operator-name"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="m3gpp-registration-state"
                writable="1"
                transfer-ownership="none">
        <type name="Modem3gppRegistrationState"/>
      </property>
      <property name="m3gpp-subscription-state"
                writable="1"
                transfer-ownership="none">
        <type name="Modem3gppSubscriptionState"/>
      </property>
      <property name="signal-quality" writable="1" transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <type name="ModemState"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleStatusPrivate" c:type="MMSimpleStatusPrivate*"/>
      </field>
    </class>
    <record name="SimpleStatusClass"
            c:type="MMSimpleStatusClass"
            glib:is-gtype-struct-for="SimpleStatus">
      <source-position filename="mm-simple-status.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SimpleStatusPrivate"
            c:type="MMSimpleStatusPrivate"
            disguised="1">
      <source-position filename="mm-simple-status.h" line="37"/>
    </record>
    <class name="Sms"
           c:symbol-prefix="sms"
           c:type="MMSms"
           parent="GdbusSmsProxy"
           glib:type-name="MMSms"
           glib:get-type="mm_sms_get_type"
           glib:type-struct="SmsClass">
      <doc xml:space="preserve"
           filename="mm-sms.h"
           line="47">The #MMSms structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-sms.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="GdbusSms"/>
      <method name="dup_data" c:identifier="mm_sms_dup_data">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="154">Gets the message data.</doc>
        <source-position filename="mm-sms.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="161">The message data, or %NULL if it doesn't contain any (e.g. contains text instead). The returned value should be freed with g_free().</doc>
          <array length="0" zero-terminated="0" c:type="guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="156">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="data_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="157">Size of the output data, if any given.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_discharge_timestamp"
              c:identifier="mm_sms_dup_discharge_timestamp">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="354">Gets the time when the first PDU of the SMS message left the SMSC, in
&lt;ulink url="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/ulink&gt;
format.

This field is only applicable if the PDU type is %MM_SMS_PDU_TYPE_STATUS_REPORT.</doc>
        <source-position filename="mm-sms.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="364">The timestamp, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="356">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_number" c:identifier="mm_sms_dup_number">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="217">Gets the number to which the message is addressed.</doc>
        <source-position filename="mm-sms.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="223">The number, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="219">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_path" c:identifier="mm_sms_dup_path">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="62">Gets a copy of the DBus path of the #MMSms object.</doc>
        <source-position filename="mm-sms.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="68">The DBus path of the #MMSms object. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="64">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smsc" c:identifier="mm_sms_dup_smsc">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="258">Gets the SMS service center number.</doc>
        <source-position filename="mm-sms.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="264">The number of the SMSC, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="260">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_text" c:identifier="mm_sms_dup_text">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="108">Gets the message text, in UTF-8.</doc>
        <source-position filename="mm-sms.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="114">The message text, or %NULL if it doesn't contain any (e.g. contains data instead). The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="110">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_timestamp" c:identifier="mm_sms_dup_timestamp">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="304">Gets the time when the first PDU of the SMS message arrived the SMSC, in
&lt;ulink url="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/ulink&gt;
format.

This field is only applicable if the PDU type is %MM_SMS_PDU_TYPE_DELIVER or
%MM_SMS_PDU_TYPE_STATUS_REPORT.</doc>
        <source-position filename="mm-sms.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="315">The timestamp, or %NULL if it couldn't be retrieved. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="306">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_class" c:identifier="mm_sms_get_class">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="442">Gets the 3GPP message class of the SMS.</doc>
        <source-position filename="mm-sms.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="448">the message class, or -1 for invalid/unset class.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="444">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="mm_sms_get_data">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="127">Gets the message data.</doc>
        <source-position filename="mm-sms.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="134">The message data, or %NULL if it doesn't contain any (e.g. contains text instead).</doc>
          <array length="0" zero-terminated="0" c:type="const guint8*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="129">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="data_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="130">Size of the output data, if any given.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delivery_report_request"
              c:identifier="mm_sms_get_delivery_report_request">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="481">Checks whether delivery report is requested for this SMS.</doc>
        <source-position filename="mm-sms.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="487">%TRUE if delivery report is requested, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="483">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delivery_state"
              c:identifier="mm_sms_get_delivery_state">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="499">Gets the delivery state of this SMS.

This field is only applicable if the PDU type is %MM_SMS_PDU_TYPE_STATUS_REPORT.</doc>
        <source-position filename="mm-sms.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="507">A #MMSmsDeliveryState specifying the delivery state.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="501">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_discharge_timestamp"
              c:identifier="mm_sms_get_discharge_timestamp">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="328">Gets the time when the first PDU of the SMS message left the SMSC, in
&lt;ulink url="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/ulink&gt;
format.

This field is only applicable if the PDU type is %MM_SMS_PDU_TYPE_STATUS_REPORT.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sms_dup_discharge_timestamp() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sms.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="343">The timestamp, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="330">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_reference"
              c:identifier="mm_sms_get_message_reference">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="460">Gets the message reference of the last PDU sent/received within this SMS.

If the PDU type is %MM_SMS_PDU_TYPE_STATUS_REPORT, this field identifies the
message reference of the PDU associated to the status report.</doc>
        <source-position filename="mm-sms.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="469">The message reference.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="462">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="mm_sms_get_number">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="195">Gets the number to which the message is addressed.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sms_dup_number() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sms.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="206">The number, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="197">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="mm_sms_get_path">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="45">Gets the DBus path of the #MMSms object.</doc>
        <source-position filename="mm-sms.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="51">The DBus path of the #MMSms object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="47">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pdu_type" c:identifier="mm_sms_get_pdu_type">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="555">Gets the PDU type on which this SMS is based.</doc>
        <source-position filename="mm-sms.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="561">A #MMSmsPduType specifying the PDU type.</doc>
          <type name="SmsPduType" c:type="MMSmsPduType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="557">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_category"
              c:identifier="mm_sms_get_service_category">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="591">Gets the 3GPP2 Service Category.</doc>
        <source-position filename="mm-sms.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="597">a #MMSmsCdmaServiceCategory.</doc>
          <type name="SmsCdmaServiceCategory"
                c:type="MMSmsCdmaServiceCategory"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="593">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smsc" c:identifier="mm_sms_get_smsc">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="236">Gets the SMS service center number.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sms_dup_smsc() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sms.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="247">The number of the SMSC, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="238">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="mm_sms_get_state">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="519">Gets the state of this SMS.</doc>
        <source-position filename="mm-sms.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="525">A #MMSmsState specifying the state.</doc>
          <type name="SmsState" c:type="MMSmsState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="521">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage" c:identifier="mm_sms_get_storage">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="537">Gets the storage in which this SMS is kept.</doc>
        <source-position filename="mm-sms.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="543">A #MMSmsStorage specifying the storage.</doc>
          <type name="SmsStorage" c:type="MMSmsStorage"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="539">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_teleservice_id"
              c:identifier="mm_sms_get_teleservice_id">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="573">Gets the 3GPP2 Teleservice ID.</doc>
        <source-position filename="mm-sms.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="579">a #MMSmsCdmaTeleserviceId.</doc>
          <type name="SmsCdmaTeleserviceId" c:type="MMSmsCdmaTeleserviceId"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="575">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="mm_sms_get_text">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="86">Gets the message text, in UTF-8.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sms_dup_text() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sms.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="97">The message text, or %NULL if it doesn't contain any (e.g. contains data instead).</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="88">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp" c:identifier="mm_sms_get_timestamp">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="277">Gets the time when the first PDU of the SMS message arrived the SMSC, in
&lt;ulink url="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO8601&lt;/ulink&gt;
format.

This field is only applicable if the PDU type is %MM_SMS_PDU_TYPE_DELIVER or
%MM_SMS_PDU_TYPE_STATUS_REPORT.

&lt;warning&gt;The returned value is only valid until the property changes so
it is only safe to use this function on the thread where
@self was constructed. Use mm_sms_dup_timestamp() if on another
thread.&lt;/warning&gt;</doc>
        <source-position filename="mm-sms.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="293">The timestamp, or %NULL if it couldn't be retrieved.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="279">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validity_relative"
              c:identifier="mm_sms_get_validity_relative">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="405">Gets the length of the validity period, in minutes.

Only applicable if the type of validity is #MM_SMS_VALIDITY_TYPE_RELATIVE.</doc>
        <source-position filename="mm-sms.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="413">the length of the validity period, or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="407">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validity_type" c:identifier="mm_sms_get_validity_type">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="377">Gets the type of validity information in the SMS.</doc>
        <source-position filename="mm-sms.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="383">the validity type or #MM_SMS_VALIDITY_TYPE_UNKNOWN.</doc>
          <type name="SmsValidityType" c:type="MMSmsValidityType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="379">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send" c:identifier="mm_sms_send">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="629">Asynchronously requests to queue the message for delivery.

SMS objects can only be sent once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sms_send_finish() to get the result of the operation.

See mm_sms_send_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sms.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="631">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="632">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="633">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="634">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_finish" c:identifier="mm_sms_send_finish" throws="1">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="609">Finishes an operation started with mm_sms_send().</doc>
        <source-position filename="mm-sms.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="617">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="611">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="612">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sms_send().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_sync" c:identifier="mm_sms_send_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="659">Synchronously requests to queue the message for delivery.

SMS objects can only be sent once.

The calling thread is blocked until a reply is received.
See mm_sms_send() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sms.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="672">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="661">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="662">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store" c:identifier="mm_sms_store">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="708">Asynchronoulsy requests to store the message in the device if not already done.

SMS objects can only be stored once.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call mm_sms_store_finish() to get the result of the operation.

See mm_sms_store_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="mm-sms.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="710">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="711">A #MMSmsStorage specifying where to store the SMS, or #MM_SMS_STORAGE_UNKNOWN to use the default.</doc>
            <type name="SmsStorage" c:type="MMSmsStorage"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="712">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="713">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="714">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_finish"
              c:identifier="mm_sms_store_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="688">Finishes an operation started with mm_sms_store().</doc>
        <source-position filename="mm-sms.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="696">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="690">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="691">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to mm_sms_store().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_sync" c:identifier="mm_sms_store_sync" throws="1">
        <doc xml:space="preserve"
             filename="mm-sms.c"
             line="741">Synchronoulsy requests to store the message in the device if not already done.

SMS objects can only be stored once.

The calling thread is blocked until a reply is received.
See mm_sms_store() for the asynchronous version of this method.</doc>
        <source-position filename="mm-sms.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms.c"
               line="755">%TRUE if the operation succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="743">A #MMSms.</doc>
            <type name="Sms" c:type="MMSms*"/>
          </instance-parameter>
          <parameter name="storage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="744">A #MMSmsStorage specifying where to store the SMS, or #MM_SMS_STORAGE_UNKNOWN to use the default.</doc>
            <type name="SmsStorage" c:type="MMSmsStorage"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-sms.c"
                 line="745">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GdbusSmsProxy" c:type="MmGdbusSmsProxy"/>
      </field>
      <field name="unused" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <enumeration name="SmsCdmaServiceCategory"
                 glib:type-name="MMSmsCdmaServiceCategory"
                 glib:get-type="mm_sms_cdma_service_category_get_type"
                 c:type="MMSmsCdmaServiceCategory">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="emergency_broadcast"
              value="1"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_EMERGENCY_BROADCAST"
              glib:nick="emergency-broadcast">
      </member>
      <member name="administrative"
              value="2"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ADMINISTRATIVE"
              glib:nick="administrative">
      </member>
      <member name="maintenance"
              value="3"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_MAINTENANCE"
              glib:nick="maintenance">
      </member>
      <member name="general_news_local"
              value="4"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_LOCAL"
              glib:nick="general-news-local">
      </member>
      <member name="general_news_regional"
              value="5"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_REGIONAL"
              glib:nick="general-news-regional">
      </member>
      <member name="general_news_national"
              value="6"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_NATIONAL"
              glib:nick="general-news-national">
      </member>
      <member name="general_news_international"
              value="7"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_GENERAL_NEWS_INTERNATIONAL"
              glib:nick="general-news-international">
      </member>
      <member name="business_news_local"
              value="8"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_LOCAL"
              glib:nick="business-news-local">
      </member>
      <member name="business_news_regional"
              value="9"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_REGIONAL"
              glib:nick="business-news-regional">
      </member>
      <member name="business_news_national"
              value="10"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_NATIONAL"
              glib:nick="business-news-national">
      </member>
      <member name="business_news_international"
              value="11"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_BUSINESS_NEWS_INTERNATIONAL"
              glib:nick="business-news-international">
      </member>
      <member name="sports_news_local"
              value="12"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_LOCAL"
              glib:nick="sports-news-local">
      </member>
      <member name="sports_news_regional"
              value="13"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_REGIONAL"
              glib:nick="sports-news-regional">
      </member>
      <member name="sports_news_national"
              value="14"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_NATIONAL"
              glib:nick="sports-news-national">
      </member>
      <member name="sports_news_international"
              value="15"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_SPORTS_NEWS_INTERNATIONAL"
              glib:nick="sports-news-international">
      </member>
      <member name="entertainment_news_local"
              value="16"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_LOCAL"
              glib:nick="entertainment-news-local">
      </member>
      <member name="entertainment_news_regional"
              value="17"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_REGIONAL"
              glib:nick="entertainment-news-regional">
      </member>
      <member name="entertainment_news_national"
              value="18"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_NATIONAL"
              glib:nick="entertainment-news-national">
      </member>
      <member name="entertainment_news_international"
              value="19"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ENTERTAINMENT_NEWS_INTERNATIONAL"
              glib:nick="entertainment-news-international">
      </member>
      <member name="local_weather"
              value="20"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_LOCAL_WEATHER"
              glib:nick="local-weather">
      </member>
      <member name="traffic_report"
              value="21"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_TRAFFIC_REPORT"
              glib:nick="traffic-report">
      </member>
      <member name="flight_schedules"
              value="22"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_FLIGHT_SCHEDULES"
              glib:nick="flight-schedules">
      </member>
      <member name="restaurants"
              value="23"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_RESTAURANTS"
              glib:nick="restaurants">
      </member>
      <member name="lodgings"
              value="24"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_LODGINGS"
              glib:nick="lodgings">
      </member>
      <member name="retail_directory"
              value="25"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_RETAIL_DIRECTORY"
              glib:nick="retail-directory">
      </member>
      <member name="advertisements"
              value="26"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_ADVERTISEMENTS"
              glib:nick="advertisements">
      </member>
      <member name="stock_quotes"
              value="27"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_STOCK_QUOTES"
              glib:nick="stock-quotes">
      </member>
      <member name="employment"
              value="28"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_EMPLOYMENT"
              glib:nick="employment">
      </member>
      <member name="hospitals"
              value="29"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_HOSPITALS"
              glib:nick="hospitals">
      </member>
      <member name="technology_news"
              value="30"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_TECHNOLOGY_NEWS"
              glib:nick="technology-news">
      </member>
      <member name="multicategory"
              value="31"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_MULTICATEGORY"
              glib:nick="multicategory">
      </member>
      <member name="cmas_presidential_alert"
              value="4096"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_PRESIDENTIAL_ALERT"
              glib:nick="cmas-presidential-alert">
      </member>
      <member name="cmas_extreme_threat"
              value="4097"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_EXTREME_THREAT"
              glib:nick="cmas-extreme-threat">
      </member>
      <member name="cmas_severe_threat"
              value="4098"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_SEVERE_THREAT"
              glib:nick="cmas-severe-threat">
      </member>
      <member name="cmas_child_abduction_emergency"
              value="4099"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_CHILD_ABDUCTION_EMERGENCY"
              glib:nick="cmas-child-abduction-emergency">
      </member>
      <member name="cmas_test"
              value="4100"
              c:identifier="MM_SMS_CDMA_SERVICE_CATEGORY_CMAS_TEST"
              glib:nick="cmas-test">
      </member>
      <function name="get_string"
                c:identifier="mm_sms_cdma_service_category_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1908">Gets the nickname string for the #MMSmsCdmaServiceCategory specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="262"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1914">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1910">a MMSmsCdmaServiceCategory.</doc>
            <type name="SmsCdmaServiceCategory"
                  c:type="MMSmsCdmaServiceCategory"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SmsCdmaTeleserviceId"
                 glib:type-name="MMSmsCdmaTeleserviceId"
                 glib:get-type="mm_sms_cdma_teleservice_id_get_type"
                 c:type="MMSmsCdmaTeleserviceId">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="cmt91"
              value="4096"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_CMT91"
              glib:nick="cmt91">
      </member>
      <member name="wpt"
              value="4097"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_WPT"
              glib:nick="wpt">
      </member>
      <member name="wmt"
              value="4098"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_WMT"
              glib:nick="wmt">
      </member>
      <member name="vmn"
              value="4099"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_VMN"
              glib:nick="vmn">
      </member>
      <member name="wap"
              value="4100"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_WAP"
              glib:nick="wap">
      </member>
      <member name="wemt"
              value="4101"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_WEMT"
              glib:nick="wemt">
      </member>
      <member name="scpt"
              value="4102"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_SCPT"
              glib:nick="scpt">
      </member>
      <member name="catpt"
              value="4103"
              c:identifier="MM_SMS_CDMA_TELESERVICE_ID_CATPT"
              glib:nick="catpt">
      </member>
      <function name="get_string"
                c:identifier="mm_sms_cdma_teleservice_id_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1776">Gets the nickname string for the #MMSmsCdmaTeleserviceId specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1782">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1778">a MMSmsCdmaTeleserviceId.</doc>
            <type name="SmsCdmaTeleserviceId" c:type="MMSmsCdmaTeleserviceId"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="SmsClass" c:type="MMSmsClass" glib:is-gtype-struct-for="Sms">
      <source-position filename="mm-sms.h" line="62"/>
      <field name="parent" readable="0" private="1">
        <type name="GdbusSmsProxyClass" c:type="MmGdbusSmsProxyClass"/>
      </field>
    </record>
    <enumeration name="SmsDeliveryState"
                 glib:type-name="MMSmsDeliveryState"
                 glib:get-type="mm_sms_delivery_state_get_type"
                 c:type="MMSmsDeliveryState">
      <member name="completed_received"
              value="0"
              c:identifier="MM_SMS_DELIVERY_STATE_COMPLETED_RECEIVED"
              glib:nick="completed-received">
      </member>
      <member name="completed_forwarded_unconfirmed"
              value="1"
              c:identifier="MM_SMS_DELIVERY_STATE_COMPLETED_FORWARDED_UNCONFIRMED"
              glib:nick="completed-forwarded-unconfirmed">
      </member>
      <member name="completed_replaced_by_sc"
              value="2"
              c:identifier="MM_SMS_DELIVERY_STATE_COMPLETED_REPLACED_BY_SC"
              glib:nick="completed-replaced-by-sc">
      </member>
      <member name="temporary_error_congestion"
              value="32"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_CONGESTION"
              glib:nick="temporary-error-congestion">
      </member>
      <member name="temporary_error_sme_busy"
              value="33"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SME_BUSY"
              glib:nick="temporary-error-sme-busy">
      </member>
      <member name="temporary_error_no_response_from_sme"
              value="34"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_NO_RESPONSE_FROM_SME"
              glib:nick="temporary-error-no-response-from-sme">
      </member>
      <member name="temporary_error_service_rejected"
              value="35"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_SERVICE_REJECTED"
              glib:nick="temporary-error-service-rejected">
      </member>
      <member name="temporary_error_qos_not_available"
              value="36"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_QOS_NOT_AVAILABLE"
              glib:nick="temporary-error-qos-not-available">
      </member>
      <member name="temporary_error_in_sme"
              value="37"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_ERROR_IN_SME"
              glib:nick="temporary-error-in-sme">
      </member>
      <member name="error_remote_procedure"
              value="64"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_REMOTE_PROCEDURE"
              glib:nick="error-remote-procedure">
      </member>
      <member name="error_incompatible_destination"
              value="65"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_INCOMPATIBLE_DESTINATION"
              glib:nick="error-incompatible-destination">
      </member>
      <member name="error_connection_rejected"
              value="66"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_CONNECTION_REJECTED"
              glib:nick="error-connection-rejected">
      </member>
      <member name="error_not_obtainable"
              value="67"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_NOT_OBTAINABLE"
              glib:nick="error-not-obtainable">
      </member>
      <member name="error_qos_not_available"
              value="68"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_QOS_NOT_AVAILABLE"
              glib:nick="error-qos-not-available">
      </member>
      <member name="error_no_interworking_available"
              value="69"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_NO_INTERWORKING_AVAILABLE"
              glib:nick="error-no-interworking-available">
      </member>
      <member name="error_validity_period_expired"
              value="70"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_VALIDITY_PERIOD_EXPIRED"
              glib:nick="error-validity-period-expired">
      </member>
      <member name="error_deleted_by_originating_sme"
              value="71"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_ORIGINATING_SME"
              glib:nick="error-deleted-by-originating-sme">
      </member>
      <member name="error_deleted_by_sc_administration"
              value="72"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_DELETED_BY_SC_ADMINISTRATION"
              glib:nick="error-deleted-by-sc-administration">
      </member>
      <member name="error_message_does_not_exist"
              value="73"
              c:identifier="MM_SMS_DELIVERY_STATE_ERROR_MESSAGE_DOES_NOT_EXIST"
              glib:nick="error-message-does-not-exist">
      </member>
      <member name="temporary_fatal_error_congestion"
              value="96"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_CONGESTION"
              glib:nick="temporary-fatal-error-congestion">
      </member>
      <member name="temporary_fatal_error_sme_busy"
              value="97"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SME_BUSY"
              glib:nick="temporary-fatal-error-sme-busy">
      </member>
      <member name="temporary_fatal_error_no_response_from_sme"
              value="98"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME"
              glib:nick="temporary-fatal-error-no-response-from-sme">
      </member>
      <member name="temporary_fatal_error_service_rejected"
              value="99"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_SERVICE_REJECTED"
              glib:nick="temporary-fatal-error-service-rejected">
      </member>
      <member name="temporary_fatal_error_qos_not_available"
              value="100"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE"
              glib:nick="temporary-fatal-error-qos-not-available">
      </member>
      <member name="temporary_fatal_error_in_sme"
              value="101"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_FATAL_ERROR_IN_SME"
              glib:nick="temporary-fatal-error-in-sme">
      </member>
      <member name="unknown"
              value="256"
              c:identifier="MM_SMS_DELIVERY_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="network_problem_address_vacant"
              value="512"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_VACANT"
              glib:nick="network-problem-address-vacant">
      </member>
      <member name="network_problem_address_translation_failure"
              value="513"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE"
              glib:nick="network-problem-address-translation-failure">
      </member>
      <member name="network_problem_network_resource_outage"
              value="514"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE"
              glib:nick="network-problem-network-resource-outage">
      </member>
      <member name="network_problem_network_failure"
              value="515"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_NETWORK_FAILURE"
              glib:nick="network-problem-network-failure">
      </member>
      <member name="network_problem_invalid_teleservice_id"
              value="516"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_INVALID_TELESERVICE_ID"
              glib:nick="network-problem-invalid-teleservice-id">
      </member>
      <member name="network_problem_other"
              value="517"
              c:identifier="MM_SMS_DELIVERY_STATE_NETWORK_PROBLEM_OTHER"
              glib:nick="network-problem-other">
      </member>
      <member name="terminal_problem_no_page_response"
              value="544"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_PAGE_RESPONSE"
              glib:nick="terminal-problem-no-page-response">
      </member>
      <member name="terminal_problem_destination_busy"
              value="545"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_BUSY"
              glib:nick="terminal-problem-destination-busy">
      </member>
      <member name="terminal_problem_no_acknowledgment"
              value="546"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT"
              glib:nick="terminal-problem-no-acknowledgment">
      </member>
      <member name="terminal_problem_destination_resource_shortage"
              value="547"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE"
              glib:nick="terminal-problem-destination-resource-shortage">
      </member>
      <member name="terminal_problem_sms_delivery_postponed"
              value="548"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED"
              glib:nick="terminal-problem-sms-delivery-postponed">
      </member>
      <member name="terminal_problem_destination_out_of_service"
              value="549"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE"
              glib:nick="terminal-problem-destination-out-of-service">
      </member>
      <member name="terminal_problem_destination_no_longer_at_this_address"
              value="550"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS"
              glib:nick="terminal-problem-destination-no-longer-at-this-address">
      </member>
      <member name="terminal_problem_other"
              value="551"
              c:identifier="MM_SMS_DELIVERY_STATE_TERMINAL_PROBLEM_OTHER"
              glib:nick="terminal-problem-other">
      </member>
      <member name="radio_interface_problem_resource_shortage"
              value="576"
              c:identifier="MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE"
              glib:nick="radio-interface-problem-resource-shortage">
      </member>
      <member name="radio_interface_problem_incompatibility"
              value="577"
              c:identifier="MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY"
              glib:nick="radio-interface-problem-incompatibility">
      </member>
      <member name="radio_interface_problem_other"
              value="578"
              c:identifier="MM_SMS_DELIVERY_STATE_RADIO_INTERFACE_PROBLEM_OTHER"
              glib:nick="radio-interface-problem-other">
      </member>
      <member name="general_problem_encoding"
              value="608"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_ENCODING"
              glib:nick="general-problem-encoding">
      </member>
      <member name="general_problem_sms_origination_denied"
              value="609"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED"
              glib:nick="general-problem-sms-origination-denied">
      </member>
      <member name="general_problem_sms_termination_denied"
              value="610"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_TERMINATION_DENIED"
              glib:nick="general-problem-sms-termination-denied">
      </member>
      <member name="general_problem_supplementary_service_not_supported"
              value="611"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED"
              glib:nick="general-problem-supplementary-service-not-supported">
      </member>
      <member name="general_problem_sms_not_supported"
              value="612"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_SMS_NOT_SUPPORTED"
              glib:nick="general-problem-sms-not-supported">
      </member>
      <member name="general_problem_missing_expected_parameter"
              value="614"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER"
              glib:nick="general-problem-missing-expected-parameter">
      </member>
      <member name="general_problem_missing_mandatory_parameter"
              value="615"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER"
              glib:nick="general-problem-missing-mandatory-parameter">
      </member>
      <member name="general_problem_unrecognized_parameter_value"
              value="616"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE"
              glib:nick="general-problem-unrecognized-parameter-value">
      </member>
      <member name="general_problem_unexpected_parameter_value"
              value="617"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE"
              glib:nick="general-problem-unexpected-parameter-value">
      </member>
      <member name="general_problem_user_data_size_error"
              value="618"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR"
              glib:nick="general-problem-user-data-size-error">
      </member>
      <member name="general_problem_other"
              value="619"
              c:identifier="MM_SMS_DELIVERY_STATE_GENERAL_PROBLEM_OTHER"
              glib:nick="general-problem-other">
      </member>
      <member name="temporary_network_problem_address_vacant"
              value="768"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT"
              glib:nick="temporary-network-problem-address-vacant">
      </member>
      <member name="temporary_network_problem_address_translation_failure"
              value="769"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE"
              glib:nick="temporary-network-problem-address-translation-failure">
      </member>
      <member name="temporary_network_problem_network_resource_outage"
              value="770"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE"
              glib:nick="temporary-network-problem-network-resource-outage">
      </member>
      <member name="temporary_network_problem_network_failure"
              value="771"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE"
              glib:nick="temporary-network-problem-network-failure">
      </member>
      <member name="temporary_network_problem_invalid_teleservice_id"
              value="772"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID"
              glib:nick="temporary-network-problem-invalid-teleservice-id">
      </member>
      <member name="temporary_network_problem_other"
              value="773"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_NETWORK_PROBLEM_OTHER"
              glib:nick="temporary-network-problem-other">
      </member>
      <member name="temporary_terminal_problem_no_page_response"
              value="800"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE"
              glib:nick="temporary-terminal-problem-no-page-response">
      </member>
      <member name="temporary_terminal_problem_destination_busy"
              value="801"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY"
              glib:nick="temporary-terminal-problem-destination-busy">
      </member>
      <member name="temporary_terminal_problem_no_acknowledgment"
              value="802"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT"
              glib:nick="temporary-terminal-problem-no-acknowledgment">
      </member>
      <member name="temporary_terminal_problem_destination_resource_shortage"
              value="803"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE"
              glib:nick="temporary-terminal-problem-destination-resource-shortage">
      </member>
      <member name="temporary_terminal_problem_sms_delivery_postponed"
              value="804"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED"
              glib:nick="temporary-terminal-problem-sms-delivery-postponed">
      </member>
      <member name="temporary_terminal_problem_destination_out_of_service"
              value="805"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE"
              glib:nick="temporary-terminal-problem-destination-out-of-service">
      </member>
      <member name="temporary_terminal_problem_destination_no_longer_at_this_address"
              value="806"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS"
              glib:nick="temporary-terminal-problem-destination-no-longer-at-this-address">
      </member>
      <member name="temporary_terminal_problem_other"
              value="807"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_TERMINAL_PROBLEM_OTHER"
              glib:nick="temporary-terminal-problem-other">
      </member>
      <member name="temporary_radio_interface_problem_resource_shortage"
              value="832"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE"
              glib:nick="temporary-radio-interface-problem-resource-shortage">
      </member>
      <member name="temporary_radio_interface_problem_incompatibility"
              value="833"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY"
              glib:nick="temporary-radio-interface-problem-incompatibility">
      </member>
      <member name="temporary_radio_interface_problem_other"
              value="834"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER"
              glib:nick="temporary-radio-interface-problem-other">
      </member>
      <member name="temporary_general_problem_encoding"
              value="864"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_ENCODING"
              glib:nick="temporary-general-problem-encoding">
      </member>
      <member name="temporary_general_problem_sms_origination_denied"
              value="865"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED"
              glib:nick="temporary-general-problem-sms-origination-denied">
      </member>
      <member name="temporary_general_problem_sms_termination_denied"
              value="866"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED"
              glib:nick="temporary-general-problem-sms-termination-denied">
      </member>
      <member name="temporary_general_problem_supplementary_service_not_supported"
              value="867"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED"
              glib:nick="temporary-general-problem-supplementary-service-not-supported">
      </member>
      <member name="temporary_general_problem_sms_not_supported"
              value="868"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED"
              glib:nick="temporary-general-problem-sms-not-supported">
      </member>
      <member name="temporary_general_problem_missing_expected_parameter"
              value="870"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER"
              glib:nick="temporary-general-problem-missing-expected-parameter">
      </member>
      <member name="temporary_general_problem_missing_mandatory_parameter"
              value="871"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER"
              glib:nick="temporary-general-problem-missing-mandatory-parameter">
      </member>
      <member name="temporary_general_problem_unrecognized_parameter_value"
              value="872"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE"
              glib:nick="temporary-general-problem-unrecognized-parameter-value">
      </member>
      <member name="temporary_general_problem_unexpected_parameter_value"
              value="873"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE"
              glib:nick="temporary-general-problem-unexpected-parameter-value">
      </member>
      <member name="temporary_general_problem_user_data_size_error"
              value="874"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR"
              glib:nick="temporary-general-problem-user-data-size-error">
      </member>
      <member name="temporary_general_problem_other"
              value="875"
              c:identifier="MM_SMS_DELIVERY_STATE_TEMPORARY_GENERAL_PROBLEM_OTHER"
              glib:nick="temporary-general-problem-other">
      </member>
      <function name="get_string"
                c:identifier="mm_sms_delivery_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1471">Gets the nickname string for the #MMSmsDeliveryState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1477">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1473">a MMSmsDeliveryState.</doc>
            <type name="SmsDeliveryState" c:type="MMSmsDeliveryState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SmsPduType"
                 glib:type-name="MMSmsPduType"
                 glib:get-type="mm_sms_pdu_type_get_type"
                 c:type="MMSmsPduType">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_PDU_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="deliver"
              value="1"
              c:identifier="MM_SMS_PDU_TYPE_DELIVER"
              glib:nick="deliver">
      </member>
      <member name="submit"
              value="2"
              c:identifier="MM_SMS_PDU_TYPE_SUBMIT"
              glib:nick="submit">
      </member>
      <member name="status_report"
              value="3"
              c:identifier="MM_SMS_PDU_TYPE_STATUS_REPORT"
              glib:nick="status-report">
      </member>
      <member name="cdma_deliver"
              value="32"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_DELIVER"
              glib:nick="cdma-deliver">
      </member>
      <member name="cdma_submit"
              value="33"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_SUBMIT"
              glib:nick="cdma-submit">
      </member>
      <member name="cdma_cancellation"
              value="34"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_CANCELLATION"
              glib:nick="cdma-cancellation">
      </member>
      <member name="cdma_delivery_acknowledgement"
              value="35"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_DELIVERY_ACKNOWLEDGEMENT"
              glib:nick="cdma-delivery-acknowledgement">
      </member>
      <member name="cdma_user_acknowledgement"
              value="36"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_USER_ACKNOWLEDGEMENT"
              glib:nick="cdma-user-acknowledgement">
      </member>
      <member name="cdma_read_acknowledgement"
              value="37"
              c:identifier="MM_SMS_PDU_TYPE_CDMA_READ_ACKNOWLEDGEMENT"
              glib:nick="cdma-read-acknowledgement">
      </member>
      <function name="get_string" c:identifier="mm_sms_pdu_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1193">Gets the nickname string for the #MMSmsPduType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1199">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1195">a MMSmsPduType.</doc>
            <type name="SmsPduType" c:type="MMSmsPduType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="SmsProperties"
           c:symbol-prefix="sms_properties"
           c:type="MMSmsProperties"
           parent="GObject.Object"
           glib:type-name="MMSmsProperties"
           glib:get-type="mm_sms_properties_get_type"
           glib:type-struct="SmsPropertiesClass">
      <doc xml:space="preserve"
           filename="mm-sms-properties.h"
           line="39">The #MMSmsProperties structure contains private data and should only be
accessed using the provided API.</doc>
      <source-position filename="mm-sms-properties.h" line="54"/>
      <constructor name="new" c:identifier="mm_sms_properties_new">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="852">Creates a new empty #MMSmsProperties.</doc>
        <source-position filename="mm-sms-properties.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="857">a #MMSmsProperties. The returned value should be freed with g_object_unref().</doc>
          <type name="SmsProperties" c:type="MMSmsProperties*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_sms_properties_new_from_dictionary"
                   throws="1">
        <source-position filename="mm-sms-properties.h" line="105"/>
        <return-value transfer-ownership="full">
          <type name="SmsProperties" c:type="MMSmsProperties*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="mm_sms_properties_new_from_string"
                   throws="1">
        <source-position filename="mm-sms-properties.h" line="103"/>
        <return-value transfer-ownership="full">
          <type name="SmsProperties" c:type="MMSmsProperties*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup" c:identifier="mm_sms_properties_dup">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="825">Returns a copy of @orig.</doc>
        <source-position filename="mm-sms-properties.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="831">a #MMSmsProperties</doc>
          <type name="SmsProperties" c:type="MMSmsProperties*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="827">a #MMSmsProperties</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_class" c:identifier="mm_sms_properties_get_class">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="339">Gets the 3GPP message class of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="345">the message class, or -1 for invalid/unset class.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="341">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="mm_sms_properties_get_data">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="145">Gets the message data.</doc>
        <source-position filename="mm-sms-properties.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="152">The message data, or %NULL if it doesn't contain any (e.g. contains text instead).</doc>
          <type name="guint8" c:type="const guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="147">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="data_len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="148">Size of the output data, if any given.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_bytearray"
              c:identifier="mm_sms_properties_get_data_bytearray">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="182">Gets the message data.</doc>
        <source-position filename="mm-sms-properties.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="188">A #GByteArray with the message data, or %NULL if it doesn't contain any (e.g. contains text instead). The returned value should be freed with g_byte_array_unref().</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="184">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_delivery_report_request"
              c:identifier="mm_sms_properties_get_delivery_report_request">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="374">Checks whether delivery report is requested for the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="380">%TRUE if delivery report is requested, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="376">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_sms_properties_get_dictionary">
        <source-position filename="mm-sms-properties.h" line="110"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number" c:identifier="mm_sms_properties_get_number">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="217">Gets the number to which the message is addressed.</doc>
        <source-position filename="mm-sms-properties.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="223">The number, or %NULL if it couldn't be retrieved. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="219">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_category"
              c:identifier="mm_sms_properties_get_service_category">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="442">Gets the CDMA message service category of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="448">the CDMA service category.</doc>
          <type name="SmsCdmaServiceCategory"
                c:type="MMSmsCdmaServiceCategory"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="444">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smsc" c:identifier="mm_sms_properties_get_smsc">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="252">Gets the SMS service center number.</doc>
        <source-position filename="mm-sms-properties.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="258">The number of the SMSC, or %NULL if it couldn't be retrieved. Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="254">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_teleservice_id"
              c:identifier="mm_sms_properties_get_teleservice_id">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="408">Gets the CDMA teleservice ID of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="414">the CDMA teleservice ID.</doc>
          <type name="SmsCdmaTeleserviceId" c:type="MMSmsCdmaTeleserviceId"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="410">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text" c:identifier="mm_sms_properties_get_text">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="82">Gets the message text, in UTF-8.</doc>
        <source-position filename="mm-sms-properties.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="88">The message text, or %NULL if it doesn't contain any (e.g. contains data instead). Do not free the returned value, it is owned by @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="84">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validity_relative"
              c:identifier="mm_sms_properties_get_validity_relative">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="303">Gets the relative validity time of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="309">the validity time or 0 if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="305">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_validity_type"
              c:identifier="mm_sms_properties_get_validity_type">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="287">Gets the relative validity type the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="293">a #MMSmsValidityType.</doc>
          <type name="SmsValidityType" c:type="MMSmsValidityType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="289">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_data_bytearray"
              c:identifier="mm_sms_properties_peek_data_bytearray">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="166">Gets the message data.</doc>
        <source-position filename="mm-sms-properties.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-sms-properties.c"
               line="172">A #GByteArray with the message data, or %NULL if it doesn't contain any (e.g. contains text instead). Do not free the returned value, it is owned by @self.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="168">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_class" c:identifier="mm_sms_properties_set_class">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="322">Sets the 3GPP message class of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="324">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="message_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="325">The message class (0..3), or -1 for invalid/unset class.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data" c:identifier="mm_sms_properties_set_data">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="100">Sets the message data.</doc>
        <source-position filename="mm-sms-properties.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="102">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="103">The data to set.</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="104">Length of @data.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_bytearray"
              c:identifier="mm_sms_properties_set_data_bytearray">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="126">Sets the message data.</doc>
        <source-position filename="mm-sms-properties.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="128">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="129">A #GByteArray with the data to set. This method takes a new reference of @data.</doc>
            <array name="GLib.ByteArray" c:type="GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_delivery_report_request"
              c:identifier="mm_sms_properties_set_delivery_report_request">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="357">Sets whether delivery report is requested for the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="359">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="360">%TRUE if delivery report is requested, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number" c:identifier="mm_sms_properties_set_number">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="200">Sets the number to which the message is addressed.</doc>
        <source-position filename="mm-sms-properties.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="202">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="203">The number.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service_category"
              c:identifier="mm_sms_properties_set_service_category">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="426">Sets the CDMA service category of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="428">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="service_category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="429">The CDMA service category.</doc>
            <type name="SmsCdmaServiceCategory"
                  c:type="MMSmsCdmaServiceCategory"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smsc" c:identifier="mm_sms_properties_set_smsc">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="235">Sets the SMS service center number.</doc>
        <source-position filename="mm-sms-properties.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="237">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="smsc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="238">The SMSC number.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_teleservice_id"
              c:identifier="mm_sms_properties_set_teleservice_id">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="392">Sets the CDMA teleservice ID of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="394">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="teleservice_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="395">The CDMA teleservice ID.</doc>
            <type name="SmsCdmaTeleserviceId" c:type="MMSmsCdmaTeleserviceId"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="mm_sms_properties_set_text">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="65">Sets the message text.</doc>
        <source-position filename="mm-sms-properties.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="67">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="68">The text to set, in UTF-8.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_validity_relative"
              c:identifier="mm_sms_properties_set_validity_relative">
        <doc xml:space="preserve"
             filename="mm-sms-properties.c"
             line="270">Sets the relative validity time of the SMS.</doc>
        <source-position filename="mm-sms-properties.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="272">A #MMSmsProperties.</doc>
            <type name="SmsProperties" c:type="MMSmsProperties*"/>
          </instance-parameter>
          <parameter name="validity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-sms-properties.c"
                 line="273">The validity of %MM_SMS_VALIDITY_TYPE_RELATIVE type.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SmsPropertiesPrivate" c:type="MMSmsPropertiesPrivate*"/>
      </field>
    </class>
    <record name="SmsPropertiesClass"
            c:type="MMSmsPropertiesClass"
            glib:is-gtype-struct-for="SmsProperties">
      <source-position filename="mm-sms-properties.h" line="54"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="SmsPropertiesPrivate"
            c:type="MMSmsPropertiesPrivate"
            disguised="1">
      <source-position filename="mm-sms-properties.h" line="37"/>
    </record>
    <enumeration name="SmsState"
                 glib:type-name="MMSmsState"
                 glib:get-type="mm_sms_state_get_type"
                 c:type="MMSmsState">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_STATE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="stored"
              value="1"
              c:identifier="MM_SMS_STATE_STORED"
              glib:nick="stored">
      </member>
      <member name="receiving"
              value="2"
              c:identifier="MM_SMS_STATE_RECEIVING"
              glib:nick="receiving">
      </member>
      <member name="received"
              value="3"
              c:identifier="MM_SMS_STATE_RECEIVED"
              glib:nick="received">
      </member>
      <member name="sending"
              value="4"
              c:identifier="MM_SMS_STATE_SENDING"
              glib:nick="sending">
      </member>
      <member name="sent"
              value="5"
              c:identifier="MM_SMS_STATE_SENT"
              glib:nick="sent">
      </member>
      <function name="get_string" c:identifier="mm_sms_state_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1294">Gets the nickname string for the #MMSmsState specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1300">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1296">a MMSmsState.</doc>
            <type name="SmsState" c:type="MMSmsState"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SmsStorage"
                 glib:type-name="MMSmsStorage"
                 glib:get-type="mm_sms_storage_get_type"
                 c:type="MMSmsStorage">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_STORAGE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="sm"
              value="1"
              c:identifier="MM_SMS_STORAGE_SM"
              glib:nick="sm">
      </member>
      <member name="me"
              value="2"
              c:identifier="MM_SMS_STORAGE_ME"
              glib:nick="me">
      </member>
      <member name="mt"
              value="3"
              c:identifier="MM_SMS_STORAGE_MT"
              glib:nick="mt">
      </member>
      <member name="sr"
              value="4"
              c:identifier="MM_SMS_STORAGE_SR"
              glib:nick="sr">
      </member>
      <member name="bm"
              value="5"
              c:identifier="MM_SMS_STORAGE_BM"
              glib:nick="bm">
      </member>
      <member name="ta"
              value="6"
              c:identifier="MM_SMS_STORAGE_TA"
              glib:nick="ta">
      </member>
      <function name="get_string" c:identifier="mm_sms_storage_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1573">Gets the nickname string for the #MMSmsStorage specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1579">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1575">a MMSmsStorage.</doc>
            <type name="SmsStorage" c:type="MMSmsStorage"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SmsValidityType"
                 glib:type-name="MMSmsValidityType"
                 glib:get-type="mm_sms_validity_type_get_type"
                 c:type="MMSmsValidityType">
      <member name="unknown"
              value="0"
              c:identifier="MM_SMS_VALIDITY_TYPE_UNKNOWN"
              glib:nick="unknown">
      </member>
      <member name="relative"
              value="1"
              c:identifier="MM_SMS_VALIDITY_TYPE_RELATIVE"
              glib:nick="relative">
      </member>
      <member name="absolute"
              value="2"
              c:identifier="MM_SMS_VALIDITY_TYPE_ABSOLUTE"
              glib:nick="absolute">
      </member>
      <member name="enhanced"
              value="3"
              c:identifier="MM_SMS_VALIDITY_TYPE_ENHANCED"
              glib:nick="enhanced">
      </member>
      <function name="get_string"
                c:identifier="mm_sms_validity_type_get_string">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1672">Gets the nickname string for the #MMSmsValidityType specified at @val.</doc>
        <source-position filename="generated/mm-enums-types.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1678">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="val" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="generated/mm-enums-types.c"
                 line="1674">a MMSmsValidityType.</doc>
            <type name="SmsValidityType" c:type="MMSmsValidityType"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <constant name="UNLOCK_RETRIES_UNKNOWN"
              value="999"
              c:type="MM_UNLOCK_RETRIES_UNKNOWN">
      <doc xml:space="preserve"
           filename="mm-unlock-retries.h"
           line="35">Identifier for reporting unknown unlock retries.</doc>
      <source-position filename="mm-unlock-retries.h" line="40"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="UnlockRetries"
           c:symbol-prefix="unlock_retries"
           c:type="MMUnlockRetries"
           parent="GObject.Object"
           glib:type-name="MMUnlockRetries"
           glib:get-type="mm_unlock_retries_get_type"
           glib:type-struct="UnlockRetriesClass">
      <doc xml:space="preserve"
           filename="mm-unlock-retries.h"
           line="46">The #MMUnlockRetries structure contains private data and should only be accessed
using the provided API.</doc>
      <source-position filename="mm-unlock-retries.h" line="61"/>
      <constructor name="new" c:identifier="mm_unlock_retries_new">
        <source-position filename="mm-unlock-retries.h" line="91"/>
        <return-value transfer-ownership="full">
          <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_dictionary"
                   c:identifier="mm_unlock_retries_new_from_dictionary">
        <source-position filename="mm-unlock-retries.h" line="92"/>
        <return-value transfer-ownership="full">
          <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
        </return-value>
        <parameters>
          <parameter name="dictionary" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="build_string"
              c:identifier="mm_unlock_retries_build_string">
        <source-position filename="mm-unlock-retries.h" line="106"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cmp" c:identifier="mm_unlock_retries_cmp">
        <source-position filename="mm-unlock-retries.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="mm_unlock_retries_foreach">
        <doc xml:space="preserve"
             filename="mm-unlock-retries.c"
             line="112">Executes @callback for each lock information found in @self.</doc>
        <source-position filename="mm-unlock-retries.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-unlock-retries.c"
                 line="114">a @MMUnlockRetries.</doc>
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="mm-unlock-retries.c"
                 line="115">callback to call for each available lock.</doc>
            <type name="UnlockRetriesForeachCb"
                  c:type="MMUnlockRetriesForeachCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="mm-unlock-retries.c"
                 line="116">data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="mm_unlock_retries_get">
        <doc xml:space="preserve"
             filename="mm-unlock-retries.c"
             line="63">Gets the unlock retries for the given @lock.</doc>
        <source-position filename="mm-unlock-retries.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-unlock-retries.c"
               line="70">the unlock retries or %MM_UNLOCK_RETRIES_UNKNOWN if unknown.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-unlock-retries.c"
                 line="65">a #MMUnlockRetries.</doc>
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
          <parameter name="lock" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="mm-unlock-retries.c"
                 line="66">a #MMModemLock.</doc>
            <type name="ModemLock" c:type="MMModemLock"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dictionary"
              c:identifier="mm_unlock_retries_get_dictionary">
        <source-position filename="mm-unlock-retries.h" line="104"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="mm_unlock_retries_set">
        <source-position filename="mm-unlock-retries.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
          <parameter name="lock" transfer-ownership="none">
            <type name="ModemLock" c:type="MMModemLock"/>
          </parameter>
          <parameter name="retries" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset" c:identifier="mm_unlock_retries_unset">
        <source-position filename="mm-unlock-retries.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnlockRetries" c:type="MMUnlockRetries*"/>
          </instance-parameter>
          <parameter name="lock" transfer-ownership="none">
            <type name="ModemLock" c:type="MMModemLock"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UnlockRetriesPrivate" c:type="MMUnlockRetriesPrivate*"/>
      </field>
    </class>
    <record name="UnlockRetriesClass"
            c:type="MMUnlockRetriesClass"
            glib:is-gtype-struct-for="UnlockRetries">
      <source-position filename="mm-unlock-retries.h" line="61"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="UnlockRetriesForeachCb" c:type="MMUnlockRetriesForeachCb">
      <doc xml:space="preserve"
           filename="mm-unlock-retries.h"
           line="68">Specifies the type of function passed to mm_unlock_retries_foreach().</doc>
      <source-position filename="mm-unlock-retries.h" line="76"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="lock" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-unlock-retries.h"
               line="70">a #MMModemLock.</doc>
          <type name="ModemLock" c:type="MMModemLock"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="mm-unlock-retries.h"
               line="71">the number of retries left for @lock.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="mm-unlock-retries.h"
               line="72">data passed to the function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="UnlockRetriesPrivate"
            c:type="MMUnlockRetriesPrivate"
            disguised="1">
      <source-position filename="mm-unlock-retries.h" line="44"/>
    </record>
    <function name="bearer_allowed_auth_build_string_from_mask"
              c:identifier="mm_bearer_allowed_auth_build_string_from_mask"
              moved-to="BearerAllowedAuth.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2629">Builds a string containing a comma-separated list of nicknames for
each #MMBearerAllowedAuth in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="371"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2636">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2631">bitmask of MMBearerAllowedAuth values.</doc>
          <type name="BearerAllowedAuth" c:type="MMBearerAllowedAuth"/>
        </parameter>
      </parameters>
    </function>
    <function name="bearer_ip_family_build_string_from_mask"
              c:identifier="mm_bearer_ip_family_build_string_from_mask"
              moved-to="BearerIpFamily.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2527">Builds a string containing a comma-separated list of nicknames for
each #MMBearerIpFamily in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="356"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2534">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2529">bitmask of MMBearerIpFamily values.</doc>
          <type name="BearerIpFamily" c:type="MMBearerIpFamily"/>
        </parameter>
      </parameters>
    </function>
    <function name="bearer_ip_method_get_string"
              c:identifier="mm_bearer_ip_method_get_string"
              moved-to="BearerIpMethod.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2404">Gets the nickname string for the #MMBearerIpMethod specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="337"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2410">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2406">a MMBearerIpMethod.</doc>
          <type name="BearerIpMethod" c:type="MMBearerIpMethod"/>
        </parameter>
      </parameters>
    </function>
    <function name="bearer_type_get_string"
              c:identifier="mm_bearer_type_get_string"
              moved-to="BearerType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2305">Gets the nickname string for the #MMBearerType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="322"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2311">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2307">a MMBearerType.</doc>
          <type name="BearerType" c:type="MMBearerType"/>
        </parameter>
      </parameters>
    </function>
    <function name="call_direction_get_string"
              c:identifier="mm_call_direction_get_string"
              moved-to="CallDirection.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="4325">Gets the nickname string for the #MMCallDirection specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="622"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4331">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4327">a MMCallDirection.</doc>
          <type name="CallDirection" c:type="MMCallDirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="call_state_get_string"
              c:identifier="mm_call_state_get_string"
              moved-to="CallState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="4124">Gets the nickname string for the #MMCallState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="592"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4130">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4126">a MMCallState.</doc>
          <type name="CallState" c:type="MMCallState"/>
        </parameter>
      </parameters>
    </function>
    <function name="call_state_reason_get_string"
              c:identifier="mm_call_state_reason_get_string"
              moved-to="CallStateReason.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="4227">Gets the nickname string for the #MMCallStateReason specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="607"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4233">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4229">a MMCallStateReason.</doc>
          <type name="CallStateReason" c:type="MMCallStateReason"/>
        </parameter>
      </parameters>
    </function>
    <function name="cdma_activation_error_quark"
              c:identifier="mm_cdma_activation_error_quark"
              moved-to="CdmaActivationError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="connection_error_quark"
              c:identifier="mm_connection_error_quark"
              moved-to="ConnectionError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="core_error_quark"
              c:identifier="mm_core_error_quark"
              moved-to="CoreError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="firmware_image_type_get_string"
              c:identifier="mm_firmware_image_type_get_string"
              moved-to="FirmwareImageType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3611">Gets the nickname string for the #MMFirmwareImageType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="517"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3617">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3613">a MMFirmwareImageType.</doc>
          <type name="FirmwareImageType" c:type="MMFirmwareImageType"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_bearer_interface_info"
              c:identifier="mm_gdbus_bearer_interface_info"
              moved-to="GdbusBearer.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="345">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Bearer.top_of_page"&gt;org.freedesktop.ModemManager1.Bearer&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="350">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_bearer_override_properties"
              c:identifier="mm_gdbus_bearer_override_properties"
              moved-to="GdbusBearer.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-bearer.c"
           line="358">Overrides all #GObject properties in the #MmGdbusBearer interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-bearer.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-bearer.c"
             line="366">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="360">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-bearer.c"
               line="361">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem3gpp_interface_info"
              c:identifier="mm_gdbus_modem3gpp_interface_info"
              moved-to="GdbusModem3gpp.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="19282">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2427"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19287">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem3gpp_override_properties"
              c:identifier="mm_gdbus_modem3gpp_override_properties"
              moved-to="GdbusModem3gpp.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="19295">Overrides all #GObject properties in the #MmGdbusModem3gpp interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2428"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="19303">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19297">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="19298">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem3gpp_ussd_interface_info"
              c:identifier="mm_gdbus_modem3gpp_ussd_interface_info"
              moved-to="GdbusModem3gppUssd.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="21763">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Modem3gpp-Ussd.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Modem3gpp.Ussd&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2709"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21768">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem3gpp_ussd_override_properties"
              c:identifier="mm_gdbus_modem3gpp_ussd_override_properties"
              moved-to="GdbusModem3gppUssd.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="21776">Overrides all #GObject properties in the #MmGdbusModem3gppUssd interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2710"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="21784">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21778">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="21779">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_cdma_interface_info"
              c:identifier="mm_gdbus_modem_cdma_interface_info"
              moved-to="GdbusModemCdma.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17189">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-ModemCdma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.ModemCdma&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2175"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17194">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_cdma_override_properties"
              c:identifier="mm_gdbus_modem_cdma_override_properties"
              moved-to="GdbusModemCdma.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="17202">Overrides all #GObject properties in the #MmGdbusModemCdma interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2176"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="17210">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17204">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="17205">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_firmware_interface_info"
              c:identifier="mm_gdbus_modem_firmware_interface_info"
              moved-to="GdbusModemFirmware.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13852">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Firmware.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Firmware&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1679"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13857">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_firmware_override_properties"
              c:identifier="mm_gdbus_modem_firmware_override_properties"
              moved-to="GdbusModemFirmware.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="13865">Overrides all #GObject properties in the #MmGdbusModemFirmware interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1680"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="13873">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13867">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="13868">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_interface_info"
              c:identifier="mm_gdbus_modem_interface_info"
              moved-to="GdbusModem.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="1039">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem.top_of_page"&gt;org.freedesktop.ModemManager1.Modem&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="158"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1044">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_location_interface_info"
              c:identifier="mm_gdbus_modem_location_interface_info"
              moved-to="GdbusModemLocation.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="10191">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Location.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Location&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1212"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10196">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_location_override_properties"
              c:identifier="mm_gdbus_modem_location_override_properties"
              moved-to="GdbusModemLocation.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="10204">Overrides all #GObject properties in the #MmGdbusModemLocation interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1213"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="10212">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10206">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="10207">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_messaging_interface_info"
              c:identifier="mm_gdbus_modem_messaging_interface_info"
              moved-to="GdbusModemMessaging.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="6384">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Messaging.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Messaging&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="694"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6389">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_messaging_override_properties"
              c:identifier="mm_gdbus_modem_messaging_override_properties"
              moved-to="GdbusModemMessaging.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="6397">Overrides all #GObject properties in the #MmGdbusModemMessaging interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="695"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="6405">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6399">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="6400">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_oma_interface_info"
              c:identifier="mm_gdbus_modem_oma_interface_info"
              moved-to="GdbusModemOma.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15097">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Oma.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Oma&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1897"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15102">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_oma_override_properties"
              c:identifier="mm_gdbus_modem_oma_override_properties"
              moved-to="GdbusModemOma.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="15110">Overrides all #GObject properties in the #MmGdbusModemOma interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1898"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="15118">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15112">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="15113">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_override_properties"
              c:identifier="mm_gdbus_modem_override_properties"
              moved-to="GdbusModem.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="1052">Overrides all #GObject properties in the #MmGdbusModem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="159"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="1060">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1054">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="1055">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_signal_interface_info"
              c:identifier="mm_gdbus_modem_signal_interface_info"
              moved-to="GdbusModemSignal.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24760">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Signal.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Signal&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3162"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24765">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_signal_override_properties"
              c:identifier="mm_gdbus_modem_signal_override_properties"
              moved-to="GdbusModemSignal.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="24773">Overrides all #GObject properties in the #MmGdbusModemSignal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="3163"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="24781">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24775">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="24776">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_simple_interface_info"
              c:identifier="mm_gdbus_modem_simple_interface_info"
              moved-to="GdbusModemSimple.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23493">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Simple.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Simple&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2940"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23498">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_simple_override_properties"
              c:identifier="mm_gdbus_modem_simple_override_properties"
              moved-to="GdbusModemSimple.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="23506">Overrides all #GObject properties in the #MmGdbusModemSimple interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="2941"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="23514">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23508">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="23509">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_time_interface_info"
              c:identifier="mm_gdbus_modem_time_interface_info"
              moved-to="GdbusModemTime.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12550">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Time.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Time&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1500"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12555">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_time_override_properties"
              c:identifier="mm_gdbus_modem_time_override_properties"
              moved-to="GdbusModemTime.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="12563">Overrides all #GObject properties in the #MmGdbusModemTime interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="1501"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="12571">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12565">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="12566">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_modem_voice_interface_info"
              c:identifier="mm_gdbus_modem_voice_interface_info"
              moved-to="GdbusModemVoice.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8324">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Modem-Voice.top_of_page"&gt;org.freedesktop.ModemManager1.Modem.Voice&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="949"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8329">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_modem_voice_override_properties"
              c:identifier="mm_gdbus_modem_voice_override_properties"
              moved-to="GdbusModemVoice.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-modem.c"
           line="8337">Overrides all #GObject properties in the #MmGdbusModemVoice interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-modem.h" line="950"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-modem.c"
             line="8345">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8339">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-modem.c"
               line="8340">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_org_freedesktop_modem_manager1_interface_info"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_interface_info"
              moved-to="GdbusOrgFreedesktopModemManager1.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="281">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1.top_of_page"&gt;org.freedesktop.ModemManager1&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="286">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_org_freedesktop_modem_manager1_override_properties"
              c:identifier="mm_gdbus_org_freedesktop_modem_manager1_override_properties"
              moved-to="GdbusOrgFreedesktopModemManager1.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-manager.c"
           line="294">Overrides all #GObject properties in the #MmGdbusOrgFreedesktopModemManager1 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-manager.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-manager.c"
             line="302">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="296">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-manager.c"
               line="297">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_sim_interface_info"
              c:identifier="mm_gdbus_sim_interface_info"
              moved-to="GdbusSim.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="407">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sim.top_of_page"&gt;org.freedesktop.ModemManager1.Sim&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="68"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="412">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_sim_override_properties"
              c:identifier="mm_gdbus_sim_override_properties"
              moved-to="GdbusSim.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sim.c"
           line="420">Overrides all #GObject properties in the #MmGdbusSim interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-sim.h" line="69"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sim.c"
             line="428">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="422">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sim.c"
               line="423">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="gdbus_sms_interface_info"
              c:identifier="mm_gdbus_sms_interface_info"
              moved-to="GdbusSms.interface_info">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="460">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-ModemManager1-Sms.top_of_page"&gt;org.freedesktop.ModemManager1.Sms&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="465">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="gdbus_sms_override_properties"
              c:identifier="mm_gdbus_sms_override_properties"
              moved-to="GdbusSms.override_properties">
      <doc xml:space="preserve"
           filename="generated/mm-gdbus-sms.c"
           line="473">Overrides all #GObject properties in the #MmGdbusSms interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="generated/mm-gdbus-sms.h" line="79"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-gdbus-sms.c"
             line="481">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="475">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-gdbus-sms.c"
               line="476">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_error_quark"
              c:identifier="mm_message_error_quark"
              moved-to="MessageError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="mobile_equipment_error_quark"
              c:identifier="mm_mobile_equipment_error_quark"
              moved-to="MobileEquipmentError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="modem_3gpp_eps_ue_mode_operation_get_string"
              c:identifier="mm_modem_3gpp_eps_ue_mode_operation_get_string"
              moved-to="Modem3gppEpsUeModeOperation.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3513">Gets the nickname string for the #MMModem3gppEpsUeModeOperation specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="502"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3519">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3515">a MMModem3gppEpsUeModeOperation.</doc>
          <type name="Modem3gppEpsUeModeOperation"
                c:type="MMModem3gppEpsUeModeOperation"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_3gpp_facility_build_string_from_mask"
              c:identifier="mm_modem_3gpp_facility_build_string_from_mask"
              moved-to="Modem3gppFacility.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3139">Builds a string containing a comma-separated list of nicknames for
each #MMModem3gppFacility in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="446"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3146">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3141">bitmask of MMModem3gppFacility values.</doc>
          <type name="Modem3gppFacility" c:type="MMModem3gppFacility"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_3gpp_network_availability_get_string"
              c:identifier="mm_modem_3gpp_network_availability_get_string"
              moved-to="Modem3gppNetworkAvailability.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3215">Gets the nickname string for the #MMModem3gppNetworkAvailability specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="457"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3221">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3217">a MMModem3gppNetworkAvailability.</doc>
          <type name="Modem3gppNetworkAvailability"
                c:type="MMModem3gppNetworkAvailability"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_3gpp_registration_state_get_string"
              c:identifier="mm_modem_3gpp_registration_state_get_string"
              moved-to="Modem3gppRegistrationState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3012">Gets the nickname string for the #MMModem3gppRegistrationState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="427"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3018">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3014">a MMModem3gppRegistrationState.</doc>
          <type name="Modem3gppRegistrationState"
                c:type="MMModem3gppRegistrationState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_3gpp_subscription_state_get_string"
              c:identifier="mm_modem_3gpp_subscription_state_get_string"
              moved-to="Modem3gppSubscriptionState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3314">Gets the nickname string for the #MMModem3gppSubscriptionState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="472"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3320">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3316">a MMModem3gppSubscriptionState.</doc>
          <type name="Modem3gppSubscriptionState"
                c:type="MMModem3gppSubscriptionState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_3gpp_ussd_session_state_get_string"
              c:identifier="mm_modem_3gpp_ussd_session_state_get_string"
              moved-to="Modem3gppUssdSessionState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3413">Gets the nickname string for the #MMModem3gppUssdSessionState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="487"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3419">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3415">a MMModem3gppUssdSessionState.</doc>
          <type name="Modem3gppUssdSessionState"
                c:type="MMModem3gppUssdSessionState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_access_technology_build_string_from_mask"
              c:identifier="mm_modem_access_technology_build_string_from_mask"
              moved-to="ModemAccessTechnology.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="690">Builds a string containing a comma-separated list of nicknames for
each #MMModemAccessTechnology in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="116"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="697">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="692">bitmask of MMModemAccessTechnology values.</doc>
          <type name="ModemAccessTechnology" c:type="MMModemAccessTechnology"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_band_get_string"
              c:identifier="mm_modem_band_get_string"
              moved-to="ModemBand.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="986">Gets the nickname string for the #MMModemBand specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="142"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="992">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="988">a MMModemBand.</doc>
          <type name="ModemBand" c:type="MMModemBand"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_capability_build_string_from_mask"
              c:identifier="mm_modem_capability_build_string_from_mask"
              moved-to="ModemCapability.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="61">Builds a string containing a comma-separated list of nicknames for
each #MMModemCapability in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="26"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="68">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="63">bitmask of MMModemCapability values.</doc>
          <type name="ModemCapability" c:type="MMModemCapability"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_cdma_activation_state_get_string"
              c:identifier="mm_modem_cdma_activation_state_get_string"
              moved-to="ModemCdmaActivationState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2805">Gets the nickname string for the #MMModemCdmaActivationState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="397"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2811">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2807">a MMModemCdmaActivationState.</doc>
          <type name="ModemCdmaActivationState"
                c:type="MMModemCdmaActivationState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_cdma_registration_state_get_string"
              c:identifier="mm_modem_cdma_registration_state_get_string"
              moved-to="ModemCdmaRegistrationState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2705">Gets the nickname string for the #MMModemCdmaRegistrationState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="382"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2711">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2707">a MMModemCdmaRegistrationState.</doc>
          <type name="ModemCdmaRegistrationState"
                c:type="MMModemCdmaRegistrationState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_cdma_rm_protocol_get_string"
              c:identifier="mm_modem_cdma_rm_protocol_get_string"
              moved-to="ModemCdmaRmProtocol.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2906">Gets the nickname string for the #MMModemCdmaRmProtocol specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="412"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2912">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2908">a MMModemCdmaRmProtocol.</doc>
          <type name="ModemCdmaRmProtocol" c:type="MMModemCdmaRmProtocol"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_contacts_storage_get_string"
              c:identifier="mm_modem_contacts_storage_get_string"
              moved-to="ModemContactsStorage.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2206">Gets the nickname string for the #MMModemContactsStorage specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="307"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2212">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2208">a MMModemContactsStorage.</doc>
          <type name="ModemContactsStorage" c:type="MMModemContactsStorage"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_location_assistance_data_type_build_string_from_mask"
              c:identifier="mm_modem_location_assistance_data_type_build_string_from_mask"
              moved-to="ModemLocationAssistanceDataType.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2130">Builds a string containing a comma-separated list of nicknames for
each #MMModemLocationAssistanceDataType in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="296"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2137">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2132">bitmask of MMModemLocationAssistanceDataType values.</doc>
          <type name="ModemLocationAssistanceDataType"
                c:type="MMModemLocationAssistanceDataType"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_location_source_build_string_from_mask"
              c:identifier="mm_modem_location_source_build_string_from_mask"
              moved-to="ModemLocationSource.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="2033">Builds a string containing a comma-separated list of nicknames for
each #MMModemLocationSource in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="281"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="2040">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="2035">bitmask of MMModemLocationSource values.</doc>
          <type name="ModemLocationSource" c:type="MMModemLocationSource"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_lock_get_string"
              c:identifier="mm_modem_lock_get_string"
              moved-to="ModemLock.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="150">Gets the nickname string for the #MMModemLock specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="156">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="152">a MMModemLock.</doc>
          <type name="ModemLock" c:type="MMModemLock"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_mode_build_string_from_mask"
              c:identifier="mm_modem_mode_build_string_from_mask"
              moved-to="ModemMode.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="791">Builds a string containing a comma-separated list of nicknames for
each #MMModemMode in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="131"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="798">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="793">bitmask of MMModemMode values.</doc>
          <type name="ModemMode" c:type="MMModemMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_port_type_get_string"
              c:identifier="mm_modem_port_type_get_string"
              moved-to="ModemPortType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1088">Gets the nickname string for the #MMModemPortType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="157"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1094">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1090">a MMModemPortType.</doc>
          <type name="ModemPortType" c:type="MMModemPortType"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_power_state_get_string"
              c:identifier="mm_modem_power_state_get_string"
              moved-to="ModemPowerState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="456">Gets the nickname string for the #MMModemPowerState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="462">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="458">a MMModemPowerState.</doc>
          <type name="ModemPowerState" c:type="MMModemPowerState"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_state_change_reason_get_string"
              c:identifier="mm_modem_state_change_reason_get_string"
              moved-to="ModemStateChangeReason.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="555">Gets the nickname string for the #MMModemStateChangeReason specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="561">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="557">a MMModemStateChangeReason.</doc>
          <type name="ModemStateChangeReason"
                c:type="MMModemStateChangeReason"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_state_failed_reason_get_string"
              c:identifier="mm_modem_state_failed_reason_get_string"
              moved-to="ModemStateFailedReason.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="357">Gets the nickname string for the #MMModemStateFailedReason specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="363">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="359">a MMModemStateFailedReason.</doc>
          <type name="ModemStateFailedReason"
                c:type="MMModemStateFailedReason"/>
        </parameter>
      </parameters>
    </function>
    <function name="modem_state_get_string"
              c:identifier="mm_modem_state_get_string"
              moved-to="ModemState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="258">Gets the nickname string for the #MMModemState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="264">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="260">a MMModemState.</doc>
          <type name="ModemState" c:type="MMModemState"/>
        </parameter>
      </parameters>
    </function>
    <function name="oma_feature_build_string_from_mask"
              c:identifier="mm_oma_feature_build_string_from_mask"
              moved-to="OmaFeature.build_string_from_mask">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3733">Builds a string containing a comma-separated list of nicknames for
each #MMOmaFeature in @mask.</doc>
      <source-position filename="generated/mm-enums-types.h" line="536"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3740">a string with the list of nicknames, or %NULL if none given. The returned value should be freed with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="mask" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3735">bitmask of MMOmaFeature values.</doc>
          <type name="OmaFeature" c:type="MMOmaFeature"/>
        </parameter>
      </parameters>
    </function>
    <function name="oma_session_state_failed_reason_get_string"
              c:identifier="mm_oma_session_state_failed_reason_get_string"
              moved-to="OmaSessionStateFailedReason.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="4021">Gets the nickname string for the #MMOmaSessionStateFailedReason specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="577"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="4027">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="4023">a MMOmaSessionStateFailedReason.</doc>
          <type name="OmaSessionStateFailedReason"
                c:type="MMOmaSessionStateFailedReason"/>
        </parameter>
      </parameters>
    </function>
    <function name="oma_session_state_get_string"
              c:identifier="mm_oma_session_state_get_string"
              moved-to="OmaSessionState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3920">Gets the nickname string for the #MMOmaSessionState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="562"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3926">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3922">a MMOmaSessionState.</doc>
          <type name="OmaSessionState" c:type="MMOmaSessionState"/>
        </parameter>
      </parameters>
    </function>
    <function name="oma_session_type_get_string"
              c:identifier="mm_oma_session_type_get_string"
              moved-to="OmaSessionType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="3813">Gets the nickname string for the #MMOmaSessionType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="547"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="3819">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="3815">a MMOmaSessionType.</doc>
          <type name="OmaSessionType" c:type="MMOmaSessionType"/>
        </parameter>
      </parameters>
    </function>
    <function name="serial_error_quark"
              c:identifier="mm_serial_error_quark"
              moved-to="SerialError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="sms_cdma_service_category_get_string"
              c:identifier="mm_sms_cdma_service_category_get_string"
              moved-to="SmsCdmaServiceCategory.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1908">Gets the nickname string for the #MMSmsCdmaServiceCategory specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="262"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1914">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1910">a MMSmsCdmaServiceCategory.</doc>
          <type name="SmsCdmaServiceCategory"
                c:type="MMSmsCdmaServiceCategory"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_cdma_teleservice_id_get_string"
              c:identifier="mm_sms_cdma_teleservice_id_get_string"
              moved-to="SmsCdmaTeleserviceId.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1776">Gets the nickname string for the #MMSmsCdmaTeleserviceId specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="247"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1782">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1778">a MMSmsCdmaTeleserviceId.</doc>
          <type name="SmsCdmaTeleserviceId" c:type="MMSmsCdmaTeleserviceId"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_delivery_state_get_string"
              c:identifier="mm_sms_delivery_state_get_string"
              moved-to="SmsDeliveryState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1471">Gets the nickname string for the #MMSmsDeliveryState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="202"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1477">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1473">a MMSmsDeliveryState.</doc>
          <type name="SmsDeliveryState" c:type="MMSmsDeliveryState"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_pdu_type_get_string"
              c:identifier="mm_sms_pdu_type_get_string"
              moved-to="SmsPduType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1193">Gets the nickname string for the #MMSmsPduType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="172"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1199">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1195">a MMSmsPduType.</doc>
          <type name="SmsPduType" c:type="MMSmsPduType"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_state_get_string"
              c:identifier="mm_sms_state_get_string"
              moved-to="SmsState.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1294">Gets the nickname string for the #MMSmsState specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="187"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1300">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1296">a MMSmsState.</doc>
          <type name="SmsState" c:type="MMSmsState"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_storage_get_string"
              c:identifier="mm_sms_storage_get_string"
              moved-to="SmsStorage.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1573">Gets the nickname string for the #MMSmsStorage specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="217"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1579">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1575">a MMSmsStorage.</doc>
          <type name="SmsStorage" c:type="MMSmsStorage"/>
        </parameter>
      </parameters>
    </function>
    <function name="sms_validity_type_get_string"
              c:identifier="mm_sms_validity_type_get_string"
              moved-to="SmsValidityType.get_string">
      <doc xml:space="preserve"
           filename="generated/mm-enums-types.c"
           line="1672">Gets the nickname string for the #MMSmsValidityType specified at @val.</doc>
      <source-position filename="generated/mm-enums-types.h" line="232"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="generated/mm-enums-types.c"
             line="1678">a string with the nickname, or %NULL if not found. Do not free the returned value.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="val" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="generated/mm-enums-types.c"
               line="1674">a MMSmsValidityType.</doc>
          <type name="SmsValidityType" c:type="MMSmsValidityType"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
