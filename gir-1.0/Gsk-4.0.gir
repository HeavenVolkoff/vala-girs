<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="4.0"/>
  <include name="Graphene" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <package name="gsk-4.0"/>
  <c:include name="gsk/gsk.h"/>
  <namespace name="Gsk"
             version="4.0"
             shared-library="libgtk-4.so.0"
             c:identifier-prefixes="Gsk"
             c:symbol-prefixes="gsk">
    <enumeration name="BlendMode" version="3.90" c:type="GskBlendMode">
      <doc xml:space="preserve">The blend modes available for render nodes.

The implementation of each blend mode is deferred to the
rendering pipeline.</doc>
      <member name="default" value="0" c:identifier="GSK_BLEND_MODE_DEFAULT">
        <doc xml:space="preserve">The default blend mode, which specifies no blending</doc>
      </member>
      <member name="multiply" value="1" c:identifier="GSK_BLEND_MODE_MULTIPLY">
        <doc xml:space="preserve">The source color is multiplied by the destination
  and replaces the destination</doc>
      </member>
      <member name="screen" value="2" c:identifier="GSK_BLEND_MODE_SCREEN">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="overlay" value="3" c:identifier="GSK_BLEND_MODE_OVERLAY">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="darken" value="4" c:identifier="GSK_BLEND_MODE_DARKEN">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="lighten" value="5" c:identifier="GSK_BLEND_MODE_LIGHTEN">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="color_dodge"
              value="6"
              c:identifier="GSK_BLEND_MODE_COLOR_DODGE">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="color_burn"
              value="7"
              c:identifier="GSK_BLEND_MODE_COLOR_BURN">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="hard_light"
              value="8"
              c:identifier="GSK_BLEND_MODE_HARD_LIGHT">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="soft_light"
              value="9"
              c:identifier="GSK_BLEND_MODE_SOFT_LIGHT">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="difference"
              value="10"
              c:identifier="GSK_BLEND_MODE_DIFFERENCE">
        <doc xml:space="preserve">...</doc>
      </member>
      <member name="exclusion"
              value="11"
              c:identifier="GSK_BLEND_MODE_EXCLUSION">
        <doc xml:space="preserve">...</doc>
      </member>
    </enumeration>
    <class name="RenderNode"
           c:symbol-prefix="render_node"
           c:type="GskRenderNode"
           version="3.90"
           glib:type-name="GskRenderNode"
           glib:get-type="gsk_render_node_get_type"
           glib:type-struct="RenderNodeClass"
           glib:fundamental="1"
           glib:ref-func="gsk_render_node_ref"
           glib:unref-func="gsk_render_node_unref"
           glib:set-value-func="gsk_value_set_render_node"
           glib:get-value-func="gsk_value_get_render_node">
      <doc xml:space="preserve">The `GskRenderNode` structure contains only private data.</doc>
      <method name="append_child"
              c:identifier="gsk_render_node_append_child"
              version="3.90">
        <doc xml:space="preserve">Appends @child to the list of children of @node.

This function acquires a reference on @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains"
              c:identifier="gsk_render_node_contains"
              version="3.90">
        <doc xml:space="preserve">Checks whether @node contains @descendant.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #GskRenderNode contains the given
  descendant</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="descendant" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_draw_context"
              c:identifier="gsk_render_node_get_draw_context"
              version="3.90">
        <doc xml:space="preserve">Creates a Cairo context for drawing using the surface associated
to the render node.
If no surface exists yet, a surface will be created optimized for
rendering to @renderer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a Cairo context used for drawing; use
  cairo_destroy() when done drawing</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="renderer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Renderer to optimize for or %NULL for any</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_first_child"
              c:identifier="gsk_render_node_get_first_child"
              version="3.90">
        <doc xml:space="preserve">Returns the first child of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the first child of the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_child"
              c:identifier="gsk_render_node_get_last_child"
              version="3.90">
        <doc xml:space="preserve">Returns the last child of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the last child of the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_children"
              c:identifier="gsk_render_node_get_n_children"
              version="3.90">
        <doc xml:space="preserve">Retrieves the number of direct children of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of children of the #GskRenderNode</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gsk_render_node_get_name"
              version="3.90">
        <doc xml:space="preserve">Retrieves the name previously set via gsk_render_node_set_name().
If no name has been set, %NULL is returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">The name previously set via
    gsk_render_node_set_name() or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_sibling"
              c:identifier="gsk_render_node_get_next_sibling"
              version="3.90">
        <doc xml:space="preserve">Returns the next sibling of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the next sibling of the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="gsk_render_node_get_parent"
              version="3.90">
        <doc xml:space="preserve">Returns the parent of the @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the parent of the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_previous_sibling"
              c:identifier="gsk_render_node_get_previous_sibling"
              version="3.90">
        <doc xml:space="preserve">Returns the previous sibling of @node.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the previous sibling of the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_child_after"
              c:identifier="gsk_render_node_insert_child_after"
              version="3.90">
        <doc xml:space="preserve">Inserts @child in the list of children of @node, after @sibling.

If @sibling is %NULL, the @child will be inserted at the end of the list
of children.

This function acquires a reference of @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GskRenderNode, or %NULL</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_child_at_pos"
              c:identifier="gsk_render_node_insert_child_at_pos"
              version="3.90">
        <doc xml:space="preserve">Inserts @child into the list of children of @node, using the given @index_.

If @index_ is 0, the @child will be prepended to the list of children.

If @index_ is less than zero, or equal to the number of children, the @child
will be appended to the list of children.

This function acquires a reference on @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
          <parameter name="index_" transfer-ownership="none">
            <doc xml:space="preserve">the index in the list of children where @child should be inserted at</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_child_before"
              c:identifier="gsk_render_node_insert_child_before"
              version="3.90">
        <doc xml:space="preserve">Inserts @child in the list of children of @node, before @sibling.

If @sibling is %NULL, the @child will be inserted at the beginning of the
list of children.

This function acquires a reference of @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GskRenderNode, or %NULL</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_hidden"
              c:identifier="gsk_render_node_is_hidden"
              version="3.90">
        <doc xml:space="preserve">Checks whether a @node is hidden.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #GskRenderNode is hidden</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_opaque"
              c:identifier="gsk_render_node_is_opaque"
              version="3.90">
        <doc xml:space="preserve">Retrieves the value set using gsk_render_node_set_opaque().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the #GskRenderNode is fully opaque</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_child"
              c:identifier="gsk_render_node_prepend_child"
              version="3.90">
        <doc xml:space="preserve">Prepends @child to the list of children of @node.

This function acquires a reference on @child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gsk_render_node_ref" version="3.90">
        <doc xml:space="preserve">Acquires a reference on the given #GskRenderNode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode with an additional reference</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_all_children"
              c:identifier="gsk_render_node_remove_all_children"
              version="3.90">
        <doc xml:space="preserve">Removes all children of @node.

See also: gsk_render_node_remove_child()</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_child" c:identifier="gsk_render_node_remove_child">
        <doc xml:space="preserve">Removes @child from the list of children of @node.

This function releases the reference acquired when adding @child to the
list of children.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode child of @node</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_child"
              c:identifier="gsk_render_node_replace_child"
              version="3.90">
        <doc xml:space="preserve">Replaces @old_child with @new_child in the list of children of @node.

This function acquires a reference to @new_child, and releases a reference
of @old_child.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="new_child" transfer-ownership="none">
            <doc xml:space="preserve">the #GskRenderNode to add</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
          <parameter name="old_child" transfer-ownership="none">
            <doc xml:space="preserve">the #GskRenderNode to replace</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_anchor_point"
              c:identifier="gsk_render_node_set_anchor_point"
              version="3.90">
        <doc xml:space="preserve">Set the anchor point used when rendering the @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve">the anchor point</doc>
            <type name="Graphene.Point3D" c:type="const graphene_point3d_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_blend_mode"
              c:identifier="gsk_render_node_set_blend_mode"
              version="3.90">
        <doc xml:space="preserve">Sets the blend mode to be used when rendering the children
of the @node.

The default value is %GSK_BLEND_MODE_DEFAULT.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="blend_mode" transfer-ownership="none">
            <doc xml:space="preserve">the blend mode to be applied to the node's children</doc>
            <type name="BlendMode" c:type="GskBlendMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bounds"
              c:identifier="gsk_render_node_set_bounds"
              version="3.90">
        <doc xml:space="preserve">Sets the boundaries of @node, which describe the geometry of the
render node, and are used to clip the surface associated to it
when rendering.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="bounds"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the boundaries of @node</doc>
            <type name="Graphene.Rect" c:type="const graphene_rect_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hidden"
              c:identifier="gsk_render_node_set_hidden"
              version="3.90">
        <doc xml:space="preserve">Sets whether the @node should be hidden.

Hidden nodes, and their descendants, are not rendered.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="hidden" transfer-ownership="none">
            <doc xml:space="preserve">whether the @node should be hidden or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gsk_render_node_set_name"
              version="3.90">
        <doc xml:space="preserve">Sets the name of the node.

A name is generally useful for debugging purposes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a name for the node</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opacity"
              c:identifier="gsk_render_node_set_opacity"
              version="3.90">
        <doc xml:space="preserve">Sets the opacity of the @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="opacity" transfer-ownership="none">
            <doc xml:space="preserve">the opacity of the node, between 0 (fully transparent) and
  1 (fully opaque)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opaque"
              c:identifier="gsk_render_node_set_opaque"
              version="3.90">
        <doc xml:space="preserve">Sets whether the node is known to be fully opaque.

Fully opaque nodes will ignore the opacity set using gsk_render_node_set_opacity(),
but if their parent is not opaque they may still be rendered with an opacity.

Renderers may use this information to optimize the rendering pipeline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="opaque" transfer-ownership="none">
            <doc xml:space="preserve">whether the node is fully opaque or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scaling_filter"
              c:identifier="gsk_render_node_set_scaling_filter">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="min_filter" transfer-ownership="none">
            <type name="ScalingFilter" c:type="GskScalingFilter"/>
          </parameter>
          <parameter name="mag_filter" transfer-ownership="none">
            <type name="ScalingFilter" c:type="GskScalingFilter"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_texture"
              c:identifier="gsk_render_node_set_texture"
              version="3.90">
        <doc xml:space="preserve">Associates a #GskTexture to a #GskRenderNode.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve">the #GskTexture</doc>
            <type name="Texture" c:type="GskTexture*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transform"
              c:identifier="gsk_render_node_set_transform"
              version="3.90">
        <doc xml:space="preserve">Sets the transformation matrix used when rendering the @node.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
          <parameter name="transform"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a transformation matrix</doc>
            <type name="Graphene.Matrix" c:type="const graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gsk_render_node_unref" version="3.90">
        <doc xml:space="preserve">Releases a reference on the given #GskRenderNode.

If the reference was the last, the resources associated to the @node are
freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="RenderNodeClass"
            c:type="GskRenderNodeClass"
            disguised="1"
            glib:is-gtype-struct-for="RenderNode">
    </record>
    <record name="RenderNodeIter"
            c:type="GskRenderNodeIter"
            glib:type-name="GskRenderNodeIter"
            glib:get-type="gsk_render_node_iter_get_type"
            c:symbol-prefix="render_node_iter">
      <field name="dummy1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy3" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="dummy4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="dummy5" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <constructor name="new"
                   c:identifier="gsk_render_node_iter_new"
                   version="3.90">
        <doc xml:space="preserve">Allocates a new #GskRenderNodeIter.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly allocated #GskRenderNodeIter</doc>
          <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
        </return-value>
      </constructor>
      <method name="free"
              c:identifier="gsk_render_node_iter_free"
              version="3.90">
        <doc xml:space="preserve">Frees the resources allocated by gsk_render_node_iter_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init"
              c:identifier="gsk_render_node_iter_init"
              version="3.90">
        <doc xml:space="preserve">Initializes a #GskRenderNodeIter for iterating over the
children of @node.

It's safe to call this function multiple times on the same
#GskRenderNodeIter instance.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="gsk_render_node_iter_is_valid"
              version="3.90">
        <doc xml:space="preserve">Checks whether a #GskRenderNodeIter is associated to a #GskRenderNode,
or whether the associated node was modified while iterating.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator is still valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next"
              c:identifier="gsk_render_node_iter_next"
              version="3.90">
        <doc xml:space="preserve">Advances the @iter and retrieves the next child of the root #GskRenderNode
used to initialize the #GskRenderNodeIter.

If the iterator could advance, this function returns %TRUE and sets the
@child argument with the child #GskRenderNode.

If the iterator could not advance, this function returns %FALSE and the
contents of the @child argument are undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator could advance, and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
          <parameter name="child"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">return location for a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode**"/>
          </parameter>
        </parameters>
      </method>
      <method name="prev"
              c:identifier="gsk_render_node_iter_prev"
              version="3.90">
        <doc xml:space="preserve">Advances the @iter and retrieves the previous child of the root
#GskRenderNode used to initialize the #GskRenderNodeIter.

If the iterator could advance, this function returns %TRUE and sets the
@child argument with the child #GskRenderNode.

If the iterator could not advance, this function returns %FALSE and the
contents of the @child argument are undefined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the iterator could advance, and %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
          <parameter name="child"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve">return location for a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode**"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="gsk_render_node_iter_remove"
              version="3.90">
        <doc xml:space="preserve">Removes the child #GskRenderNode currently being visited by
the iterator.

Calling this function on an invalid #GskRenderNodeIter results
in undefined behavior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNodeIter</doc>
            <type name="RenderNodeIter" c:type="GskRenderNodeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="Renderer"
           c:symbol-prefix="renderer"
           c:type="GskRenderer"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GskRenderer"
           glib:get-type="gsk_renderer_get_type"
           glib:type-struct="RendererClass">
      <constructor name="new_for_window"
                   c:identifier="gsk_renderer_new_for_window"
                   version="3.90">
        <doc xml:space="preserve">Creates an appropriate #GskRenderer instance for the given @window.

The renderer will be realized when it is returned.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a #GskRenderer</doc>
          <type name="Renderer" c:type="GskRenderer*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_fallback"
              c:identifier="gsk_renderer_create_fallback"
              version="3.90">
        <doc xml:space="preserve">Creates a fallback #GskRenderer using the same display and window of
the given @renderer, and instructs it to render to a given Cairo
context.

Typically, you'll use this function to implement fallback rendering
of #GskRenderNodes on an intermediate Cairo context, instead of using
the drawing context associated to a #GdkWindow's rendering buffer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a newly created fallback #GskRenderer instance</doc>
          <type name="Renderer" c:type="GskRenderer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve">the viewport for the fallback renderer</doc>
            <type name="Graphene.Rect" c:type="const graphene_rect_t*"/>
          </parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve">a Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_render_node"
              c:identifier="gsk_renderer_create_render_node"
              version="3.90">
        <doc xml:space="preserve">Creates a new #GskRenderNode instance tied to the given @renderer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the new #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display"
              c:identifier="gsk_renderer_get_display"
              version="3.90">
        <doc xml:space="preserve">Retrieves the #GdkDisplay used when creating the #GskRenderer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GdkDisplay</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scale_factor"
              c:identifier="gsk_renderer_get_scale_factor"
              version="3.90">
        <doc xml:space="preserve">Gets the scale factor for the @renderer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the scale factor</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_viewport"
              c:identifier="gsk_renderer_get_viewport"
              version="3.90">
        <doc xml:space="preserve">Retrieves the viewport of the #GskRenderer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="viewport"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">return location for the viewport rectangle</doc>
            <type name="Graphene.Rect" c:type="graphene_rect_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window"
              c:identifier="gsk_renderer_get_window"
              version="3.90">
        <doc xml:space="preserve">Retrieves the #GdkWindow set using gsk_renderer_realize(). If the renderer
has not been realized yet, %NULL will be returned.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GdkWindow</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="realize"
              c:identifier="gsk_renderer_realize"
              version="3.90"
              throws="1">
        <doc xml:space="preserve">Creates the resources needed by the @renderer to render the scene
graph.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">the #GdkWindow renderer will be used on</doc>
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render" c:identifier="gsk_renderer_render" version="3.90">
        <doc xml:space="preserve">Renders the scene graph, described by a tree of #GskRenderNode instances,
using the given #GdkDrawingContext.

The @renderer will acquire a reference on the #GskRenderNode tree while
the rendering is in progress, and will make the tree immutable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderNode</doc>
            <type name="RenderNode" c:type="GskRenderNode*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve">a #GdkDrawingContext</doc>
            <type name="Gdk.DrawingContext" c:type="GdkDrawingContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scale_factor"
              c:identifier="gsk_renderer_set_scale_factor"
              version="3.90">
        <doc xml:space="preserve">Sets the scale factor for the renderer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="scale_factor" transfer-ownership="none">
            <doc xml:space="preserve">the new scale factor</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_viewport"
              c:identifier="gsk_renderer_set_viewport"
              version="3.90">
        <doc xml:space="preserve">Sets the visible rectangle to be used as the viewport for
the rendering.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="viewport"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the viewport rectangle used by the @renderer</doc>
            <type name="Graphene.Rect" c:type="const graphene_rect_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window" c:identifier="gsk_renderer_set_window">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Gdk.Window" c:type="GdkWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unrealize"
              c:identifier="gsk_renderer_unrealize"
              version="3.90">
        <doc xml:space="preserve">Releases all the resources created by gsk_renderer_realize().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="renderer" transfer-ownership="none">
            <doc xml:space="preserve">a #GskRenderer</doc>
            <type name="Renderer" c:type="GskRenderer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display"
                version="3.90"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The #GdkDisplay used by the #GskRenderer.</doc>
        <type name="Gdk.Display"/>
      </property>
      <property name="drawing-context"
                version="3.90"
                transfer-ownership="none">
        <doc xml:space="preserve">The drawing context used when rendering.</doc>
        <type name="Gdk.DrawingContext"/>
      </property>
      <property name="scale-factor"
                version="3.90"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The scale factor used when rendering.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="viewport"
                version="3.90"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The visible area used by the #GskRenderer to render its contents.</doc>
        <type name="Graphene.Rect"/>
      </property>
      <property name="window"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gdk.Window"/>
      </property>
    </class>
    <record name="RendererClass"
            c:type="GskRendererClass"
            disguised="1"
            glib:is-gtype-struct-for="Renderer">
    </record>
    <enumeration name="ScalingFilter" version="3.90" c:type="GskScalingFilter">
      <doc xml:space="preserve">The filters used when scaling texture data.

The actual implementation of each filter is deferred to the
rendering pipeline.</doc>
      <member name="linear" value="0" c:identifier="GSK_SCALING_FILTER_LINEAR">
        <doc xml:space="preserve">linear interpolation filter</doc>
      </member>
      <member name="nearest"
              value="1"
              c:identifier="GSK_SCALING_FILTER_NEAREST">
        <doc xml:space="preserve">nearest neighbor interpolation filter</doc>
      </member>
      <member name="trilinear"
              value="2"
              c:identifier="GSK_SCALING_FILTER_TRILINEAR">
        <doc xml:space="preserve">linear interpolation along each axis,
  plus mipmap generation, with linear interpolation along the mipmap
  levels</doc>
      </member>
    </enumeration>
    <record name="Texture"
            c:type="GskTexture"
            version="3.90"
            glib:type-name="GskTexture"
            glib:get-type="gsk_texture_get_type"
            c:symbol-prefix="texture">
      <doc xml:space="preserve">The `GskTexture` structure contains only private data.</doc>
      <constructor name="new_for_data" c:identifier="gsk_texture_new_for_data">
        <return-value transfer-ownership="full">
          <type name="Texture" c:type="GskTexture*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="stride" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_pixbuf"
                   c:identifier="gsk_texture_new_for_pixbuf">
        <return-value transfer-ownership="full">
          <type name="Texture" c:type="GskTexture*"/>
        </return-value>
        <parameters>
          <parameter name="pixbuf" transfer-ownership="none">
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_height"
              c:identifier="gsk_texture_get_height"
              version="3.90">
        <doc xml:space="preserve">Returns the height of the @texture.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the height of the #GskTexture</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve">a #GskTexture</doc>
            <type name="Texture" c:type="GskTexture*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="gsk_texture_get_width"
              version="3.90">
        <doc xml:space="preserve">Returns the width of @texture.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the width of the #GskTexture</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve">a #GskTexture</doc>
            <type name="Texture" c:type="GskTexture*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gsk_texture_ref" version="3.90">
        <doc xml:space="preserve">Acquires a reference on the given #GskTexture.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GskTexture with an additional reference</doc>
          <type name="Texture" c:type="GskTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve">a #GskTexture</doc>
            <type name="Texture" c:type="GskTexture*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gsk_texture_unref" version="3.90">
        <doc xml:space="preserve">Releases a reference on the given #GskTexture.

If the reference was the last, the resources associated to the @texture are
freed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve">a #GskTexture</doc>
            <type name="Texture" c:type="GskTexture*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function name="value_dup_render_node"
              c:identifier="gsk_value_dup_render_node"
              version="3.90">
      <doc xml:space="preserve">Retrieves the #GskRenderNode stored inside the @value, and
acquires a reference to it.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">a #GskRenderNode</doc>
        <type name="RenderNode" c:type="GskRenderNode*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_get_render_node"
              c:identifier="gsk_value_get_render_node"
              version="3.90">
      <doc xml:space="preserve">Retrieves the #GskRenderNode stored inside the @value.</doc>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve">a #GskRenderNode</doc>
        <type name="RenderNode" c:type="GskRenderNode*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_set_render_node"
              c:identifier="gsk_value_set_render_node"
              version="3.90">
      <doc xml:space="preserve">Sets the @node into the @value.

This function acquires a reference on @node.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="node"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_take_render_node"
              c:identifier="gsk_value_take_render_node"
              version="3.90">
      <doc xml:space="preserve">Sets the @node into the @value, without taking a reference to it.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a #GValue</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="node"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GskRenderNode</doc>
          <type name="RenderNode" c:type="GskRenderNode*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
