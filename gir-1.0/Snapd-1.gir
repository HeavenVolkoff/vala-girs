<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="snapd-glib"/>
  <c:include name="snapd-glib/snapd-glib.h"/>
  <namespace name="Snapd"
             version="1"
             shared-library="libsnapd-glib.so.1"
             c:identifier-prefixes="Snapd"
             c:symbol-prefixes="snapd">
    <class name="Alias"
           c:symbol-prefix="alias"
           c:type="SnapdAlias"
           version="1.8"
           parent="GObject.Object"
           glib:type-name="SnapdAlias"
           glib:get-type="snapd_alias_get_type"
           glib:type-struct="AliasClass">
      <doc xml:space="preserve">#SnapdAlias is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_app" c:identifier="snapd_alias_get_app" version="1.8">
        <doc xml:space="preserve">Get the app this is an alias for.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an app name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_alias_get_name"
              version="1.8">
        <doc xml:space="preserve">Get the name of this alias.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an alias name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_alias_get_snap"
              version="1.8">
        <doc xml:space="preserve">Get the snap this alias is for.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_alias_get_status"
              version="1.8">
        <doc xml:space="preserve">Get the status of this alias.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdAliasStatus.</doc>
          <type name="AliasStatus" c:type="SnapdAliasStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AliasStatus"/>
      </property>
    </class>
    <record name="AliasClass"
            c:type="SnapdAliasClass"
            glib:is-gtype-struct-for="Alias">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="AliasStatus"
                 version="1.8"
                 glib:type-name="SnapdAliasStatus"
                 glib:get-type="snapd_alias_status_get_type"
                 c:type="SnapdAliasStatus">
      <doc xml:space="preserve">Status of an alias.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_ALIAS_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">the alias status is unknown.</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="SNAPD_ALIAS_STATUS_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve">the alias is set to default behaviour.</doc>
      </member>
      <member name="enabled"
              value="2"
              c:identifier="SNAPD_ALIAS_STATUS_ENABLED"
              glib:nick="enabled">
        <doc xml:space="preserve">the alias is enabled.</doc>
      </member>
      <member name="disabled"
              value="3"
              c:identifier="SNAPD_ALIAS_STATUS_DISABLED"
              glib:nick="disabled">
        <doc xml:space="preserve">the alias is disabled.</doc>
      </member>
      <member name="auto"
              value="4"
              c:identifier="SNAPD_ALIAS_STATUS_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve">the alias is automatically enabled</doc>
      </member>
    </enumeration>
    <class name="App"
           c:symbol-prefix="app"
           c:type="SnapdApp"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdApp"
           glib:get-type="snapd_app_get_type"
           glib:type-struct="AppClass">
      <doc xml:space="preserve">#SnapdApp is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_aliases"
              c:identifier="snapd_app_get_aliases"
              version="1.7">
        <doc xml:space="preserve">Get the aliases for this app.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the alias names.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_daemon_type"
              c:identifier="snapd_app_get_daemon_type"
              version="1.9">
        <doc xml:space="preserve">Get the daemon type for this app.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">the daemon type or %NULL.</doc>
          <type name="DaemonType" c:type="SnapdDaemonType"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file"
              c:identifier="snapd_app_get_desktop_file"
              version="1.14">
        <doc xml:space="preserve">Get the path to the desktop file for this app.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a path or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_app_get_name" version="1.0">
        <doc xml:space="preserve">Get the name of this app.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="aliases"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="daemon-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DaemonType"/>
      </property>
      <property name="desktop-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AppClass"
            c:type="SnapdAppClass"
            glib:is-gtype-struct-for="App">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Assertion"
           c:symbol-prefix="assertion"
           c:type="SnapdAssertion"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAssertion"
           glib:get-type="snapd_assertion_get_type"
           glib:type-struct="AssertionClass">
      <doc xml:space="preserve">#SnapdAssertion is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <constructor name="new" c:identifier="snapd_assertion_new" version="1.0">
        <doc xml:space="preserve">Create a new assertion.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #SnapdAssertion</doc>
          <type name="Assertion" c:type="SnapdAssertion*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve">the text content of the assertion.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_body"
              c:identifier="snapd_assertion_get_body"
              version="1.0">
        <doc xml:space="preserve">Get the body of the assertion.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">assertion body or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header"
              c:identifier="snapd_assertion_get_header"
              version="1.0">
        <doc xml:space="preserve">Get a header from an assertion.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">header value or %NULL if undefined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of the header.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headers"
              c:identifier="snapd_assertion_get_headers"
              version="1.0">
        <doc xml:space="preserve">Get the headers provided by this assertion.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">array of header names.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signature"
              c:identifier="snapd_assertion_get_signature"
              version="1.0">
        <doc xml:space="preserve">Get the signature of the assertion.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">assertion signature.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AssertionClass"
            c:type="SnapdAssertionClass"
            glib:is-gtype-struct-for="Assertion">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AuthData"
           c:symbol-prefix="auth_data"
           c:type="SnapdAuthData"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAuthData"
           glib:get-type="snapd_auth_data_get_type"
           glib:type-struct="AuthDataClass">
      <doc xml:space="preserve">#SnapdAuthData is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <constructor name="new" c:identifier="snapd_auth_data_new" version="1.0">
        <doc xml:space="preserve">Create some authorization data.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #SnapdAuthData</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <parameter name="macaroon" transfer-ownership="none">
            <doc xml:space="preserve">serialzied macaroon used to authorize access to snapd.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="discharges" transfer-ownership="none">
            <doc xml:space="preserve">serialized discharges.</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_discharges"
              c:identifier="snapd_auth_data_get_discharges"
              version="1.0">
        <doc xml:space="preserve">Get the discharges that this authorization uses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the discharges as serialized strings.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_macaroon"
              c:identifier="snapd_auth_data_get_macaroon"
              version="1.0">
        <doc xml:space="preserve">Get the Macaroon that this authorization uses.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the serialized Macaroon used to authorize access to snapd.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="discharges" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="macaroon" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AuthDataClass"
            c:type="SnapdAuthDataClass"
            glib:is-gtype-struct-for="AuthData">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Change"
           c:symbol-prefix="change"
           c:type="SnapdChange"
           version="1.5"
           parent="GObject.Object"
           glib:type-name="SnapdChange"
           glib:get-type="snapd_change_get_type"
           glib:type-struct="ChangeClass">
      <doc xml:space="preserve">#SnapdChange is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_id" c:identifier="snapd_change_get_id" version="1.5">
        <doc xml:space="preserve">Get the unique ID for this change.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="snapd_change_get_kind"
              version="1.5">
        <doc xml:space="preserve">Gets the kind of change this is.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the kind of change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_change_get_ready"
              version="1.5">
        <doc xml:space="preserve">Get if this change is completed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this change is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_change_get_ready_time"
              version="1.5">
        <doc xml:space="preserve">Get the time this taksk completed or %NULL if not yet completed.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_change_get_spawn_time"
              version="1.5">
        <doc xml:space="preserve">Get the time this change started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_change_get_status"
              version="1.5">
        <doc xml:space="preserve">Get the status of the change.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_change_get_summary"
              version="1.5">
        <doc xml:space="preserve">Get a human readable description of the change.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string describing the change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tasks"
              c:identifier="snapd_change_get_tasks"
              version="1.5">
        <doc xml:space="preserve">Get the tasks that are in this change.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdTask.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Task"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tasks"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
    </class>
    <record name="ChangeClass"
            c:type="SnapdChangeClass"
            glib:is-gtype-struct-for="Change">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="SnapdClient"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdClient"
           glib:get-type="snapd_client_get_type"
           glib:type-struct="ClientClass">
      <doc xml:space="preserve">#SnapdClient is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <constructor name="new" c:identifier="snapd_client_new" version="1.0">
        <doc xml:space="preserve">Create a new client to talk to snapd.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_socket"
                   c:identifier="snapd_client_new_from_socket"
                   version="1.5">
        <doc xml:space="preserve">Create a new client to talk on an existing socket.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve">A #GSocket that is connected to snapd.</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_assertions_async"
              c:identifier="snapd_client_add_assertions_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously add an assertion.
See snapd_client_add_assertions_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve">assertions to add.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_finish"
              c:identifier="snapd_client_add_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_add_assertions_async().
See snapd_client_add_assertions_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_sync"
              c:identifier="snapd_client_add_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Add an assertion.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve">assertions to add.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_async"
              c:identifier="snapd_client_buy_async"
              version="1.3">
        <doc xml:space="preserve">Asynchronously buy a snap from the store.
See snapd_client_buy_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_finish"
              c:identifier="snapd_client_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_buy_async().
See snapd_client_buy_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_sync"
              c:identifier="snapd_client_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Buy a snap from the store. Once purchased, this snap can be installed with
snapd_client_install2_sync().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_async"
              c:identifier="snapd_client_check_buy_async"
              version="1.3">
        <doc xml:space="preserve">Asynchronously check if able to buy snaps.
See snapd_client_check_buy_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_finish"
              c:identifier="snapd_client_check_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_check_buy_async().
See snapd_client_check_buy_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_sync"
              c:identifier="snapd_client_check_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Check if able to buy snaps.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if able to buy snaps or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_async"
              c:identifier="snapd_client_connect_async"
              version="1.3">
        <doc xml:space="preserve">Asynchronously connect to snapd.
See snapd_client_connect_sync () for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="snapd_client_connect_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_connect_async().
See snapd_client_connect_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_async"
              c:identifier="snapd_client_connect_interface_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously connect two interfaces together.
See snapd_client_connect_interface_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_finish"
              c:identifier="snapd_client_connect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_connect_interface_async().
See snapd_client_connect_interface_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_sync"
              c:identifier="snapd_client_connect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Connect two interfaces together.
An asynchronous version of this function is snapd_client_connect_interface_async().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="snapd_client_connect_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Connect to snapd.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_async"
              c:identifier="snapd_client_create_user_async"
              version="1.3">
        <doc xml:space="preserve">Asynchronously create a local user account.
See snapd_client_create_user_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_finish"
              c:identifier="snapd_client_create_user_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_create_user_async().
See snapd_client_create_user_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_sync"
              c:identifier="snapd_client_create_user_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Create a local user account for the given user.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_async"
              c:identifier="snapd_client_create_users_async"
              version="1.3">
        <doc xml:space="preserve">Asynchronously create a local user account.
See snapd_client_create_user_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_finish"
              c:identifier="snapd_client_create_users_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_create_users_async().
See snapd_client_create_users_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_sync"
              c:identifier="snapd_client_create_users_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve">Create local user accounts using the system-user assertions that are valid for this device.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_async"
              c:identifier="snapd_client_disable_aliases_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously change the state of aliases.
See snapd_client_disable_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_finish"
              c:identifier="snapd_client_disable_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_disable_aliases_async().
See snapd_client_disable_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_sync"
              c:identifier="snapd_client_disable_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Change the state of aliases.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_async"
              c:identifier="snapd_client_disable_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously disable an installed snap.
See snapd_client_disable_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_finish"
              c:identifier="snapd_client_disable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_disable_async().
See snapd_client_disable_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_sync"
              c:identifier="snapd_client_disable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Disable an installed snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_async"
              c:identifier="snapd_client_disconnect_interface_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously disconnect two interfaces.
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_finish"
              c:identifier="snapd_client_disconnect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_disconnect_interface_async().
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_sync"
              c:identifier="snapd_client_disconnect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Disconnect two interfaces.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_async"
              c:identifier="snapd_client_enable_aliases_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously change the state of aliases.
See snapd_client_enable_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_finish"
              c:identifier="snapd_client_enable_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_enable_aliases_async().
See snapd_client_enable_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_sync"
              c:identifier="snapd_client_enable_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Change the state of aliases.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_async"
              c:identifier="snapd_client_enable_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously enable an installed snap.
See snapd_client_enable_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_finish"
              c:identifier="snapd_client_enable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_enable_async().
See snapd_client_enable_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_sync"
              c:identifier="snapd_client_enable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Enable an installed snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_async"
              c:identifier="snapd_client_find_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously find snaps in the store.
See snapd_client_find_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_finish"
              c:identifier="snapd_client_find_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_async"
              c:identifier="snapd_client_find_refreshable_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously find snaps in store that are newer revisions than locally installed versions.
See snapd_client_find_refreshable_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_finish"
              c:identifier="snapd_client_find_refreshable_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_find_refreshable_async().
See snapd_client_find_refreshable_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_sync"
              c:identifier="snapd_client_find_refreshable_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Find snaps in store that are newer revisions than locally installed versions.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_async"
              c:identifier="snapd_client_find_section_async"
              version="1.7">
        <doc xml:space="preserve">Asynchronously find snaps in the store.
See snapd_client_find_section_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_finish"
              c:identifier="snapd_client_find_section_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_sync"
              c:identifier="snapd_client_find_section_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve">Find snaps in the store.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sync"
              c:identifier="snapd_client_find_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Find snaps in the store.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_async"
              c:identifier="snapd_client_get_aliases_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously get the available aliases.
See snapd_client_get_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_finish"
              c:identifier="snapd_client_get_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_aliases_async().
See snapd_client_get_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_sync"
              c:identifier="snapd_client_get_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Get the available aliases.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_interaction"
              c:identifier="snapd_client_get_allow_interaction"
              version="1.19">
        <doc xml:space="preserve">Get whether snapd operations are allowed to interact with the user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if interaction is allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_assertions_async"
              c:identifier="snapd_client_get_assertions_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously get assertions.
See snapd_client_get_assertions_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_finish"
              c:identifier="snapd_client_get_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_assertions_async().
See snapd_client_get_assertions_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of assertions or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_sync"
              c:identifier="snapd_client_get_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Get assertions.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of assertions or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auth_data"
              c:identifier="snapd_client_get_auth_data"
              version="1.0">
        <doc xml:space="preserve">Get the authorization data that is used for requests.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #SnapdAuthData or %NULL.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_async"
              c:identifier="snapd_client_get_icon_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously get the icon for an installed snap.
See snapd_client_get_icon_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_finish"
              c:identifier="snapd_client_get_icon_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_icon_async().
See snapd_client_get_icon_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_sync"
              c:identifier="snapd_client_get_icon_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Get the icon for an installed snap.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_async"
              c:identifier="snapd_client_get_interfaces_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously get the installed snap interfaces.
See snapd_client_get_interfaces_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_finish"
              c:identifier="snapd_client_get_interfaces_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_interfaces_async().
See snapd_client_get_interfaces_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_sync"
              c:identifier="snapd_client_get_interfaces_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Get the installed snap interfaces.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_async"
              c:identifier="snapd_client_get_sections_async"
              version="1.7">
        <doc xml:space="preserve">Asynchronously create a local user account.
See snapd_client_get_sections_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_finish"
              c:identifier="snapd_client_get_sections_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_sections_async().
See snapd_client_get_sections_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of section names or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_sync"
              c:identifier="snapd_client_get_sections_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve">Get the store sections.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of section names or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_async"
              c:identifier="snapd_client_get_system_information_async"
              version="1.0">
        <doc xml:space="preserve">Request system information asynchronously from snapd.
See snapd_client_get_system_information_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_finish"
              c:identifier="snapd_client_get_system_information_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_get_system_information_async().
See snapd_client_get_system_information_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_sync"
              c:identifier="snapd_client_get_system_information_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Request system information from snapd.
While this blocks, snapd is expected to return the information quickly.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_agent"
              c:identifier="snapd_client_get_user_agent"
              version="1.16">
        <doc xml:space="preserve">Get the HTTP user-agent that is sent with each request to snapd.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">user agent or %NULL if none set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="install2_async"
              c:identifier="snapd_client_install2_async"
              version="1.12">
        <doc xml:space="preserve">Asynchronously install a snap from the store.
See snapd_client_install2_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_finish"
              c:identifier="snapd_client_install2_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_install2_async().
See snapd_client_install2_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_sync"
              c:identifier="snapd_client_install2_sync"
              version="1.12"
              throws="1">
        <doc xml:space="preserve">Install a snap from the store.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_async"
              c:identifier="snapd_client_install_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12">
        <doc xml:space="preserve">Asynchronously install a snap from the store.
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_async()</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_finish"
              c:identifier="snapd_client_install_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_install_async().
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_finish()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_async"
              c:identifier="snapd_client_install_stream_async"
              version="1.9">
        <doc xml:space="preserve">Asynchronously install a snap.
See snapd_client_install_stream_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_finish"
              c:identifier="snapd_client_install_stream_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_install_stream_async().
See snapd_client_install_stream_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_sync"
              c:identifier="snapd_client_install_stream_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve">Install a snap. The snap contents are provided in the form of an input stream.
To install from a local file, do the following:

|[
g_autoptr(GFile) file = g_file_new_for_path (path_to_snap_file);
g_autoptr(GInputStream) stream = g_file_read (file, cancellable, &amp;error);
snapd_client_install_stream_sync (client, stream, progress_cb, NULL, cancellable, &amp;error);
\]

Or if you have the file in memory you can use:

|[
g_autoptr(GInputStream) stream = g_memory_input_stream_new_from_data (data, data_length, free_data);
snapd_client_install_stream_sync (client, stream, progress_cb, NULL, cancellable, &amp;error);
\]</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_sync"
              c:identifier="snapd_client_install_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve">Install a snap from the store.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_sync()</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_async"
              c:identifier="snapd_client_list_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously get information on all installed snaps.
See snapd_client_list_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="snapd_client_list_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_list_async().
See snapd_client_list_sync() for more information.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_async"
              c:identifier="snapd_client_list_one_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously get information of a single installed snap.
See snapd_client_list_one_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_finish"
              c:identifier="snapd_client_list_one_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_list_one_async().
See snapd_client_list_one_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_sync"
              c:identifier="snapd_client_list_one_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Get information of a single installed snap.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="snapd_client_list_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Get information on all installed snaps.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_async"
              c:identifier="snapd_client_login_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously get authorization to install/remove snaps.
See snapd_client_login_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">usename to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_finish"
              c:identifier="snapd_client_login_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_login_async().
See snapd_client_login_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_sync"
              c:identifier="snapd_client_login_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Log in to snapd and get authorization to install/remove snaps.
This call requires root access; use snapd_login_sync() if you are non-root.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve">usename to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_async"
              c:identifier="snapd_client_refresh_all_async"
              version="1.5">
        <doc xml:space="preserve">Asynchronously ensure all snaps are updated to their latest versions.
See snapd_client_refresh_all_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_finish"
              c:identifier="snapd_client_refresh_all_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_refresh_all_async().
See snapd_client_refresh_all_sync() for more information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_sync"
              c:identifier="snapd_client_refresh_all_sync"
              version="1.5"
              throws="1">
        <doc xml:space="preserve">Update all installed snaps to their latest version.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async"
              c:identifier="snapd_client_refresh_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously ensure an installed snap is at the latest version.
See snapd_client_refresh_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="snapd_client_refresh_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_refresh_async().
See snapd_client_refresh_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sync"
              c:identifier="snapd_client_refresh_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Ensure an installed snap is at the latest version.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="snapd_client_remove_async"
              version="1.0">
        <doc xml:space="preserve">Asynchronously uninstall a snap.
See snapd_client_remove_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="snapd_client_remove_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_remove_async().
See snapd_client_remove_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="snapd_client_remove_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve">Uninstall a snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_async"
              c:identifier="snapd_client_reset_aliases_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously change the state of aliases.
See snapd_client_reset_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_finish"
              c:identifier="snapd_client_reset_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_reset_aliases_async().
See snapd_client_reset_aliases_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_sync"
              c:identifier="snapd_client_reset_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Change the state of aliases.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve">the aliases to modify.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_async"
              c:identifier="snapd_client_run_snapctl_async"
              version="1.8">
        <doc xml:space="preserve">Asynchronously run a snapctl command.
See snapd_client_run_snapctl_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve">the arguments to pass to snapctl.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_finish"
              c:identifier="snapd_client_run_snapctl_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_run_snapctl_async().
See snapd_client_run_snapctl_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to write the stdout from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to write the stderr from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_sync"
              c:identifier="snapd_client_run_snapctl_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve">Run a snapctl command.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve">the arguments to pass to snapctl.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to write the stdout from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">the location to write the stderr from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_interaction"
              c:identifier="snapd_client_set_allow_interaction"
              version="1.19">
        <doc xml:space="preserve">Set whether snapd operations are allowed to interact with the user.
This affects operations that use polkit authorisation.
Defaults to TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="allow_interaction" transfer-ownership="none">
            <doc xml:space="preserve">whether to allow interaction.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth_data"
              c:identifier="snapd_client_set_auth_data"
              version="1.0">
        <doc xml:space="preserve">Set the authorization data to use for requests. Authorization data can be
obtained by:

- Logging into snapd using snapd_login_sync() or snapd_client_login_sync()
  (requires root access)

- Using an existing authorization with snapd_auth_data_new().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="auth_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #SnapdAuthData or %NULL.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_agent"
              c:identifier="snapd_client_set_user_agent"
              version="1.16">
        <doc xml:space="preserve">Set the HTTP user-agent that is sent with each request to snapd.
Defaults to "snapd-glib/VERSION".</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="user_agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a user agent or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_async"
              c:identifier="snapd_client_try_async"
              version="1.9">
        <doc xml:space="preserve">Asynchronously try a snap.
See snapd_client_try_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_finish"
              c:identifier="snapd_client_try_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve">Complete request started with snapd_client_try_async().
See snapd_client_try_sync() for more information.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_sync"
              c:identifier="snapd_client_try_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve">Try a snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="SnapdClientClass"
            glib:is-gtype-struct-for="Client">
      <doc xml:space="preserve">Class structure for #SnapdClient.</doc>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_snapd_reserved1" introspectable="0">
        <callback name="_snapd_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved2" introspectable="0">
        <callback name="_snapd_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved3" introspectable="0">
        <callback name="_snapd_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved4" introspectable="0">
        <callback name="_snapd_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="Confinement"
                 version="1.0"
                 glib:type-name="SnapdConfinement"
                 glib:get-type="snapd_confinement_get_type"
                 c:type="SnapdConfinement">
      <doc xml:space="preserve">Confinment used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">the confinement of the snap is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve">the snap is using confinement.</doc>
      </member>
      <member name="devmode"
              value="2"
              c:identifier="SNAPD_CONFINEMENT_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve">the snap is in dev mode (i.e. unconfined).</doc>
      </member>
      <member name="classic"
              value="3"
              c:identifier="SNAPD_CONFINEMENT_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve">the snap is using classic confinement.</doc>
      </member>
    </enumeration>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="SnapdConnection"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdConnection"
           glib:get-type="snapd_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:space="preserve">#SnapdConnection is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_name"
              c:identifier="snapd_connection_get_name"
              version="1.0">
        <doc xml:space="preserve">Get the name of this connection (i.e. a slot or plug name).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_connection_get_snap"
              version="1.0">
        <doc xml:space="preserve">Get the snap this connection is on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ConnectionClass"
            c:type="SnapdConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="CreateUserFlags"
              version="1.3"
              glib:type-name="SnapdCreateUserFlags"
              glib:get-type="snapd_create_user_flags_get_type"
              c:type="SnapdCreateUserFlags">
      <doc xml:space="preserve">Flag to control when a user accounts is created.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_CREATE_USER_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags, default behaviour.</doc>
      </member>
      <member name="sudo"
              value="1"
              c:identifier="SNAPD_CREATE_USER_FLAGS_SUDO"
              glib:nick="sudo">
        <doc xml:space="preserve">Gives sudo access to created user.</doc>
      </member>
      <member name="known"
              value="2"
              c:identifier="SNAPD_CREATE_USER_FLAGS_KNOWN"
              glib:nick="known">
        <doc xml:space="preserve">Use the local system-user assertions to create the user.</doc>
      </member>
    </bitfield>
    <enumeration name="DaemonType"
                 version="1.9"
                 glib:type-name="SnapdDaemonType"
                 glib:get-type="snapd_daemon_type_get_type"
                 c:type="SnapdDaemonType">
      <doc xml:space="preserve">Type of daemon.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_DAEMON_TYPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve">Not a daemon</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="SNAPD_DAEMON_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">Unknown daemon type</doc>
      </member>
      <member name="simple"
              value="2"
              c:identifier="SNAPD_DAEMON_TYPE_SIMPLE"
              glib:nick="simple">
        <doc xml:space="preserve">Simple daemon</doc>
      </member>
      <member name="forking"
              value="3"
              c:identifier="SNAPD_DAEMON_TYPE_FORKING"
              glib:nick="forking">
        <doc xml:space="preserve">Forking daemon</doc>
      </member>
      <member name="oneshot"
              value="4"
              c:identifier="SNAPD_DAEMON_TYPE_ONESHOT"
              glib:nick="oneshot">
        <doc xml:space="preserve">One-shot daemon</doc>
      </member>
      <member name="dbus"
              value="5"
              c:identifier="SNAPD_DAEMON_TYPE_DBUS"
              glib:nick="dbus">
        <doc xml:space="preserve">D-Bus daemon</doc>
      </member>
      <member name="notify"
              value="6"
              c:identifier="SNAPD_DAEMON_TYPE_NOTIFY"
              glib:nick="notify">
        <doc xml:space="preserve">Notify daemon</doc>
      </member>
    </enumeration>
    <enumeration name="Error"
                 version="1.0"
                 glib:type-name="SnapdError"
                 glib:get-type="snapd_error_get_type"
                 c:type="SnapdError"
                 glib:error-domain="snapd-error-quark">
      <doc xml:space="preserve">Error codes returned by snapd operations.</doc>
      <member name="connection_failed"
              value="0"
              c:identifier="SNAPD_ERROR_CONNECTION_FAILED"
              glib:nick="connection-failed">
        <doc xml:space="preserve">not able to connect to snapd.</doc>
      </member>
      <member name="write_failed"
              value="1"
              c:identifier="SNAPD_ERROR_WRITE_FAILED"
              glib:nick="write-failed">
        <doc xml:space="preserve">an error occurred while writing to snapd.</doc>
      </member>
      <member name="read_failed"
              value="2"
              c:identifier="SNAPD_ERROR_READ_FAILED"
              glib:nick="read-failed">
        <doc xml:space="preserve">an error occured while reading from snapd.</doc>
      </member>
      <member name="bad_request"
              value="3"
              c:identifier="SNAPD_ERROR_BAD_REQUEST"
              glib:nick="bad-request">
        <doc xml:space="preserve">snapd did not understand the request that was sent.</doc>
      </member>
      <member name="bad_response"
              value="4"
              c:identifier="SNAPD_ERROR_BAD_RESPONSE"
              glib:nick="bad-response">
        <doc xml:space="preserve">the response received from snapd was not
    understood.</doc>
      </member>
      <member name="auth_data_required"
              value="5"
              c:identifier="SNAPD_ERROR_AUTH_DATA_REQUIRED"
              glib:nick="auth-data-required">
        <doc xml:space="preserve">the requested operation requires
    authorization data.</doc>
      </member>
      <member name="auth_data_invalid"
              value="6"
              c:identifier="SNAPD_ERROR_AUTH_DATA_INVALID"
              glib:nick="auth-data-invalid">
        <doc xml:space="preserve">the provided authorization data is invalid.</doc>
      </member>
      <member name="two_factor_required"
              value="7"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_REQUIRED"
              glib:nick="two-factor-required">
        <doc xml:space="preserve">login requires a two factor code.</doc>
      </member>
      <member name="two_factor_invalid"
              value="8"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_INVALID"
              glib:nick="two-factor-invalid">
        <doc xml:space="preserve">the two factor code provided at login is
    invalid.</doc>
      </member>
      <member name="permission_denied"
              value="9"
              c:identifier="SNAPD_ERROR_PERMISSION_DENIED"
              glib:nick="permission-denied">
        <doc xml:space="preserve">this user account is not permitted to perform
    the requested operation.</doc>
      </member>
      <member name="failed"
              value="10"
              c:identifier="SNAPD_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve">an unspecified error occurred while communicating
    with snapd.</doc>
      </member>
      <member name="terms_not_accepted"
              value="11"
              c:identifier="SNAPD_ERROR_TERMS_NOT_ACCEPTED"
              glib:nick="terms-not-accepted">
        <doc xml:space="preserve">this user has not accepted the store's terms
    of service.</doc>
      </member>
      <member name="payment_not_setup"
              value="12"
              c:identifier="SNAPD_ERROR_PAYMENT_NOT_SETUP"
              glib:nick="payment-not-setup">
        <doc xml:space="preserve">this user has not configured a payment
    method.</doc>
      </member>
      <member name="payment_declined"
              value="13"
              c:identifier="SNAPD_ERROR_PAYMENT_DECLINED"
              glib:nick="payment-declined">
        <doc xml:space="preserve">this user has had their payment method
    declined by the payment provider.</doc>
      </member>
      <member name="already_installed"
              value="14"
              c:identifier="SNAPD_ERROR_ALREADY_INSTALLED"
              glib:nick="already-installed">
        <doc xml:space="preserve">the requested snap is already installed.</doc>
      </member>
      <member name="not_installed"
              value="15"
              c:identifier="SNAPD_ERROR_NOT_INSTALLED"
              glib:nick="not-installed">
        <doc xml:space="preserve">the requested snap is not installed.</doc>
      </member>
      <member name="no_update_available"
              value="16"
              c:identifier="SNAPD_ERROR_NO_UPDATE_AVAILABLE"
              glib:nick="no-update-available">
        <doc xml:space="preserve">no update is available for this snap.</doc>
      </member>
      <member name="password_policy_error"
              value="17"
              c:identifier="SNAPD_ERROR_PASSWORD_POLICY_ERROR"
              glib:nick="password-policy-error">
        <doc xml:space="preserve">provided password is not valid.</doc>
      </member>
      <member name="needs_devmode"
              value="18"
              c:identifier="SNAPD_ERROR_NEEDS_DEVMODE"
              glib:nick="needs-devmode">
        <doc xml:space="preserve">this snap needs to be installed using devmode.</doc>
      </member>
      <member name="needs_classic"
              value="19"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC"
              glib:nick="needs-classic">
        <doc xml:space="preserve">this snap needs to be installed using classic
    mode.</doc>
      </member>
      <member name="needs_classic_system"
              value="20"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC_SYSTEM"
              glib:nick="needs-classic-system">
        <doc xml:space="preserve">a classic system is required to install
   this snap.</doc>
      </member>
      <function name="quark" c:identifier="snapd_error_quark" version="1.0">
        <doc xml:space="preserve">Gets the Snapd Error Quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FindFlags"
              version="1.0"
              glib:type-name="SnapdFindFlags"
              glib:get-type="snapd_find_flags_get_type"
              c:type="SnapdFindFlags">
      <doc xml:space="preserve">Flag to change how a find is performed.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_FIND_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags, default behaviour</doc>
      </member>
      <member name="match_name"
              value="1"
              c:identifier="SNAPD_FIND_FLAGS_MATCH_NAME"
              glib:nick="match-name">
        <doc xml:space="preserve">Search for snaps whose name matches the given
    string. The match is exact unless the string ends in *.</doc>
      </member>
      <member name="select_private"
              value="2"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_PRIVATE"
              glib:nick="select-private">
        <doc xml:space="preserve">Search private snaps</doc>
      </member>
      <member name="select_refresh"
              value="4"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_REFRESH"
              glib:nick="select-refresh">
        <doc xml:space="preserve">Deprecated, do not use</doc>
      </member>
    </bitfield>
    <class name="Icon"
           c:symbol-prefix="icon"
           c:type="SnapdIcon"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdIcon"
           glib:get-type="snapd_icon_get_type"
           glib:type-struct="IconClass">
      <doc xml:space="preserve">#SnapdIcon is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_data" c:identifier="snapd_icon_get_data" version="1.0">
        <doc xml:space="preserve">Get the binary data for this icon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the binary data.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="snapd_icon_get_mime_type"
              version="1.0">
        <doc xml:space="preserve">Get the mime-type for this icon, e.g. "image/png".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a MIME type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="data"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Bytes"/>
      </property>
      <property name="mime-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="IconClass"
            c:type="SnapdIconClass"
            glib:is-gtype-struct-for="Icon">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="InstallFlags"
              version="1.12"
              glib:type-name="SnapdInstallFlags"
              glib:get-type="snapd_install_flags_get_type"
              c:type="SnapdInstallFlags">
      <doc xml:space="preserve">Flags to control install options.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_INSTALL_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve">No flags, default behaviour.</doc>
      </member>
      <member name="classic"
              value="1"
              c:identifier="SNAPD_INSTALL_FLAGS_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve">Put snap in classic mode and disable security confinement.</doc>
      </member>
      <member name="dangerous"
              value="2"
              c:identifier="SNAPD_INSTALL_FLAGS_DANGEROUS"
              glib:nick="dangerous">
        <doc xml:space="preserve">Install the given snap file even if there are
   no pre-acknowledged signatures for it, meaning it was not verified and
   could be dangerous (implied by #SNAPD_INSTALL_FLAGS_DEVMODE).</doc>
      </member>
      <member name="devmode"
              value="4"
              c:identifier="SNAPD_INSTALL_FLAGS_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve">Put snap in development mode and disable security confinement.</doc>
      </member>
      <member name="jailmode"
              value="8"
              c:identifier="SNAPD_INSTALL_FLAGS_JAILMODE"
              glib:nick="jailmode">
        <doc xml:space="preserve">Put snap in enforced confinement mode.</doc>
      </member>
    </bitfield>
    <class name="LoginRequest"
           c:symbol-prefix="login_request"
           c:type="SnapdLoginRequest"
           parent="GObject.Object"
           glib:type-name="SnapdLoginRequest"
           glib:get-type="snapd_login_request_get_type"
           glib:type-struct="LoginRequestClass">
      <implements name="Gio.AsyncResult"/>
    </class>
    <record name="LoginRequestClass"
            c:type="SnapdLoginRequestClass"
            glib:is-gtype-struct-for="LoginRequest">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Plug"
           c:symbol-prefix="plug"
           c:type="SnapdPlug"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPlug"
           glib:get-type="snapd_plug_get_type"
           glib:type-struct="PlugClass">
      <doc xml:space="preserve">#SnapdPlug is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_attribute"
              c:identifier="snapd_plug_get_attribute"
              version="1.3">
        <doc xml:space="preserve">Get an attribute for this interface.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_plug_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve">Get the names of the attributes this plug has.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_plug_get_connections"
              version="1.0">
        <doc xml:space="preserve">Get the connections being made with this plug.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_plug_get_interface"
              version="1.0">
        <doc xml:space="preserve">Get the name of the interface this plug provides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_plug_get_label"
              version="1.0">
        <doc xml:space="preserve">Get a human readable label for this plug.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_plug_get_name" version="1.0">
        <doc xml:space="preserve">Get the name of this plug.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_plug_get_snap" version="1.0">
        <doc xml:space="preserve">Get the snap this plug is on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_plug_has_attribute"
              version="1.3">
        <doc xml:space="preserve">Check if this plug has an attribute.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PlugClass"
            c:type="SnapdPlugClass"
            glib:is-gtype-struct-for="Plug">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Price"
           c:symbol-prefix="price"
           c:type="SnapdPrice"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPrice"
           glib:get-type="snapd_price_get_type"
           glib:type-struct="PriceClass">
      <doc xml:space="preserve">#SnapdPrice is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_amount"
              c:identifier="snapd_price_get_amount"
              version="1.0">
        <doc xml:space="preserve">Get the currency amount for this price, e.g. 0.99.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a currency amount.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_currency"
              c:identifier="snapd_price_get_currency"
              version="1.0">
        <doc xml:space="preserve">Get the currency this price is in, e.g. "NZD".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an ISO 4217 currency code.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="amount"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="currency"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PriceClass"
            c:type="SnapdPriceClass"
            glib:is-gtype-struct-for="Price">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ProgressCallback"
              c:type="SnapdProgressCallback"
              version="1.0">
      <doc xml:space="preserve">Signature for callback function used in
snapd_client_connect_interface_sync(),
snapd_client_disconnect_interface_async(),
snapd_client_install2_sync(),
snapd_client_refresh_sync(),
snapd_client_remove_sync(),
snapd_client_enable_sync() and
snapd_client_disable_sync().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </parameter>
        <parameter name="change" transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdChange describing the change in progress</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </parameter>
        <parameter name="deprecated"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A deprecated field that is no longer used.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve">user data passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Screenshot"
           c:symbol-prefix="screenshot"
           c:type="SnapdScreenshot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdScreenshot"
           glib:get-type="snapd_screenshot_get_type"
           glib:type-struct="ScreenshotClass">
      <doc xml:space="preserve">#SnapdScreenshot is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_height"
              c:identifier="snapd_screenshot_get_height"
              version="1.0">
        <doc xml:space="preserve">Get the height of the screenshot in pixels or 0 if unknown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a height</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url"
              c:identifier="snapd_screenshot_get_url"
              version="1.0">
        <doc xml:space="preserve">Get the URL for this screenshot, e.g. "http://example.com/screenshot.png"</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="snapd_screenshot_get_width"
              version="1.0">
        <doc xml:space="preserve">Get the width of the screenshot in pixels or 0 if unknown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="ScreenshotClass"
            c:type="SnapdScreenshotClass"
            glib:is-gtype-struct-for="Screenshot">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Slot"
           c:symbol-prefix="slot"
           c:type="SnapdSlot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSlot"
           glib:get-type="snapd_slot_get_type"
           glib:type-struct="SlotClass">
      <doc xml:space="preserve">#SnapdSlot is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_attribute"
              c:identifier="snapd_slot_get_attribute"
              version="1.3">
        <doc xml:space="preserve">Get an attribute for this interface.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_slot_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve">Get the names of the attributes this slot has.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_slot_get_connections"
              version="1.0">
        <doc xml:space="preserve">Get the connections being made with this slot.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_slot_get_interface"
              version="1.0">
        <doc xml:space="preserve">Get the name of the interface this slot accepts.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_slot_get_label"
              version="1.0">
        <doc xml:space="preserve">Get a human readable label for this slot.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_slot_get_name" version="1.0">
        <doc xml:space="preserve">Get the name of this slot.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_slot_get_snap" version="1.0">
        <doc xml:space="preserve">Get the snap this slot is on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_slot_has_attribute"
              version="1.3">
        <doc xml:space="preserve">Check if this slot has an attribute.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SlotClass"
            c:type="SnapdSlotClass"
            glib:is-gtype-struct-for="Slot">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Snap"
           c:symbol-prefix="snap"
           c:type="SnapdSnap"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSnap"
           glib:get-type="snapd_snap_get_type"
           glib:type-struct="SnapClass">
      <doc xml:space="preserve">#SnapdSnap is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_apps" c:identifier="snapd_snap_get_apps" version="1.0">
        <doc xml:space="preserve">Get the apps this snap provides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdApp.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel"
              c:identifier="snapd_snap_get_channel"
              version="1.0">
        <doc xml:space="preserve">Get the channel this snap is from, e.g. "stable".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_snap_get_confinement"
              version="1.0">
        <doc xml:space="preserve">Get the confinement this snap is using, e.g. %SNAPD_CONFINEMENT_STRICT.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdConfinement.</doc>
          <type name="Confinement" c:type="SnapdConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact"
              c:identifier="snapd_snap_get_contact"
              version="1.13">
        <doc xml:space="preserve">Get the means of contacting the snap developer, e.g. "mailto:developer@example.com".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a contact URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="snapd_snap_get_description"
              version="1.0">
        <doc xml:space="preserve">Get a multi-line description of this snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">description text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_developer"
              c:identifier="snapd_snap_get_developer"
              version="1.0">
        <doc xml:space="preserve">Get the developer who created this snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a developer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devmode"
              c:identifier="snapd_snap_get_devmode"
              version="1.0">
        <doc xml:space="preserve">Get if this snap is running in developmer mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this snap is running in devmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_size"
              c:identifier="snapd_snap_get_download_size"
              version="1.0">
        <doc xml:space="preserve">Get the download size of this snap or 0 if unknown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="snapd_snap_get_icon" version="1.0">
        <doc xml:space="preserve">Get the icon for this Snap, either a URL or an absolute path to retrieve it
from snapd directly.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a URL or path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="snapd_snap_get_id" version="1.0">
        <doc xml:space="preserve">Gets the unique ID for this snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_install_date"
              c:identifier="snapd_snap_get_install_date"
              version="1.0">
        <doc xml:space="preserve">Get the date this snap was installed or %NULL if unknown.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_installed_size"
              c:identifier="snapd_snap_get_installed_size"
              version="1.0">
        <doc xml:space="preserve">Get the installed size of this snap or 0 if unknown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_jailmode"
              c:identifier="snapd_snap_get_jailmode"
              version="1.8">
        <doc xml:space="preserve">Get if this snap is running in enforced confinement (jail) mode.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this snap is running in jailmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="snapd_snap_get_license"
              version="1.19">
        <doc xml:space="preserve">Gets the SPDX license expression for this snap, e.g. "GPL-3.0+".</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">an SPDX license expression or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_snap_get_name" version="1.0">
        <doc xml:space="preserve">Get the name of this snap. This is used to reference this snap, e.g. for
installing / removing.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prices"
              c:identifier="snapd_snap_get_prices"
              version="1.0">
        <doc xml:space="preserve">Get the prices that this snap can be purchased at.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdPrice.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Price"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private"
              c:identifier="snapd_snap_get_private"
              version="1.0">
        <doc xml:space="preserve">Get if this snap is only available to the developer.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this is a private snap.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="snapd_snap_get_revision"
              version="1.0">
        <doc xml:space="preserve">Get the revision for this snap. The format of the string is undefined.
See also snapd_snap_get_version().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a revision string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screenshots"
              c:identifier="snapd_snap_get_screenshots"
              version="1.0">
        <doc xml:space="preserve">Get the screenshots that are available for this snap.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an array of #SnapdScreenshot.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Screenshot"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_type"
              c:identifier="snapd_snap_get_snap_type"
              version="1.0">
        <doc xml:space="preserve">Get the type of snap, e.g. %SNAPD_SNAP_TYPE_APP</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdSnapType.</doc>
          <type name="SnapType" c:type="SnapdSnapType"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_snap_get_status"
              version="1.0">
        <doc xml:space="preserve">Get the current status of this snap, e.g. SNAPD_SNAP_STATUS_INSTALLED.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdSnapStatus.</doc>
          <type name="SnapStatus" c:type="SnapdSnapStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_snap_get_summary"
              version="1.0">
        <doc xml:space="preserve">Get a single line summary for this snap, e.g. "Best app ever!".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a summary string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="snapd_snap_get_title"
              version="1.14">
        <doc xml:space="preserve">Get the title for this snap. If not available use the snap name instead.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a title or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracking_channel"
              c:identifier="snapd_snap_get_tracking_channel"
              version="1.7">
        <doc xml:space="preserve">Get the channel that updates will be installed from, e.g. "stable".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trymode"
              c:identifier="snapd_snap_get_trymode"
              version="1.0">
        <doc xml:space="preserve">Get if this snap is running in try mode (installed locally and able to be
directly modified).</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if using trymode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_snap_get_version"
              version="1.0">
        <doc xml:space="preserve">Get the version for this snap. The format of the string is undefined.
See also snapd_snap_get_revision().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="apps"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Confinement"/>
      </property>
      <property name="contact"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="developer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="devmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="download-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="icon"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="install-date"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="installed-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="jailmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="license"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="prices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="private"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="revision"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="screenshots"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="snap-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapType"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapStatus"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tracking-channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="trymode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SnapClass"
            c:type="SnapdSnapClass"
            glib:is-gtype-struct-for="Snap">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SnapStatus"
                 version="1.0"
                 glib:type-name="SnapdSnapStatus"
                 glib:get-type="snapd_snap_status_get_type"
                 c:type="SnapdSnapStatus">
      <doc xml:space="preserve">The current state of a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">the snap state is unknown.</doc>
      </member>
      <member name="available"
              value="1"
              c:identifier="SNAPD_SNAP_STATUS_AVAILABLE"
              glib:nick="available">
        <doc xml:space="preserve">the snap is available for installation.</doc>
      </member>
      <member name="priced"
              value="2"
              c:identifier="SNAPD_SNAP_STATUS_PRICED"
              glib:nick="priced">
        <doc xml:space="preserve">the snap is available for purchase.</doc>
      </member>
      <member name="installed"
              value="3"
              c:identifier="SNAPD_SNAP_STATUS_INSTALLED"
              glib:nick="installed">
        <doc xml:space="preserve">the snap is installed but not active.</doc>
      </member>
      <member name="active"
              value="4"
              c:identifier="SNAPD_SNAP_STATUS_ACTIVE"
              glib:nick="active">
        <doc xml:space="preserve">the snap is installed and active.</doc>
      </member>
    </enumeration>
    <enumeration name="SnapType"
                 version="1.0"
                 glib:type-name="SnapdSnapType"
                 glib:get-type="snapd_snap_type_get_type"
                 c:type="SnapdSnapType">
      <doc xml:space="preserve">Type of snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">the type of snap is unknown.</doc>
      </member>
      <member name="app"
              value="1"
              c:identifier="SNAPD_SNAP_TYPE_APP"
              glib:nick="app">
        <doc xml:space="preserve">the snap is an application.</doc>
      </member>
      <member name="kernel"
              value="2"
              c:identifier="SNAPD_SNAP_TYPE_KERNEL"
              glib:nick="kernel">
        <doc xml:space="preserve">the snap is a kernel.</doc>
      </member>
      <member name="gadget"
              value="3"
              c:identifier="SNAPD_SNAP_TYPE_GADGET"
              glib:nick="gadget">
        <doc xml:space="preserve">the snapd is a gadget.</doc>
      </member>
      <member name="os"
              value="4"
              c:identifier="SNAPD_SNAP_TYPE_OS"
              glib:nick="os">
        <doc xml:space="preserve">the snap is an operating system.</doc>
      </member>
    </enumeration>
    <enumeration name="SystemConfinement"
                 version="1.15"
                 glib:type-name="SnapdSystemConfinement"
                 glib:get-type="snapd_system_confinement_get_type"
                 c:type="SnapdSystemConfinement">
      <doc xml:space="preserve">Confinment used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve">the confinement of the system is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve">the system supports strict confinement.</doc>
      </member>
      <member name="partial"
              value="2"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve">the system supports partial confinement.</doc>
      </member>
    </enumeration>
    <class name="SystemInformation"
           c:symbol-prefix="system_information"
           c:type="SnapdSystemInformation"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSystemInformation"
           glib:get-type="snapd_system_information_get_type"
           glib:type-struct="SystemInformationClass">
      <doc xml:space="preserve">#SnapdSystemInformation is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_binaries_directory"
              c:identifier="snapd_system_information_get_binaries_directory"
              version="1.11">
        <doc xml:space="preserve">Get the directory snap binaries are stored, e.g. "/snap/bin".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_system_information_get_confinement"
              version="1.15">
        <doc xml:space="preserve">Get the level of confinement the system supports, e.g. %SNAPD_SYSTEM_CONFINEMENT_STRICT.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #SnapdSystemConfinement.</doc>
          <type name="SystemConfinement" c:type="SnapdSystemConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel_version"
              c:identifier="snapd_system_information_get_kernel_version"
              version="1.11">
        <doc xml:space="preserve">Get the version of the kernel snapd is running on, e.g. "4.10.0-15-generic".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_managed"
              c:identifier="snapd_system_information_get_managed"
              version="1.7">
        <doc xml:space="preserve">Get if snapd is running on a managed system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if running on a managed system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_directory"
              c:identifier="snapd_system_information_get_mount_directory"
              version="1.11">
        <doc xml:space="preserve">Get the directory snaps are mounted, e.g. "/snap".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_on_classic"
              c:identifier="snapd_system_information_get_on_classic"
              version="1.0">
        <doc xml:space="preserve">Get if this system is a classic system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if running on a classic system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_id"
              c:identifier="snapd_system_information_get_os_id"
              version="1.0">
        <doc xml:space="preserve">Get the operating system ID, e.g. "ubuntu".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an operating system ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_version"
              c:identifier="snapd_system_information_get_os_version"
              version="1.0">
        <doc xml:space="preserve">Get the operating system version, e.g. "16.04".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_series"
              c:identifier="snapd_system_information_get_series"
              version="1.0">
        <doc xml:space="preserve">Get the series of snapd running, e.g. "16".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a series string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_store"
              c:identifier="snapd_system_information_get_store"
              version="1.7">
        <doc xml:space="preserve">Get the store being used by snapd, e.g. "Ubuntu"</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a store id or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_system_information_get_version"
              version="1.0">
        <doc xml:space="preserve">Get the version of snapd running, e.g. "2.11+ppa174-1".</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="binaries-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SystemConfinement"/>
      </property>
      <property name="kernel-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="managed"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mount-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="on-classic"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="os-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="os-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="series"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="store"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SystemInformationClass"
            c:type="SnapdSystemInformationClass"
            glib:is-gtype-struct-for="SystemInformation">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="SnapdTask"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdTask"
           glib:get-type="snapd_task_get_type"
           glib:type-struct="TaskClass">
      <doc xml:space="preserve">#SnapdTask is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_id" c:identifier="snapd_task_get_id" version="1.0">
        <doc xml:space="preserve">Get the unique ID for this task.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="snapd_task_get_kind" version="1.0">
        <doc xml:space="preserve">Gets the kind of task this is.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the kind of task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_done"
              c:identifier="snapd_task_get_progress_done"
              version="1.0">
        <doc xml:space="preserve">Get the the number of items completed in this task.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_label"
              c:identifier="snapd_task_get_progress_label"
              version="1.5">
        <doc xml:space="preserve">Get the the label associated with the progress.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a label string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_total"
              c:identifier="snapd_task_get_progress_total"
              version="1.0">
        <doc xml:space="preserve">Get the the total number of items to be completed in this task.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_task_get_ready"
              version="1.0">
        <doc xml:space="preserve">Get if this task is completed.

Depcrecated: 1.5: Use snapd_change_get_ready() instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if this task is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_task_get_ready_time"
              version="1.0">
        <doc xml:space="preserve">Get the time this task completed or %NULL if not yet completed.</doc>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_task_get_spawn_time"
              version="1.0">
        <doc xml:space="preserve">Get the time this task started.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_task_get_status"
              version="1.0">
        <doc xml:space="preserve">Get the status of the task.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_task_get_summary"
              version="1.0">
        <doc xml:space="preserve">Get a human readable description of the task.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a string describing the task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-done"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="progress-label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-total"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TaskClass"
            c:type="SnapdTaskClass"
            glib:is-gtype-struct-for="Task">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UserInformation"
           c:symbol-prefix="user_information"
           c:type="SnapdUserInformation"
           version="1.3"
           parent="GObject.Object"
           glib:type-name="SnapdUserInformation"
           glib:get-type="snapd_user_information_get_type"
           glib:type-struct="UserInformationClass">
      <doc xml:space="preserve">#SnapdUserInformation is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <method name="get_ssh_keys"
              c:identifier="snapd_user_information_get_ssh_keys"
              version="1.3">
        <doc xml:space="preserve">Get the SSH keys added to this account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the names of the SSH keys.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="snapd_user_information_get_username"
              version="1.3">
        <doc xml:space="preserve">Get the local username for this account.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="ssh-keys"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="username"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="UserInformationClass"
            c:type="SnapdUserInformationClass"
            glib:is-gtype-struct-for="UserInformation">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_AliasClass" c:type="_SnapdAliasClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_AppClass" c:type="_SnapdAppClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_AssertionClass" c:type="_SnapdAssertionClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_AuthDataClass" c:type="_SnapdAuthDataClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_ChangeClass" c:type="_SnapdChangeClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_ConnectionClass" c:type="_SnapdConnectionClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_IconClass" c:type="_SnapdIconClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_PlugClass" c:type="_SnapdPlugClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_PriceClass" c:type="_SnapdPriceClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_ScreenshotClass" c:type="_SnapdScreenshotClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_SlotClass" c:type="_SnapdSlotClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_SnapClass" c:type="_SnapdSnapClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_SystemInformationClass"
            c:type="_SnapdSystemInformationClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_TaskClass" c:type="_SnapdTaskClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="_UserInformationClass" c:type="_SnapdUserInformationClass">
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="error_quark"
              c:identifier="snapd_error_quark"
              moved-to="Error.quark"
              version="1.0">
      <doc xml:space="preserve">Gets the Snapd Error Quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="login_async"
              c:identifier="snapd_login_async"
              version="1.0">
      <doc xml:space="preserve">Asynchronously get authorization to install/remove snaps.
See snapd_login_sync() for more information.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve">usename to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the data to pass to callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_finish"
              c:identifier="snapd_login_finish"
              version="1.0"
              throws="1">
      <doc xml:space="preserve">Complete login started with snapd_login_async().
See snapd_login_sync() for more information.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_sync"
              c:identifier="snapd_login_sync"
              version="1.0"
              throws="1">
      <doc xml:space="preserve">Log in to snapd and get authorization to install/remove snaps.
This call contacts the snapd-login-service that will authenticate the user
using Polkit and contact snapd on their behalf.
If you are root, you can get this authentication directly from snapd using
snapd_client_login_sync().</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve">usename to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
