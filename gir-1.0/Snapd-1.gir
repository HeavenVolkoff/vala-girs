<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="snapd-glib"/>
  <c:include name="snapd-glib/snapd-glib.h"/>
  <namespace name="Snapd"
             version="1"
             shared-library="libsnapd-glib.so.1"
             c:identifier-prefixes="Snapd"
             c:symbol-prefixes="snapd">
    <class name="Alias"
           c:symbol-prefix="alias"
           c:type="SnapdAlias"
           version="1.8"
           parent="GObject.Object"
           glib:type-name="SnapdAlias"
           glib:get-type="snapd_alias_get_type"
           glib:type-struct="AliasClass">
      <doc xml:space="preserve"
           filename="snapd-alias.c"
           line="26">#SnapdAlias contains alias information for a Snap.

Aliases are used to provide alternative binary names for Snap apps.</doc>
      <source-position filename="snapd-alias.h" line="23"/>
      <method name="get_app"
              c:identifier="snapd_alias_get_app"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="61">Get the app this is an alias for.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_alias_get_app_manual() or snapd_alias_get_app_auto().</doc-deprecated>
        <source-position filename="snapd-alias.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="67">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="63">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_auto"
              c:identifier="snapd_alias_get_app_auto"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="79">Get the app this alias has been automatically set to (status is %SNAPD_ALIAS_STATUS_AUTO).
Can be overridden when status is %SNAPD_ALIAS_STATUS_MANUAL.</doc>
        <source-position filename="snapd-alias.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="86">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="81">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_app_manual"
              c:identifier="snapd_alias_get_app_manual"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="97">Get the app this alias has been manually set to (status is %SNAPD_ALIAS_STATUS_MANUAL).
This overrides the app from snapd_alias_get_app_auto().</doc>
        <source-position filename="snapd-alias.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="104">an app name or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="99">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command"
              c:identifier="snapd_alias_get_command"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="115">Get the command this alias runs.</doc>
        <source-position filename="snapd-alias.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="121">a command.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="117">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_alias_get_name"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="132">Get the name of this alias.</doc>
        <source-position filename="snapd-alias.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="138">an alias name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="134">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_alias_get_snap"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="149">Get the snap this alias is for.</doc>
        <source-position filename="snapd-alias.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="155">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="151">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_alias_get_status"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-alias.c"
             line="166">Get the status of this alias.</doc>
        <source-position filename="snapd-alias.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-alias.c"
               line="172">a #SnapdAliasStatus.</doc>
          <type name="AliasStatus" c:type="SnapdAliasStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-alias.c"
                 line="168">a #SnapdAlias.</doc>
            <type name="Alias" c:type="SnapdAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app-auto"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="app-manual"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="command"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AliasStatus"/>
      </property>
    </class>
    <record name="AliasClass"
            c:type="SnapdAliasClass"
            glib:is-gtype-struct-for="Alias">
      <source-position filename="snapd-alias.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="AliasStatus"
                 version="1.8"
                 glib:type-name="SnapdAliasStatus"
                 glib:get-type="snapd_alias_status_get_type"
                 c:type="SnapdAliasStatus">
      <doc xml:space="preserve"
           filename="snapd-alias.h"
           line="25">Status of an alias.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_ALIAS_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="27">the alias status is unknown.</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="SNAPD_ALIAS_STATUS_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="28">deprecated, do not use.</doc>
      </member>
      <member name="enabled"
              value="2"
              c:identifier="SNAPD_ALIAS_STATUS_ENABLED"
              glib:nick="enabled">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="29">deprecated, do not use.</doc>
      </member>
      <member name="disabled"
              value="3"
              c:identifier="SNAPD_ALIAS_STATUS_DISABLED"
              glib:nick="disabled">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="30">the alias is disabled.</doc>
      </member>
      <member name="auto"
              value="4"
              c:identifier="SNAPD_ALIAS_STATUS_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="31">the alias is automatically enabled.</doc>
      </member>
      <member name="manual"
              value="5"
              c:identifier="SNAPD_ALIAS_STATUS_MANUAL"
              glib:nick="manual">
        <doc xml:space="preserve"
             filename="snapd-alias.h"
             line="32">the alias is manually enabled.</doc>
      </member>
    </enumeration>
    <class name="App"
           c:symbol-prefix="app"
           c:type="SnapdApp"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdApp"
           glib:get-type="snapd_app_get_type"
           glib:type-struct="AppClass">
      <doc xml:space="preserve"
           filename="snapd-app.c"
           line="26">#SnapdApp contains information about an app in a Snap.

Snaps can contain apps which is a single binary executable.</doc>
      <source-position filename="snapd-app.h" line="23"/>
      <method name="get_active"
              c:identifier="snapd_app_get_active"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="80">Get if this service is active.</doc>
        <source-position filename="snapd-app.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="86">%TRUE if active.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="82">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliases"
              c:identifier="snapd_app_get_aliases"
              version="1.7"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="97">Get the aliases for this app.</doc>
        <source-position filename="snapd-app.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="103">the alias names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="99">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_common_id"
              c:identifier="snapd_app_get_common_id"
              version="1.41">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="115">Get the common ID associated with this app.</doc>
        <source-position filename="snapd-app.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="121">an ID or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="117">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_daemon_type"
              c:identifier="snapd_app_get_daemon_type"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="132">Get the daemon type for this app.</doc>
        <source-position filename="snapd-app.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="138">the daemon type or %NULL.</doc>
          <type name="DaemonType" c:type="SnapdDaemonType"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="134">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file"
              c:identifier="snapd_app_get_desktop_file"
              version="1.14">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="149">Get the path to the desktop file for this app.</doc>
        <source-position filename="snapd-app.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="155">a path or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="151">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="snapd_app_get_enabled"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="166">Get if this service is enabled.</doc>
        <source-position filename="snapd-app.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="172">%TRUE if enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="168">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_app_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="63">Get the name of this app.</doc>
        <source-position filename="snapd-app.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="69">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="65">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_app_get_snap" version="1.25">
        <doc xml:space="preserve"
             filename="snapd-app.c"
             line="183">Get the snap this app is associated with.</doc>
        <source-position filename="snapd-app.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-app.c"
               line="189">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-app.c"
                 line="185">a #SnapdApp.</doc>
            <type name="App" c:type="SnapdApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aliases"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="common-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="daemon-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DaemonType"/>
      </property>
      <property name="desktop-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AppClass"
            c:type="SnapdAppClass"
            glib:is-gtype-struct-for="App">
      <source-position filename="snapd-app.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Assertion"
           c:symbol-prefix="assertion"
           c:type="SnapdAssertion"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAssertion"
           glib:get-type="snapd_assertion_get_type"
           glib:type-struct="AssertionClass">
      <doc xml:space="preserve"
           filename="snapd-assertion.c"
           line="30">#SnapdAssertion contains information about a Snap assertion.

Assertions are digitally signed documents that allow Snaps to have secure
trust and control features.</doc>
      <source-position filename="snapd-assertion.h" line="23"/>
      <constructor name="new" c:identifier="snapd_assertion_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="56">Create a new assertion.</doc>
        <source-position filename="snapd-assertion.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="62">a new #SnapdAssertion</doc>
          <type name="Assertion" c:type="SnapdAssertion*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="58">the text content of the assertion.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_body"
              c:identifier="snapd_assertion_get_body"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="204">Get the body of the assertion.</doc>
        <source-position filename="snapd-assertion.h" line="32"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="210">assertion body or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="206">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header"
              c:identifier="snapd_assertion_get_header"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="148">Get a header from an assertion.</doc>
        <source-position filename="snapd-assertion.h" line="29"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="155">header value or %NULL if undefined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="150">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="151">name of the header.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_headers"
              c:identifier="snapd_assertion_get_headers"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="116">Get the headers provided by this assertion.</doc>
        <source-position filename="snapd-assertion.h" line="27"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="122">array of header names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="118">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signature"
              c:identifier="snapd_assertion_get_signature"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-assertion.c"
             line="226">Get the signature of the assertion.</doc>
        <source-position filename="snapd-assertion.h" line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-assertion.c"
               line="232">assertion signature.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="assertion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-assertion.c"
                 line="228">a #SnapdAssertion.</doc>
            <type name="Assertion" c:type="SnapdAssertion*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AssertionClass"
            c:type="SnapdAssertionClass"
            glib:is-gtype-struct-for="Assertion">
      <source-position filename="snapd-assertion.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="AuthData"
           c:symbol-prefix="auth_data"
           c:type="SnapdAuthData"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdAuthData"
           glib:get-type="snapd_auth_data_get_type"
           glib:type-struct="AuthDataClass">
      <doc xml:space="preserve"
           filename="snapd-auth-data.c"
           line="29">#SnapdAuthData contains authorization data used to communicate with snapd.

The authorization data is in the form of a [Macaroon](https://research.google.com/pubs/pub41892.html).</doc>
      <source-position filename="snapd-auth-data.h" line="23"/>
      <constructor name="new" c:identifier="snapd_auth_data_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="56">Create some authorization data.</doc>
        <source-position filename="snapd-auth-data.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="63">a new #SnapdAuthData</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <parameter name="macaroon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="58">serialized macaroon used to authorize access to snapd.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="discharges" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="59">serialized discharges.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_discharges"
              c:identifier="snapd_auth_data_get_discharges"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="94">Get the discharges that this authorization uses.</doc>
        <source-position filename="snapd-auth-data.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="100">the discharges as serialized strings.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="96">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_macaroon"
              c:identifier="snapd_auth_data_get_macaroon"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-auth-data.c"
             line="77">Get the Macaroon that this authorization uses.</doc>
        <source-position filename="snapd-auth-data.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-auth-data.c"
               line="83">the serialized Macaroon used to authorize access to snapd.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="auth_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-auth-data.c"
                 line="79">a #SnapdAuthData.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="discharges" writable="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="macaroon" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="AuthDataClass"
            c:type="SnapdAuthDataClass"
            glib:is-gtype-struct-for="AuthData">
      <source-position filename="snapd-auth-data.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Change"
           c:symbol-prefix="change"
           c:type="SnapdChange"
           version="1.5"
           parent="GObject.Object"
           glib:type-name="SnapdChange"
           glib:get-type="snapd_change_get_type"
           glib:type-struct="ChangeClass">
      <doc xml:space="preserve"
           filename="snapd-change.c"
           line="25">#SnapdChange contains information on a current Snap transaction.</doc>
      <source-position filename="snapd-change.h" line="23"/>
      <method name="get_error"
              c:identifier="snapd_change_get_error"
              version="1.30">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="200">Gets the error string associated with this change.</doc>
        <source-position filename="snapd-change.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="206">an error string or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="202">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="snapd_change_get_id" version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="64">Get the unique ID for this change.</doc>
        <source-position filename="snapd-change.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="70">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="66">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="snapd_change_get_kind"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="81">Gets the kind of change this is.</doc>
        <source-position filename="snapd-change.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="87">the kind of change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="83">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_change_get_ready"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="149">Get if this change is completed.</doc>
        <source-position filename="snapd-change.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="155">%TRUE if this change is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="151">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_change_get_ready_time"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="183">Get the time this task completed or %NULL if not yet completed.</doc>
        <source-position filename="snapd-change.h" line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="189">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="185">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_change_get_spawn_time"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="166">Get the time this change started.</doc>
        <source-position filename="snapd-change.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="172">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="168">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_change_get_status"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="115">Get the status of the change.</doc>
        <source-position filename="snapd-change.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="121">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="117">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_change_get_summary"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="98">Get a human readable description of the change.</doc>
        <source-position filename="snapd-change.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="104">a string describing the change.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="100">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tasks"
              c:identifier="snapd_change_get_tasks"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-change.c"
             line="132">Get the tasks that are in this change.</doc>
        <source-position filename="snapd-change.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-change.c"
               line="138">an array of #SnapdTask.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Task"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-change.c"
                 line="134">a #SnapdChange.</doc>
            <type name="Change" c:type="SnapdChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="error"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tasks"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
    </class>
    <record name="ChangeClass"
            c:type="SnapdChangeClass"
            glib:is-gtype-struct-for="Change">
      <source-position filename="snapd-change.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ChangeFilter"
                 version="1.29"
                 glib:type-name="SnapdChangeFilter"
                 glib:get-type="snapd_change_filter_get_type"
                 c:type="SnapdChangeFilter">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="47">Filter to apply to changes.</doc>
      <member name="all"
              value="0"
              c:identifier="SNAPD_CHANGE_FILTER_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="49">Return all changes.</doc>
      </member>
      <member name="in_progress"
              value="1"
              c:identifier="SNAPD_CHANGE_FILTER_IN_PROGRESS"
              glib:nick="in-progress">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="51">Return only changes that are in-progress.</doc>
      </member>
      <member name="ready"
              value="2"
              c:identifier="SNAPD_CHANGE_FILTER_READY"
              glib:nick="ready">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="50">Return only changes that are ready.</doc>
      </member>
    </enumeration>
    <class name="Channel"
           c:symbol-prefix="channel"
           c:type="SnapdChannel"
           version="1.22"
           parent="GObject.Object"
           glib:type-name="SnapdChannel"
           glib:get-type="snapd_channel_get_type"
           glib:type-struct="ChannelClass">
      <doc xml:space="preserve"
           filename="snapd-channel.c"
           line="24">#SnapdChannel is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <source-position filename="snapd-channel.h" line="23"/>
      <method name="get_branch"
              c:identifier="snapd_channel_get_branch"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="63">Get the branch this channel is tracking.</doc>
        <source-position filename="snapd-channel.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="69">a branch name or %NULL if not a branch.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="65">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_channel_get_confinement"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="80">Get the confinement this snap is using, e.g. %SNAPD_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-channel.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="86">a #SnapdConfinement.</doc>
          <type name="Confinement" c:type="SnapdConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="82">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_epoch"
              c:identifier="snapd_channel_get_epoch"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="97">Get the epoch used on this channel, e.g. "1".</doc>
        <source-position filename="snapd-channel.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="103">an epoch.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="99">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_channel_get_name"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="114">Get the name of this channel, e.g. "stable".

Channel names are in the form `track/risk/branch`

`track` is the name of the feature track. Defaults to `latest` and is implied
        if the track is not present.
`risk` is the risk of the channel, one of `stable`, `candidate`, `beta` or `edge`.
`branch` is an optional branch name.

Example names:
`beta` (alias to `latest/beta`)
`xenial/stable` (stable release on xenial track)
`latest/stable/red-button` (red button feature branch)</doc>
        <source-position filename="snapd-channel.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="132">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="116">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_released_at"
              c:identifier="snapd_channel_get_released_at"
              version="1.46">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="143">Get the date this revision was released into the channel or %NULL if unknown.</doc>
        <source-position filename="snapd-channel.h" line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="149">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="145">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="snapd_channel_get_revision"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="160">Get the revision for this snap. The format of the string is undefined.
See also snapd_channel_get_version().</doc>
        <source-position filename="snapd-channel.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="167">a revision string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="162">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_risk"
              c:identifier="snapd_channel_get_risk"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="178">Get the risk this channel is on, one of `stable`, `candidate`, `beta` or `edge`.</doc>
        <source-position filename="snapd-channel.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="184">a risk name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="180">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="snapd_channel_get_size"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="195">Get the download size of this snap.</doc>
        <source-position filename="snapd-channel.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="201">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="197">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_track"
              c:identifier="snapd_channel_get_track"
              version="1.31">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="212">Get the track this channel is on.</doc>
        <source-position filename="snapd-channel.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="218">a track name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="214">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_channel_get_version"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-channel.c"
             line="229">Get the version for this snap. The format of the string is undefined.
See also snapd_channel_get_revision().</doc>
        <source-position filename="snapd-channel.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-channel.c"
               line="236">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-channel.c"
                 line="231">a #SnapdChannel.</doc>
            <type name="Channel" c:type="SnapdChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Confinement"/>
      </property>
      <property name="epoch"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="released-at"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="revision"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ChannelClass"
            c:type="SnapdChannelClass"
            glib:is-gtype-struct-for="Channel">
      <source-position filename="snapd-channel.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="SnapdClient"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdClient"
           glib:get-type="snapd_client_get_type"
           glib:type-struct="ClientClass">
      <doc xml:space="preserve"
           filename="snapd-client.c"
           line="66">#SnapdClient contains connection state with snapd.</doc>
      <source-position filename="snapd-client.h" line="45"/>
      <constructor name="new" c:identifier="snapd_client_new" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3755">Create a new client to talk to snapd.</doc>
        <source-position filename="snapd-client.h" line="215"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3760">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_socket"
                   c:identifier="snapd_client_new_from_socket"
                   version="1.5">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3770">Create a new client to talk on an existing socket.</doc>
        <source-position filename="snapd-client.h" line="217"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3776">a new #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </return-value>
        <parameters>
          <parameter name="socket" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3772">A #GSocket that is connected to snapd.</doc>
            <type name="Gio.Socket" c:type="GSocket*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="abort_change_async"
              c:identifier="snapd_client_abort_change_async"
              version="1.30">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1314">Asynchronously abort a change.
See snapd_client_abort_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1316">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1317">a change ID to abort.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1318">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1319">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1320">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="abort_change_finish"
              c:identifier="snapd_client_abort_change_finish"
              version="1.30"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1339">Complete request started with snapd_client_abort_change_async().
See snapd_client_abort_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="330"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1348">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1341">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1342">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="abort_change_sync"
              c:identifier="snapd_client_abort_change_sync"
              version="1.30"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="202">Get information on a change.</doc>
        <source-position filename="snapd-client.h" line="319"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="211">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="204">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="205">a change ID to abort.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="206">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_async"
              c:identifier="snapd_client_add_assertions_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1899">Asynchronously add an assertion.
See snapd_client_add_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="485"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1901">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1902">assertions to add.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1903">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1904">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1905">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_finish"
              c:identifier="snapd_client_add_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1924">Complete request started with snapd_client_add_assertions_async().
See snapd_client_add_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1933">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1926">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1927">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_assertions_sync"
              c:identifier="snapd_client_add_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="537">Add an assertion.</doc>
        <source-position filename="snapd-client.h" line="481"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="546">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="539">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="assertions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="540">assertions to add.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="541">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_async"
              c:identifier="snapd_client_alias_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3387">Asynchronously create an alias to an app.
See snapd_client_alias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="938"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3389">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3390">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3391">an app in the snap to make the alias to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3392">the name of the alias (i.e. the command that will run this app).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3393">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3394">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3395">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3396">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3397">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_finish"
              c:identifier="snapd_client_alias_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3417">Complete request started with snapd_client_alias_async().
See snapd_client_alias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="947"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3426">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3419">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3420">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="alias_sync"
              c:identifier="snapd_client_alias_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1365">Create an alias to an app.</doc>
        <source-position filename="snapd-client.h" line="930"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1367">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1368">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1369">an app in the snap to make the alias to.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1370">the name of the alias (i.e. the command that will run this app).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1371">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1372">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1373">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_async"
              c:identifier="snapd_client_buy_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3078">Asynchronously buy a snap from the store.
See snapd_client_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="860"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3080">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3081">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3082">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3083">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3084">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3085">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3086">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_finish"
              c:identifier="snapd_client_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3106">Complete request started with snapd_client_buy_async().
See snapd_client_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="867"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3115">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3108">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3109">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buy_sync"
              c:identifier="snapd_client_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1198">Buy a snap from the store. Once purchased, this snap can be installed with
snapd_client_install2_sync().</doc>
        <source-position filename="snapd-client.h" line="854"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1211">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1200">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1201">id of snap to buy.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="amount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1202">amount of currency to spend, e.g. 0.99.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="currency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1203">the currency to buy with as an ISO 4217 currency code, e.g. "NZD".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1204">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_async"
              c:identifier="snapd_client_check_buy_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3034">Asynchronously check if able to buy snaps.
See snapd_client_check_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="846"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3036">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3037">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3038">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3039">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_finish"
              c:identifier="snapd_client_check_buy_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3056">Complete request started with snapd_client_check_buy_async().
See snapd_client_check_buy_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="850"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3065">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3058">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3059">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_buy_sync"
              c:identifier="snapd_client_check_buy_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1172">Check if able to buy snaps.</doc>
        <source-position filename="snapd-client.h" line="843"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1181">%TRUE if able to buy snaps or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1174">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1175">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_async"
              c:identifier="snapd_client_connect_async"
              version="1.3"
              deprecated="1"
              deprecated-version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="873">This method is no longer required and does nothing, snapd-glib now connects on demand.</doc>
        <source-position filename="snapd-client.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="875">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="876">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="877">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="878">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="snapd_client_connect_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="895">Complete request started with snapd_client_connect_async().
See snapd_client_connect_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="904">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="897">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="898">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_async"
              c:identifier="snapd_client_connect_interface_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2185">Asynchronously connect two interfaces together.
See snapd_client_connect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="577"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2187">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2188">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2189">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2190">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2191">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2192">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2193">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2194">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2195">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2196">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_finish"
              c:identifier="snapd_client_connect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2216">Complete request started with snapd_client_connect_interface_async().
See snapd_client_connect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="587"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2225">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2218">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2219">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_interface_sync"
              c:identifier="snapd_client_connect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="698">Connect two interfaces together.
An asynchronous version of this function is snapd_client_connect_interface_async().</doc>
        <source-position filename="snapd-client.h" line="568"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="713">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="700">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="701">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="702">name of plug to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="703">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="704">name of slot to connect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="705">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="706">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="707">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_sync"
              c:identifier="snapd_client_connect_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="56">This method is no longer required and does nothing, snapd-glib now connects on demand.</doc>
        <source-position filename="snapd-client.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="64">%TRUE if successfully connected to snapd.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="58">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="59">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_async"
              c:identifier="snapd_client_create_user_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3128">Asynchronously create a local user account.
See snapd_client_create_user_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="876"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3130">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3131">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3132">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3133">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3134">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3135">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_finish"
              c:identifier="snapd_client_create_user_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3158">Complete request started with snapd_client_create_user_async().
See snapd_client_create_user_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="882"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3167">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3160">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3161">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_user_sync"
              c:identifier="snapd_client_create_user_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1231">Create a local user account for the given user.</doc>
        <source-position filename="snapd-client.h" line="871"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1242">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1233">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1234">the email of the user to create.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1235">a set of #SnapdCreateUserFlags to control how the user account is created.</doc>
            <type name="CreateUserFlags" c:type="SnapdCreateUserFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1236">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_async"
              c:identifier="snapd_client_create_users_async"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3184">Asynchronously create local user accounts using the system-user assertions that are valid for this device.
See snapd_client_create_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3186">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3187">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3188">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3189">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_finish"
              c:identifier="snapd_client_create_users_finish"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3206">Complete request started with snapd_client_create_users_async().
See snapd_client_create_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="893"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3215">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3208">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3209">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_users_sync"
              c:identifier="snapd_client_create_users_sync"
              version="1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1261">Create local user accounts using the system-user assertions that are valid for this device.</doc>
        <source-position filename="snapd-client.h" line="886"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1270">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1263">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1264">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_async"
              c:identifier="snapd_client_disable_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3588">Asynchronously change the state of aliases.
See snapd_client_disable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1013"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3590">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3591">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3592">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3593">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3594">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3595">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3596">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3597">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_finish"
              c:identifier="snapd_client_disable_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3617">Complete request started with snapd_client_disable_aliases_async().
See snapd_client_disable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1021"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3626">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3619">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3620">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_aliases_sync"
              c:identifier="snapd_client_disable_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1488">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1006"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1501">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1490">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1491">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1492">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1493">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1494">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1495">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_async"
              c:identifier="snapd_client_disable_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2932">Asynchronously disable an installed snap.
See snapd_client_disable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="813"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2934">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2935">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2936">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2937">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2938">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2939">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2940">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_finish"
              c:identifier="snapd_client_disable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2960">Complete request started with snapd_client_disable_async().
See snapd_client_disable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="820"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2969">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2962">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2963">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disable_sync"
              c:identifier="snapd_client_disable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1109">Disable an installed snap.</doc>
        <source-position filename="snapd-client.h" line="807"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1120">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1111">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1112">name of snap to disable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1113">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1114">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1115">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_async"
              c:identifier="snapd_client_disconnect_interface_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2239">Asynchronously disconnect two interfaces.
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2241">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2242">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2243">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2244">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2245">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2246">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2247">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2248">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2249">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2250">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_finish"
              c:identifier="snapd_client_disconnect_interface_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2270">Complete request started with snapd_client_disconnect_interface_async().
See snapd_client_disconnect_interface_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="610"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2279">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2272">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2273">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_interface_sync"
              c:identifier="snapd_client_disconnect_interface_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="733">Disconnect two interfaces.</doc>
        <source-position filename="snapd-client.h" line="591"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="747">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="735">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plug_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="736">name of snap containing plug.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="plug_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="737">name of plug to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="738">name of snap containing socket.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="slot_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="739">name of slot to disconnect.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="740">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="741">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="742">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_async"
              c:identifier="snapd_client_enable_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3536">Asynchronously change the state of aliases.
See snapd_client_enable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_alias_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="994"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3538">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3539">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3540">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3541">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3542">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3543">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3544">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3545">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_finish"
              c:identifier="snapd_client_enable_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3565">Complete request started with snapd_client_enable_aliases_async().
See snapd_client_enable_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_unalias_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1002"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3574">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3567">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3568">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_aliases_sync"
              c:identifier="snapd_client_enable_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1460">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_alias_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="987"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1473">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1462">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1463">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1464">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1465">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1466">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1467">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_async"
              c:identifier="snapd_client_enable_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2882">Asynchronously enable an installed snap.
See snapd_client_enable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="796"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2884">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2885">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2886">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2887">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2888">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2889">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2890">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_finish"
              c:identifier="snapd_client_enable_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2910">Complete request started with snapd_client_enable_async().
See snapd_client_enable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="803"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2919">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2912">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2913">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="enable_sync"
              c:identifier="snapd_client_enable_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1078">Enable an installed snap.</doc>
        <source-position filename="snapd-client.h" line="790"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1089">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1080">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1081">name of snap to enable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1082">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1083">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1084">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_async"
              c:identifier="snapd_client_find_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2293">Asynchronously find snaps in the store.
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="620"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2295">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2296">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2297">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2298">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2299">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2300">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_finish"
              c:identifier="snapd_client_find_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2316">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="626"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2326">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2318">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2319">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2320">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_async"
              c:identifier="snapd_client_find_refreshable_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2406">Asynchronously find snaps in store that are newer revisions than locally installed versions.
See snapd_client_find_refreshable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="653"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2408">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2409">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2410">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2411">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_finish"
              c:identifier="snapd_client_find_refreshable_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2429">Complete request started with snapd_client_find_refreshable_async().
See snapd_client_find_refreshable_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="657"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2438">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2431">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2432">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_refreshable_sync"
              c:identifier="snapd_client_find_refreshable_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="823">Find snaps in store that are newer revisions than locally installed versions.</doc>
        <source-position filename="snapd-client.h" line="650"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="831">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="825">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="826">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_async"
              c:identifier="snapd_client_find_section_async"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2336">Asynchronously find snaps in the store.
See snapd_client_find_section_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="638"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2338">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2339">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2340">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2341">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2342">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2343">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2344">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_finish"
              c:identifier="snapd_client_find_section_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2376">Complete request started with snapd_client_find_async().
See snapd_client_find_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="645"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2386">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2378">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2379">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2380">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_section_sync"
              c:identifier="snapd_client_find_section_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="792">Find snaps in the store.</doc>
        <source-position filename="snapd-client.h" line="631"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="804">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="794">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="795">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="section"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="796">store section to search in or %NULL to search in all sections.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="797">query string to send or %NULL to get all snaps from the given section.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="798">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="799">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_sync"
              c:identifier="snapd_client_find_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="767">Find snaps in the store.</doc>
        <source-position filename="snapd-client.h" line="614"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="778">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="769">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="770">a set of #SnapdFindFlags to control how the find is performed.</doc>
            <type name="FindFlags" c:type="SnapdFindFlags"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="771">query string to send.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="suggested_currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="772">location to store the ISO 4217 currency that is suggested to purchase with.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="773">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_async"
              c:identifier="snapd_client_get_aliases_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3328">Asynchronously get the available aliases.
See snapd_client_get_aliases_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="922"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3330">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3331">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3332">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3333">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_finish"
              c:identifier="snapd_client_get_aliases_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3350">Complete request started with snapd_client_get_aliases_async().
See snapd_client_get_aliases_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="926"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3359">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3352">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3353">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_aliases_sync"
              c:identifier="snapd_client_get_aliases_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1339">Get the available aliases.</doc>
        <source-position filename="snapd-client.h" line="919"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1348">an array of #SnapdAlias or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Alias"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1341">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1342">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_allow_interaction"
              c:identifier="snapd_client_get_allow_interaction"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1036">Get whether snapd operations are allowed to interact with the user.</doc>
        <source-position filename="snapd-client.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1042">%TRUE if interaction is allowed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1038">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apps2_async"
              c:identifier="snapd_client_get_apps2_async"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1650">Asynchronously get information on installed apps.
See snapd_client_get_apps2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="445"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1652">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1653">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="snaps"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1654">A list of snap names to return results for. If %NULL or empty then apps for all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1655">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1656">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1657">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps2_finish"
              c:identifier="snapd_client_get_apps2_finish"
              version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1678">Complete request started with snapd_client_get_apps2_async().
See snapd_client_get_apps2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="451"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1687">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1680">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1681">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps2_sync"
              c:identifier="snapd_client_get_apps2_sync"
              version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="390">Get information on installed apps.</doc>
        <source-position filename="snapd-client.h" line="440"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="400">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="392">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="393">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="snaps"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="394">A list of snap names to return results for. If %NULL or empty then apps for all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="395">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_async"
              c:identifier="snapd_client_get_apps_async"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1608">Asynchronously get information on installed apps.
See snapd_client_get_apps_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1610">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1611">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1612">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1613">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1614">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_finish"
              c:identifier="snapd_client_get_apps_finish"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1630">Complete request started with snapd_client_get_apps_async().
See snapd_client_get_apps_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="436"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1639">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1632">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1633">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_apps_sync"
              c:identifier="snapd_client_get_apps_sync"
              version="1.25"
              deprecated="1"
              deprecated-version="1.45"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="368">Get information on installed apps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_apps2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="427"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="377">an array of #SnapdApp or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="370">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="371">a set of #SnapdGetAppsFlags to control what results are returned.</doc>
            <type name="GetAppsFlags" c:type="SnapdGetAppsFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="372">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_async"
              c:identifier="snapd_client_get_assertions_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1848">Asynchronously get assertions.
See snapd_client_get_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="472"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1850">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1851">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1852">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1853">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1854">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_finish"
              c:identifier="snapd_client_get_assertions_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1873">Complete request started with snapd_client_get_assertions_async().
See snapd_client_get_assertions_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="477"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1882">an array of assertions or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1875">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1876">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_assertions_sync"
              c:identifier="snapd_client_get_assertions_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="510">Get assertions.</doc>
        <source-position filename="snapd-client.h" line="468"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="519">an array of assertions or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="512">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="513">assertion type to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="514">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auth_data"
              c:identifier="snapd_client_get_auth_data"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1180">Get the authorization data that is used for requests.</doc>
        <source-position filename="snapd-client.h" line="285"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1186">a #SnapdAuthData or %NULL.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1182">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change_async"
              c:identifier="snapd_client_get_change_async"
              version="1.29">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1263">Asynchronously get information on a change.
See snapd_client_get_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1265">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1266">a change ID to get information on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1267">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1268">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1269">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_change_finish"
              c:identifier="snapd_client_get_change_finish"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1288">Complete request started with snapd_client_get_change_async().
See snapd_client_get_change_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="315"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1297">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1290">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1291">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_change_sync"
              c:identifier="snapd_client_get_change_sync"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="173">Get information on a change.</doc>
        <source-position filename="snapd-client.h" line="304"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="182">a #SnapdChange or %NULL on error.</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="175">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="176">a change ID to get information on.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="177">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_async"
              c:identifier="snapd_client_get_changes_async"
              version="1.29">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1198">Asynchronously get changes that have occurred / are occurring on the snap daemon.
See snapd_client_get_changes_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1200">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1201">changes to filter on.</doc>
            <type name="ChangeFilter" c:type="SnapdChangeFilter"/>
          </parameter>
          <parameter name="snap_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1202">name of snap to filter on or %NULL for changes for any snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1203">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1204">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1205">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_finish"
              c:identifier="snapd_client_get_changes_finish"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1237">Complete request started with snapd_client_get_changes_async().
See snapd_client_get_changes_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="300"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1246">an array of #SnapdChange or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Change"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1239">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1240">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changes_sync"
              c:identifier="snapd_client_get_changes_sync"
              version="1.29"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="144">Get changes that have occurred / are occurring on the snap daemon.</doc>
        <source-position filename="snapd-client.h" line="287"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="154">an array of #SnapdChange or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Change"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="146">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="147">changes to filter on.</doc>
            <type name="ChangeFilter" c:type="SnapdChangeFilter"/>
          </parameter>
          <parameter name="snap_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="148">name of snap to filter on or %NULL for changes for any snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="149">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections2_async"
              c:identifier="snapd_client_get_connections2_async"
              version="1.49">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2115">Asynchronously get the installed snap connections.
See snapd_client_get_connections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2117">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2118">a set of #SnapdGetConnectionsFlags to control what results are returned.</doc>
            <type name="GetConnectionsFlags"
                  c:type="SnapdGetConnectionsFlags"/>
          </parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2119">the name of the snap to get connections for or %NULL for all snaps.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2120">the name of the interface to get connections for or %NULL for all interfaces.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2121">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2122">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2123">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections2_finish"
              c:identifier="snapd_client_get_connections2_finish"
              version="1.49"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2144">Complete request started with snapd_client_get_connections_async().
See snapd_client_get_connections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="560"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2157">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2146">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2147">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="established"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2148">the location to store the array of connections or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="undesired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2149">the location to store the array of auto-connected connections that have been manually disconnected or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2150">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2151">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections2_sync"
              c:identifier="snapd_client_get_connections2_sync"
              version="1.49"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="663">Get the installed snap connections.</doc>
        <source-position filename="snapd-client.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="678">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="665">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="666">a set of #SnapdGetConnectionsFlags to control what results are returned.</doc>
            <type name="GetConnectionsFlags"
                  c:type="SnapdGetConnectionsFlags"/>
          </parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="667">the name of the snap to get connections for or %NULL for all snaps.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="668">the name of the interface to get connections for or %NULL for all interfaces.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="established"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="669">the location to store the array of connections or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="undesired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="670">the location to store the array of auto-connected connections that have been manually disconnected or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="671">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="672">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="673">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections_async"
              c:identifier="snapd_client_get_connections_async"
              version="1.48"
              deprecated="1"
              deprecated-version="1.49">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2068">Asynchronously get the installed snap connections.
See snapd_client_get_connections_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="531"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2070">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2071">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2072">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2073">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections_finish"
              c:identifier="snapd_client_get_connections_finish"
              version="1.48"
              deprecated="1"
              deprecated-version="1.49"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2088">Complete request started with snapd_client_get_connections_async().
See snapd_client_get_connections_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2101">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2090">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2091">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="established"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2092">the location to store the array of connections or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="undesired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2093">the location to store the array of auto-connected connections that have been manually disconnected or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2094">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2095">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections_sync"
              c:identifier="snapd_client_get_connections_sync"
              version="1.48"
              deprecated="1"
              deprecated-version="1.49"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="627">Get the installed snap connections.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="524"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="639">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="629">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="established"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="630">the location to store the array of connections or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="undesired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="631">the location to store the array of auto-connected connections that have been manually disconnected or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Connection"/>
            </array>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="632">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="633">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="634">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_async"
              c:identifier="snapd_client_get_icon_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1704">Asynchronously get the icon for an installed snap.
See snapd_client_get_icon_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="459"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1706">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1707">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1708">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1709">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1710">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_finish"
              c:identifier="snapd_client_get_icon_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1728">Complete request started with snapd_client_get_icon_async().
See snapd_client_get_icon_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="464"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1737">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1730">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1731">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_icon_sync"
              c:identifier="snapd_client_get_icon_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="419">Get the icon for an installed snap.</doc>
        <source-position filename="snapd-client.h" line="455"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="428">a #SnapdIcon or %NULL on error.</doc>
          <type name="Icon" c:type="SnapdIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="421">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="422">name of snap to get icon for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="423">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces2_async"
              c:identifier="snapd_client_get_interfaces2_async"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2004">Asynchronously get the installed snap interfaces.
See snapd_client_get_interfaces2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2006">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2007">a set of #SnapdGetInterfacesFlags to control what information is returned about the interfaces.</doc>
            <type name="GetInterfacesFlags" c:type="SnapdGetInterfacesFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2008">a null-terminated array of interface names or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2009">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2010">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2011">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces2_finish"
              c:identifier="snapd_client_get_interfaces2_finish"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2040">Complete request started with snapd_client_get_interfaces2_async().
See snapd_client_get_interfaces2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="520"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2049">an array of #SnapdInterface or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Interface"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2042">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2043">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces2_sync"
              c:identifier="snapd_client_get_interfaces2_sync"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="598">Get information about the available snap interfaces.</doc>
        <source-position filename="snapd-client.h" line="509"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="608">the available interfaces.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Interface"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="600">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="601">a set of #SnapdGetInterfacesFlags to control what information is returned about the interfaces.</doc>
            <type name="GetInterfacesFlags" c:type="SnapdGetInterfacesFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="602">a null-terminated array of interface names or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="603">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_async"
              c:identifier="snapd_client_get_interfaces_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1946">Asynchronously get the installed snap interfaces.
See snapd_client_get_interfaces_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="499"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1948">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1949">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1950">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1951">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_finish"
              c:identifier="snapd_client_get_interfaces_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1969">Complete request started with snapd_client_get_interfaces_async().
See snapd_client_get_interfaces_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="503"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1980">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1971">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1972">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1973">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1974">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces_sync"
              c:identifier="snapd_client_get_interfaces_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="565">Get the installed snap interfaces.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_connections_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="494"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="575">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="567">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="plugs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="568">the location to store the array of #SnapdPlug or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Plug"/>
            </array>
          </parameter>
          <parameter name="slots"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="569">the location to store the array of #SnapdSlot or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Slot"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="570">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_maintenance"
              c:identifier="snapd_client_get_maintenance"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1017">Get the maintenance information reported by snapd or %NULL if no maintenance is in progress.
This information is updated after every request.</doc>
        <source-position filename="snapd-client.h" line="247"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1024">a #SnapdMaintenance or %NULL.</doc>
          <type name="Maintenance" c:type="SnapdMaintenance*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1019">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sections_async"
              c:identifier="snapd_client_get_sections_async"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3280">Asynchronously get the store sections.
See snapd_client_get_sections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="911"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3282">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3283">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3284">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3285">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_finish"
              c:identifier="snapd_client_get_sections_finish"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3302">Complete request started with snapd_client_get_sections_async().
See snapd_client_get_sections_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="915"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3311">an array of section names or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3304">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3305">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sections_sync"
              c:identifier="snapd_client_get_sections_sync"
              version="1.7"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1313">Get the store sections.</doc>
        <source-position filename="snapd-client.h" line="908"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1322">an array of section names or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1315">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1316">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_async"
              c:identifier="snapd_client_get_snap_async"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1455">Asynchronously get information of a single installed snap.
See snapd_client_get_snap_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1457">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1458">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1459">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1460">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1461">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_conf_async"
              c:identifier="snapd_client_get_snap_conf_async"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1505">Asynchronously get configuration for a snap.
See snapd_client_get_snap_conf_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1507">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1508">name of snap to get configuration from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1509">keys to returns or %NULL to return all.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1510">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1511">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1512">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_conf_finish"
              c:identifier="snapd_client_get_snap_conf_finish"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1532">Complete request started with snapd_client_get_snap_conf_async().
See snapd_client_get_snap_conf_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="408"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1541">a table of configuration values or %NULL on error.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.Variant"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1534">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1535">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_conf_sync"
              c:identifier="snapd_client_get_snap_conf_sync"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="307">Get configuration for a snap. System configuration is stored using the name "system".</doc>
        <source-position filename="snapd-client.h" line="397"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="317">a table of configuration values or %NULL on error.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.Variant"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="309">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="310">name of snap to get configuration from.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="keys"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="311">keys to returns or %NULL to return all.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="312">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_finish"
              c:identifier="snapd_client_get_snap_finish"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1479">Complete request started with snapd_client_get_snap_async().
See snapd_client_get_snap_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="393"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1488">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1481">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1482">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap_sync"
              c:identifier="snapd_client_get_snap_sync"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="280">Get information of a single installed snap. If the snap does not exist an error occurs.</doc>
        <source-position filename="snapd-client.h" line="384"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="289">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="282">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="283">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="284">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_async"
              c:identifier="snapd_client_get_snaps_async"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1794">Asynchronously get information on installed snaps.
See snapd_client_get_snaps_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1796">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1797">a set of #SnapdGetSnapsFlags to control what results are returned.</doc>
            <type name="GetSnapsFlags" c:type="SnapdGetSnapsFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1798">A list of snap names to return results for. If %NULL or empty then all installed snaps are returned.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1799">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1800">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1801">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_finish"
              c:identifier="snapd_client_get_snaps_finish"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1822">Complete request started with snapd_client_get_snaps_async().
See snapd_client_get_snaps_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="367"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1831">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1824">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1825">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snaps_sync"
              c:identifier="snapd_client_get_snaps_sync"
              version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="477">Get information on installed snaps (snaps with status %SNAPD_SNAP_STATUS_ACTIVE).
If @flags contains %SNAPD_GET_SNAPS_FLAGS_INCLUDE_INACTIVE then also return snaps
with status %SNAPD_SNAP_STATUS_INSTALLED.

If @names is not %NULL and contains at least one name only snaps that match these names are
returned. If a snap is not installed it is not returned (no error is generated).</doc>
        <source-position filename="snapd-client.h" line="356"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="492">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="479">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="480">a set of #SnapdGetSnapsFlags to control what results are returned.</doc>
            <type name="GetSnapsFlags" c:type="SnapdGetSnapsFlags"/>
          </parameter>
          <parameter name="names"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="481">A list of snap names or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="482">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_socket_path"
              c:identifier="snapd_client_get_socket_path"
              version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="941">Get the unix socket path to connect to snapd with.</doc>
        <source-position filename="snapd-client.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="947">socket path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="943">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_information_async"
              c:identifier="snapd_client_get_system_information_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1365">Request system information asynchronously from snapd.
See snapd_client_get_system_information_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1367">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1368">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1369">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1370">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_finish"
              c:identifier="snapd_client_get_system_information_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1387">Complete request started with snapd_client_get_system_information_async().
See snapd_client_get_system_information_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="341"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1396">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1389">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1390">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_system_information_sync"
              c:identifier="snapd_client_get_system_information_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="231">Request system information from snapd.
While this blocks, snapd is expected to return the information quickly.</doc>
        <source-position filename="snapd-client.h" line="334"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="240">a #SnapdSystemInformation or %NULL on error.</doc>
          <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="233">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="234">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_agent"
              c:identifier="snapd_client_get_user_agent"
              version="1.16">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="980">Get the HTTP user-agent that is sent with each request to snapd.</doc>
        <source-position filename="snapd-client.h" line="240"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="986">user agent or %NULL if none set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="982">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_users_async"
              c:identifier="snapd_client_get_users_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3232">Asynchronously get user accounts that are valid for this device.
See snapd_client_get_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="900"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3234">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3235">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3236">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3237">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_users_finish"
              c:identifier="snapd_client_get_users_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3254">Complete request started with snapd_client_get_users_async().
See snapd_client_get_users_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="904"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3263">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3256">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3257">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_users_sync"
              c:identifier="snapd_client_get_users_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1287">Get user accounts that are valid for this device.</doc>
        <source-position filename="snapd-client.h" line="897"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1296">an array of #SnapdUserInformation or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UserInformation"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1289">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1290">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_async"
              c:identifier="snapd_client_install2_async"
              version="1.12">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2502">Asynchronously install a snap from the store.
See snapd_client_install2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="689"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2504">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2505">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2506">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2507">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2508">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2509">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2510">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2511">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2512">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2513">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_finish"
              c:identifier="snapd_client_install2_finish"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2544">Complete request started with snapd_client_install2_async().
See snapd_client_install2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="699"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2553">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2546">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2547">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install2_sync"
              c:identifier="snapd_client_install2_sync"
              version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="874">Install a snap from the store.</doc>
        <source-position filename="snapd-client.h" line="680"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="888">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="876">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="877">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="878">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="879">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="revision"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="880">revision to install or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="881">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="882">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="883">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_async"
              c:identifier="snapd_client_install_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2456">Asynchronously install a snap from the store.
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="668"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2458">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2459">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2460">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2461">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2462">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2463">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2464">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2465">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_finish"
              c:identifier="snapd_client_install_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2482">Complete request started with snapd_client_install_async().
See snapd_client_install_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="676"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2491">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2484">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2485">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_async"
              c:identifier="snapd_client_install_stream_async"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2618">Asynchronously install a snap.
See snapd_client_install_stream_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="710"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2620">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2621">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2622">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2623">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2624">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2625">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2626">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2627">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_finish"
              c:identifier="snapd_client_install_stream_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2656">Complete request started with snapd_client_install_stream_async().
See snapd_client_install_stream_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="718"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2665">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2658">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2659">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_stream_sync"
              c:identifier="snapd_client_install_stream_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="909">Install a snap. The snap contents are provided in the form of an input stream.
To install from a local file, do the following:

|[
g_autoptr(GFile) file = g_file_new_for_path (path_to_snap_file);
g_autoptr(GInputStream) stream = g_file_read (file, cancellable, &amp;error);
snapd_client_install_stream_sync (self, stream, progress_cb, NULL, cancellable, &amp;error);
\]

Or if you have the file in memory you can use:

|[
g_autoptr(GInputStream) stream = g_memory_input_stream_new_from_data (data, data_length, free_data);
snapd_client_install_stream_sync (self, stream, progress_cb, NULL, cancellable, &amp;error);
\]</doc>
        <source-position filename="snapd-client.h" line="703"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="935">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="911">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="912">a set of #SnapdInstallFlags to control install options.</doc>
            <type name="InstallFlags" c:type="SnapdInstallFlags"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="913">a #GInputStream containing the snap file contents to install.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="914">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="915">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="916">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_sync"
              c:identifier="snapd_client_install_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.12"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="848">Install a snap from the store.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_install2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="661"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="860">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="850">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="851">name of snap to install.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="852">channel to install from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="853">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="854">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="855">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_async"
              c:identifier="snapd_client_list_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1754">Asynchronously get information on all installed snaps.
See snapd_client_list_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="348"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1756">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1757">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1758">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1759">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="snapd_client_list_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1774">Complete request started with snapd_client_list_async().
See snapd_client_list_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="352"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1783">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1776">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1777">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_async"
              c:identifier="snapd_client_list_one_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1413">Asynchronously get information of a single installed snap.
See snapd_client_list_one_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="375"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1415">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1416">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1417">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1418">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1419">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_finish"
              c:identifier="snapd_client_list_one_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1435">Complete request started with snapd_client_list_one_async().
See snapd_client_list_one_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="380"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1444">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1437">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1438">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_one_sync"
              c:identifier="snapd_client_list_one_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="258">Get information of a single installed snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snap_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="371"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="267">a #SnapdSnap or %NULL on error.</doc>
          <type name="Snap" c:type="SnapdSnap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="260">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="261">name of snap to get.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="262">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="snapd_client_list_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="446">Get information on all installed snaps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_get_snaps_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="345"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="454">an array of #SnapdSnap or %NULL on error.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Snap"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="448">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="449">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_async"
              c:identifier="snapd_client_login2_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1104">Asynchronously get authorization to install/remove snaps.
See snapd_client_login2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1106">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1107">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1108">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1109">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1110">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1111">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1112">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_finish"
              c:identifier="snapd_client_login2_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1130">Complete request started with snapd_client_login2_async().
See snapd_client_login2_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="279"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1139">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1132">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1133">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login2_sync"
              c:identifier="snapd_client_login2_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="112">Log in to snapd and get authorization to install/remove snaps.</doc>
        <source-position filename="snapd-client.h" line="266"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="123">a #SnapdUserInformation or %NULL on error.</doc>
          <type name="UserInformation" c:type="SnapdUserInformation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="114">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="115">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="116">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="117">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="118">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_async"
              c:identifier="snapd_client_login_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1054">Asynchronously get authorization to install/remove snaps.
See snapd_client_login_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1056">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1057">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1058">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1059">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1060">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1061">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1062">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_finish"
              c:identifier="snapd_client_login_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1078">Complete request started with snapd_client_login_async().
See snapd_client_login_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="262"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1087">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1080">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1081">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="login_sync"
              c:identifier="snapd_client_login_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="75">Log in to snapd and get authorization to install/remove snaps.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_login2_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="249"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="86">a #SnapdAuthData or %NULL on error.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="77">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="78">email address to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="79">password to log in with.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="otp"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="80">response to one-time password challenge.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="81">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_async"
              c:identifier="snapd_client_prefer_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3488">Asynchronously ???.
See snapd_client_prefer_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3490">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3491">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3492">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3493">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3494">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3495">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3496">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_finish"
              c:identifier="snapd_client_prefer_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3514">Complete request started with snapd_client_prefer_async().
See snapd_client_prefer_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="983"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3523">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3516">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3517">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prefer_sync"
              c:identifier="snapd_client_prefer_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1430">???</doc>
        <source-position filename="snapd-client.h" line="970"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1432">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1433">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1434">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1435">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1436">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_async"
              c:identifier="snapd_client_refresh_all_async"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2780">Asynchronously ensure all snaps are updated to their latest versions.
See snapd_client_refresh_all_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="763"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2782">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2783">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2784">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2785">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2786">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2787">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_finish"
              c:identifier="snapd_client_refresh_all_finish"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2805">Complete request started with snapd_client_refresh_all_async().
See snapd_client_refresh_all_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="769"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2814">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2807">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2808">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_all_sync"
              c:identifier="snapd_client_refresh_all_sync"
              version="1.5"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1019">Update all installed snaps to their latest version.</doc>
        <source-position filename="snapd-client.h" line="758"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1029">a %NULL-terminated array of the snap names refreshed or %NULL on error.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1021">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1022">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1023">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1024">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async"
              c:identifier="snapd_client_refresh_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2728">Asynchronously ensure an installed snap is at the latest version.
See snapd_client_refresh_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="746"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2730">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2731">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2732">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2733">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2734">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2735">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2736">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2737">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="snapd_client_refresh_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2758">Complete request started with snapd_client_refresh_async().
See snapd_client_refresh_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="754"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2767">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2760">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2761">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sync"
              c:identifier="snapd_client_refresh_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="987">Ensure an installed snap is at the latest version.</doc>
        <source-position filename="snapd-client.h" line="739"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="999">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="989">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="990">name of snap to refresh.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="991">channel to refresh from or %NULL for default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="992">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="993">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="994">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="snapd_client_remove_async"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2832">Asynchronously uninstall a snap.
See snapd_client_remove_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="779"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2834">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2835">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2836">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2837">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2838">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2839">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2840">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="snapd_client_remove_finish"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2860">Complete request started with snapd_client_remove_async().
See snapd_client_remove_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="786"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2869">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2862">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2863">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="snapd_client_remove_sync"
              version="1.0"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1047">Uninstall a snap.</doc>
        <source-position filename="snapd-client.h" line="773"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1058">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1049">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1050">name of snap to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1051">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1052">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1053">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_async"
              c:identifier="snapd_client_reset_aliases_async"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3640">Asynchronously change the state of aliases.
See snapd_client_reset_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_async()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1032"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3642">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3643">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3644">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3645">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3646">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3647">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3648">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3649">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_finish"
              c:identifier="snapd_client_reset_aliases_finish"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3669">Complete request started with snapd_client_reset_aliases_async().
See snapd_client_reset_aliases_sync() for more information.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_finish()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1040"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3678">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3671">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3672">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_aliases_sync"
              c:identifier="snapd_client_reset_aliases_sync"
              version="1.8"
              deprecated="1"
              deprecated-version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1516">Change the state of aliases.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_client_disable_aliases_sync()</doc-deprecated>
        <source-position filename="snapd-client.h" line="1025"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1529">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1518">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1519">the name of the snap to modify.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="aliases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1520">the aliases to modify.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1521">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1522">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1523">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_async"
              c:identifier="snapd_client_run_snapctl_async"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3692">Asynchronously run a snapctl command.
See snapd_client_run_snapctl_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="1051"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3694">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3695">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3696">the arguments to pass to snapctl.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3697">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3698">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3699">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_finish"
              c:identifier="snapd_client_run_snapctl_finish"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3719">Complete request started with snapd_client_run_snapctl_async().
See snapd_client_run_snapctl_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="1057"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3730">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3721">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3722">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3723">the location to write the stdout from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3724">the location to write the stderr from the command or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_snapctl_sync"
              c:identifier="snapd_client_run_snapctl_sync"
              version="1.8"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1544">Run a snapctl command.</doc>
        <source-position filename="snapd-client.h" line="1044"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1557">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1546">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1547">context for this call.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1548">the arguments to pass to snapctl.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="stdout_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1549">the location to write the stdout from the command or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="stderr_output"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1550">the location to write the stderr from the command or %NULL.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1551">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_interaction"
              c:identifier="snapd_client_set_allow_interaction"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="998">Set whether snapd operations are allowed to interact with the user.
This affects operations that use polkit authorisation.
Defaults to TRUE.</doc>
        <source-position filename="snapd-client.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1000">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="allow_interaction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1001">whether to allow interaction.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auth_data"
              c:identifier="snapd_client_set_auth_data"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1156">Set the authorization data to use for requests. Authorization data can be
obtained by:

- Logging into snapd using snapd_client_login_sync()

- Using an existing authorization with snapd_auth_data_new().</doc>
        <source-position filename="snapd-client.h" line="283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1158">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="auth_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1159">a #SnapdAuthData or %NULL.</doc>
            <type name="AuthData" c:type="SnapdAuthData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_conf_async"
              c:identifier="snapd_client_set_snap_conf_async"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1558">Asynchronously set configuration for a snap.
See snapd_client_set_snap_conf_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="417"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1560">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1561">name of snap to set configuration for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1562">Keys to set.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1563">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1564">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1565">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_conf_finish"
              c:identifier="snapd_client_set_snap_conf_finish"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="1586">Complete request started with snapd_client_set_snap_conf_async().
See snapd_client_set_snap_conf_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="423"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="1595">%TRUE if configuration successfully applied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1588">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="1589">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_snap_conf_sync"
              c:identifier="snapd_client_set_snap_conf_sync"
              version="1.48"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="337">Set configuration for a snap. System configuration is stored using the name "system".</doc>
        <source-position filename="snapd-client.h" line="412"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="347">%TRUE if configuration successfully applied.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="339">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="340">name of snap to set configuration for.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="key_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="341">Keys to set.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GLib.Variant"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="342">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_socket_path"
              c:identifier="snapd_client_set_socket_path"
              version="1.24">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="917">Set the Unix socket path to connect to snapd with.
Defaults to the system socket.</doc>
        <source-position filename="snapd-client.h" line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="919">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="socket_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="920">a socket path or %NULL to reset to the default.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_agent"
              c:identifier="snapd_client_set_user_agent"
              version="1.16">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="959">Set the HTTP user-agent that is sent with each request to snapd.
Defaults to "snapd-glib/VERSION".</doc>
        <source-position filename="snapd-client.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="961">a #SnapdClient</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="user_agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="962">a user agent or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_async"
              c:identifier="snapd_client_switch_async"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2982">Asynchronously set the tracking channel on an installed snap.
See snapd_client_switch_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="831"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2984">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2985">name of snap to switch channel.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2986">channel to track.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2987">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2988">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2989">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2990">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2991">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_finish"
              c:identifier="snapd_client_switch_finish"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3012">Complete request started with snapd_client_switch_async().
See snapd_client_switch_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="839"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3021">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3014">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3015">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_sync"
              c:identifier="snapd_client_switch_sync"
              version="1.26"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1140">Set the tracking channel on an installed snap.</doc>
        <source-position filename="snapd-client.h" line="824"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="1152">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1142">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1143">name of snap to switch channel.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1144">channel to track.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1145">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1146">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1147">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_async"
              c:identifier="snapd_client_try_async"
              version="1.9">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2678">Asynchronously try a snap.
See snapd_client_try_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="728"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2680">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2681">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2682">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2683">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2684">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2685">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2686">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_finish"
              c:identifier="snapd_client_try_finish"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="2706">Complete request started with snapd_client_try_async().
See snapd_client_try_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="735"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="2715">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2708">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="2709">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_sync"
              c:identifier="snapd_client_try_sync"
              version="1.9"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="956">Try a snap.</doc>
        <source-position filename="snapd-client.h" line="722"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client-sync.c"
               line="967">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="958">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="959">path to snap directory to try.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="960">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="961">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="962">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_async"
              c:identifier="snapd_client_unalias_async"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3439">Asynchronously remove an alias from an app.
See snapd_client_unalias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="958"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3441">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3442">the name of the snap to modify or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3443">the name of the alias to remove or %NULL to remove all aliases for the given snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3444">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3445">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3446">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3447">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3448">the data to pass to callback function.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_finish"
              c:identifier="snapd_client_unalias_finish"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client.c"
             line="3466">Complete request started with snapd_client_unalias_async().
See snapd_client_unalias_sync() for more information.</doc>
        <source-position filename="snapd-client.h" line="966"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.c"
               line="3475">%TRUE on success or %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3468">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client.c"
                 line="3469">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unalias_sync"
              c:identifier="snapd_client_unalias_sync"
              version="1.25"
              throws="1">
        <doc xml:space="preserve"
             filename="snapd-client-sync.c"
             line="1399">Remove an alias from an app.</doc>
        <source-position filename="snapd-client.h" line="951"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1401">a #SnapdClient.</doc>
            <type name="Client" c:type="SnapdClient*"/>
          </instance-parameter>
          <parameter name="snap"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1402">the name of the snap to modify or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="alias"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1403">the name of the alias to remove or %NULL to remove all aliases for the given snap.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress_callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1404">function to callback with progress.</doc>
            <type name="ProgressCallback" c:type="SnapdProgressCallback"/>
          </parameter>
          <parameter name="progress_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1405">user data to pass to @progress_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-client-sync.c"
                 line="1406">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ClientClass"
            c:type="SnapdClientClass"
            glib:is-gtype-struct-for="Client">
      <doc xml:space="preserve"
           filename="snapd-client.c"
           line="74">Class structure for #SnapdClient.</doc>
      <source-position filename="snapd-client.h" line="45"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_snapd_reserved1" introspectable="0">
        <callback name="_snapd_reserved1">
          <source-position filename="snapd-client.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved2" introspectable="0">
        <callback name="_snapd_reserved2">
          <source-position filename="snapd-client.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved3" introspectable="0">
        <callback name="_snapd_reserved3">
          <source-position filename="snapd-client.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_snapd_reserved4" introspectable="0">
        <callback name="_snapd_reserved4">
          <source-position filename="snapd-client.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="Confinement"
                 version="1.0"
                 glib:type-name="SnapdConfinement"
                 glib:get-type="snapd_confinement_get_type"
                 c:type="SnapdConfinement">
      <doc xml:space="preserve"
           filename="snapd-channel.h"
           line="25">Confinement used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="27">the confinement of the snap is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="28">the snap is using confinement.</doc>
      </member>
      <member name="devmode"
              value="2"
              c:identifier="SNAPD_CONFINEMENT_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="29">the snap is in dev mode (i.e. unconfined).</doc>
      </member>
      <member name="classic"
              value="3"
              c:identifier="SNAPD_CONFINEMENT_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve"
             filename="snapd-channel.h"
             line="30">the snap is using classic confinement.</doc>
      </member>
    </enumeration>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="SnapdConnection"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdConnection"
           glib:get-type="snapd_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:space="preserve"
           filename="snapd-connection.c"
           line="25">#SnapdConnection contains the state of Snap a interface connection.</doc>
      <source-position filename="snapd-connection.h" line="25"/>
      <method name="get_gadget"
              c:identifier="snapd_connection_get_gadget"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="134">Get if this connection was made by the gadget snap.</doc>
        <source-position filename="snapd-connection.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="140">%TRUE if connection was made by the gadget snap.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="136">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_connection_get_interface"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="100">Get the interface this connections uses.</doc>
        <source-position filename="snapd-connection.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="106">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="102">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manual"
              c:identifier="snapd_connection_get_manual"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="117">Get if this connection was made manually.</doc>
        <source-position filename="snapd-connection.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="123">%TRUE if connection was made manually.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="119">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_connection_get_name"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="285">Get the name of this connection (i.e. a slot or plug name).</doc>
        <doc-deprecated xml:space="preserve">Use snapd_plug_ref_get_plug() or snapd_slot_ref_get_slot()</doc-deprecated>
        <source-position filename="snapd-connection.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="291">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="287">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plug"
              c:identifier="snapd_connection_get_plug"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="83">Get the plug this connection is made with.</doc>
        <source-position filename="snapd-connection.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="89">a reference to a plug.</doc>
          <type name="PlugRef" c:type="SnapdPlugRef*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="85">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plug_attribute"
              c:identifier="snapd_connection_get_plug_attribute"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="267">Get an attribute for connected plug.</doc>
        <source-position filename="snapd-connection.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="274">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="269">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="270">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plug_attribute_names"
              c:identifier="snapd_connection_get_plug_attribute_names"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="218">Get the names of the attributes the connected plug has.</doc>
        <source-position filename="snapd-connection.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="225">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="220">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="221">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slot"
              c:identifier="snapd_connection_get_slot"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="66">Get the slot this connection is made with.</doc>
        <source-position filename="snapd-connection.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="72">a reference to a slot.</doc>
          <type name="SlotRef" c:type="SnapdSlotRef*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="68">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slot_attribute"
              c:identifier="snapd_connection_get_slot_attribute"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="200">Get an attribute for connected slot.</doc>
        <source-position filename="snapd-connection.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="207">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="202">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="203">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_slot_attribute_names"
              c:identifier="snapd_connection_get_slot_attribute_names"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="151">Get the names of the attributes the connected slot has.</doc>
        <source-position filename="snapd-connection.h" line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="158">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="153">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="154">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_connection_get_snap"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="303">Get the snap this connection is on.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_plug_ref_get_snap() or snapd_slot_ref_get_snap()</doc-deprecated>
        <source-position filename="snapd-connection.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="309">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="305">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_plug_attribute"
              c:identifier="snapd_connection_has_plug_attribute"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="249">Check if the connected plug has an attribute.</doc>
        <source-position filename="snapd-connection.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="256">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="251">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="252">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_slot_attribute"
              c:identifier="snapd_connection_has_slot_attribute"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-connection.c"
             line="182">Check if the connected slot has an attribute.</doc>
        <source-position filename="snapd-connection.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-connection.c"
               line="189">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="184">a #SnapdConnection.</doc>
            <type name="Connection" c:type="SnapdConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-connection.c"
                 line="185">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="gadget"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="manual"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plug"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="PlugRef"/>
      </property>
      <property name="plug-attrs"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="slot"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SlotRef"/>
      </property>
      <property name="slot-attrs"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ConnectionClass"
            c:type="SnapdConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <source-position filename="snapd-connection.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="CreateUserFlags"
              version="1.3"
              glib:type-name="SnapdCreateUserFlags"
              glib:get-type="snapd_create_user_flags_get_type"
              c:type="SnapdCreateUserFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="157">Flag to control when a user accounts is created.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_CREATE_USER_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="159">No flags, default behaviour.</doc>
      </member>
      <member name="sudo"
              value="1"
              c:identifier="SNAPD_CREATE_USER_FLAGS_SUDO"
              glib:nick="sudo">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="160">Gives sudo access to created user.</doc>
      </member>
      <member name="known"
              value="2"
              c:identifier="SNAPD_CREATE_USER_FLAGS_KNOWN"
              glib:nick="known">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="161">Use the local system-user assertions to create the user.</doc>
      </member>
    </bitfield>
    <enumeration name="DaemonType"
                 version="1.9"
                 glib:type-name="SnapdDaemonType"
                 glib:get-type="snapd_daemon_type_get_type"
                 c:type="SnapdDaemonType">
      <doc xml:space="preserve"
           filename="snapd-app.h"
           line="25">Type of daemon.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_DAEMON_TYPE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="27">Not a daemon</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="SNAPD_DAEMON_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="28">Unknown daemon type</doc>
      </member>
      <member name="simple"
              value="2"
              c:identifier="SNAPD_DAEMON_TYPE_SIMPLE"
              glib:nick="simple">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="29">Simple daemon</doc>
      </member>
      <member name="forking"
              value="3"
              c:identifier="SNAPD_DAEMON_TYPE_FORKING"
              glib:nick="forking">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="30">Forking daemon</doc>
      </member>
      <member name="oneshot"
              value="4"
              c:identifier="SNAPD_DAEMON_TYPE_ONESHOT"
              glib:nick="oneshot">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="31">One-shot daemon</doc>
      </member>
      <member name="dbus"
              value="5"
              c:identifier="SNAPD_DAEMON_TYPE_DBUS"
              glib:nick="dbus">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="32">D-Bus daemon</doc>
      </member>
      <member name="notify"
              value="6"
              c:identifier="SNAPD_DAEMON_TYPE_NOTIFY"
              glib:nick="notify">
        <doc xml:space="preserve"
             filename="snapd-app.h"
             line="33">Notify daemon</doc>
      </member>
    </enumeration>
    <enumeration name="Error"
                 version="1.0"
                 glib:type-name="SnapdError"
                 glib:get-type="snapd_error_get_type"
                 c:type="SnapdError"
                 glib:error-domain="snapd-error-quark">
      <doc xml:space="preserve"
           filename="snapd-error.h"
           line="21">Error codes returned by snapd operations.</doc>
      <member name="connection_failed"
              value="0"
              c:identifier="SNAPD_ERROR_CONNECTION_FAILED"
              glib:nick="connection-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="23">not able to connect to snapd.</doc>
      </member>
      <member name="write_failed"
              value="1"
              c:identifier="SNAPD_ERROR_WRITE_FAILED"
              glib:nick="write-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="24">an error occurred while writing to snapd.</doc>
      </member>
      <member name="read_failed"
              value="2"
              c:identifier="SNAPD_ERROR_READ_FAILED"
              glib:nick="read-failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="25">an error occurred while reading from snapd.</doc>
      </member>
      <member name="bad_request"
              value="3"
              c:identifier="SNAPD_ERROR_BAD_REQUEST"
              glib:nick="bad-request">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="26">snapd did not understand the request that was sent.</doc>
      </member>
      <member name="bad_response"
              value="4"
              c:identifier="SNAPD_ERROR_BAD_RESPONSE"
              glib:nick="bad-response">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="27">the response received from snapd was not
    understood.</doc>
      </member>
      <member name="auth_data_required"
              value="5"
              c:identifier="SNAPD_ERROR_AUTH_DATA_REQUIRED"
              glib:nick="auth-data-required">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="29">the requested operation requires
    authorization data.</doc>
      </member>
      <member name="auth_data_invalid"
              value="6"
              c:identifier="SNAPD_ERROR_AUTH_DATA_INVALID"
              glib:nick="auth-data-invalid">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="31">the provided authorization data is invalid.</doc>
      </member>
      <member name="two_factor_required"
              value="7"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_REQUIRED"
              glib:nick="two-factor-required">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="32">login requires a two factor code.</doc>
      </member>
      <member name="two_factor_invalid"
              value="8"
              c:identifier="SNAPD_ERROR_TWO_FACTOR_INVALID"
              glib:nick="two-factor-invalid">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="33">the two factor code provided at login is
    invalid.</doc>
      </member>
      <member name="permission_denied"
              value="9"
              c:identifier="SNAPD_ERROR_PERMISSION_DENIED"
              glib:nick="permission-denied">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="35">this user account is not permitted to perform
    the requested operation.</doc>
      </member>
      <member name="failed"
              value="10"
              c:identifier="SNAPD_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="37">an unspecified error occurred while communicating
    with snapd.</doc>
      </member>
      <member name="terms_not_accepted"
              value="11"
              c:identifier="SNAPD_ERROR_TERMS_NOT_ACCEPTED"
              glib:nick="terms-not-accepted">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="39">this user has not accepted the store's terms
    of service.</doc>
      </member>
      <member name="payment_not_setup"
              value="12"
              c:identifier="SNAPD_ERROR_PAYMENT_NOT_SETUP"
              glib:nick="payment-not-setup">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="41">this user has not configured a payment
    method.</doc>
      </member>
      <member name="payment_declined"
              value="13"
              c:identifier="SNAPD_ERROR_PAYMENT_DECLINED"
              glib:nick="payment-declined">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="43">this user has had their payment method
    declined by the payment provider.</doc>
      </member>
      <member name="already_installed"
              value="14"
              c:identifier="SNAPD_ERROR_ALREADY_INSTALLED"
              glib:nick="already-installed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="45">the requested snap is already installed.</doc>
      </member>
      <member name="not_installed"
              value="15"
              c:identifier="SNAPD_ERROR_NOT_INSTALLED"
              glib:nick="not-installed">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="46">the requested snap is not installed.</doc>
      </member>
      <member name="no_update_available"
              value="16"
              c:identifier="SNAPD_ERROR_NO_UPDATE_AVAILABLE"
              glib:nick="no-update-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="47">no update is available for this snap.</doc>
      </member>
      <member name="password_policy_error"
              value="17"
              c:identifier="SNAPD_ERROR_PASSWORD_POLICY_ERROR"
              glib:nick="password-policy-error">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="48">provided password is not valid.</doc>
      </member>
      <member name="needs_devmode"
              value="18"
              c:identifier="SNAPD_ERROR_NEEDS_DEVMODE"
              glib:nick="needs-devmode">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="49">this snap needs to be installed using devmode.</doc>
      </member>
      <member name="needs_classic"
              value="19"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC"
              glib:nick="needs-classic">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="50">this snap needs to be installed using classic
    mode.</doc>
      </member>
      <member name="needs_classic_system"
              value="20"
              c:identifier="SNAPD_ERROR_NEEDS_CLASSIC_SYSTEM"
              glib:nick="needs-classic-system">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="52">a classic system is required to install
   this snap.</doc>
      </member>
      <member name="bad_query"
              value="21"
              c:identifier="SNAPD_ERROR_BAD_QUERY"
              glib:nick="bad-query">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="54">a bad query was provided.</doc>
      </member>
      <member name="network_timeout"
              value="22"
              c:identifier="SNAPD_ERROR_NETWORK_TIMEOUT"
              glib:nick="network-timeout">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="55">A timeout occurred during the request.</doc>
      </member>
      <member name="not_found"
              value="23"
              c:identifier="SNAPD_ERROR_NOT_FOUND"
              glib:nick="not-found">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="56">the requested snap couldn't be found.</doc>
      </member>
      <member name="not_in_store"
              value="24"
              c:identifier="SNAPD_ERROR_NOT_IN_STORE"
              glib:nick="not-in-store">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="57">the requested snap is not in the store.</doc>
      </member>
      <member name="auth_cancelled"
              value="25"
              c:identifier="SNAPD_ERROR_AUTH_CANCELLED"
              glib:nick="auth-cancelled">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="58">authentication was cancelled by the user.</doc>
      </member>
      <member name="not_classic"
              value="26"
              c:identifier="SNAPD_ERROR_NOT_CLASSIC"
              glib:nick="not-classic">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="59">snap not compatible with classic mode.</doc>
      </member>
      <member name="revision_not_available"
              value="27"
              c:identifier="SNAPD_ERROR_REVISION_NOT_AVAILABLE"
              glib:nick="revision-not-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="60">requested snap revision not available.</doc>
      </member>
      <member name="channel_not_available"
              value="28"
              c:identifier="SNAPD_ERROR_CHANNEL_NOT_AVAILABLE"
              glib:nick="channel-not-available">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="61">requested snap channel not available.</doc>
      </member>
      <member name="not_a_snap"
              value="29"
              c:identifier="SNAPD_ERROR_NOT_A_SNAP"
              glib:nick="not-a-snap">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="62">the given snap or directory does not look like a snap.</doc>
      </member>
      <member name="dns_failure"
              value="30"
              c:identifier="SNAPD_ERROR_DNS_FAILURE"
              glib:nick="dns-failure">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="63">A hostname failed to resolve during the request.</doc>
      </member>
      <member name="option_not_found"
              value="31"
              c:identifier="SNAPD_ERROR_OPTION_NOT_FOUND"
              glib:nick="option-not-found">
        <doc xml:space="preserve"
             filename="snapd-error.h"
             line="64">A requested configuration option is not set.</doc>
      </member>
      <function name="quark" c:identifier="snapd_error_quark" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-error.c"
             line="22">Gets the Snapd Error Quark.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-error.c"
               line="27">a #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FindFlags"
              version="1.0"
              glib:type-name="SnapdFindFlags"
              glib:get-type="snapd_find_flags_get_type"
              c:type="SnapdFindFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="109">Flag to change how a find is performed.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_FIND_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="111">No flags, default behaviour.</doc>
      </member>
      <member name="match_name"
              value="1"
              c:identifier="SNAPD_FIND_FLAGS_MATCH_NAME"
              glib:nick="match-name">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="112">Search for snaps whose name matches the given
    string. The match is exact unless the string ends in *.</doc>
      </member>
      <member name="select_private"
              value="2"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_PRIVATE"
              glib:nick="select-private">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="116">Search private snaps.</doc>
      </member>
      <member name="select_refresh"
              value="4"
              c:identifier="SNAPD_FIND_FLAGS_SELECT_REFRESH"
              glib:nick="select-refresh">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="117">Deprecated, do not use.</doc>
      </member>
      <member name="scope_wide"
              value="8"
              c:identifier="SNAPD_FIND_FLAGS_SCOPE_WIDE"
              glib:nick="scope-wide">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="118">Search for snaps from any architecture or branch.</doc>
      </member>
      <member name="match_common_id"
              value="16"
              c:identifier="SNAPD_FIND_FLAGS_MATCH_COMMON_ID"
              glib:nick="match-common-id">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="114">Search for snaps whose common ID matches
    the given string.</doc>
      </member>
    </bitfield>
    <bitfield name="GetAppsFlags"
              version="1.25"
              glib:type-name="SnapdGetAppsFlags"
              glib:get-type="snapd_get_apps_flags_get_type"
              c:type="SnapdGetAppsFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="79">Flag to change which apps are returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_APPS_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="81">No flags, default behaviour.</doc>
      </member>
      <member name="select_services"
              value="1"
              c:identifier="SNAPD_GET_APPS_FLAGS_SELECT_SERVICES"
              glib:nick="select-services">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="82">Select services only.</doc>
      </member>
    </bitfield>
    <bitfield name="GetConnectionsFlags"
              version="1.49"
              glib:type-name="SnapdGetConnectionsFlags"
              glib:get-type="snapd_get_connections_flags_get_type"
              c:type="SnapdGetConnectionsFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="94">Flag to change how connections are returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_CONNECTIONS_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="96">No flags, default behaviour.</doc>
      </member>
      <member name="select_all"
              value="1"
              c:identifier="SNAPD_GET_CONNECTIONS_FLAGS_SELECT_ALL"
              glib:nick="select-all">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="97">Select all connections, not just connected ones.</doc>
      </member>
    </bitfield>
    <bitfield name="GetInterfacesFlags"
              version="1.48"
              glib:type-name="SnapdGetInterfacesFlags"
              glib:get-type="snapd_get_interfaces_flags_get_type"
              c:type="SnapdGetInterfacesFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="174">Flags to control how interface information is returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_INTERFACES_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="176">No flags, default behaviour.</doc>
      </member>
      <member name="include_docs"
              value="1"
              c:identifier="SNAPD_GET_INTERFACES_FLAGS_INCLUDE_DOCS"
              glib:nick="include-docs">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="177">Include interface documentation.</doc>
      </member>
      <member name="include_plugs"
              value="2"
              c:identifier="SNAPD_GET_INTERFACES_FLAGS_INCLUDE_PLUGS"
              glib:nick="include-plugs">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="178">Include associated plugs.</doc>
      </member>
      <member name="include_slots"
              value="4"
              c:identifier="SNAPD_GET_INTERFACES_FLAGS_INCLUDE_SLOTS"
              glib:nick="include-slots">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="179">Include associated slots.</doc>
      </member>
      <member name="only_connected"
              value="8"
              c:identifier="SNAPD_GET_INTERFACES_FLAGS_ONLY_CONNECTED"
              glib:nick="only-connected">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="180">Only return connected interfaces.</doc>
      </member>
    </bitfield>
    <bitfield name="GetSnapsFlags"
              version="1.42"
              glib:type-name="SnapdGetSnapsFlags"
              glib:get-type="snapd_get_snaps_flags_get_type"
              c:type="SnapdGetSnapsFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="64">Flag to change which snaps are returned.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_GET_SNAPS_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="66">No flags, default behaviour.</doc>
      </member>
      <member name="include_inactive"
              value="1"
              c:identifier="SNAPD_GET_SNAPS_FLAGS_INCLUDE_INACTIVE"
              glib:nick="include-inactive">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="67">Return snaps that are installed but not active.</doc>
      </member>
    </bitfield>
    <class name="Icon"
           c:symbol-prefix="icon"
           c:type="SnapdIcon"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdIcon"
           glib:get-type="snapd_icon_get_type"
           glib:type-struct="IconClass">
      <doc xml:space="preserve"
           filename="snapd-icon.c"
           line="25">#SnapdIcon contains icon data.</doc>
      <source-position filename="snapd-icon.h" line="23"/>
      <method name="get_data" c:identifier="snapd_icon_get_data" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-icon.c"
             line="67">Get the binary data for this icon.</doc>
        <source-position filename="snapd-icon.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-icon.c"
               line="73">the binary data.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-icon.c"
                 line="69">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="snapd_icon_get_mime_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-icon.c"
             line="50">Get the mime-type for this icon, e.g. "image/png".</doc>
        <source-position filename="snapd-icon.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-icon.c"
               line="56">a MIME type.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-icon.c"
                 line="52">a #SnapdIcon.</doc>
            <type name="Icon" c:type="SnapdIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="data"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Bytes"/>
      </property>
      <property name="mime-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="IconClass"
            c:type="SnapdIconClass"
            glib:is-gtype-struct-for="Icon">
      <source-position filename="snapd-icon.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="InstallFlags"
              version="1.12"
              glib:type-name="SnapdInstallFlags"
              glib:get-type="snapd_install_flags_get_type"
              c:type="SnapdInstallFlags">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="134">Flags to control install options.</doc>
      <member name="none"
              value="0"
              c:identifier="SNAPD_INSTALL_FLAGS_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="136">No flags, default behaviour.</doc>
      </member>
      <member name="classic"
              value="1"
              c:identifier="SNAPD_INSTALL_FLAGS_CLASSIC"
              glib:nick="classic">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="137">Put snap in classic mode and disable security confinement.</doc>
      </member>
      <member name="dangerous"
              value="2"
              c:identifier="SNAPD_INSTALL_FLAGS_DANGEROUS"
              glib:nick="dangerous">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="138">Install the given snap file even if there are
   no pre-acknowledged signatures for it, meaning it was not verified and
   could be dangerous (implied by #SNAPD_INSTALL_FLAGS_DEVMODE).</doc>
      </member>
      <member name="devmode"
              value="4"
              c:identifier="SNAPD_INSTALL_FLAGS_DEVMODE"
              glib:nick="devmode">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="141">Put snap in development mode and disable security confinement.</doc>
      </member>
      <member name="jailmode"
              value="8"
              c:identifier="SNAPD_INSTALL_FLAGS_JAILMODE"
              glib:nick="jailmode">
        <doc xml:space="preserve"
             filename="snapd-client.h"
             line="142">Put snap in enforced confinement mode.</doc>
      </member>
    </bitfield>
    <class name="Interface"
           c:symbol-prefix="interface"
           c:type="SnapdInterface"
           version="1.48"
           parent="GObject.Object"
           glib:type-name="SnapdInterface"
           glib:get-type="snapd_interface_get_type"
           glib:type-struct="InterfaceClass">
      <doc xml:space="preserve"
           filename="snapd-interface.c"
           line="27">#SnapdInterface contains information about a Snap interface.</doc>
      <source-position filename="snapd-interface.h" line="23"/>
      <method name="get_doc_url"
              c:identifier="snapd_interface_get_doc_url"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-interface.c"
             line="91">Get the documentation URL of this interface.</doc>
        <source-position filename="snapd-interface.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-interface.c"
               line="97">a URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-interface.c"
                 line="93">a #SnapdInterface</doc>
            <type name="Interface" c:type="SnapdInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="snapd_interface_get_name"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-interface.c"
             line="57">Get the name of this interface.</doc>
        <source-position filename="snapd-interface.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-interface.c"
               line="63">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-interface.c"
                 line="59">a #SnapdInterface</doc>
            <type name="Interface" c:type="SnapdInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugs"
              c:identifier="snapd_interface_get_plugs"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-interface.c"
             line="108">Get the plugs matching this interface type.</doc>
        <source-position filename="snapd-interface.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-interface.c"
               line="114">an array of #SnapdPlug.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Plug"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-interface.c"
                 line="110">a #SnapdInterface</doc>
            <type name="Interface" c:type="SnapdInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slots"
              c:identifier="snapd_interface_get_slots"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-interface.c"
             line="125">Get the slots matching this interface type.</doc>
        <source-position filename="snapd-interface.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-interface.c"
               line="131">an array of #SnapdSlot.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Slot"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-interface.c"
                 line="127">a #SnapdInterface</doc>
            <type name="Interface" c:type="SnapdInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_interface_get_summary"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-interface.c"
             line="74">Get the summary of this interface.</doc>
        <source-position filename="snapd-interface.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-interface.c"
               line="80">a summary.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-interface.c"
                 line="76">a #SnapdInterface</doc>
            <type name="Interface" c:type="SnapdInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="doc-url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plugs"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="slots"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="InterfaceClass"
            c:type="SnapdInterfaceClass"
            glib:is-gtype-struct-for="Interface">
      <source-position filename="snapd-interface.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Maintenance"
           c:symbol-prefix="maintenance"
           c:type="SnapdMaintenance"
           version="1.45"
           parent="GObject.Object"
           glib:type-name="SnapdMaintenance"
           glib:get-type="snapd_maintenance_get_type"
           glib:type-struct="MaintenanceClass">
      <doc xml:space="preserve"
           filename="snapd-maintenance.c"
           line="26">#SnapdMaintenance contains maintenance information.</doc>
      <source-position filename="snapd-maintenance.h" line="23"/>
      <method name="get_kind"
              c:identifier="snapd_maintenance_get_kind"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-maintenance.c"
             line="51">Get the kind of maintenance kind, e.g. %SNAPD_MAINTENANCE_KIND_DAEMON_RESTART.</doc>
        <source-position filename="snapd-maintenance.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-maintenance.c"
               line="57">a #SnapdMaintenanceKind.</doc>
          <type name="MaintenanceKind" c:type="SnapdMaintenanceKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="maintenance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-maintenance.c"
                 line="53">a #SnapdMaintenance.</doc>
            <type name="Maintenance" c:type="SnapdMaintenance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="snapd_maintenance_get_message"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-maintenance.c"
             line="68">Get the user readable message associate with the maintenance state.</doc>
        <source-position filename="snapd-maintenance.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-maintenance.c"
               line="74">message text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="maintenance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-maintenance.c"
                 line="70">a #SnapdMaintenance.</doc>
            <type name="Maintenance" c:type="SnapdMaintenance*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MaintenanceKind"/>
      </property>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="MaintenanceClass"
            c:type="SnapdMaintenanceClass"
            glib:is-gtype-struct-for="Maintenance">
      <source-position filename="snapd-maintenance.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MaintenanceKind"
                 version="1.45"
                 glib:type-name="SnapdMaintenanceKind"
                 glib:get-type="snapd_maintenance_kind_get_type"
                 c:type="SnapdMaintenanceKind">
      <doc xml:space="preserve"
           filename="snapd-maintenance.h"
           line="25">Type of snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_MAINTENANCE_KIND_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="27">an unknown maintenance kind is occurring.</doc>
      </member>
      <member name="daemon_restart"
              value="1"
              c:identifier="SNAPD_MAINTENANCE_KIND_DAEMON_RESTART"
              glib:nick="daemon-restart">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="28">the daemon is restarting.</doc>
      </member>
      <member name="system_restart"
              value="2"
              c:identifier="SNAPD_MAINTENANCE_KIND_SYSTEM_RESTART"
              glib:nick="system-restart">
        <doc xml:space="preserve"
             filename="snapd-maintenance.h"
             line="29">the system is restarting.</doc>
      </member>
    </enumeration>
    <class name="MarkdownNode"
           c:symbol-prefix="markdown_node"
           c:type="SnapdMarkdownNode"
           version="1.48"
           parent="GObject.Object"
           glib:type-name="SnapdMarkdownNode"
           glib:get-type="snapd_markdown_node_get_type"
           glib:type-struct="MarkdownNodeClass">
      <doc xml:space="preserve"
           filename="snapd-markdown-node.c"
           line="25">#SnapdMarkdownNode is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <source-position filename="snapd-markdown-node.h" line="23"/>
      <method name="get_children"
              c:identifier="snapd_markdown_node_get_children"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.c"
             line="180">Get the child nodes of this node.</doc>
        <source-position filename="snapd-markdown-node.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-markdown-node.c"
               line="186">child nodes or %NULL if none.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="MarkdownNode"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-node.c"
                 line="182">a #SnapdMarkdownNode.</doc>
            <type name="MarkdownNode" c:type="SnapdMarkdownNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_node_type"
              c:identifier="snapd_markdown_node_get_node_type"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.c"
             line="145">Get the type of node this is.</doc>
        <source-position filename="snapd-markdown-node.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-markdown-node.c"
               line="151">a #SnapdMarkdownNodeType</doc>
          <type name="MarkdownNodeType" c:type="SnapdMarkdownNodeType"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-node.c"
                 line="147">a #SnapdMarkdownNode.</doc>
            <type name="MarkdownNode" c:type="SnapdMarkdownNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="snapd_markdown_node_get_text"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.c"
             line="162">Gets the text associated with this node. This is only present for nodes of type
%SNAPD_MARKDOWN_NODE_TYPE_TEXT.</doc>
        <source-position filename="snapd-markdown-node.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-markdown-node.c"
               line="169">a UTF-8 string or %NULL if none in this node.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-node.c"
                 line="164">a #SnapdMarkdownNode.</doc>
            <type name="MarkdownNode" c:type="SnapdMarkdownNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="children"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="node-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MarkdownNodeType"/>
      </property>
      <property name="text"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="MarkdownNodeClass"
            c:type="SnapdMarkdownNodeClass"
            glib:is-gtype-struct-for="MarkdownNode">
      <source-position filename="snapd-markdown-node.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MarkdownNodeType"
                 version="1.48"
                 glib:type-name="SnapdMarkdownNodeType"
                 glib:get-type="snapd_markdown_node_type_get_type"
                 c:type="SnapdMarkdownNodeType">
      <doc xml:space="preserve"
           filename="snapd-markdown-node.h"
           line="25">Type of markdown node.</doc>
      <member name="text"
              value="0"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_TEXT"
              glib:nick="text">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="27">a piece of text.</doc>
      </member>
      <member name="paragraph"
              value="1"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_PARAGRAPH"
              glib:nick="paragraph">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="28">a paragraph.</doc>
      </member>
      <member name="unordered_list"
              value="2"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_UNORDERED_LIST"
              glib:nick="unordered-list">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="29">an unordered list.</doc>
      </member>
      <member name="list_item"
              value="3"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_LIST_ITEM"
              glib:nick="list-item">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="30">a list item.</doc>
      </member>
      <member name="code_block"
              value="4"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_CODE_BLOCK"
              glib:nick="code-block">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="31">a code block.</doc>
      </member>
      <member name="code_span"
              value="5"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_CODE_SPAN"
              glib:nick="code-span">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="32">a code span.</doc>
      </member>
      <member name="emphasis"
              value="6"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_EMPHASIS"
              glib:nick="emphasis">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="33">emphasised text.</doc>
      </member>
      <member name="strong_emphasis"
              value="7"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_STRONG_EMPHASIS"
              glib:nick="strong-emphasis">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="34">strongly emphasised text.</doc>
      </member>
      <member name="url"
              value="8"
              c:identifier="SNAPD_MARKDOWN_NODE_TYPE_URL"
              glib:nick="url">
        <doc xml:space="preserve"
             filename="snapd-markdown-node.h"
             line="35">a URL.</doc>
      </member>
    </enumeration>
    <class name="MarkdownParser"
           c:symbol-prefix="markdown_parser"
           c:type="SnapdMarkdownParser"
           version="1.48"
           parent="GObject.Object"
           glib:type-name="SnapdMarkdownParser"
           glib:get-type="snapd_markdown_parser_get_type"
           glib:type-struct="MarkdownParserClass">
      <doc xml:space="preserve"
           filename="snapd-markdown-parser.c"
           line="38">#SnapdMarkdownParser is an opaque data structure and can only be accessed
using the provided functions.</doc>
      <source-position filename="snapd-markdown-parser.h" line="36"/>
      <constructor name="new"
                   c:identifier="snapd_markdown_parser_new"
                   version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-parser.c"
             line="821">Create an object to parse markdown text.</doc>
        <source-position filename="snapd-markdown-parser.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-markdown-parser.c"
               line="827">a new #SnapdMarkdownParser</doc>
          <type name="MarkdownParser" c:type="SnapdMarkdownParser*"/>
        </return-value>
        <parameters>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="823">version supported by the client.</doc>
            <type name="MarkdownVersion" c:type="SnapdMarkdownVersion"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_preserve_whitespace"
              c:identifier="snapd_markdown_parser_get_preserve_whitespace"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-parser.c"
             line="856">Check if paragraph whitespace will be kept intact.</doc>
        <source-position filename="snapd-markdown-parser.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-markdown-parser.c"
               line="862">%TRUE if paragraph whitespace is preserved.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="858">a #SnapdMarkdownParser.</doc>
            <type name="MarkdownParser" c:type="SnapdMarkdownParser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse"
              c:identifier="snapd_markdown_parser_parse"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-parser.c"
             line="873">Convert text in snapd markdown format to markup.</doc>
        <source-position filename="snapd-markdown-parser.h" line="45"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="snapd-markdown-parser.c"
               line="880">Text split into blocks.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="MarkdownNode"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="875">a #SnapdMarkdownParser.</doc>
            <type name="MarkdownParser" c:type="SnapdMarkdownParser*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="876">text to parse.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preserve_whitespace"
              c:identifier="snapd_markdown_parser_set_preserve_whitespace"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-markdown-parser.c"
             line="837">Consecutive paragraph whitespace (space, tabs, newlines) is automatically
combined into a single space character. This renders the paragraphs in the
form that HTML uses. If you need the original whitespace that the markdown
author wrote then set this to %FALSE.</doc>
        <source-position filename="snapd-markdown-parser.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parser" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="839">a #SnapdMarkdownParser.</doc>
            <type name="MarkdownParser" c:type="SnapdMarkdownParser*"/>
          </instance-parameter>
          <parameter name="preserve_whitespace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-markdown-parser.c"
                 line="840">%TRUE if the parse should keep paragraph whitespace intact.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="MarkdownParserClass"
            c:type="SnapdMarkdownParserClass"
            glib:is-gtype-struct-for="MarkdownParser">
      <source-position filename="snapd-markdown-parser.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="MarkdownVersion"
                 version="1.48"
                 glib:type-name="SnapdMarkdownVersion"
                 glib:get-type="snapd_markdown_version_get_type"
                 c:type="SnapdMarkdownVersion">
      <doc xml:space="preserve"
           filename="snapd-markdown-parser.h"
           line="23">Version of markdown to parse. Picking a version will ensure only nodes of the expected type are decoded.</doc>
      <member name="0"
              value="0"
              c:identifier="SNAPD_MARKDOWN_VERSION_0"
              glib:nick="0">
        <doc xml:space="preserve"
             filename="snapd-markdown-parser.h"
             line="25">the initial version of Snap markdown.</doc>
      </member>
    </enumeration>
    <class name="Media"
           c:symbol-prefix="media"
           c:type="SnapdMedia"
           version="1.45"
           parent="GObject.Object"
           glib:type-name="SnapdMedia"
           glib:get-type="snapd_media_get_type"
           glib:type-struct="MediaClass">
      <doc xml:space="preserve"
           filename="snapd-media.c"
           line="23">#SnapdMedia contains media information.</doc>
      <source-position filename="snapd-media.h" line="23"/>
      <method name="get_height"
              c:identifier="snapd_media_get_height"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="109">Get the height of the media in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-media.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="115">a height</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="111">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_type"
              c:identifier="snapd_media_get_media_type"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="58">Get the type for this media, e.g. "icon" or "screenshot".</doc>
        <source-position filename="snapd-media.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="64">a type name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="60">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url" c:identifier="snapd_media_get_url" version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="75">Get the URL for this media, e.g. "http://example.com/media.png"</doc>
        <source-position filename="snapd-media.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="81">a URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="77">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="snapd_media_get_width"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-media.c"
             line="92">Get the width of the media in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-media.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-media.c"
               line="98">a width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-media.c"
                 line="94">a #SnapdMedia.</doc>
            <type name="Media" c:type="SnapdMedia*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="MediaClass"
            c:type="SnapdMediaClass"
            glib:is-gtype-struct-for="Media">
      <source-position filename="snapd-media.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Plug"
           c:symbol-prefix="plug"
           c:type="SnapdPlug"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPlug"
           glib:get-type="snapd_plug_get_type"
           glib:type-struct="PlugClass">
      <doc xml:space="preserve"
           filename="snapd-plug.c"
           line="30">#SnapdPlug contains information about a Snap plug.</doc>
      <source-position filename="snapd-plug.h" line="23"/>
      <method name="get_attribute"
              c:identifier="snapd_plug_get_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="165">Get an attribute for this interface.</doc>
        <source-position filename="snapd-plug.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="172">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="167">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="168">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_plug_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="115">Get the names of the attributes this plug has.</doc>
        <source-position filename="snapd-plug.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="122">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="117">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="118">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connected_slots"
              c:identifier="snapd_plug_get_connected_slots"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="233">Get the slots connected to this plug.</doc>
        <source-position filename="snapd-plug.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="239">an array of #SnapdSlotRef.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="SlotRef"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="235">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_plug_get_connections"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="200">Get the connections being made with this plug.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_plug_get_connected_slots()</doc-deprecated>
        <source-position filename="snapd-plug.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="206">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="202">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_plug_get_interface"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="98">Get the name of the interface this plug provides.</doc>
        <source-position filename="snapd-plug.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="104">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="100">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_plug_get_label"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="183">Get a human readable label for this plug.</doc>
        <source-position filename="snapd-plug.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="189">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="185">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_plug_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="64">Get the name of this plug.</doc>
        <source-position filename="snapd-plug.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="70">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="66">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_plug_get_snap" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="81">Get the snap this plug is on.</doc>
        <source-position filename="snapd-plug.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="87">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="83">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_plug_has_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-plug.c"
             line="147">Check if this plug has an attribute.</doc>
        <source-position filename="snapd-plug.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug.c"
               line="154">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="149">a #SnapdPlug.</doc>
            <type name="Plug" c:type="SnapdPlug*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug.c"
                 line="150">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PlugClass"
            c:type="SnapdPlugClass"
            glib:is-gtype-struct-for="Plug">
      <source-position filename="snapd-plug.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PlugRef"
           c:symbol-prefix="plug_ref"
           c:type="SnapdPlugRef"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPlugRef"
           glib:get-type="snapd_plug_ref_get_type"
           glib:type-struct="PlugRefClass">
      <doc xml:space="preserve"
           filename="snapd-plug-ref.c"
           line="24">#SnapdPlugRef contains the state of Snap a interface plug_ref.</doc>
      <source-position filename="snapd-plug-ref.h" line="23"/>
      <method name="get_plug"
              c:identifier="snapd_plug_ref_get_plug"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-plug-ref.c"
             line="49">Get the name of the plug.</doc>
        <source-position filename="snapd-plug-ref.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug-ref.c"
               line="55">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug-ref.c"
                 line="51">a #SnapdPlugRef.</doc>
            <type name="PlugRef" c:type="SnapdPlugRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_plug_ref_get_snap"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-plug-ref.c"
             line="66">Get the snap this plug is on.</doc>
        <source-position filename="snapd-plug-ref.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-plug-ref.c"
               line="72">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="plug_ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-plug-ref.c"
                 line="68">a #SnapdPlugRef.</doc>
            <type name="PlugRef" c:type="SnapdPlugRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="plug"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PlugRefClass"
            c:type="SnapdPlugRefClass"
            glib:is-gtype-struct-for="PlugRef">
      <source-position filename="snapd-plug-ref.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Price"
           c:symbol-prefix="price"
           c:type="SnapdPrice"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdPrice"
           glib:get-type="snapd_price_get_type"
           glib:type-struct="PriceClass">
      <doc xml:space="preserve"
           filename="snapd-price.c"
           line="24">#SnapdPrice contains pricing information.</doc>
      <source-position filename="snapd-price.h" line="23"/>
      <method name="get_amount"
              c:identifier="snapd_price_get_amount"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-price.c"
             line="49">Get the currency amount for this price, e.g. 0.99.</doc>
        <source-position filename="snapd-price.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-price.c"
               line="55">a currency amount.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-price.c"
                 line="51">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_currency"
              c:identifier="snapd_price_get_currency"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-price.c"
             line="66">Get the currency this price is in, e.g. "NZD".</doc>
        <source-position filename="snapd-price.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-price.c"
               line="72">an ISO 4217 currency code.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="price" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-price.c"
                 line="68">a #SnapdPrice.</doc>
            <type name="Price" c:type="SnapdPrice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="amount"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="currency"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PriceClass"
            c:type="SnapdPriceClass"
            glib:is-gtype-struct-for="Price">
      <source-position filename="snapd-price.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="ProgressCallback"
              c:type="SnapdProgressCallback"
              version="1.0">
      <doc xml:space="preserve"
           filename="snapd-client.h"
           line="195">Signature for callback function used in
snapd_client_connect_interface_sync(),
snapd_client_disconnect_interface_async(),
snapd_client_install2_sync(),
snapd_client_refresh_sync(),
snapd_client_remove_sync(),
snapd_client_enable_sync() and
snapd_client_disable_sync().</doc>
      <source-position filename="snapd-client.h" line="213"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="197">a #SnapdClient</doc>
          <type name="Client" c:type="SnapdClient*"/>
        </parameter>
        <parameter name="change" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="198">a #SnapdChange describing the change in progress</doc>
          <type name="Change" c:type="SnapdChange*"/>
        </parameter>
        <parameter name="deprecated"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="199">A deprecated field that is no longer used.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="snapd-client.h"
               line="200">user data passed to the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="PublisherValidation"
                 version="1.42"
                 glib:type-name="SnapdPublisherValidation"
                 glib:get-type="snapd_publisher_validation_get_type"
                 c:type="SnapdPublisherValidation">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="69">State of validation for a publisher.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="71">the validation state of the publisher is unknown.</doc>
      </member>
      <member name="unproven"
              value="1"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_UNPROVEN"
              glib:nick="unproven">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="72">the publisher has not proven their identity.</doc>
      </member>
      <member name="verified"
              value="2"
              c:identifier="SNAPD_PUBLISHER_VALIDATION_VERIFIED"
              glib:nick="verified">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="73">the publisher has had their identity verified.</doc>
      </member>
    </enumeration>
    <class name="Screenshot"
           c:symbol-prefix="screenshot"
           c:type="SnapdScreenshot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdScreenshot"
           glib:get-type="snapd_screenshot_get_type"
           glib:type-struct="ScreenshotClass">
      <doc xml:space="preserve"
           filename="snapd-screenshot.c"
           line="23">#SnapdScreenshot contains screenshot information.</doc>
      <source-position filename="snapd-screenshot.h" line="23"/>
      <method name="get_height"
              c:identifier="snapd_screenshot_get_height"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="90">Get the height of the screenshot in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-screenshot.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="96">a height</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="92">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url"
              c:identifier="snapd_screenshot_get_url"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="56">Get the URL for this screenshot, e.g. "http://example.com/screenshot.png"</doc>
        <source-position filename="snapd-screenshot.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="62">a URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="58">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="snapd_screenshot_get_width"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-screenshot.c"
             line="73">Get the width of the screenshot in pixels or 0 if unknown.</doc>
        <source-position filename="snapd-screenshot.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-screenshot.c"
               line="79">a width</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="screenshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-screenshot.c"
                 line="75">a #SnapdScreenshot.</doc>
            <type name="Screenshot" c:type="SnapdScreenshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="height"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="url"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="ScreenshotClass"
            c:type="SnapdScreenshotClass"
            glib:is-gtype-struct-for="Screenshot">
      <source-position filename="snapd-screenshot.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Slot"
           c:symbol-prefix="slot"
           c:type="SnapdSlot"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSlot"
           glib:get-type="snapd_slot_get_type"
           glib:type-struct="SlotClass">
      <doc xml:space="preserve"
           filename="snapd-slot.c"
           line="30">#SnapdSlot contains information about a Snap slot.</doc>
      <source-position filename="snapd-slot.h" line="23"/>
      <method name="get_attribute"
              c:identifier="snapd_slot_get_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="165">Get an attribute for this interface.</doc>
        <source-position filename="snapd-slot.h" line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="172">an attribute value or %NULL if not set.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="167">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="168">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_attribute_names"
              c:identifier="snapd_slot_get_attribute_names"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="115">Get the names of the attributes this slot has.</doc>
        <source-position filename="snapd-slot.h" line="31"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="122">a string array of attribute names. Free with g_strfreev().</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="117">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="118">location to write number of attributes or %NULL if not required.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connected_plugs"
              c:identifier="snapd_slot_get_connected_plugs"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="233">Get the plugs connected to this slot.</doc>
        <source-position filename="snapd-slot.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="239">an array of #SnapdPlugRef.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="PlugRef"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="235">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="snapd_slot_get_connections"
              version="1.0"
              deprecated="1"
              deprecated-version="1.48">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="200">Get the connections being made with this slot.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_slot_get_connected_plugs()</doc-deprecated>
        <source-position filename="snapd-slot.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="206">an array of #SnapdConnection.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Connection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="202">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="snapd_slot_get_interface"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="98">Get the name of the interface this slot accepts.</doc>
        <source-position filename="snapd-slot.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="104">an interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="100">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="snapd_slot_get_label"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="183">Get a human readable label for this slot.</doc>
        <source-position filename="snapd-slot.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="189">a label.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="185">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_slot_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="64">Get the name of this slot.</doc>
        <source-position filename="snapd-slot.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="70">a name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="66">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap" c:identifier="snapd_slot_get_snap" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="81">Get the snap this slot is on.</doc>
        <source-position filename="snapd-slot.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="87">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="83">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_attribute"
              c:identifier="snapd_slot_has_attribute"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-slot.c"
             line="147">Check if this slot has an attribute.</doc>
        <source-position filename="snapd-slot.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot.c"
               line="154">%TRUE if this attribute exists.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="149">a #SnapdSlot.</doc>
            <type name="Slot" c:type="SnapdSlot*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot.c"
                 line="150">an attribute name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="attributes"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connections"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="interface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SlotClass"
            c:type="SnapdSlotClass"
            glib:is-gtype-struct-for="Slot">
      <source-position filename="snapd-slot.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SlotRef"
           c:symbol-prefix="slot_ref"
           c:type="SnapdSlotRef"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSlotRef"
           glib:get-type="snapd_slot_ref_get_type"
           glib:type-struct="SlotRefClass">
      <doc xml:space="preserve"
           filename="snapd-slot-ref.c"
           line="24">#SnapdSlotRef contains the state of Snap a interface slot_ref.</doc>
      <source-position filename="snapd-slot-ref.h" line="23"/>
      <method name="get_slot"
              c:identifier="snapd_slot_ref_get_slot"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-slot-ref.c"
             line="49">Get the name of the slot.</doc>
        <source-position filename="snapd-slot-ref.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot-ref.c"
               line="55">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot_ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot-ref.c"
                 line="51">a #SnapdSlotRef.</doc>
            <type name="SlotRef" c:type="SnapdSlotRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap"
              c:identifier="snapd_slot_ref_get_snap"
              version="1.48">
        <doc xml:space="preserve"
             filename="snapd-slot-ref.c"
             line="66">Get the snap this slot is on.</doc>
        <source-position filename="snapd-slot-ref.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-slot-ref.c"
               line="72">a snap name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="slot_ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-slot-ref.c"
                 line="68">a #SnapdSlotRef.</doc>
            <type name="SlotRef" c:type="SnapdSlotRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="slot"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="snap"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SlotRefClass"
            c:type="SnapdSlotRefClass"
            glib:is-gtype-struct-for="SlotRef">
      <source-position filename="snapd-slot-ref.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Snap"
           c:symbol-prefix="snap"
           c:type="SnapdSnap"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSnap"
           glib:get-type="snapd_snap_get_type"
           glib:type-struct="SnapClass">
      <doc xml:space="preserve"
           filename="snapd-snap.c"
           line="25">#SnapdSnap contains Snap metadata.</doc>
      <source-position filename="snapd-snap.h" line="25"/>
      <method name="get_apps" c:identifier="snapd_snap_get_apps" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="119">Get the apps this snap provides.</doc>
        <source-position filename="snapd-snap.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="125">an array of #SnapdApp.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="App"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="121">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base"
              c:identifier="snapd_snap_get_base"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="136">Get the base snap this snap uses.</doc>
        <source-position filename="snapd-snap.h" line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="142">a snap name or %NULL if not set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="138">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_broken"
              c:identifier="snapd_snap_get_broken"
              version="1.25">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="153">Get the reason this snap is broken.</doc>
        <source-position filename="snapd-snap.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="159">an error string or %NULL if not broken.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="155">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel"
              c:identifier="snapd_snap_get_channel"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="170">Get the channel this snap is from, e.g. "stable".</doc>
        <source-position filename="snapd-snap.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="176">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="172">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channels"
              c:identifier="snapd_snap_get_channels"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="187">Gets the available channels for this snap.</doc>
        <source-position filename="snapd-snap.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="193">an array of #SnapdChannel.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Channel"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="189">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_common_ids"
              c:identifier="snapd_snap_get_common_ids"
              version="1.41">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="265">Get common IDs associated with this snap.</doc>
        <source-position filename="snapd-snap.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="271">an array of common ids.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="267">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_snap_get_confinement"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="282">Get the confinement this snap is using, e.g. %SNAPD_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-snap.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="288">a #SnapdConfinement.</doc>
          <type name="Confinement" c:type="SnapdConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="284">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact"
              c:identifier="snapd_snap_get_contact"
              version="1.13">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="299">Get the means of contacting the snap developer, e.g. "mailto:developer@example.com".</doc>
        <source-position filename="snapd-snap.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="305">a contact URL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="301">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="snapd_snap_get_description"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="316">Get a multi-line description of this snap. The description is formatted using
a subset of Markdown. To parse this use a #SnapdMarkdownParser.</doc>
        <source-position filename="snapd-snap.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="323">description text.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="318">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_developer"
              c:identifier="snapd_snap_get_developer"
              version="1.0"
              deprecated="1"
              deprecated-version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="334">Get the developer who created this snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_snap_get_publisher_username()</doc-deprecated>
        <source-position filename="snapd-snap.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="340">a developer name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="336">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devmode"
              c:identifier="snapd_snap_get_devmode"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="352">Get if this snap is running in developer mode.</doc>
        <source-position filename="snapd-snap.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="358">%TRUE if this snap is running in devmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="354">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_size"
              c:identifier="snapd_snap_get_download_size"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="369">Get the download size of this snap or 0 if unknown.</doc>
        <source-position filename="snapd-snap.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="375">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="371">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="snapd_snap_get_icon" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="386">Get the icon for this Snap, either a URL or an absolute path to retrieve it
from snapd directly.</doc>
        <source-position filename="snapd-snap.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="393">a URL or path.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="388">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="snapd_snap_get_id" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="404">Gets the unique ID for this snap.</doc>
        <source-position filename="snapd-snap.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="410">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="406">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_install_date"
              c:identifier="snapd_snap_get_install_date"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="421">Get the date this snap was installed or %NULL if unknown.</doc>
        <source-position filename="snapd-snap.h" line="117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="427">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="423">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_installed_size"
              c:identifier="snapd_snap_get_installed_size"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="438">Get the installed size of this snap or 0 if unknown.</doc>
        <source-position filename="snapd-snap.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="444">a byte count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="440">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_jailmode"
              c:identifier="snapd_snap_get_jailmode"
              version="1.8">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="455">Get if this snap is running in enforced confinement (jail) mode.</doc>
        <source-position filename="snapd-snap.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="461">%TRUE if this snap is running in jailmode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="457">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license"
              c:identifier="snapd_snap_get_license"
              version="1.19">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="472">Gets the SPDX license expression for this snap, e.g. "GPL-3.0+".</doc>
        <source-position filename="snapd-snap.h" line="123"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="478">an SPDX license expression or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="474">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="snapd_snap_get_media"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="489">Get media that is associated with this snap.</doc>
        <source-position filename="snapd-snap.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="495">an array of #SnapdMedia.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Media"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="491">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mounted_from"
              c:identifier="snapd_snap_get_mounted_from"
              version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="506">Gets the path this snap is mounted from, which is a .snap file for installed
snaps and a directory for snaps in try mode.</doc>
        <source-position filename="snapd-snap.h" line="127"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="513">a file path or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="508">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="snapd_snap_get_name" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="541">Get the name of this snap. This is used to reference this snap, e.g. for
installing / removing.</doc>
        <source-position filename="snapd-snap.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="548">a name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="543">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prices"
              c:identifier="snapd_snap_get_prices"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="559">Get the prices that this snap can be purchased at.</doc>
        <source-position filename="snapd-snap.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="565">an array of #SnapdPrice.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Price"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="561">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_private"
              c:identifier="snapd_snap_get_private"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="576">Get if this snap is only available to the developer.</doc>
        <source-position filename="snapd-snap.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="582">%TRUE if this is a private snap.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="578">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_display_name"
              c:identifier="snapd_snap_get_publisher_display_name"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="593">Get the display name of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="599">a publisher display name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="595">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_id"
              c:identifier="snapd_snap_get_publisher_id"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="610">Get the ID of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="616">a publisher ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="612">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_username"
              c:identifier="snapd_snap_get_publisher_username"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="627">Get the username of the publisher who created this snap.</doc>
        <source-position filename="snapd-snap.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="633">a publisher username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="629">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publisher_validation"
              c:identifier="snapd_snap_get_publisher_validation"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="644">Get the validation for the snap publisher, e.g. %SNAPD_PUBLISHER_VALIDATION_VERIFIED</doc>
        <source-position filename="snapd-snap.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="650">a #SnapdPublisherValidation.</doc>
          <type name="PublisherValidation" c:type="SnapdPublisherValidation"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="646">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="snapd_snap_get_revision"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="661">Get the revision for this snap. The format of the string is undefined.
See also snapd_snap_get_version().</doc>
        <source-position filename="snapd-snap.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="668">a revision string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="663">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screenshots"
              c:identifier="snapd_snap_get_screenshots"
              version="1.0"
              deprecated="1"
              deprecated-version="1.45">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="679">Get the screenshots that are available for this snap.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_snap_get_media()</doc-deprecated>
        <source-position filename="snapd-snap.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="685">an array of #SnapdScreenshot.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Screenshot"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="681">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snap_type"
              c:identifier="snapd_snap_get_snap_type"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="697">Get the type of snap, e.g. %SNAPD_SNAP_TYPE_APP</doc>
        <source-position filename="snapd-snap.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="703">a #SnapdSnapType.</doc>
          <type name="SnapType" c:type="SnapdSnapType"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="699">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_snap_get_status"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="714">Get the current status of this snap, e.g. SNAPD_SNAP_STATUS_INSTALLED.</doc>
        <source-position filename="snapd-snap.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="720">a #SnapdSnapStatus.</doc>
          <type name="SnapStatus" c:type="SnapdSnapStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="716">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_snap_get_summary"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="731">Get a single line summary for this snap, e.g. "Best app ever!".</doc>
        <source-position filename="snapd-snap.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="737">a summary string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="733">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="snapd_snap_get_title"
              version="1.14">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="524">Get the title for this snap. If not available use the snap name instead.</doc>
        <source-position filename="snapd-snap.h" line="153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="530">a title or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="526">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracking_channel"
              c:identifier="snapd_snap_get_tracking_channel"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="748">Get the channel that updates will be installed from, e.g. "stable".</doc>
        <source-position filename="snapd-snap.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="754">a channel name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="750">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tracks"
              c:identifier="snapd_snap_get_tracks"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="765">Get the tracks that are available.</doc>
        <source-position filename="snapd-snap.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="771">an ordered array of track names.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="767">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trymode"
              c:identifier="snapd_snap_get_trymode"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="782">Get if this snap is running in try mode (installed locally and able to be
directly modified).</doc>
        <source-position filename="snapd-snap.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="789">%TRUE if using trymode.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="784">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_snap_get_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="800">Get the version for this snap. The format of the string is undefined.
See also snapd_snap_get_revision().</doc>
        <source-position filename="snapd-snap.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="807">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="802">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match_channel"
              c:identifier="snapd_snap_match_channel"
              version="1.22">
        <doc xml:space="preserve"
             filename="snapd-snap.c"
             line="219">Finds the available channel that best matches the given name.
If none matches %NULL is returned.</doc>
        <source-position filename="snapd-snap.h" line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-snap.c"
               line="227">an #SnapdChannel or %NULL.</doc>
          <type name="Channel" c:type="SnapdChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="221">a #SnapdSnap.</doc>
            <type name="Snap" c:type="SnapdSnap*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-snap.c"
                 line="222">a channel name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="apps"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="base"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="broken"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="channels"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="common-ids"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Confinement"/>
      </property>
      <property name="contact"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="developer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="devmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="download-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="icon"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="install-date"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="installed-size"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="jailmode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="license"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="mounted-from"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="prices"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="private"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="publisher-display-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-username"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publisher-validation"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="PublisherValidation"/>
      </property>
      <property name="revision"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="screenshots"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="snap-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapType"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SnapStatus"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tracking-channel"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tracks"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="trymode"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SnapClass"
            c:type="SnapdSnapClass"
            glib:is-gtype-struct-for="Snap">
      <source-position filename="snapd-snap.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="SnapStatus"
                 version="1.0"
                 glib:type-name="SnapdSnapStatus"
                 glib:get-type="snapd_snap_status_get_type"
                 c:type="SnapdSnapStatus">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="48">The current state of a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_STATUS_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="50">the snap state is unknown.</doc>
      </member>
      <member name="available"
              value="1"
              c:identifier="SNAPD_SNAP_STATUS_AVAILABLE"
              glib:nick="available">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="51">the snap is available for installation.</doc>
      </member>
      <member name="priced"
              value="2"
              c:identifier="SNAPD_SNAP_STATUS_PRICED"
              glib:nick="priced">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="52">the snap is available for purchase.</doc>
      </member>
      <member name="installed"
              value="3"
              c:identifier="SNAPD_SNAP_STATUS_INSTALLED"
              glib:nick="installed">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="53">the snap is installed but not active.</doc>
      </member>
      <member name="active"
              value="4"
              c:identifier="SNAPD_SNAP_STATUS_ACTIVE"
              glib:nick="active">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="54">the snap is installed and active.</doc>
      </member>
    </enumeration>
    <enumeration name="SnapType"
                 version="1.0"
                 glib:type-name="SnapdSnapType"
                 glib:get-type="snapd_snap_type_get_type"
                 c:type="SnapdSnapType">
      <doc xml:space="preserve"
           filename="snapd-snap.h"
           line="27">Type of snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SNAP_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="29">the type of snap is unknown.</doc>
      </member>
      <member name="app"
              value="1"
              c:identifier="SNAPD_SNAP_TYPE_APP"
              glib:nick="app">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="30">the snap is an application.</doc>
      </member>
      <member name="kernel"
              value="2"
              c:identifier="SNAPD_SNAP_TYPE_KERNEL"
              glib:nick="kernel">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="31">the snap is a kernel.</doc>
      </member>
      <member name="gadget"
              value="3"
              c:identifier="SNAPD_SNAP_TYPE_GADGET"
              glib:nick="gadget">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="32">the snapd is a gadget.</doc>
      </member>
      <member name="os"
              value="4"
              c:identifier="SNAPD_SNAP_TYPE_OS"
              glib:nick="os">
        <doc xml:space="preserve"
             filename="snapd-snap.h"
             line="33">the snap is an operating system.</doc>
      </member>
    </enumeration>
    <enumeration name="SystemConfinement"
                 version="1.15"
                 glib:type-name="SnapdSystemConfinement"
                 glib:get-type="snapd_system_confinement_get_type"
                 c:type="SnapdSystemConfinement">
      <doc xml:space="preserve"
           filename="snapd-system-information.h"
           line="25">Confinement used by a snap.</doc>
      <member name="unknown"
              value="0"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="27">the confinement of the system is unknown.</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_STRICT"
              glib:nick="strict">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="28">the system supports strict confinement.</doc>
      </member>
      <member name="partial"
              value="2"
              c:identifier="SNAPD_SYSTEM_CONFINEMENT_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve"
             filename="snapd-system-information.h"
             line="29">the system supports partial confinement.</doc>
      </member>
    </enumeration>
    <class name="SystemInformation"
           c:symbol-prefix="system_information"
           c:type="SnapdSystemInformation"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdSystemInformation"
           glib:get-type="snapd_system_information_get_type"
           glib:type-struct="SystemInformationClass">
      <doc xml:space="preserve"
           filename="snapd-system-information.c"
           line="24">#SnapdSystemInformation contains information about the system snapd is running on.</doc>
      <source-position filename="snapd-system-information.h" line="23"/>
      <method name="get_binaries_directory"
              c:identifier="snapd_system_information_get_binaries_directory"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="81">Get the directory snap binaries are stored, e.g. "/snap/bin".</doc>
        <source-position filename="snapd-system-information.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="87">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="83">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_id"
              c:identifier="snapd_system_information_get_build_id"
              version="1.40">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="98">Gets the unique build ID for the snap build, e.g. "efdd0b5e69b0742fa5e5bad0771df4d1df2459d1"</doc>
        <source-position filename="snapd-system-information.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="104">a build ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="100">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_confinement"
              c:identifier="snapd_system_information_get_confinement"
              version="1.15">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="115">Get the level of confinement the system supports, e.g. %SNAPD_SYSTEM_CONFINEMENT_STRICT.</doc>
        <source-position filename="snapd-system-information.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="121">a #SnapdSystemConfinement.</doc>
          <type name="SystemConfinement" c:type="SnapdSystemConfinement"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="117">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel_version"
              c:identifier="snapd_system_information_get_kernel_version"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="132">Get the version of the kernel snapd is running on, e.g. "4.10.0-15-generic".</doc>
        <source-position filename="snapd-system-information.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="138">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="134">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_managed"
              c:identifier="snapd_system_information_get_managed"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="149">Get if snapd is running on a managed system.</doc>
        <source-position filename="snapd-system-information.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="155">%TRUE if running on a managed system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="151">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_directory"
              c:identifier="snapd_system_information_get_mount_directory"
              version="1.11">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="166">Get the directory snaps are mounted, e.g. "/snap".</doc>
        <source-position filename="snapd-system-information.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="172">a directory.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="168">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_on_classic"
              c:identifier="snapd_system_information_get_on_classic"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="183">Get if this system is a classic system.</doc>
        <source-position filename="snapd-system-information.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="189">%TRUE if running on a classic system.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="185">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_id"
              c:identifier="snapd_system_information_get_os_id"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="200">Get the operating system ID, e.g. "ubuntu".</doc>
        <source-position filename="snapd-system-information.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="206">an operating system ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="202">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_os_version"
              c:identifier="snapd_system_information_get_os_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="217">Get the operating system version, e.g. "16.04".</doc>
        <source-position filename="snapd-system-information.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="223">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="219">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_hold"
              c:identifier="snapd_system_information_get_refresh_hold"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="234">Get the time refreshes will be applied at, or %NULL if they are applied immediately.</doc>
        <source-position filename="snapd-system-information.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="240">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="236">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_last"
              c:identifier="snapd_system_information_get_refresh_last"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="251">Get the time the last refresh occurred, or %NULL if has not occurred.</doc>
        <source-position filename="snapd-system-information.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="257">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="253">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_next"
              c:identifier="snapd_system_information_get_refresh_next"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="268">Get the time the next refresh is scheduled for, or %NULL if none has been scheduled.</doc>
        <source-position filename="snapd-system-information.h" line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="274">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="270">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_schedule"
              c:identifier="snapd_system_information_get_refresh_schedule"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="285">Get the schedule when snap refreshes will occur.</doc>
        <source-position filename="snapd-system-information.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="291">a Snap refresh schedule string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="287">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_refresh_timer"
              c:identifier="snapd_system_information_get_refresh_timer"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="302">Get the timer that refreshes are running to.</doc>
        <source-position filename="snapd-system-information.h" line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="308">a Snap refresh timer string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="304">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sandbox_features"
              c:identifier="snapd_system_information_get_sandbox_features"
              version="1.42">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="319">Gets the sandbox features that snapd provides. Each backend in snapd provides
a list of features that it supports. For example, the "confinement-options"
backend may provide "classic", "devmode" and "strict".</doc>
        <source-position filename="snapd-system-information.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="327">a hash table of string arrays keyed by backend name.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="321">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_series"
              c:identifier="snapd_system_information_get_series"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="338">Get the series of snapd running, e.g. "16".</doc>
        <source-position filename="snapd-system-information.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="344">a series string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="340">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_store"
              c:identifier="snapd_system_information_get_store"
              version="1.7">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="355">Get the store being used by snapd, e.g. "Ubuntu"</doc>
        <source-position filename="snapd-system-information.h" line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="361">a store id or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="357">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="snapd_system_information_get_version"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-system-information.c"
             line="372">Get the version of snapd running, e.g. "2.11+ppa174-1".</doc>
        <source-position filename="snapd-system-information.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-system-information.c"
               line="378">a version string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="system_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-system-information.c"
                 line="374">a #SnapdSystemInformation.</doc>
            <type name="SystemInformation" c:type="SnapdSystemInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="binaries-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="build-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="confinement"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SystemConfinement"/>
      </property>
      <property name="kernel-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="managed"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mount-directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="on-classic"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="os-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="os-version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="refresh-hold"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-last"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-next"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="refresh-schedule"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="refresh-timer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sandbox-features"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="series"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="store"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SystemInformationClass"
            c:type="SnapdSystemInformationClass"
            glib:is-gtype-struct-for="SystemInformation">
      <source-position filename="snapd-system-information.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="SnapdTask"
           version="1.0"
           parent="GObject.Object"
           glib:type-name="SnapdTask"
           glib:get-type="snapd_task_get_type"
           glib:type-struct="TaskClass">
      <doc xml:space="preserve"
           filename="snapd-task.c"
           line="25">#SnapdTask contains progress information for a task in a Snap transaction.</doc>
      <source-position filename="snapd-task.h" line="23"/>
      <method name="get_id" c:identifier="snapd_task_get_id" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="65">Get the unique ID for this task.</doc>
        <source-position filename="snapd-task.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="71">an ID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="67">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="snapd_task_get_kind" version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="86">Gets the kind of task this is.</doc>
        <source-position filename="snapd-task.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="92">the kind of task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="88">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_done"
              c:identifier="snapd_task_get_progress_done"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="192">Get the the number of items completed in this task.</doc>
        <source-position filename="snapd-task.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="198">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="194">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_label"
              c:identifier="snapd_task_get_progress_label"
              version="1.5">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="171">Get the the label associated with the progress.</doc>
        <source-position filename="snapd-task.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="177">a label string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="173">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_total"
              c:identifier="snapd_task_get_progress_total"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="213">Get the the total number of items to be completed in this task.</doc>
        <source-position filename="snapd-task.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="219">a count.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="215">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="snapd_task_get_ready"
              version="1.0"
              deprecated="1"
              deprecated-version="1.5">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="149">Get if this task is completed.</doc>
        <doc-deprecated xml:space="preserve">Use snapd_change_get_ready() instead.</doc-deprecated>
        <source-position filename="snapd-task.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="157">%TRUE if this task is complete.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="151">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready_time"
              c:identifier="snapd_task_get_ready_time"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="255">Get the time this task completed or %NULL if not yet completed.</doc>
        <source-position filename="snapd-task.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="261">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="257">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spawn_time"
              c:identifier="snapd_task_get_spawn_time"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="234">Get the time this task started.</doc>
        <source-position filename="snapd-task.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="240">a #GDateTime.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="236">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="snapd_task_get_status"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="128">Get the status of the task.</doc>
        <source-position filename="snapd-task.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="134">a status string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="130">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_summary"
              c:identifier="snapd_task_get_summary"
              version="1.0">
        <doc xml:space="preserve"
             filename="snapd-task.c"
             line="107">Get a human readable description of the task.</doc>
        <source-position filename="snapd-task.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-task.c"
               line="113">a string describing the task.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-task.c"
                 line="109">a #SnapdTask.</doc>
            <type name="Task" c:type="SnapdTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-done"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="progress-label"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress-total"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ready"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="ready-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="spawn-time"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.DateTime"/>
      </property>
      <property name="status"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="summary"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TaskClass"
            c:type="SnapdTaskClass"
            glib:is-gtype-struct-for="Task">
      <source-position filename="snapd-task.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UserInformation"
           c:symbol-prefix="user_information"
           c:type="SnapdUserInformation"
           version="1.3"
           parent="GObject.Object"
           glib:type-name="SnapdUserInformation"
           glib:get-type="snapd_user_information_get_type"
           glib:type-struct="UserInformationClass">
      <doc xml:space="preserve"
           filename="snapd-user-information.c"
           line="24">#SnapdUserInformation contains information about a user account on the system
snapd is running on.</doc>
      <source-position filename="snapd-user-information.h" line="25"/>
      <method name="get_auth_data"
              c:identifier="snapd_user_information_get_auth_data"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="124">Get the email address for this account.</doc>
        <source-position filename="snapd-user-information.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="130">a #SnapdAuthData or %NULL if not set.</doc>
          <type name="AuthData" c:type="SnapdAuthData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="126">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_email"
              c:identifier="snapd_user_information_get_email"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="90">Get the email address for this account.</doc>
        <source-position filename="snapd-user-information.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="96">a email address.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="92">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="snapd_user_information_get_id"
              version="1.26">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="56">Get the id for this account.</doc>
        <source-position filename="snapd-user-information.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="62">a user id.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="58">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssh_keys"
              c:identifier="snapd_user_information_get_ssh_keys"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="107">Get the SSH keys added to this account.</doc>
        <source-position filename="snapd-user-information.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="113">the names of the SSH keys.</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="109">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="snapd_user_information_get_username"
              version="1.3">
        <doc xml:space="preserve"
             filename="snapd-user-information.c"
             line="73">Get the local username for this account.</doc>
        <source-position filename="snapd-user-information.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-user-information.c"
               line="79">a username.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="user_information"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="snapd-user-information.c"
                 line="75">a #SnapdUserInformation.</doc>
            <type name="UserInformation" c:type="SnapdUserInformation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="auth-data"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="AuthData"/>
      </property>
      <property name="email"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="ssh-keys"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="username"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="UserInformationClass"
            c:type="SnapdUserInformationClass"
            glib:is-gtype-struct-for="UserInformation">
      <source-position filename="snapd-user-information.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="error_quark"
              c:identifier="snapd_error_quark"
              moved-to="Error.quark"
              version="1.0">
      <doc xml:space="preserve"
           filename="snapd-error.c"
           line="22">Gets the Snapd Error Quark.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="snapd-error.c"
             line="27">a #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="login_async"
              c:identifier="snapd_login_async"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="71">Asynchronously get authorization to install/remove snaps.
See snapd_login_sync() for more information.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_async()</doc-deprecated>
      <source-position filename="snapd-login.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="73">username to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="74">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="75">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="76">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="77">a #GAsyncReadyCallback to call when the request is satisfied.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="78">the data to pass to callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_finish"
              c:identifier="snapd_login_finish"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34"
              throws="1">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="98">Complete login started with snapd_login_async().
See snapd_login_sync() for more information.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_finish()</doc-deprecated>
      <source-position filename="snapd-login.h" line="38"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="snapd-login.c"
             line="106">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="100">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="login_sync"
              c:identifier="snapd_login_sync"
              version="1.0"
              deprecated="1"
              deprecated-version="1.34"
              throws="1">
      <doc xml:space="preserve"
           filename="snapd-login.c"
           line="26">This call used to contact a D-Bus service to perform snapd authentication using
Polkit. This now just creates a #SnapdClient and does the call directly.</doc>
      <doc-deprecated xml:space="preserve">Use snapd_client_login2_sync()</doc-deprecated>
      <source-position filename="snapd-login.h" line="25"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="snapd-login.c"
             line="38">a #SnapdAuthData or %NULL on error.</doc>
        <type name="AuthData" c:type="SnapdAuthData*"/>
      </return-value>
      <parameters>
        <parameter name="username" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="28">username to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="password" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="29">password to log in with.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="otp"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="30">response to one-time password challenge.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="snapd-login.c"
               line="31">a #GCancellable or %NULL.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
